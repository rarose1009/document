/*----------------------------------------------------------------------------------
	Project Name:
	Smart Application : 카드 기본폼
	Smart Version : Smart 1.0
	Copyright(c) 2014  ValueCMD Co., Ltd.
----------------------------------------------------------------------------------*/
card GM_FEEVIEW
{
	#include <include.h>
	#include "globalcard.h"
	#include "SQL.lib"
	
//	#define USE_ON_EXIT
	#define USE_ON_CHAR
//	#define USE_ON_KEY
//	#define USE_ON_DRAW
//	#define USE_ON_TIMER
	#define USE_ON_POINTING
	#define USE_ON_SELECT
	#define USE_ON_UART
	#define USE_ON_TASK

	#include "DefEvent.h"

	//BUTTON ID define
	BEGIN_BUTTON_ID()
//요금내역
		DEF_BUTTON_ID ( BID_TAB1 )
		DEF_BUTTON_ID ( BID_SEARCH )
		DEF_BUTTON_ID ( BID_ADDR )
		DEF_BUTTON_ID ( BID_HISPREV )
		DEF_BUTTON_ID ( BID_HISNEXT )
		DEF_BUTTON_ID ( BID_SND)
		DEF_BUTTON_ID ( BID_VISIBLE )
//요금계산
		DEF_BUTTON_ID ( BID_TAB2 )
		DEF_BUTTON_ID ( BID_CALSEARCH )
		DEF_BUTTON_ID ( BID_CALADDR )
		DEF_BUTTON_ID ( BID_CALCUL )
		DEF_BUTTON_ID ( BID_CALSND )
		DEF_BUTTON_ID ( BID_ONE )
		DEF_BUTTON_ID ( BID_TWO )
		DEF_BUTTON_ID ( BID_THREE )
		DEF_BUTTON_ID ( BID_FOUR )
		DEF_BUTTON_ID ( BID_FIVE )
		
//주소검색
		DEF_BUTTON_ID ( BID_ADDRSEARCH )
		DEF_BUTTON_ID ( BID_JIBUN )
		DEF_BUTTON_ID ( BID_ROADNM )
		DEF_BUTTON_ID ( BID_TOGETHER )
		DEF_BUTTON_ID ( BID_CANCEL )
		DEF_BUTTON_ID ( BID_ADDRPREV )
		DEF_BUTTON_ID ( BID_ADDRNEXT )
//전화번호검색
		DEF_BUTTON_ID ( BID_TELSEARCH )
		DEF_BUTTON_ID ( BID_TELCANCEL )
		DEF_BUTTON_ID ( BID_TELHOUSE )
		DEF_BUTTON_ID ( BID_TELCP )
		DEF_BUTTON_ID ( BID_TELPREV )
		DEF_BUTTON_ID ( BID_TELNEXT )

//화면 상단 공통 메뉴 모음
		DEF_BUTTON_ID ( BID_HOME )		//홈
		DEF_BUTTON_ID ( BID_MENU )		//메뉴
		DEF_BUTTON_ID ( BID_KEYBOARD )	//키보드
		DEF_BUTTON_ID ( BID_SCREEN )	//화면 상하
		DEF_BUTTON_ID ( BID_CMMNWORK )	//공통업무
		DEF_BUTTON_ID ( BID_PREV )		//이전
		DEF_BUTTON_ID ( BID_EXIT )		//종료
	END_BUTTON_ID()
	
	BEGIN_OBJECT_ID()
		DEF_OBJECT_ID ( TXT_TITLE )		//타이틀
		DEF_OBJECT_ID ( TXT_BORDER )
//요금내역
		DEF_OBJECT_ID ( TXT_DATA1 )
		DEF_OBJECT_ID ( TXT_DATA2 )
		DEF_OBJECT_ID ( TXT_DATA3 )
		DEF_OBJECT_ID ( TXT_DATA4 )
		DEF_OBJECT_ID ( TXT_DATA5 )
		DEF_OBJECT_ID ( TXT_DATA6 )
		DEF_OBJECT_ID ( TXT_DATA7 )
		DEF_OBJECT_ID ( TXT_DATA8 )
		DEF_OBJECT_ID ( TXT_DATA9 )
//요금계산
		DEF_OBJECT_ID ( TXT_DATA10 )
		DEF_OBJECT_ID ( TXT_DATA11 )
		DEF_OBJECT_ID ( TXT_DATA12 )
		DEF_OBJECT_ID ( TXT_DATA13 )
		DEF_OBJECT_ID ( TXT_DATA14 )
		DEF_OBJECT_ID ( TXT_DATA15 )
		DEF_OBJECT_ID ( TXT_DATA16 )
		DEF_OBJECT_ID ( TXT_DATA17 )
		DEF_OBJECT_ID ( TXT_DATA18 )
		DEF_OBJECT_ID ( TXT_DATA19 )
		DEF_OBJECT_ID ( TXT_DATA20 )
		DEF_OBJECT_ID ( TXT_DATA21 )
		DEF_OBJECT_ID ( TXT_DATA22 )
		DEF_OBJECT_ID ( TXT_DATA23 )
		DEF_OBJECT_ID ( TXT_DATA24 )
		DEF_OBJECT_ID ( TXT_DATA25 )
		DEF_OBJECT_ID ( TXT_DATA26 )
		DEF_OBJECT_ID ( TXT_DATA27 )
		DEF_OBJECT_ID ( TXT_DATA28 )
		DEF_OBJECT_ID ( TXT_DATA29 )
		DEF_OBJECT_ID ( TXT_DATA30 )
		DEF_OBJECT_ID ( TXT_DATA31 )
		DEF_OBJECT_ID ( TXT_DATA32 )
		DEF_OBJECT_ID ( TXT_DATA33 )
		DEF_OBJECT_ID ( TXT_DATA48 )
		DEF_OBJECT_ID ( TXT_DATA49 )
		DEF_OBJECT_ID ( TXT_DATA50 )
		DEF_OBJECT_ID ( TXT_DATA51 )
		DEF_OBJECT_ID ( TXT_DATA52 )
		DEF_OBJECT_ID ( TXT_DATA53 )
		DEF_OBJECT_ID ( TXT_DATA54 )
		DEF_OBJECT_ID ( TXT_DATA55 )
		DEF_OBJECT_ID ( TXT_DATA56 )
		DEF_OBJECT_ID ( TXT_DATA57 )
		DEF_OBJECT_ID ( TXT_DATA58 )
		DEF_OBJECT_ID ( TXT_DATA59 )
		DEF_OBJECT_ID ( TXT_DATA60 )
		DEF_OBJECT_ID ( TXT_DATA61 )
		DEF_OBJECT_ID ( TXT_DATA62 )
		DEF_OBJECT_ID ( TXT_DATA63 )
		DEF_OBJECT_ID ( TXT_DATA64 )
		DEF_OBJECT_ID ( TXT_DATA65 )
		DEF_OBJECT_ID ( TXT_DATA66 )
		DEF_OBJECT_ID ( TXT_DATA67 )
		DEF_OBJECT_ID ( TXT_DATA68 )
		DEF_OBJECT_ID ( TXT_DATA69 )
		DEF_OBJECT_ID ( TXT_DATA70 )
		DEF_OBJECT_ID ( TXT_DATA71 )
		DEF_OBJECT_ID ( TXT_DATA72 )
		DEF_OBJECT_ID ( TXT_DATA73 )
		DEF_OBJECT_ID ( TXT_DATA74 )
		DEF_OBJECT_ID ( TXT_DATA75 )
		DEF_OBJECT_ID ( TXT_DATA76 )
		DEF_OBJECT_ID ( TXT_DATA77 )
		DEF_OBJECT_ID ( TXT_DATA78 )
		DEF_OBJECT_ID ( TXT_DATA79 )
		DEF_OBJECT_ID ( TXT_DATA80 )
		DEF_OBJECT_ID ( TXT_DATA81 )
		DEF_OBJECT_ID ( TXT_DATA82 )
		DEF_OBJECT_ID ( TXT_DATA83 )
		DEF_OBJECT_ID ( TXT_DATA84 )
		DEF_OBJECT_ID ( TXT_DATA85 )
		DEF_OBJECT_ID ( TXT_DATA86 )
		DEF_OBJECT_ID ( TXT_DATA87 )

//주소검색-단독
		DEF_OBJECT_ID ( TXT_DATA47 )	//페이지
		DEF_OBJECT_ID ( TXT_DATA34 )
		DEF_OBJECT_ID ( TXT_DATA35 )
		DEF_OBJECT_ID ( TXT_DATA36 )
		DEF_OBJECT_ID ( TXT_DATA37 )
//주소검색-공동
		DEF_OBJECT_ID ( TXT_DATA38 )
		DEF_OBJECT_ID ( TXT_DATA39 )
		DEF_OBJECT_ID ( TXT_DATA40 )
//주소검색-도로명
		DEF_OBJECT_ID ( TXT_DATA41 )
		DEF_OBJECT_ID ( TXT_DATA42 )
		DEF_OBJECT_ID ( TXT_DATA43 )
		DEF_OBJECT_ID ( TXT_DATA44 )
		DEF_OBJECT_ID ( TXT_DATA45 )
//전화번호검색
		DEF_OBJECT_ID ( TXT_DATA46 )		

//포인팅 자판
		DEF_OBJECT_ID ( TXT_KEY_ONE )
		DEF_OBJECT_ID ( TXT_KEY_TWO )
		DEF_OBJECT_ID ( TXT_KEY_THREE )
		DEF_OBJECT_ID ( TXT_KEY_FOUR )
		DEF_OBJECT_ID ( TXT_KEY_FIVE )
		DEF_OBJECT_ID ( TXT_KEY_SIX )
		DEF_OBJECT_ID ( TXT_KEY_SEVEN )
		DEF_OBJECT_ID ( TXT_KEY_EIGHT )
		DEF_OBJECT_ID ( TXT_KEY_NINE )
		DEF_OBJECT_ID ( TXT_KEY_ZERO )
		DEF_OBJECT_ID ( TXT_KEY_DEL )

//요금내역
		DEF_OBJECT_ID ( EDT_DATA1 )
		DEF_OBJECT_ID ( EDT_DATA2 )
		DEF_OBJECT_ID ( EDT_DATA3 )
		
//요금계산
		DEF_OBJECT_ID ( EDT_DATA4 )
		DEF_OBJECT_ID ( EDT_DATA5 )
		DEF_OBJECT_ID ( EDT_DATA6 )
		DEF_OBJECT_ID ( EDT_DATA7 )
//주소검색
		DEF_OBJECT_ID ( EDT_DATA8 )
		DEF_OBJECT_ID ( EDT_DATA9 )
		DEF_OBJECT_ID ( EDT_DATA10 )
		DEF_OBJECT_ID ( EDT_DATA11 )
		DEF_OBJECT_ID ( EDT_DATA12 )
//전화번호검색 & 기물번호 & 바코드 검색
		DEF_OBJECT_ID ( EDT_DATA13 )
		DEF_OBJECT_ID ( EDT_DATA14 )
		DEF_OBJECT_ID ( EDT_DATA15 )
		DEF_OBJECT_ID ( EDT_DATA16 )

		DEF_OBJECT_ID ( ICON_TITLE )		//타이틀
		
//요금내역
		DEF_OBJECT_ID ( ID_HISLIST )	// 테이블 리스트

//주소검색
		DEF_OBJECT_ID ( ID_ADDRLIST )	// 테이블 리스트
//전화번호검색
		DEF_OBJECT_ID ( ID_TELLIST )	// 테이블 리스트

//요금내역
		DEF_OBJECT_ID ( CMB_DATA1 )
		DEF_OBJECT_ID ( CMB_DATA2 = CMB_DATA1 + 3 )
//요금계산
		DEF_OBJECT_ID ( CMB_DATA3 = CMB_DATA2 + 3 )
		DEF_OBJECT_ID ( CMB_DATA4 = CMB_DATA3 + 3 )
//주소검색
		DEF_OBJECT_ID ( CMB_DATA5 = CMB_DATA4 + 3 )
		DEF_OBJECT_ID ( CMB_DATA6 = CMB_DATA5 + 3 )
		DEF_OBJECT_ID ( CMB_DATA7 = CMB_DATA6 + 3 )
		DEF_OBJECT_ID ( CMB_DATA8 = CMB_DATA7 + 3 )
		DEF_OBJECT_ID ( CMB_DATA9 = CMB_DATA8 + 3 )
		DEF_OBJECT_ID ( CMB_DATA10 = CMB_DATA9 + 3 )
		DEF_OBJECT_ID ( CMB_DATA11 = CMB_DATA10 + 3 )
	END_OBJECT_ID()
	
	#define INIT_MAIN	      1
	#define INIT_CALCUL       2
	#define INIT_TELSEARCH    3
	#define INIT_JIBUNSEARCH  4
	#define INIT_TGTSEARCH    5
	#define INIT_NEWSEARCH    6
		
	SysButCtrl SysButRes_MAIN[] =
	 {
		  SYS_BUT_IMG (  BTNX_1, BTNY_1, BTNWD_1, BTNHT_1, 0, 0, BUTSTY_BOLD , 0, 0, 0, OBJ_BUT, GID_HOME,  0),
		  SYS_BUT_IMG (  BTNX_2, BTNY_1, BTNWD_1, BTNHT_1, 0, 0, BUTSTY_BOLD , 0, 0, 0, OBJ_BUT, GID_KEYBOARD,  0),
		  SYS_BUT_IMG (  BTNX_3, BTNY_1, BTNWD_1, BTNHT_1, 0, 0, BUTSTY_BOLD , 0, 0, 0, OBJ_BUT, GID_SCREEN, 0),
		  SYS_BUT_IMG (  BTNX_4, BTNY_1, BTNWD_1, BTNHT_1, 0, 0, BUTSTY_BOLD , 0, 0, 0, OBJ_BUT, GID_CMMNWK,  0),
		  SYS_BUT_IMG (  BTNX_5, BTNY_1, BTNWD_1, BTNHT_1, 0, 0, BUTSTY_BOLD , 0, 0, 0, OBJ_BUT, GID_VMEXIT, 0),
		  SYS_BUT_IMG (  BTNX_6, BTNY_2, BTNWD_2, BTNHT_2, 0, 0, BUTSTY_BOLD|BUTSTY_BORDER , 0, TRANSPARENT, TRANSPARENT, OBJ_BUT, GID_MENU, 0),
		  SYS_BUT_IMG (  BTNX_7, BTNY_2, BTNWD_2, BTNHT_2, 0, 0, BUTSTY_BOLD|BUTSTY_BORDER , 0, TRANSPARENT, TRANSPARENT, OBJ_BUT, GID_PREV, 0),
	 };
	
	//-------------------------------------------------------------------------------------------------	
	//	Table정의에 관련된 내용들(요금내역)
	//-------------------------------------------------------------------------------------------------
	#define		ROW_H	    5					// table의 행개수
	#define		COL_H	    12					// table의 열개수
	#define		GRID_H_H	(CHT+10)			// table 행 높이
	#define		GRID_H_H_P	(CHT+17)			// table 행 높이 PDA
	#define		GRID_CLR_H	TRANSPARENT   		// table 클리어 color
	#define		GRID_X_H	STARTX 			    // table 시작x좌표
	#define		MAXCHAR_H	201 			    // table에 들어갈수 있는 최대  char 길이
	#define		GRID_Y_H	STARTY+425	 	    // table 시작y좌표
	#define		GRID_Y_H_P  STARTY+350  		    // table 시작y좌표
	#define		GRID_ENDY_H	(GRID_Y_H+(ROW_H+1)*GRID_H_H) //table마지막 row의 Y값
	
	char	m_szTableBuf_H [COL_H*(ROW_H+1)*MAXCHAR_H]; // 각 CELL에 들어가 텍스트 내용을 담은 버퍼
		
	Column m_stGridTitle_H[] = {
		{"청구년월"      , CWD*9    , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0},
		{"지침"          , CWD*8    , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0},
		{"사용량"        , CWD*8+23 , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0},
		{"금액"          , CWD*8    , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0},
		{"납부"          , CWD*6    , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0},
		{"상세주소"      , CWD*0    , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0},
		{"성명/상호"     , CWD*0    , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0},
		{"미납합계"      , CWD*0    , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0},
		{"CP_DDD"        , CWD*0    , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0},
		{"CP_EXN"        , CWD*0    , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0},
		{"CP_NUM"        , CWD*0    , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0},
		{"CUST_NUM"      , CWD*0    , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0}
	};

	//-------------------------------------------------------------------------------------------------	
	//	Table정의에 관련된 내용들(주소검색)
	//-------------------------------------------------------------------------------------------------
	#define		ROW_A	    4					// table의 행개수
	#define		COL_A	    4					// table의 열개수
	#define		GRID_H_A	(CHT+31)			// table 행 높이
	#define		GRID_H_A_P	(CHT+40)			// table 행 높이
	#define		GRID_CLR_A	TRANSPARENT   		// table 클리어 color
	#define		GRID_X_A	STARTX 			    // table 시작x좌표
	#define		MAXCHAR_A	201 			    // table에 들어갈수 있는 최대  char 길이
	#define		GRID_Y_A	STARTY+485	 	    // table 시작y좌표
	#define		GRID_Y_A_P  STARTY+440  	    // table 시작y좌표
	#define		GRID_ENDY_A	(GRID_Y_A+(ROW_A+1)*GRID_H_A) //table마지막 row의 Y값
	
	char	m_szTableBuf_A [COL_A*(ROW_A+1)*MAXCHAR_A]; // 각 CELL에 들어가 텍스트 내용을 담은 버퍼
		
	Column m_stGridTitle_A[] = {
		{"동명"        , CWD*9     , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0},
		{"주소"        , CWD*15+13 , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0},
		{"전화번호"    , CWD*15+10 , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0},
		{"USE_CONT_NUM" , CWD*0    , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0}
	};

	//-------------------------------------------------------------------------------------------------	
	//	Table정의에 관련된 내용들(전화번호, 기물번호, 바코드 검색)
	//-------------------------------------------------------------------------------------------------
	#define		ROW_T	    7					// table의 행개수
	#define		COL_T	    3					// table의 열개수
	#define		GRID_H_T	(CHT+31)			// table 행 높이
	#define		GRID_H_T_P	(CHT+38)			// table 행 높이 PDA
	#define		GRID_CLR_T	TRANSPARENT   		// table 클리어 color
	#define		GRID_X_T	STARTX 			    // table 시작x좌표
	#define		MAXCHAR_T	201 			    // table에 들어갈수 있는 최대  char 길이
	#define		GRID_Y_T	STARTY+275	 	    // table 시작y좌표
	#define		GRID_Y_T_P  STARTY+200  		    // table 시작y좌표
	#define		GRID_ENDY_T	(GRID_Y_T+(ROW_T+1)*GRID_H_T) //table마지막 row의 Y값
	
	char	m_szTableBuf_T [COL_T*(ROW_T+1)*MAXCHAR_T]; // 각 CELL에 들어가 텍스트 내용을 담은 버퍼
		
	Column m_stGridTitle_T[] = {
		{"동명"         , CWD*10    , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0},
		{"주소"         , CWD*29+23 , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0},
		//{"전화번호"     , CWD*14+23 , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0},
		{"USE_CONT_NUM" , CWD*0     , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0}
	};


	long m_lTabFlag = 0;		//탭 버튼 Flag, 0 = 요금내역, 1 = 요금계산
	long m_lCondition = 0;		//검색조건 0 = 계약번호, 1 = 전화번호, 2 = 주소, 3 = 바코드, 4 = 기물번호
	long m_bFirst;
	long m_lSearchFlag = 0;		// 메인 정보에 대한 검색(주소,성명,상호명...) , = 0 검색 안함, = 1 검색 함
	long m_lAddrFlag = 0;		//주소검색 실행 Flag , = 0 주소검색 안함, =1 주소검색 실행.
	long m_lEditCtrlIndex = -1;
	char m_szSql[2][800];
	char m_szUse_cont_num[15];	//주소, 전화번호 검색 후 대상 선택 시 저장하는 사용계약번호
	//char m_szSearch_Use_cont_num[2][15];		//탭이동으로 검색된 대상이 삭제 되지 않기위해, 대상 사용계약번호 저장
	char m_szSearch_Use_cont_num[15];		//탭이동으로 검색된 대상이 삭제 되지 않기위해, 대상 사용계약번호 저장
	char m_szTelNum[20];
	char m_szAddr[500];
	char m_szBarcode_Num[30];

//요금내역
	long m_lpage_H = 0;			// 현재 페이지
	long m_lTotpage_H = 0;		// 총 페이지
	long m_nActIndex_H = -1;	//선택된 row index
	char m_szCnt_page_H[20];	// 페이지 표시 변수
//전화번호검색
	long m_lpage_T = 0;			// 현재 페이지
	long m_lTotpage_T = 0;		// 총 페이지
	long m_nActIndex_T = -1;	//선택된 row index
	char m_szCnt_page_T[20];	// 페이지 표시 변수
	//주소검색
	long m_lpage_A = 0;			// 현재 페이지
	long m_lTotpage_A = 0;		// 총 페이지
	long m_nActIndex_A = -1;	//선택된 row index
	char m_szCnt_page_A[20];	// 페이지 표시 변수
//요금계산
	long m_lCalcul_Viewpage = 1;	//1 : 1page, 2: 2page, 3 : 3page, 4 : 4page, 5 : 5page
	long m_lCalcul_ProcFlag = 0;	//0 : 요금계산 실행 X , 1 : 요금계산 실행.

	void SetBtnImg(void);
	void SetStyle(void);
	void SetCombo(void);
	void ReDraw(void);			//요금내역, 요금계산 - 기본정보(LOCAL SELECT)
	void AddrDraw(void);		//주소검색
	void Search_Info(void);

//요금 대상 정보
	long Rcv_Info(void);
	long TR242420(void);
//바코드 검색
	void Barcode(void);
	void OnBarcodeRead(void);
	void PDA_OnBarcodeRead(void);
//요금내역
	long Rcv_History(void);
	long TR242410(void);
	void HistoryDraw(void);
	void SetData_History(void);
//전화번호검색
	long Rcv_Tel(void);
	long TR242430(void);
	void TelDraw(void);	
//요금계산 - 기본 정보(미납총액)
	long Rcv_Calcul_Amt(void);
	long TR242450(void); 
//요금계산 - 기본 정보(전월지침)
	long Rcv_Calcul_Vc(void);
	long TR242452(void);
	long ServiceDraw(long nservicenum);
//요금계산 - 상세 정보(요금계산 정보 등)
	long Rcv64302(void);
	long TR64302(void);
	long Add_Item(handle pj);
	long Rcv_Calcul_Detal(void);
	long TR242451(void);
	void SetData_Calcul(void);
	void PageDraw(void);
	void CalDraw(void);
	void ClearDraw_Calcul(void);
	
	long Analy_Phone(char*phone, char* num1, char* num2, char* num3 );

	// 메인 다이얼로그
	//---------------------------------------------------------------
	DlgObject	DlgRes[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_TEXT(0, 0, 998, BTNHT_1, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, WHITE, TRANSPARENT, TXT_BORDER, ""),
		DLG_ICON(0, BTNY_2, ICON_TITLE, ""),		
		//타이틀
		DLG_TEXT(TX, TY, STWD, STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "요금조회"),

		DLG_BUTTON(STARTX,      STARTY+65, 500, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB1, "요금내역"),
		DLG_BUTTON(STARTX+500,  STARTY+65, 500, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB2, "요금계산"),
		DLG_BUTTON(STARTX+800, STARTY+135, 200, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SEARCH, "검색"),
		DLG_BUTTON(STARTX,     STARTY+205, 350,100, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ADDR, "지번"),
		DLG_BUTTON(STARTX+500, STARTY+725, 250, 55, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_HISPREV, "▲"),
		DLG_BUTTON(STARTX+750, STARTY+725, 250, 55, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_HISNEXT, "▼"),
		DLG_BUTTON(STARTX+800, STARTY+780, 200, 119, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SND, "문자\n발송"),

		DLG_EDIT(STARTX+350,   STARTY+135, 450, 70, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA1, 15,  ""),
		DLG_TEXT(STARTX+350,   STARTY+205, 650,100, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA1, ""),
		DLG_TEXT(STARTX,       STARTY+305, 350, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA2, "성명/상호"),
		DLG_TEXT(STARTX+350,   STARTY+305, 650, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA3, ""),
		DLG_TEXT(STARTX,       STARTY+365, 350, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA4, "미납합계"),
		DLG_TEXT(STARTX+350,   STARTY+365, 650, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA5, ""),
		
		DLG_TEXT(STARTX,       STARTY+725, 300, 55, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA6, m_szCnt_page_H),
		//DLG_TEXT(0,            STARTY+780, 250, 55, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTCTRLBK, TXT_DATA7, "선택납기"),
		DLG_TEXT(STARTX,       STARTY+780, 800, 55, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA8, "수신번호"),
		//DLG_TEXT(0,            STARTY+835, 250, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA9, ""),
		DLG_EDIT(STARTX+300,   STARTY+835, 250, 64, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA2, 4,  ""),
		DLG_EDIT(STARTX+550,   STARTY+835, 250, 64, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA3, 4,  ""),

		// 리스트
		DLG_TABLE(GRID_X_H, GRID_Y_H, ROW_H, COL_H, 0, GRID_H_H, 1, GRID_H_H, SEL_ROW, MAXCHAR_H, m_stGridTitle_H, ID_HISLIST, m_szTableBuf_H),

		DLG_COMBO(STARTX,      STARTY+135, 350, 290, 120, 70, TXTFRCOLOR, EDTCTRLBK, CALL_FUNC, "", CMB_DATA1, 20),
		DLG_COMBO(STARTX,      STARTY+835, 300, 290, 120, 64, TXTFRCOLOR, EDTCTRLBK, CALL_FUNC, "", CMB_DATA2, 20),
		
		//숫자 자판
		DLG_TEXT(0,    STARTY+940, 333, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_ONE, "1"),
		DLG_TEXT(333,  STARTY+940, 333, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_TWO, "2"),
		DLG_TEXT(666,  STARTY+940, 334, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_THREE, "3"),
		DLG_TEXT(0,   STARTY+1030, 333, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_FOUR, "4"),
		DLG_TEXT(333, STARTY+1030, 333, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_FIVE, "5"),
		DLG_TEXT(666, STARTY+1030, 334, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_SIX, "6"),
		DLG_TEXT(0,   STARTY+1120, 333, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_SEVEN, "7"),
		DLG_TEXT(333, STARTY+1120, 333, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_EIGHT, "8"),
		DLG_TEXT(666, STARTY+1120, 334, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_NINE, "9"),
		DLG_TEXT(333, STARTY+1210, 333, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_ZERO, "0"),
		DLG_TEXT(666, STARTY+1210, 334, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_DEL, "←"),
	};	
	
	// PDA 다이얼로그
	//---------------------------------------------------------------
	DlgObject	DlgRes_P[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_ICON(P_TTLTX, 0, ICON_TITLE, ""),		
		//타이틀
		DLG_TEXT(P_TX, P_TY, P_STWD, P_STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, WHITE, TRANSPARENT, TXT_TITLE, "요금조회"),
		DLG_BUTTON(P_BTNX, P_BTNY, P_BTNWD, P_BTNHD, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", GID_PREV, ""),

		DLG_BUTTON(STARTX,      STARTY-40, 500, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB1, "요금내역"),
		DLG_BUTTON(STARTX+500,  STARTY-40, 500, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB2, "요금계산"),
		DLG_BUTTON(STARTX+800,  STARTY+40, 200, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SEARCH, "검색"),
		DLG_BUTTON(STARTX,     STARTY+110, 350,100, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ADDR, "지번"),
		DLG_BUTTON(STARTX+500, STARTY+680, 250, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_HISPREV, "▲"),
		DLG_BUTTON(STARTX+750, STARTY+680, 250, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_HISNEXT, "▼"),
		DLG_BUTTON(STARTX+800, STARTY+760, 200, 140, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SND, "문자\n발송"),

		DLG_EDIT(STARTX+350,    STARTY+40, 450, 70, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA1, 15,  ""),
		DLG_TEXT(STARTX+350,   STARTY+110, 650,100, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA1, ""),
		DLG_TEXT(STARTX,       STARTY+210, 350, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA2, "성명/상호"),
		DLG_TEXT(STARTX+350,   STARTY+210, 650, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA3, ""),
		DLG_TEXT(STARTX,       STARTY+280, 350, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA4, "미납합계"),
		DLG_TEXT(STARTX+350,   STARTY+280, 650, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA5, ""),
		
		DLG_TEXT(STARTX,       STARTY+680, 300, 80, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA6, m_szCnt_page_H),
		//DLG_TEXT(0,            STARTY+780, 250, 55, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTCTRLBK, TXT_DATA7, "선택납기"),
		DLG_TEXT(STARTX,       STARTY+760, 800, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA8, "수신번호"),
		//DLG_TEXT(0,            STARTY+835, 250, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA9, ""),
		DLG_EDIT(STARTX+300,   STARTY+830, 250, 69, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA2, 4,  ""),
		DLG_EDIT(STARTX+550,   STARTY+830, 250, 69, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA3, 4,  ""),

		// 리스트
		DLG_TABLE(GRID_X_H, GRID_Y_H_P, ROW_H, COL_H, 0, GRID_H_H_P, 1, GRID_H_H_P, SEL_ROW, MAXCHAR_H, m_stGridTitle_H, ID_HISLIST, m_szTableBuf_H),

		DLG_COMBO(STARTX,       STARTY+40, 350, 290, 120, 70, TXTFRCOLOR, EDTCTRLBK, CALL_FUNC, "", CMB_DATA1, 20),
		DLG_COMBO(STARTX,      STARTY+830, 300, 290, 120, 69, TXTFRCOLOR, EDTCTRLBK, CALL_FUNC, "", CMB_DATA2, 20),
	};		
	
	// 메인 다이얼로그(요금계산)
	//---------------------------------------------------------------
	DlgObject	DlgRes_Calcul[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_TEXT(0, 0, 998, BTNHT_1, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, WHITE, TRANSPARENT, TXT_BORDER, ""),
		DLG_ICON(0, BTNY_2, ICON_TITLE, ""),		
		//타이틀
		DLG_TEXT(TX, TY, STWD, STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "요금조회"),

		DLG_BUTTON(STARTX,      STARTY+65, 500, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB1, "요금내역"),
		DLG_BUTTON(STARTX+500,  STARTY+65, 500, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB2, "요금계산"),
		DLG_BUTTON(STARTX+800, STARTY+135, 200, 65, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CALSEARCH, "검색"),
		DLG_BUTTON(STARTX,     STARTY+200, 350,100, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CALADDR, "지번"),
		DLG_BUTTON(STARTX,     STARTY+480, 350, 55, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, ORANGE, CALL_FUNC , "", BID_CALCUL, "요금계산"),
		DLG_BUTTON(STARTX+350, STARTY+480, 130, 55, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ONE  , "1"),
		DLG_BUTTON(STARTX+480, STARTY+480, 130, 55, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TWO  , "2"),
		DLG_BUTTON(STARTX+610, STARTY+480, 130, 55, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_THREE, "3"),
		DLG_BUTTON(STARTX+740, STARTY+480, 130, 55, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_FOUR , "4"),
		DLG_BUTTON(STARTX+870, STARTY+480, 130, 55, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_FIVE , "5"),
		DLG_BUTTON(STARTX+750, STARTY+775, 250, 124, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CALSND, "문자\n발송"),

		DLG_EDIT(STARTX+350,   STARTY+135, 450, 65, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA4, 20,  ""),
		DLG_TEXT(STARTX+350,   STARTY+200, 650,100, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA10, ""),
		DLG_TEXT(STARTX,       STARTY+300, 350, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA11, "성명/상호"),
		DLG_TEXT(STARTX+350,   STARTY+300, 650, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA12, ""),
		DLG_TEXT(STARTX,       STARTY+360, 350, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA13, "미납합계"),
		DLG_TEXT(STARTX+350,   STARTY+360, 650, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA14, ""),

		DLG_TEXT(STARTX,       STARTY+420, 230, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA15, "현재지침"),
		DLG_EDIT(STARTX+230,   STARTY+420, 220, 60, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA5, 20,  ""),
		DLG_TEXT(STARTX+450,   STARTY+420,  60, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA16, "㎥"),
		DLG_TEXT(STARTX+510,   STARTY+420, 230, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA17, "전월지침"),
		DLG_TEXT(STARTX+740,   STARTY+420, 260, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA18, ""),
		
//1page
		DLG_TEXT(STARTX,       STARTY+535, 250, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA19, "사용량"),
		DLG_TEXT(STARTX+250,   STARTY+535, 250, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA20, ""),
		DLG_TEXT(STARTX+500,   STARTY+535, 220, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA21, "금액"),
		DLG_TEXT(STARTX+720,   STARTY+535, 280, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA22, ""),
		DLG_TEXT(STARTX,       STARTY+595, 250, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA23, "보정계수"),
		DLG_TEXT(STARTX+250,   STARTY+595, 250, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA24, ""),
		DLG_TEXT(STARTX+500,   STARTY+595, 220, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA25, "조정량"),
		DLG_TEXT(STARTX+720,   STARTY+595, 280, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA26, ""),
		DLG_TEXT(STARTX,       STARTY+655, 250, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA27, "단위열량"),
		DLG_TEXT(STARTX+250,   STARTY+655, 250, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA28, ""),
		DLG_TEXT(STARTX+500,   STARTY+655, 220, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA29, "사용열량"),
		DLG_TEXT(STARTX+720,   STARTY+655, 280, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA30, ""),
		DLG_TEXT(STARTX,       STARTY+715, 250, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA31, "사용기간"),
		DLG_TEXT(STARTX+250,   STARTY+715, 750, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA32, ""),
		
//2page
		DLG_TEXT(STARTX,       STARTY+535, 265, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA48, "사용요금"),
		DLG_TEXT(STARTX+265,   STARTY+535, 735, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA49, ""),
		DLG_TEXT(STARTX,       STARTY+595, 265, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA50, "감면액"),
		DLG_TEXT(STARTX+265,   STARTY+595, 235, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA51, ""),
		DLG_TEXT(STARTX+500,   STARTY+595, 265, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA52, "기본료"),
		DLG_TEXT(STARTX+765,   STARTY+595, 235, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA53, ""),
		DLG_TEXT(STARTX,       STARTY+655, 265, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA54, "해제수수료"),
		DLG_TEXT(STARTX+265,   STARTY+655, 235, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA55, ""),
		DLG_TEXT(STARTX+500,   STARTY+655, 265, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA56, "정산조정액"),
		DLG_TEXT(STARTX+765,   STARTY+655, 235, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA57, ""),
		DLG_TEXT(STARTX,       STARTY+715, 265, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA58, "공급가액"),
		DLG_TEXT(STARTX+265,   STARTY+715, 235, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA59, ""),
		DLG_TEXT(STARTX+500,   STARTY+715, 265, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA60, "부가세"),
		DLG_TEXT(STARTX+765,   STARTY+715, 235, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA61, ""),

//3page
		DLG_TEXT(STARTX,       STARTY+535, 250, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA62, "연체료"),
		DLG_TEXT(STARTX+250,   STARTY+535, 250, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA63, ""),
		DLG_TEXT(STARTX+500,   STARTY+535, 265, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA64, "예수금잔액"),
		DLG_TEXT(STARTX+765,   STARTY+535, 235, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA65, ""),
		DLG_TEXT(STARTX,       STARTY+595, 250, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA66, "교체비"),
		DLG_TEXT(STARTX+250,   STARTY+595, 250, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA67, ""),
		DLG_TEXT(STARTX+500,   STARTY+595, 265, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA68, "당월청구액"),
		DLG_TEXT(STARTX+765,   STARTY+595, 235, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA69, ""),
		DLG_TEXT(STARTX,       STARTY+655, 250, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA70, "미납액"),
		DLG_TEXT(STARTX+250,   STARTY+655, 750, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA71, ""),
		DLG_TEXT(STARTX,       STARTY+715, 250, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA72, "합계액"),
		DLG_TEXT(STARTX+250,   STARTY+715, 750, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA73, ""),

//4page
		DLG_TEXT(STARTX,       STARTY+535, 400, 55, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA74, "예수금대체액"),
		DLG_TEXT(STARTX+400,   STARTY+535, 600, 55, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA75, ""),
		DLG_TEXT(STARTX,       STARTY+590, 400, 55, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA76, "①청구액"),
		DLG_TEXT(STARTX+400,   STARTY+590, 600, 55, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA77, ""),
		DLG_TEXT(STARTX,       STARTY+645, 400, 75, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA78, "②이전(후)사용자미납액"),
		DLG_TEXT(STARTX+400,   STARTY+645, 600, 75, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA79, ""),
		DLG_TEXT(STARTX,       STARTY+720, 400, 55, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA80, "①+②"),
		DLG_TEXT(STARTX+400,   STARTY+720, 600, 55, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA81, ""),
		
//5page
		DLG_TEXT(STARTX,       STARTY+535, 400, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA82, "법적소송및기타"),
		DLG_TEXT(STARTX+400,   STARTY+535, 600, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA83, ""),
		DLG_TEXT(STARTX,       STARTY+595, 400, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA84, "대손미납금"),
		DLG_TEXT(STARTX+400,   STARTY+595, 600, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA85, ""),

		DLG_TEXT(STARTX,        STARTY+775, 750, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA33, "수신번호"),
		DLG_EDIT(STARTX+350,    STARTY+835, 200, 64, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA6, 4,  ""),
		DLG_EDIT(STARTX+550,    STARTY+835, 200, 64, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA7, 4,  ""),

		DLG_COMBO(STARTX,           STARTY+135, 350, 290, 120, 65, TXTFRCOLOR, EDTCTRLBK, CALL_FUNC, "", CMB_DATA1, 20),
		DLG_COMBO(STARTX,           STARTY+835, 350, 290, 110, 64, TXTFRCOLOR, EDTCTRLBK, CALL_FUNC, "", CMB_DATA4, 20),
		
		//숫자 자판
		DLG_TEXT(0,    STARTY+940, 333, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_ONE, "1"),
		DLG_TEXT(333,  STARTY+940, 333, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_TWO, "2"),
		DLG_TEXT(666,  STARTY+940, 334, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_THREE, "3"),
		DLG_TEXT(0,   STARTY+1030, 333, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_FOUR, "4"),
		DLG_TEXT(333, STARTY+1030, 333, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_FIVE, "5"),
		DLG_TEXT(666, STARTY+1030, 334, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_SIX, "6"),
		DLG_TEXT(0,   STARTY+1120, 333, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_SEVEN, "7"),
		DLG_TEXT(333, STARTY+1120, 333, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_EIGHT, "8"),
		DLG_TEXT(666, STARTY+1120, 334, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_NINE, "9"),
		DLG_TEXT(333, STARTY+1210, 333, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_ZERO, "0"),
		DLG_TEXT(666, STARTY+1210, 334, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_DEL, "←"),
	};	
	
	// PDA 다이얼로그(요금계산)
	//---------------------------------------------------------------
	DlgObject	DlgRes_Calcul_P[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_ICON(P_TTLTX, 0, ICON_TITLE, ""),		
		//타이틀
		DLG_TEXT(P_TX, P_TY, P_STWD, P_STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, WHITE, TRANSPARENT, TXT_TITLE, "요금조회"),
		DLG_BUTTON(P_BTNX, P_BTNY, P_BTNWD, P_BTNHD, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", GID_PREV, ""),

		DLG_BUTTON(STARTX,      STARTY-40, 500, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB1, "요금내역"),
		DLG_BUTTON(STARTX+500,  STARTY-40, 500, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB2, "요금계산"),
		DLG_BUTTON(STARTX+800,  STARTY+40, 200, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CALSEARCH, "검색"),
		DLG_BUTTON(STARTX,     STARTY+110, 350,100, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CALADDR, "지번"),
		DLG_BUTTON(STARTX,     STARTY+420, 350, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, ORANGE, CALL_FUNC , "", BID_CALCUL, "요금계산"),
		DLG_BUTTON(STARTX+350, STARTY+420, 130, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ONE  , "1"),
		DLG_BUTTON(STARTX+480, STARTY+420, 130, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TWO  , "2"),
		DLG_BUTTON(STARTX+610, STARTY+420, 130, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_THREE, "3"),
		DLG_BUTTON(STARTX+740, STARTY+420, 130, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_FOUR , "4"),
		DLG_BUTTON(STARTX+870, STARTY+420, 130, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_FIVE , "5"),
		DLG_BUTTON(STARTX+750, STARTY+770, 250, 129, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CALSND, "문자\n발송"),

		DLG_EDIT(STARTX+350,    STARTY+40, 450, 70, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA4, 20,  ""),
		DLG_TEXT(STARTX+350,   STARTY+110, 650,100, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA10, ""),
		DLG_TEXT(STARTX,       STARTY+210, 350, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA11, "성명/상호"),
		DLG_TEXT(STARTX+350,   STARTY+210, 650, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA12, ""),
		DLG_TEXT(STARTX,       STARTY+280, 350, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA13, "미납합계"),
		DLG_TEXT(STARTX+350,   STARTY+280, 650, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA14, ""),

		DLG_TEXT(STARTX,       STARTY+350, 230, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA15, "현재지침"),
		DLG_EDIT(STARTX+230,   STARTY+350, 220, 70, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA5, 20,  ""),
		DLG_TEXT(STARTX+450,   STARTY+350,  60, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA16, "㎥"),
		DLG_TEXT(STARTX+510,   STARTY+350, 230, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA17, "전월지침"),
		DLG_TEXT(STARTX+740,   STARTY+350, 260, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA18, ""),
		
//1page
		DLG_TEXT(STARTX,       STARTY+490, 250, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA19, "사용량"),
		DLG_TEXT(STARTX+250,   STARTY+490, 250, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA20, ""),
		DLG_TEXT(STARTX+500,   STARTY+490, 220, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA21, "금액"),
		DLG_TEXT(STARTX+720,   STARTY+490, 280, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA22, ""),
		DLG_TEXT(STARTX,       STARTY+560, 250, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA23, "보정계수"),
		DLG_TEXT(STARTX+250,   STARTY+560, 250, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA24, ""),
		DLG_TEXT(STARTX+500,   STARTY+560, 220, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA25, "조정량"),
		DLG_TEXT(STARTX+720,   STARTY+560, 280, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA26, ""),
		DLG_TEXT(STARTX,       STARTY+630, 250, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA27, "단위열량"),
		DLG_TEXT(STARTX+250,   STARTY+630, 250, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA28, ""),
		DLG_TEXT(STARTX+500,   STARTY+630, 220, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA29, "사용열량"),
		DLG_TEXT(STARTX+720,   STARTY+630, 280, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA30, ""),
		DLG_TEXT(STARTX,       STARTY+700, 250, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA31, "사용기간"),
		DLG_TEXT(STARTX+250,   STARTY+700, 750, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA32, ""),
		
//2page
		DLG_TEXT(STARTX,       STARTY+490, 265, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA48, "사용요금"),
		DLG_TEXT(STARTX+265,   STARTY+490, 735, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA49, ""),
		DLG_TEXT(STARTX,       STARTY+560, 265, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA50, "감면액"),
		DLG_TEXT(STARTX+265,   STARTY+560, 235, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA51, ""),
		DLG_TEXT(STARTX+500,   STARTY+560, 265, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA52, "기본료"),
		DLG_TEXT(STARTX+765,   STARTY+560, 235, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA53, ""),
		DLG_TEXT(STARTX,       STARTY+630, 265, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA54, "해제수수료"),
		DLG_TEXT(STARTX+265,   STARTY+630, 235, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA55, ""),
		DLG_TEXT(STARTX+500,   STARTY+630, 265, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA56, "정산조정액"),
		DLG_TEXT(STARTX+765,   STARTY+630, 235, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA57, ""),
		DLG_TEXT(STARTX,       STARTY+700, 265, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA58, "공급가액"),
		DLG_TEXT(STARTX+265,   STARTY+700, 235, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA59, ""),
		DLG_TEXT(STARTX+500,   STARTY+700, 265, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA60, "부가세"),
		DLG_TEXT(STARTX+765,   STARTY+700, 235, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA61, ""),

//3page
		DLG_TEXT(STARTX,       STARTY+490, 250, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA62, "연체료"),
		DLG_TEXT(STARTX+250,   STARTY+490, 250, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA63, ""),
		DLG_TEXT(STARTX+500,   STARTY+490, 265, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA64, "예수금잔액"),
		DLG_TEXT(STARTX+765,   STARTY+490, 235, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA65, ""),
		DLG_TEXT(STARTX,       STARTY+560, 250, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA66, "교체비"),
		DLG_TEXT(STARTX+250,   STARTY+560, 250, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA67, ""),
		DLG_TEXT(STARTX+500,   STARTY+560, 265, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA68, "당월청구액"),
		DLG_TEXT(STARTX+765,   STARTY+560, 235, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA69, ""),
		DLG_TEXT(STARTX,       STARTY+630, 250, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA70, "미납액"),
		DLG_TEXT(STARTX+250,   STARTY+630, 750, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA71, ""),
		DLG_TEXT(STARTX,       STARTY+700, 250, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA72, "합계액"),
		DLG_TEXT(STARTX+250,   STARTY+700, 750, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA73, ""),

//4page
		DLG_TEXT(STARTX,       STARTY+490, 400, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA74, "예수금대체액"),
		DLG_TEXT(STARTX+400,   STARTY+490, 600, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA75, ""),
		DLG_TEXT(STARTX,       STARTY+550, 400, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA76, "①청구액"),
		DLG_TEXT(STARTX+400,   STARTY+550, 600, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA77, ""),
		DLG_TEXT(STARTX,       STARTY+610, 400,100, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA78, "②이전(후)사용자미납액"),
		DLG_TEXT(STARTX+400,   STARTY+610, 600,100, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA79, ""),
		DLG_TEXT(STARTX,       STARTY+710, 400, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA80, "①+②"),
		DLG_TEXT(STARTX+400,   STARTY+710, 600, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA81, ""),
		
//5page
		DLG_TEXT(STARTX,       STARTY+490, 400, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA82, "법적소송및기타"),
		DLG_TEXT(STARTX+400,   STARTY+490, 600, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA83, ""),
		DLG_TEXT(STARTX,       STARTY+560, 400, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA84, "대손미납금"),
		DLG_TEXT(STARTX+400,   STARTY+560, 600, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA85, ""),

		DLG_TEXT(STARTX,        STARTY+770, 750, 65, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA33, "수신번호"),
		DLG_EDIT(STARTX+350,    STARTY+835, 200, 64, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA6, 4,  ""),
		DLG_EDIT(STARTX+550,    STARTY+835, 200, 64, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA7, 4,  ""),

		DLG_COMBO(STARTX,        STARTY+40, 350, 290, 120, 70, TXTFRCOLOR, EDTCTRLBK, CALL_FUNC, "", CMB_DATA1, 20),
		DLG_COMBO(STARTX,       STARTY+835, 350, 290, 110, 64, TXTFRCOLOR, EDTCTRLBK, CALL_FUNC, "", CMB_DATA4, 20),
	};		

	// 메인 다이얼로그(전화번호)
	//---------------------------------------------------------------
	DlgObject	DlgRes_Tel[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_TEXT(0, 0, 998, BTNHT_1, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, WHITE, TRANSPARENT, TXT_BORDER, ""),
		DLG_ICON(0, BTNY_2, ICON_TITLE, ""),		
		//타이틀
		DLG_TEXT(TX, TY, STWD, STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "요금조회"),

		DLG_BUTTON(STARTX,      STARTY+65, 500, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB1, "요금내역"),
		DLG_BUTTON(STARTX+500,  STARTY+65, 500, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB2, "요금계산"),
		//DLG_BUTTON(0,          STARTY+210, 500, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TELCANCEL, "취 소"),
		//DLG_BUTTON(0,          STARTY+210, 240, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TELHOUSE, "유선전화"),
		//DLG_BUTTON(STARTX+250, STARTY+210, 240, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TELCP, "무선전화"),
		DLG_BUTTON(STARTX+600, STARTY+205, 400, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TELSEARCH, "검 색"),
		DLG_BUTTON(STARTX+500, STARTY+839, 250, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TELPREV, "▲"),
		DLG_BUTTON(STARTX+750, STARTY+839, 250, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TELNEXT, "▼"),

		//전화번호 검색용
		DLG_EDIT(STARTX+350,   STARTY+135, 210, 70, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA13, 4,  ""),
		DLG_EDIT(STARTX+560,   STARTY+135, 220, 70, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA14, 4,  ""),
		DLG_EDIT(STARTX+780,   STARTY+135, 220, 70, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA15, 4,  ""),
		//바코드 & 기물번호 검색
		DLG_EDIT(STARTX+350,   STARTY+135, 650, 70, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA16,20,  ""),

		DLG_TEXT(STARTX,	   STARTY+839, 300, 60, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA46, m_szCnt_page_T),

		// 리스트
		DLG_TABLE(GRID_X_T, GRID_Y_T, ROW_T, COL_T, 0, GRID_H_T, 1, GRID_H_T, SEL_ROW, MAXCHAR_T, m_stGridTitle_T, ID_TELLIST, m_szTableBuf_T),

		DLG_COMBO(STARTX,      STARTY+135, 350, 290, 120, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA1, 20),
	};	
	
	// PDA 다이얼로그(전화번호)
	//---------------------------------------------------------------
	DlgObject	DlgRes_Tel_P[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_ICON(P_TTLTX, 0, ICON_TITLE, ""),		
		//타이틀
		DLG_TEXT(P_TX, P_TY, P_STWD, P_STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, WHITE, TRANSPARENT, TXT_TITLE, "요금조회"),
		DLG_BUTTON(P_BTNX, P_BTNY, P_BTNWD, P_BTNHD, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", GID_PREV, ""),

		DLG_BUTTON(STARTX,      STARTY-40, 500, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB1, "요금내역"),
		DLG_BUTTON(STARTX+500,  STARTY-40, 500, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB2, "요금계산"),
		//DLG_BUTTON(0,          STARTY+210, 500, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TELCANCEL, "취 소"),
		//DLG_BUTTON(0,          STARTY+210, 240, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TELHOUSE, "유선전화"),
		//DLG_BUTTON(STARTX+250, STARTY+210, 240, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TELCP, "무선전화"),
		DLG_BUTTON(STARTX+600, STARTY+120, 400, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TELSEARCH, "검 색"),
		DLG_BUTTON(STARTX+500, STARTY+819, 250, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TELPREV, "▲"),
		DLG_BUTTON(STARTX+750, STARTY+819, 250, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TELNEXT, "▼"),

		//전화번호 검색용
		DLG_EDIT(STARTX+350,   STARTY+40, 210, 80, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA13, 4,  ""),
		DLG_EDIT(STARTX+560,   STARTY+40, 220, 80, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA14, 4,  ""),
		DLG_EDIT(STARTX+780,   STARTY+40, 220, 80, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA15, 4,  ""),
		//바코드 & 기물번호 검색
		DLG_EDIT(STARTX+350,   STARTY+40, 650, 80, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA16,20,  ""),

		DLG_TEXT(STARTX,	   STARTY+819, 300, 80, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA46, m_szCnt_page_T),

		// 리스트
		DLG_TABLE(GRID_X_T, GRID_Y_T_P, ROW_T, COL_T, 0, GRID_H_T_P, 1, GRID_H_T_P, SEL_ROW, MAXCHAR_T, m_stGridTitle_T, ID_TELLIST, m_szTableBuf_T),

		DLG_COMBO(STARTX,      STARTY+40, 350, 290, 120, 80, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA1, 20),
	};		


	// 메인 다이얼로그(주소검색-단독)
	//---------------------------------------------------------------
	DlgObject	DlgRes_JibunSearch[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_TEXT(0, 0, 998, BTNHT_1, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, WHITE, TRANSPARENT, TXT_BORDER, ""),
		DLG_ICON(0, BTNY_2, ICON_TITLE, ""),		
		//타이틀
		DLG_TEXT(TX, TY, STWD, STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "요금조회"),

		DLG_BUTTON(STARTX,      STARTY+65, 500, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB1, "요금내역"),
		DLG_BUTTON(STARTX+500,  STARTY+65, 500, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB2, "요금계산"),
		DLG_BUTTON(STARTX,     STARTY+205, 333, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_JIBUN, "지 번"),
		DLG_BUTTON(STARTX+333, STARTY+205, 333, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ROADNM, "도로명"),
		DLG_BUTTON(STARTX+666, STARTY+205, 334, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TOGETHER, "공 동"),
		//DLG_BUTTON(0,          STARTY+400, 500, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CANCEL, "취 소"),
		DLG_BUTTON(STARTX+500, STARTY+415, 500, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ADDRSEARCH, "검 색"),
		DLG_BUTTON(STARTX+500, STARTY+839, 250, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ADDRPREV, "▲"),
		DLG_BUTTON(STARTX+750, STARTY+839, 250, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ADDRNEXT, "▼"),

		DLG_COMBO (STARTX,        STARTY+135, 350, 200, 120, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA1, 20),		//검색조건

		DLG_TEXT(STARTX, 	 STARTY+275, 200, 70, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA34, "구"),
		DLG_TEXT(STARTX+520, STARTY+275, 130, 70, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA35, "동"),
		DLG_TEXT(STARTX,     STARTY+345, 200, 70, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA36, "번지"),
		DLG_EDIT(STARTX+200, STARTY+345, 320, 70, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA8, 10,  ""),
		DLG_TEXT(STARTX+520, STARTY+345, 130, 70, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA37, "호수"),
		DLG_EDIT(STARTX+650, STARTY+345, 350, 70, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA9, 10,  ""),

		DLG_TEXT(STARTX,     STARTY+839, 300, 60, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA47, m_szCnt_page_A),
	
		DLG_COMBO (STARTX+200, STARTY+275, 320, 200, 120, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA6, 10),
		DLG_COMBO (STARTX+650, STARTY+275, 350, 200, 120, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA7, 10),

		// 리스트
		DLG_TABLE(GRID_X_A, GRID_Y_A, ROW_A, COL_A, 0, GRID_H_A, 1, GRID_H_A, SEL_ROW, MAXCHAR_A, m_stGridTitle_A, ID_ADDRLIST, m_szTableBuf_A),
	};	
	
	// PDA 다이얼로그(주소검색-단독)
	//---------------------------------------------------------------
	DlgObject	DlgRes_JibunSearch_P[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_ICON(P_TTLTX, 0, ICON_TITLE, ""),		
		//타이틀
		DLG_TEXT(P_TX, P_TY, P_STWD, P_STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, WHITE, TRANSPARENT, TXT_TITLE, "요금조회"),
		DLG_BUTTON(P_BTNX, P_BTNY, P_BTNWD, P_BTNHD, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", GID_PREV, ""),

		DLG_BUTTON(STARTX,      STARTY-40, 500, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB1, "요금내역"),
		DLG_BUTTON(STARTX+500,  STARTY-40, 500, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB2, "요금계산"),
		DLG_BUTTON(STARTX,     STARTY+120, 333, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_JIBUN, "지 번"),
		DLG_BUTTON(STARTX+333, STARTY+120, 333, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ROADNM, "도로명"),
		DLG_BUTTON(STARTX+666, STARTY+120, 334, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TOGETHER, "공 동"),
		DLG_BUTTON(STARTX+500, STARTY+360, 500, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ADDRSEARCH, "검 색"),
		DLG_BUTTON(STARTX+500, STARTY+835, 250, 64, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ADDRPREV, "▲"),
		DLG_BUTTON(STARTX+750, STARTY+835, 250, 64, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ADDRNEXT, "▼"),

		DLG_COMBO (STARTX,    STARTY+40, 350, 200, 120, 80, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA1, 20),		//검색조건

		DLG_TEXT(STARTX, 	 STARTY+200, 200, 80, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA34, "구"),
		DLG_TEXT(STARTX+520, STARTY+200, 130, 80, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA35, "동"),
		DLG_TEXT(STARTX,     STARTY+280, 200, 80, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA36, "번지"),
		DLG_EDIT(STARTX+200, STARTY+280, 320, 80, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA8, 10,  ""),
		DLG_TEXT(STARTX+520, STARTY+280, 130, 80, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA37, "호수"),
		DLG_EDIT(STARTX+650, STARTY+280, 350, 80, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA9, 10,  ""),

		DLG_TEXT(STARTX,     STARTY+835, 300, 64, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA47, m_szCnt_page_A),
	
		DLG_COMBO (STARTX+200, STARTY+200, 320, 200, 120, 80, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA6, 10),
		DLG_COMBO (STARTX+650, STARTY+200, 350, 200, 120, 80, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA7, 10),

		// 리스트
		DLG_TABLE(GRID_X_A, GRID_Y_A_P, ROW_A, COL_A, 0, GRID_H_A_P, 1, GRID_H_A_P, SEL_ROW, MAXCHAR_A, m_stGridTitle_A, ID_ADDRLIST, m_szTableBuf_A),
	};		


	// 메인 다이얼로그(주소검색-공동)
	//---------------------------------------------------------------
	DlgObject	DlgRes_TgtSearch[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_TEXT(0, 0, 998, BTNHT_1, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, WHITE, TRANSPARENT, TXT_BORDER, ""),
		DLG_ICON(0, BTNY_2, ICON_TITLE, ""),		
		//타이틀
		DLG_TEXT(TX, TY, STWD, STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "요금조회"),

		DLG_BUTTON(STARTX,      STARTY+65, 500, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB1, "요금내역"),
		DLG_BUTTON(STARTX+500,  STARTY+65, 500, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB2, "요금계산"),
		DLG_BUTTON(STARTX,     STARTY+205, 333, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_JIBUN, "지 번"),
		DLG_BUTTON(STARTX+333, STARTY+205, 333, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ROADNM, "도로명"),
		DLG_BUTTON(STARTX+666, STARTY+205, 334, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TOGETHER, "공 동"),
		//DLG_BUTTON(0,          STARTY+400, 500, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CANCEL, "취 소"),
		DLG_BUTTON(STARTX+500, STARTY+415, 500, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ADDRSEARCH, "검 색"),
		DLG_BUTTON(STARTX+500, STARTY+839, 250, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ADDRPREV, "▲"),
		DLG_BUTTON(STARTX+750, STARTY+839, 250, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ADDRNEXT, "▼"),

		DLG_COMBO (STARTX,   STARTY+135, 350, 200, 120, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA1, 20),		//검색조건

		DLG_TEXT(STARTX,     STARTY+275, 300, 70, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA38, "공동주택명"),
		DLG_TEXT(STARTX,  	 STARTY+345, 200, 70, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA39, "건물명"),
		DLG_TEXT(STARTX+670, STARTY+345, 130, 70, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA40, "호"),
		DLG_EDIT(STARTX+800, STARTY+345, 200, 70, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA10, 10,  ""),

		DLG_TEXT(STARTX,     STARTY+839, 300, 60, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA47, m_szCnt_page_A),
	
		DLG_COMBO (STARTX+300, STARTY+275, 700, 200, 120, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA8, 10),
		DLG_COMBO (STARTX+200, STARTY+345, 470, 200, 120, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA9, 10),

		// 리스트
		DLG_TABLE(GRID_X_A, GRID_Y_A, ROW_A, COL_A, 0, GRID_H_A, 1, GRID_H_A, SEL_ROW, MAXCHAR_A, m_stGridTitle_A, ID_ADDRLIST, m_szTableBuf_A),
	};	
	
	// PDA 다이얼로그(주소검색-공동)
	//---------------------------------------------------------------
	DlgObject	DlgRes_TgtSearch_P[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_ICON(P_TTLTX, 0, ICON_TITLE, ""),		
		//타이틀
		DLG_TEXT(P_TX, P_TY, P_STWD, P_STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, WHITE, TRANSPARENT, TXT_TITLE, "요금조회"),
		DLG_BUTTON(P_BTNX, P_BTNY, P_BTNWD, P_BTNHD, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", GID_PREV, ""),

		DLG_BUTTON(STARTX,      STARTY-40, 500, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB1, "요금내역"),
		DLG_BUTTON(STARTX+500,  STARTY-40, 500, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB2, "요금계산"),
		DLG_BUTTON(STARTX,     STARTY+120, 333, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_JIBUN, "지 번"),
		DLG_BUTTON(STARTX+333, STARTY+120, 333, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ROADNM, "도로명"),
		DLG_BUTTON(STARTX+666, STARTY+120, 334, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TOGETHER, "공 동"),
		DLG_BUTTON(STARTX+500, STARTY+360, 500, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ADDRSEARCH, "검 색"),
		DLG_BUTTON(STARTX+500, STARTY+835, 250, 64, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ADDRPREV, "▲"),
		DLG_BUTTON(STARTX+750, STARTY+835, 250, 64, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ADDRNEXT, "▼"),

		DLG_COMBO (STARTX,    STARTY+40, 350, 200, 120, 80, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA1, 20),		//검색조건

		DLG_TEXT(STARTX,     STARTY+200, 300, 80, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA38, "공동주택명"),
		DLG_TEXT(STARTX,  	 STARTY+280, 200, 80, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA39, "건물명"),
		DLG_TEXT(STARTX+670, STARTY+280, 130, 80, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA40, "호"),
		DLG_EDIT(STARTX+800, STARTY+280, 200, 80, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA10, 10,  ""),

		DLG_TEXT(STARTX,     STARTY+835, 300, 64, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA47, m_szCnt_page_A),
	
		DLG_COMBO (STARTX+300, STARTY+200, 700, 200, 120, 80, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA8, 10),
		DLG_COMBO (STARTX+200, STARTY+280, 470, 200, 120, 80, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA9, 10),

		// 리스트
		DLG_TABLE(GRID_X_A, GRID_Y_A_P, ROW_A, COL_A, 0, GRID_H_A_P, 1, GRID_H_A_P, SEL_ROW, MAXCHAR_A, m_stGridTitle_A, ID_ADDRLIST, m_szTableBuf_A),
	};		


	// 메인 다이얼로그(주소검색-도로명)
	//---------------------------------------------------------------
	DlgObject	DlgRes_NewSearch[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_TEXT(0, 0, 998, BTNHT_1, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, WHITE, TRANSPARENT, TXT_BORDER, ""),
		DLG_ICON(0, BTNY_2, ICON_TITLE, ""),		
		//타이틀
		DLG_TEXT(TX, TY, STWD, STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "요금조회"),

		DLG_BUTTON(STARTX,      STARTY+65, 500, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB1, "요금내역"),
		DLG_BUTTON(STARTX+500,  STARTY+65, 500, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB2, "요금계산"),
		DLG_BUTTON(STARTX,     STARTY+205, 333, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_JIBUN, "지 번"),
		DLG_BUTTON(STARTX+333, STARTY+205, 333, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ROADNM, "도로명"),
		DLG_BUTTON(STARTX+666, STARTY+205, 334, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TOGETHER, "공 동"),
		//DLG_BUTTON(0,          STARTY+400, 500, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CANCEL, "취 소"),
		DLG_BUTTON(STARTX+500, STARTY+415, 500, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ADDRSEARCH, "검 색"),
		DLG_BUTTON(STARTX+500, STARTY+839, 250, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ADDRPREV, "▲"),
		DLG_BUTTON(STARTX+750, STARTY+839, 250, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ADDRNEXT, "▼"),

		DLG_COMBO (STARTX,   STARTY+135, 350, 200, 120, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA1, 20),		//검색조건

		DLG_TEXT(STARTX, 	 STARTY+275, 130, 70, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA41, "구"),
		DLG_TEXT(STARTX+450, STARTY+275, 200, 70, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA42, "도로명"),
		DLG_TEXT(STARTX, 	 STARTY+345, 200, 70, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA43, "본번"),
		DLG_EDIT(STARTX+200, STARTY+345, 300, 70, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA11, 10,  ""),
		DLG_TEXT(STARTX+500, STARTY+345, 200, 70, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA44, "부번"),
		DLG_EDIT(STARTX+700, STARTY+345, 300, 70, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA12, 10,  ""),

		DLG_TEXT(STARTX,     STARTY+839, 300, 60, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA47, m_szCnt_page_A),
	
		DLG_COMBO (STARTX+130, STARTY+275, 320, 200, 120, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA10, 10),
		DLG_COMBO (STARTX+650, STARTY+275, 350, 200, 120, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA11, 10),

		// 리스트
		DLG_TABLE(GRID_X_A, GRID_Y_A, ROW_A, COL_A, 0, GRID_H_A, 1, GRID_H_A, SEL_ROW, MAXCHAR_A, m_stGridTitle_A, ID_ADDRLIST, m_szTableBuf_A),
	};	
	
	// PDA 다이얼로그(주소검색-도로명)
	//---------------------------------------------------------------
	DlgObject	DlgRes_NewSearch_P[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_ICON(P_TTLTX, 0, ICON_TITLE, ""),		
		//타이틀
		DLG_TEXT(P_TX, P_TY, P_STWD, P_STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, WHITE, TRANSPARENT, TXT_TITLE, "요금조회"),
		DLG_BUTTON(P_BTNX, P_BTNY, P_BTNWD, P_BTNHD, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", GID_PREV, ""),

		DLG_BUTTON(STARTX,      STARTY-40, 500, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB1, "요금내역"),
		DLG_BUTTON(STARTX+500,  STARTY-40, 500, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB2, "요금계산"),
		DLG_BUTTON(STARTX,     STARTY+120, 333, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_JIBUN, "지 번"),
		DLG_BUTTON(STARTX+333, STARTY+120, 333, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ROADNM, "도로명"),
		DLG_BUTTON(STARTX+666, STARTY+120, 334, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TOGETHER, "공 동"),
		DLG_BUTTON(STARTX+500, STARTY+360, 500, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ADDRSEARCH, "검 색"),
		DLG_BUTTON(STARTX+500, STARTY+835, 250, 64, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ADDRPREV, "▲"),
		DLG_BUTTON(STARTX+750, STARTY+835, 250, 64, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ADDRNEXT, "▼"),

		DLG_COMBO (STARTX,    STARTY+40, 350, 200, 120, 80, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA1, 20),		//검색조건

		DLG_TEXT(STARTX, 	 STARTY+200, 130, 80, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA41, "구"),
		DLG_TEXT(STARTX+450, STARTY+200, 200, 80, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA42, "도로명"),
		DLG_TEXT(STARTX, 	 STARTY+280, 200, 80, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA43, "본번"),
		DLG_EDIT(STARTX+200, STARTY+280, 300, 80, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA11, 10,  ""),
		DLG_TEXT(STARTX+500, STARTY+280, 200, 80, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA44, "부번"),
		DLG_EDIT(STARTX+700, STARTY+280, 300, 80, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA12, 10,  ""),

		DLG_TEXT(STARTX,     STARTY+835, 300, 64, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA47, m_szCnt_page_A),
	
		DLG_COMBO (STARTX+130, STARTY+200, 320, 200, 120, 80, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA10, 10),
		DLG_COMBO (STARTX+650, STARTY+200, 350, 200, 120, 80, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA11, 10),

		// 리스트
		DLG_TABLE(GRID_X_A, GRID_Y_A_P, ROW_A, COL_A, 0, GRID_H_A_P, 1, GRID_H_A_P, SEL_ROW, MAXCHAR_A, m_stGridTitle_A, ID_ADDRLIST, m_szTableBuf_A),
	};		


	//----------------------------------------------------------------------
	bool	main (quad MsgType, quad wParam, quad lParam)
	{
		EVENT_HANDLER (MsgType, wParam, lParam);
		return TRUE;
	}
	
//┌─────────────────────────────────────┐
//│ 				   『	OnInit Function  』  				              │
//└─────────────────────────────────────┘
	void	OnInit(char bFirst)
	{
		//g_lDataflag = 0 초기화시점 아래 다이얼로그 호출 쪽, =1 INIT_MAIN, =2 INIT_CALCUL
		if( g_lDataflag == 1 )
		{
			bFirst = INIT_MAIN;
		}
		else if( g_lDataflag == 2 )
		{
			bFirst = INIT_CALCUL;
		}

		//화면이동 전 저장된 계약번호 셋팅
		//Str_Cpy(m_szSearch_Use_cont_num[0], g_szUSE_CONT_NUM);			//요금내역
		//Str_Cpy(m_szSearch_Use_cont_num[1], g_szUSE_CONT_NUM_Fee);		//요금계산
		Str_Cpy( m_szSearch_Use_cont_num, g_szUSE_CONT_NUM);

		m_bFirst = bFirst;

		switch (bFirst)
		{
			case INIT_MAIN:
				switch (theDevInfo.m_nType)
				{
					case FAMILY_PDA:
						CREATE_DIALOG_OBJECT (DlgRes_P, SIZEOF(DlgRes_P));
						break;
					default:
						
						CREATE_DIALOG_OBJECT (DlgRes, SIZEOF(DlgRes));
						CREATE_GLOBAL_BUTTON (SysButRes_MAIN);
						break;		
				}

				m_lTabFlag = 0;
				SetBtnImg();	
				SetStyle();
				SetCombo();
				
				if( m_lSearchFlag == 1 )
				{
					m_lSearchFlag = 0;
					Search_Info();
				}
				else
				{
					if( g_lDataflag == 1 )
					{
						g_lDataflag = 0;
						m_lTabFlag = 0;
					}
					ReDraw();
					HistoryDraw();
				}
				
				break;
			case INIT_CALCUL:
				switch (theDevInfo.m_nType)
				{
					case FAMILY_PDA:
						CREATE_DIALOG_OBJECT (DlgRes_Calcul_P, SIZEOF(DlgRes_Calcul_P));
						break;
					default:
						CREATE_GLOBAL_BUTTON (SysButRes_MAIN);
						CREATE_DIALOG_OBJECT (DlgRes_Calcul, SIZEOF(DlgRes_Calcul));
						break;		
				}
				m_lTabFlag = 1;
				SetBtnImg();	
				SetStyle();
				SetCombo();

				if( m_lSearchFlag == 1 )
				{
					m_lSearchFlag = 0;
					Search_Info();
				}
				else
				{
					if( g_lDataflag == 2 )
					{
						g_lDataflag = 0;
						m_lTabFlag = 1;
					}
					ReDraw();
					HistoryDraw();
					PageDraw();
				}
				break;
			case INIT_TELSEARCH:
				switch (theDevInfo.m_nType)
				{
					case FAMILY_PDA:
						CREATE_DIALOG_OBJECT (DlgRes_Tel_P, SIZEOF(DlgRes_Tel_P));
						break;
					default:
						CREATE_GLOBAL_BUTTON (SysButRes_MAIN);
						CREATE_DIALOG_OBJECT (DlgRes_Tel, SIZEOF(DlgRes_Tel));
						break;		
				}

				//테이블 클리어
				Mem_Set( (byte*)m_szCnt_page_T, 0x00, sizeof(m_szCnt_page_T) );
				Mem_Set((byte*)m_szTableBuf_T+(COL_T*MAXCHAR_T), 0x00, sizeof(m_szTableBuf_T)-(COL_T*MAXCHAR_T));
				g_Sql_DirectExecute("DELETE FROM RCV_RELEASE");
				EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA13), "");
				EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA14), "");
				EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA15), "");
				EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA16), "");
				
				SetBtnImg();	
				SetStyle();
				SetCombo();
				TelDraw();
				break;
			case INIT_JIBUNSEARCH:
				switch (theDevInfo.m_nType)
				{
					case FAMILY_PDA:
						CREATE_DIALOG_OBJECT (DlgRes_JibunSearch_P, SIZEOF(DlgRes_JibunSearch_P));
						break;
					default:
						CREATE_GLOBAL_BUTTON (SysButRes_MAIN);
						CREATE_DIALOG_OBJECT (DlgRes_JibunSearch, SIZEOF(DlgRes_JibunSearch));
						break;		
				}

				//테이블 클리어
				Mem_Set( (byte*)m_szCnt_page_A, 0x00, sizeof(m_szCnt_page_A) );
				Mem_Set((byte*)m_szTableBuf_A+(COL_A*MAXCHAR_A), 0x00, sizeof(m_szTableBuf_A)-(COL_A*MAXCHAR_A));
				
				SetBtnImg();	
				SetStyle();
				SetCombo();
				AddrDraw();
				break;
			case INIT_TGTSEARCH:
				switch (theDevInfo.m_nType)
				{
					case FAMILY_PDA:
						CREATE_DIALOG_OBJECT (DlgRes_TgtSearch_P, SIZEOF(DlgRes_TgtSearch_P));
						break;
					default:
						CREATE_GLOBAL_BUTTON (SysButRes_MAIN);
						CREATE_DIALOG_OBJECT (DlgRes_TgtSearch, SIZEOF(DlgRes_TgtSearch));
						break;		
				}

				SetBtnImg();	
				SetStyle();
				SetCombo();
				AddrDraw();
				break;
			case INIT_NEWSEARCH:
				switch (theDevInfo.m_nType)
				{
					case FAMILY_PDA:
						CREATE_DIALOG_OBJECT (DlgRes_NewSearch_P, SIZEOF(DlgRes_NewSearch_P));
						break;
					default:
						CREATE_GLOBAL_BUTTON (SysButRes_MAIN);
						CREATE_DIALOG_OBJECT (DlgRes_NewSearch, SIZEOF(DlgRes_NewSearch));
						break;		
				}

				SetBtnImg();	
				SetStyle();
				SetCombo();
				AddrDraw();
				break;
		}
	}

//------------------------------------------------------------------
	void	OnButton(long ID)
	{	
		long i = 0;
		char szPhonenum[20];
		char szPhonenum1[6];
		char szPhonenum2[6];
		char szPhonenum3[6];
	
		switch(ID)
		{
			case BID_SEARCH:
			case BID_CALSEARCH:
				if( ID == BID_SEARCH )
				{
					if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA1)) == 0 )
					{
						MessageBoxEx (CONFIRM_OK, "검색조건을 확인하세요.");
						return;
					}
				}
				else if( ID == BID_CALSEARCH )
				{
				 	if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA4)) == 0 )
					{
						MessageBoxEx (CONFIRM_OK, "검색조건을 확인하세요.");
						return;
					}
					EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA5), "");
				}
			
				Search_Info();
				break;
			case BID_ADDRSEARCH:
				Search_Info();
				break;
			case BID_TELSEARCH:
				if( m_lCondition == 3 )
				{
					//m_lCondition = 3 바코드 스캔
					Barcode();
					return;
				}
				else
				{
					Rcv_Tel();
				}
				break;
			case BID_TAB1:
				if( m_lCondition != 0 && m_bFirst != INIT_MAIN )
				{
					m_lTabFlag = 0;
					m_lCondition = 0;
					m_lSearchFlag = 0;
					ON_EXIT();
					OnInit(INIT_MAIN);
				}
				else if( m_lTabFlag != 0 && m_bFirst != INIT_MAIN )
				{
					Mem_Set((byte*) g_szCp_ddd, 0x00, sizeof( g_szCp_ddd) );
					Mem_Set((byte*) g_szCp_exn, 0x00, sizeof( g_szCp_exn) );
					Mem_Set((byte*) g_szCp_num, 0x00, sizeof( g_szCp_num) );
					Str_Cpy(g_szCp_ddd, EditCtrl_GetStr( Get_hDlgCtrlByID(CMB_DATA4)));
					Str_Cpy(g_szCp_exn, EditCtrl_GetStr( Get_hDlgCtrlByID(EDT_DATA6)));
					Str_Cpy(g_szCp_num, EditCtrl_GetStr( Get_hDlgCtrlByID(EDT_DATA7)));
					
					m_lTabFlag = 0;
					m_lCondition = 0;
					m_lSearchFlag = 0;
					ON_EXIT();
					OnInit(INIT_MAIN);
				}
				break;
			case BID_TAB2:
				if( m_lCondition != 0 && m_bFirst != INIT_CALCUL )
				{
					m_lTabFlag = 1;
					m_lCondition = 0;
					m_lSearchFlag = 0;
					m_lCalcul_Viewpage = 1;
					ON_EXIT();
					OnInit(INIT_CALCUL);
				}
				else if( m_lTabFlag != 1 &&  m_bFirst != INIT_CALCUL )
				{
					Mem_Set((byte*) g_szCp_ddd, 0x00, sizeof( g_szCp_ddd) );
					Mem_Set((byte*) g_szCp_exn, 0x00, sizeof( g_szCp_exn) );
					Mem_Set((byte*) g_szCp_num, 0x00, sizeof( g_szCp_num) );
					Str_Cpy(g_szCp_ddd, EditCtrl_GetStr( Get_hDlgCtrlByID(CMB_DATA2)));
					Str_Cpy(g_szCp_exn, EditCtrl_GetStr( Get_hDlgCtrlByID(EDT_DATA2)));
					Str_Cpy(g_szCp_num, EditCtrl_GetStr( Get_hDlgCtrlByID(EDT_DATA3)));

					m_lTabFlag = 1;
					m_lCondition = 0;
					m_lSearchFlag = 0;
					m_lCalcul_Viewpage = 1;
					ON_EXIT();
					OnInit(INIT_CALCUL);
				}
				break;
			case BID_ADDR:
				if( g_nAddrFlag == 0 )
				{
					g_nAddrFlag = 1;
					ButCtrl_SetText(Get_hDlgCtrlByID(BID_ADDR), "도로명");
				}
				else
				{
					g_nAddrFlag = 0;
					ButCtrl_SetText(Get_hDlgCtrlByID(BID_ADDR), "지번");
				}
				ReDraw();
				HistoryDraw();
				break;
			case BID_HISPREV:
				m_lpage_H--;
				if(m_lpage_H < 0)
				{
					m_lpage_H = 0;
					if(m_lTotpage_H > 0)
					{
						if( m_nActIndex_H < 0)
						{
							m_nActIndex_H = 0;
						}
					
						DlgTbl_SetActive(ID_HISLIST , m_nActIndex_H+1 );
						DlgTbl_SetRowColor(ID_HISLIST, m_nActIndex_H+1, TABLEACTIVE_COLOR);
					}
					break;
				}
				m_nActIndex_H = 0;
				ReDraw();
				HistoryDraw();
				break;
			case BID_HISNEXT:
				m_lpage_H++ ;
				if( m_lpage_H > m_lTotpage_H-1 )
				{
					m_lpage_H = m_lTotpage_H-1;
					if(m_lpage_H < 0)
					{
						m_lpage_H = 0;
					}
					if(m_lTotpage_H > 0)
					{
						if( m_nActIndex_H < 0 )
						{
							m_nActIndex_H = 0;
						}
					
						DlgTbl_SetActive(ID_HISLIST , m_nActIndex_H+1 );
						DlgTbl_SetRowColor(ID_HISLIST, m_nActIndex_H+1, TABLEACTIVE_COLOR);
					}
					break;
				}
				m_nActIndex_H = 0;
				ReDraw();
				HistoryDraw();
				break;
			case BID_SND:
				if( Str_Len(g_szUSE_CONT_NUM) < 1 )
				{
					MessageBoxEx (CONFIRM_OK, "대상을 검색하세요.");
				}
				else
				{
					Mem_Set( (byte*)szPhonenum, 0x00, sizeof(szPhonenum) );
					Mem_Set( (byte*)szPhonenum1, 0x00, sizeof(szPhonenum1) );
					Mem_Set( (byte*)szPhonenum2, 0x00, sizeof(szPhonenum2) );
					Mem_Set( (byte*)szPhonenum3, 0x00, sizeof(szPhonenum3) );
					Str_Cpy(szPhonenum, EditCtrl_GetStr( Get_hDlgCtrlByID(CMB_DATA2)));
					Str_Cat(szPhonenum, EditCtrl_GetStr( Get_hDlgCtrlByID(EDT_DATA2)));
					Str_Cat(szPhonenum, EditCtrl_GetStr( Get_hDlgCtrlByID(EDT_DATA3)));
					i = Analy_Phone(szPhonenum, szPhonenum1, szPhonenum2, szPhonenum3);
					if(i > 0)
					{
						Rcv_History();
					}
					else
					{
						MessageBoxEx (CONFIRM_OK, "수신번호를 확인하세요.");
					}
				}
				break;
			case GID_HOME:
				break;
			case GID_MENU:
				break;
			case GID_KEYBOARD:
				g_SHOW_SIP();
				break;
			case GID_SCREEN:
				g_MOVE_DLG(400);
				break;
			case GID_CMMNWK:
				break;				
			case GID_PREV:
				//Card_Move("GM_MENU");
				Card_Move("MENU");
				break;	
			case GID_VMEXIT:
				g_Exit();
				break;
//요금계산
			case BID_CALADDR:
				if( g_nAddrFlag == 0 )
				{
					g_nAddrFlag = 1;
					ButCtrl_SetText(Get_hDlgCtrlByID(BID_CALADDR), "도로명");
				}
				else
				{
					g_nAddrFlag = 0;
					ButCtrl_SetText(Get_hDlgCtrlByID(BID_CALADDR), "지번");
				}
				ReDraw();
				HistoryDraw();
				break;
			case BID_CALCUL:
				//if( Str_Len(g_szUSE_CONT_NUM_Fee) < 1 )
				if( Str_Len(g_szUSE_CONT_NUM) < 1 )
				{
					MessageBoxEx (CONFIRM_OK, "대상을 검색해주세요.");
				}
				else
				{
					if( Str_Len(EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA5))) > 0 )
					{
						Rcv64302();
					}
					else
					{
						MessageBoxEx (CONFIRM_OK, "현재지침을 입력해주세요.");
					}
				}
				break;
			case BID_ONE:
				m_lCalcul_Viewpage = 1;
				PageDraw();
				break;
			case BID_TWO:
				m_lCalcul_Viewpage = 2;
				PageDraw();
				break;
			case BID_THREE:
				m_lCalcul_Viewpage = 3;
				PageDraw();
				break;
			case BID_FOUR:
				m_lCalcul_Viewpage = 4;
				PageDraw();
				break;
			case BID_FIVE:
				m_lCalcul_Viewpage = 5;
				PageDraw();
				break;

			case BID_CALSND:
				//if( Str_Len(g_szUSE_CONT_NUM_Fee) < 1 )
				if( Str_Len(g_szUSE_CONT_NUM) < 1 )
				{
					MessageBoxEx (CONFIRM_OK, "대상을 검색해주세요.");
				}
				else if( g_lPAYFlag != 1 )
				{
					MessageBoxEx (CONFIRM_OK, "요금계산을 진행해주세요.");
				}
				else
				{
					Mem_Set( (byte*)szPhonenum, 0x00, sizeof(szPhonenum) );
					Mem_Set( (byte*)szPhonenum1, 0x00, sizeof(szPhonenum1) );
					Mem_Set( (byte*)szPhonenum2, 0x00, sizeof(szPhonenum2) );
					Mem_Set( (byte*)szPhonenum3, 0x00, sizeof(szPhonenum3) );
					Str_Cpy(szPhonenum, EditCtrl_GetStr( Get_hDlgCtrlByID(CMB_DATA4)));
					Str_Cat(szPhonenum, EditCtrl_GetStr( Get_hDlgCtrlByID(EDT_DATA6)));
					Str_Cat(szPhonenum, EditCtrl_GetStr( Get_hDlgCtrlByID(EDT_DATA7)));
					i = Analy_Phone(szPhonenum, g_szCp_ddd, g_szCp_exn, g_szCp_num);
					if(i > 0)
					{
						Mem_Set( (byte*)stFee_Calcul.CP_DDD, 0x00, sizeof(stFee_Calcul.CP_DDD) );
						Mem_Set( (byte*)stFee_Calcul.CP_EXN, 0x00, sizeof(stFee_Calcul.CP_EXN) );
						Mem_Set( (byte*)stFee_Calcul.CP_NUM, 0x00, sizeof(stFee_Calcul.CP_NUM) );
						Str_Cpy(stFee_Calcul.CP_DDD, EditCtrl_GetStr( Get_hDlgCtrlByID(CMB_DATA4)));
						Str_Cpy(stFee_Calcul.CP_EXN, EditCtrl_GetStr( Get_hDlgCtrlByID(EDT_DATA6)));
						Str_Cpy(stFee_Calcul.CP_NUM, EditCtrl_GetStr( Get_hDlgCtrlByID(EDT_DATA7)));
						
						g_lDataflag = 2;
						g_nSmsFlag = 4;
						Card_Move("GM_SMSSND");
					}
					else
					{
						MessageBoxEx (CONFIRM_OK, "수신번호를 확인하세요.");
					}
				}
				break;

//전화번호 검색
			case BID_TELPREV:
				m_lpage_T--;
				if(m_lpage_T < 0)
				{
					m_lpage_T = 0;
					if(m_lTotpage_T > 0)
					{
						if( m_nActIndex_T < 0)
						{
							m_nActIndex_T = 0;
						}
					
						DlgTbl_SetActive(ID_TELLIST , m_nActIndex_T+1 );
						DlgTbl_SetRowColor(ID_TELLIST, m_nActIndex_T+1, TABLEACTIVE_COLOR);
					}
					break;
				}
				m_nActIndex_T = 0;
				TelDraw();
				break;			
			case BID_TELNEXT:
				m_lpage_T++ ;
				if( m_lpage_T > m_lTotpage_T-1 )
				{
					m_lpage_T = m_lTotpage_T-1;
					if(m_lpage_T < 0)
					{
						m_lpage_T = 0;
					}
					if(m_lTotpage_T > 0)
					{
						if( m_nActIndex_T < 0 )
						{
							m_nActIndex_T = 0;
						}
					
						DlgTbl_SetActive(ID_TELLIST , m_nActIndex_T+1 );
						DlgTbl_SetRowColor(ID_TELLIST, m_nActIndex_T+1, TABLEACTIVE_COLOR);
					}
					break;
				}
				m_nActIndex_T = 0;
				TelDraw();
				break;
//주소검색
			case BID_JIBUN:
				if( m_bFirst == INIT_TGTSEARCH || m_bFirst == INIT_NEWSEARCH )
				{
					ON_EXIT();
					OnInit(INIT_JIBUNSEARCH);
				}
				break;
			case BID_ROADNM:
				if( m_bFirst == INIT_JIBUNSEARCH || m_bFirst == INIT_TGTSEARCH )
				{
					ON_EXIT();
					OnInit(INIT_NEWSEARCH);
				}
				break;
			case BID_TOGETHER:
				if( m_bFirst == INIT_JIBUNSEARCH || m_bFirst == INIT_NEWSEARCH )
				{
					ON_EXIT();
					OnInit(INIT_TGTSEARCH);
				}
				break;
			case BID_CANCEL:
				break;
			case BID_ADDRPREV:
				m_lpage_A--;
				if(m_lpage_A < 0)
				{
					m_lpage_A = 0;
					if(m_lTotpage_A > 0)
					{
						if( m_nActIndex_A < 0)
						{
							m_nActIndex_A = 0;
						}
					
						DlgTbl_SetActive(ID_ADDRLIST , m_nActIndex_A+1 );
						DlgTbl_SetRowColor(ID_ADDRLIST, m_nActIndex_A+1, TABLEACTIVE_COLOR);
					}
					break;
				}
				m_nActIndex_A = 0;
				AddrDraw();
				break;
			case BID_ADDRNEXT:
				m_lpage_A++ ;
				if( m_lpage_A > m_lTotpage_A-1 )
				{
					m_lpage_A = m_lTotpage_A-1;
					if(m_lpage_A < 0)
					{
						m_lpage_A = 0;
					}
					if(m_lTotpage_A > 0)
					{
						if( m_nActIndex_A < 0 )
						{
							m_nActIndex_A = 0;
						}
					
						DlgTbl_SetActive(ID_ADDRLIST , m_nActIndex_A+1 );
						DlgTbl_SetRowColor(ID_ADDRLIST, m_nActIndex_A+1, TABLEACTIVE_COLOR);
					}
					break;
				}
				m_nActIndex_A = 0;
				AddrDraw();
				break;
		}
	}		

//-------------------------------------------------------------------
	void	OnChar(long nChar)
	{
		char szTmp[20];

		if( m_bFirst == INIT_MAIN )
		{
			//숫자만 입력 가능
			if( Get_iDlgCtrlByID(EDT_DATA1) == m_lEditCtrlIndex ||
			    Get_iDlgCtrlByID(EDT_DATA2) == m_lEditCtrlIndex ||
			    Get_iDlgCtrlByID(EDT_DATA3) == m_lEditCtrlIndex )
			{
				if( (nChar < 48 ||  nChar > 57) )
				{
					MessageBoxEx (CONFIRM_OK, "숫자만 입력가능합니다.");
					EditCtrl_SetStr(Get_hDlgCtrlByIndex(m_lEditCtrlIndex), "");
					return;
				}
			}
			
			if( Get_iDlgCtrlByID(EDT_DATA1) == m_lEditCtrlIndex )
			{
				Mem_Set( (byte*)szTmp, 0x00, sizeof(szTmp) );
				Str_Cpy(szTmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA1)));
				Str_Chg(szTmp, STRCHG_DEL_NONDIGIT);
				
				if( Str_Len(szTmp) == 5 )
				{
					Str_Cat(szTmp, "-");
					EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA1), szTmp);
				}
			}
			
			if( Get_iDlgCtrlByID(EDT_DATA2) == m_lEditCtrlIndex && Str_Len(EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA2))) == 4 )
			{
				m_lEditCtrlIndex = Get_iDlgCtrlByID(EDT_DATA3);
				Dialog_SetActiveCtrl(this->m_hDlg, m_lEditCtrlIndex);
			}
		}
		else if( m_bFirst == INIT_CALCUL )
		{
			//숫자만 입력 가능
			if( Get_iDlgCtrlByID(EDT_DATA4) == m_lEditCtrlIndex ||
			    Get_iDlgCtrlByID(EDT_DATA5) == m_lEditCtrlIndex ||
			    Get_iDlgCtrlByID(EDT_DATA6) == m_lEditCtrlIndex ||
			    Get_iDlgCtrlByID(EDT_DATA7) == m_lEditCtrlIndex )
			{
				if( (nChar < 48 ||  nChar > 57) )
				{
					MessageBoxEx (CONFIRM_OK, "숫자만 입력가능합니다.");
					EditCtrl_SetStr(Get_hDlgCtrlByIndex(m_lEditCtrlIndex), "");
					return;
				}
			}

			if( Get_iDlgCtrlByID(EDT_DATA4) == m_lEditCtrlIndex )
			{
				Mem_Set( (byte*)szTmp, 0x00, sizeof(szTmp) );
				Str_Cpy(szTmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA4)));
				Str_Chg(szTmp, STRCHG_DEL_NONDIGIT);
				
				if( Str_Len(szTmp) == 5 )
				{
					Str_Cat(szTmp, "-");
					EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA4), szTmp);
				}
			}

			if( Get_iDlgCtrlByID(EDT_DATA6) == m_lEditCtrlIndex && Str_Len(EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA6))) == 4 )
			{
				m_lEditCtrlIndex = Get_iDlgCtrlByID(EDT_DATA7);
				Dialog_SetActiveCtrl(this->m_hDlg, m_lEditCtrlIndex);
			}
		}
		else if( m_bFirst == INIT_TELSEARCH )
		{
			//숫자만 입력 가능
			if( Get_iDlgCtrlByID(EDT_DATA13) == m_lEditCtrlIndex ||
			    Get_iDlgCtrlByID(EDT_DATA14) == m_lEditCtrlIndex ||
			    Get_iDlgCtrlByID(EDT_DATA15) == m_lEditCtrlIndex )
			{
				if( (nChar < 48 ||  nChar > 57) )
				{
					MessageBoxEx (CONFIRM_OK, "숫자만 입력가능합니다.");
					EditCtrl_SetStr(Get_hDlgCtrlByIndex(m_lEditCtrlIndex), "");
					return;
				}
			}

			if( Get_iDlgCtrlByID(EDT_DATA13) == m_lEditCtrlIndex && Str_Len(EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA13))) == 3 )
			{
				m_lEditCtrlIndex = Get_iDlgCtrlByID(EDT_DATA14);
				Dialog_SetActiveCtrl(this->m_hDlg, m_lEditCtrlIndex);
			}
			else if( Get_iDlgCtrlByID(EDT_DATA14) == m_lEditCtrlIndex && Str_Len(EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA14))) == 4 )
			{
				m_lEditCtrlIndex = Get_iDlgCtrlByID(EDT_DATA15);
				Dialog_SetActiveCtrl(this->m_hDlg, m_lEditCtrlIndex);
			}
		}
		else if( m_bFirst == INIT_JIBUNSEARCH )
		{
			//숫자만 입력 가능
			if( Get_iDlgCtrlByID(EDT_DATA8) == m_lEditCtrlIndex ||
			    Get_iDlgCtrlByID(EDT_DATA9) == m_lEditCtrlIndex )
			{
				if( (nChar < 48 ||  nChar > 57) )
				{
					MessageBoxEx (CONFIRM_OK, "숫자만 입력가능합니다.");
					EditCtrl_SetStr(Get_hDlgCtrlByIndex(m_lEditCtrlIndex), "");
					return;
				}
			}
		}
		else if( m_bFirst == INIT_TGTSEARCH )
		{
			//숫자만 입력 가능
			if( Get_iDlgCtrlByID(EDT_DATA10) == m_lEditCtrlIndex )
			{
				if( (nChar < 48 ||  nChar > 57) )
				{
					MessageBoxEx (CONFIRM_OK, "숫자만 입력가능합니다.");
					EditCtrl_SetStr(Get_hDlgCtrlByIndex(m_lEditCtrlIndex), "");
					return;
				}
			}
		}
		else if( m_bFirst == INIT_NEWSEARCH )
		{
			//숫자만 입력 가능
			if( Get_iDlgCtrlByID(EDT_DATA11) == m_lEditCtrlIndex ||
			    Get_iDlgCtrlByID(EDT_DATA12) == m_lEditCtrlIndex )
			{
				if( (nChar < 48 ||  nChar > 57) )
				{
					MessageBoxEx (CONFIRM_OK, "숫자만 입력가능합니다.");
					EditCtrl_SetStr(Get_hDlgCtrlByIndex(m_lEditCtrlIndex), "");
					return;
				}
			}
		}
	}


	//-------------------------------------------------------------------------
	void	OnPointing(long nAction, long X, long Y)
	{
		long lActiveIndex = -1;

		lActiveIndex = Dialog_GetActiveCtrlIndex(this->m_hDlg);	
		
		if( m_bFirst == INIT_MAIN )
		{
			if( POINTING_UP == nAction )
			{
				m_lEditCtrlIndex = lActiveIndex;
				
				if( theDevInfo.m_nType > FAMILY_PDA )
				{
					if( X > DMS_X(STARTX+350) && X < DMS_X(STARTX+800) && Y > DMS_Y(STARTY+135) && Y < DMS_Y(STARTY+205)  )
					{
						if( Get_iDlgCtrlByID(EDT_DATA1) == lActiveIndex )	
						{
							g_Dlgflag = 1;
							g_MOVE_DLG(1);

							ShowSip(FALSE);
							g_Sipflag = 0;
							
							//SetKeyMode(KEYMODE_NUMBER);
			
							ShowSip(TRUE);
							g_Sipflag = 1;
						}
					}
					else if( X > DMS_X(STARTX+300) && X < DMS_X(STARTX+550) && Y > DMS_Y(STARTY+835-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+899-(g_Dlgflag*400)) ||
					         X > DMS_X(STARTX+550) && X < DMS_X(STARTX+800) && Y > DMS_Y(STARTY+835-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+899-(g_Dlgflag*400)) )
					{
						if( Get_iDlgCtrlByID(EDT_DATA2) == lActiveIndex ||
						    Get_iDlgCtrlByID(EDT_DATA3) == lActiveIndex )
						{
							g_Dlgflag = 0;
							g_MOVE_DLG(400);
						
							ShowSip(FALSE);
							g_Sipflag = 0;
							
							//SetKeyMode(KEYMODE_NUMBER);
			
						//	ShowSip(TRUE);
						//	g_Sipflag = 1;
						}
					}

					else
					{
						if( Get_iDlgCtrlByID(EDT_DATA2) == lActiveIndex ||
						    Get_iDlgCtrlByID(EDT_DATA3) == lActiveIndex )
						{
							if( X > DMS_X(0) && X < DMS_X(333) && Y > DMS_Y(STARTY+940-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1030-(g_Dlgflag*400))  )
							{
								if( g_Dlgflag == 1 )
								{
									ON_CHAR( '1' );
									VM_PlaySound(CLICKSOUND);
								}
							}
							else if( X > DMS_X(333) && X < DMS_X(666) && Y > DMS_Y(STARTY+940-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1030-(g_Dlgflag*400)) )
							{
								if( g_Dlgflag == 1 )
								{
									ON_CHAR( '2' );
									VM_PlaySound(CLICKSOUND);
								}
							}
							else if( X > DMS_X(666) && X < DMS_X(1000) && Y > DMS_Y(STARTY+940-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1030-(g_Dlgflag*400)) )
							{
								if( g_Dlgflag == 1 )
								{
									ON_CHAR( '3' );
									VM_PlaySound(CLICKSOUND);
								}
							}
							else if( X > DMS_X(0) && X < DMS_X(333) && Y > DMS_Y(STARTY+1030-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1120-(g_Dlgflag*400)) )
							{
								if( g_Dlgflag == 1 )
								{
									ON_CHAR( '4' );
									VM_PlaySound(CLICKSOUND);
								}
							}
							else if( X > DMS_X(333) && X < DMS_X(666) && Y > DMS_Y(STARTY+1030-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1120-(g_Dlgflag*400)) )
							{
								if( g_Dlgflag == 1 )
								{
									ON_CHAR( '5' );
									VM_PlaySound(CLICKSOUND);
								}
							}
							else if( X > DMS_X(666) && X < DMS_X(1000) && Y > DMS_Y(STARTY+1030-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1120-(g_Dlgflag*400)) )
							{
								if( g_Dlgflag == 1 )
								{
									ON_CHAR( '6' );
									VM_PlaySound(CLICKSOUND);
								}
							}
							else if( X > DMS_X(0) && X < DMS_X(333) && Y > DMS_Y(STARTY+1120-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1210-(g_Dlgflag*400)) )
							{
								if( g_Dlgflag == 1 )
								{
									ON_CHAR( '7' );
									VM_PlaySound(CLICKSOUND);
								}
							}
							else if( X > DMS_X(333) && X < DMS_X(666) && Y > DMS_Y(STARTY+1120-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1210-(g_Dlgflag*400)) )
							{
								if( g_Dlgflag == 1 )
								{
									ON_CHAR( '8' );
									VM_PlaySound(CLICKSOUND);
								}
							}
							else if( X > DMS_X(666) && X < DMS_X(1000) && Y > DMS_Y(STARTY+1120-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1210-(g_Dlgflag*400)) )
							{
								if( g_Dlgflag == 1 )
								{
									ON_CHAR( '9' );
									VM_PlaySound(CLICKSOUND);
								}
							}
							else if( X > DMS_X(333) && X < DMS_X(666) && Y > DMS_Y(STARTY+1210-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1300-(g_Dlgflag*400)) )
							{
								if( g_Dlgflag == 1 )
								{
									ON_CHAR( '0' );
									VM_PlaySound(CLICKSOUND);
								}
							}
							else if( X > DMS_X(666) && X < DMS_X(1000) && Y > DMS_Y(STARTY+1210-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1300-(g_Dlgflag*400)) )
							{
								if( g_Dlgflag == 1 )
								{
									ON_KEY( 5 );
									VM_PlaySound(CLICKSOUND);
								}
							}
							else
							{
									g_Dlgflag = 1;
									g_MOVE_DLG(1);
								
									ShowSip(FALSE);
									g_Sipflag = 0;
							}
						}
						else
						{
							g_Dlgflag = 1;
							g_MOVE_DLG(1);
						
							ShowSip(FALSE);
							g_Sipflag = 0;
						}
					}
				}
				
				ON_DRAW();
			}
		}
		else if( m_bFirst == INIT_CALCUL )
		{
			if( POINTING_UP == nAction )
			{
				m_lEditCtrlIndex = lActiveIndex;
				
				if( theDevInfo.m_nType > FAMILY_PDA )
				{
					if( X > DMS_X(STARTX+350) && X < DMS_X(STARTX+800) && Y > DMS_Y(STARTY+135) && Y < DMS_Y(STARTY+200) )
					{
						if( Get_iDlgCtrlByID(EDT_DATA4) == lActiveIndex  )	
						{
							g_Dlgflag = 1;
							g_MOVE_DLG(1);

							ShowSip(FALSE);
							g_Sipflag = 0;
							
							//SetKeyMode(KEYMODE_NUMBER);
			
							ShowSip(TRUE);
							g_Sipflag = 1;
						}
					}
					else if( X > DMS_X(STARTX+230) && X < DMS_X(STARTX+450) && Y > DMS_Y(STARTY+420-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+480-(g_Dlgflag*400)) ||
							 X > DMS_X(STARTX+350) && X < DMS_X(STARTX+550) && Y > DMS_Y(STARTY+835-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+899-(g_Dlgflag*400)) ||
                             X > DMS_X(STARTX+550) && X < DMS_X(STARTX+750) && Y > DMS_Y(STARTY+835-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+899-(g_Dlgflag*400)) )
					{
						if( Get_iDlgCtrlByID(EDT_DATA5) == lActiveIndex ||
							Get_iDlgCtrlByID(EDT_DATA6) == lActiveIndex ||
						    Get_iDlgCtrlByID(EDT_DATA7) == lActiveIndex )	
						{
							g_Dlgflag = 0;
							g_MOVE_DLG(400);
						
							ShowSip(FALSE);
							g_Sipflag = 0;
							
							//SetKeyMode(KEYMODE_NUMBER);
			
						//	ShowSip(TRUE);
						//	g_Sipflag = 1;
						}
					}
					else
					{
						if( Get_iDlgCtrlByID(EDT_DATA5) == lActiveIndex ||
							Get_iDlgCtrlByID(EDT_DATA6) == lActiveIndex ||
						    Get_iDlgCtrlByID(EDT_DATA7) == lActiveIndex )	
						{
							if( X > DMS_X(0) && X < DMS_X(333) && Y > DMS_Y(STARTY+940-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1030-(g_Dlgflag*400))  )
							{
								if( g_Dlgflag == 1 )
								{
									ON_CHAR( '1' );
									VM_PlaySound(CLICKSOUND);
								}
							}
							else if( X > DMS_X(333) && X < DMS_X(666) && Y > DMS_Y(STARTY+940-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1030-(g_Dlgflag*400)) )
							{
								if( g_Dlgflag == 1 )
								{
									ON_CHAR( '2' );
									VM_PlaySound(CLICKSOUND);
								}
							}
							else if( X > DMS_X(666) && X < DMS_X(1000) && Y > DMS_Y(STARTY+940-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1030-(g_Dlgflag*400)) )
							{
								if( g_Dlgflag == 1 )
								{
									ON_CHAR( '3' );
									VM_PlaySound(CLICKSOUND);
								}
							}
							else if( X > DMS_X(0) && X < DMS_X(333) && Y > DMS_Y(STARTY+1030-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1120-(g_Dlgflag*400)) )
							{
								if( g_Dlgflag == 1 )
								{
									ON_CHAR( '4' );
									VM_PlaySound(CLICKSOUND);
								}
							}
							else if( X > DMS_X(333) && X < DMS_X(666) && Y > DMS_Y(STARTY+1030-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1120-(g_Dlgflag*400)) )
							{
								if( g_Dlgflag == 1 )
								{
									ON_CHAR( '5' );
									VM_PlaySound(CLICKSOUND);
								}
							}
							else if( X > DMS_X(666) && X < DMS_X(1000) && Y > DMS_Y(STARTY+1030-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1120-(g_Dlgflag*400)) )
							{
								if( g_Dlgflag == 1 )
								{
									ON_CHAR( '6' );
									VM_PlaySound(CLICKSOUND);
								}
							}
							else if( X > DMS_X(0) && X < DMS_X(333) && Y > DMS_Y(STARTY+1120-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1210-(g_Dlgflag*400)) )
							{
								if( g_Dlgflag == 1 )
								{
									ON_CHAR( '7' );
									VM_PlaySound(CLICKSOUND);
								}
							}
							else if( X > DMS_X(333) && X < DMS_X(666) && Y > DMS_Y(STARTY+1120-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1210-(g_Dlgflag*400)) )
							{
								if( g_Dlgflag == 1 )
								{
									ON_CHAR( '8' );
									VM_PlaySound(CLICKSOUND);
								}
							}
							else if( X > DMS_X(666) && X < DMS_X(1000) && Y > DMS_Y(STARTY+1120-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1210-(g_Dlgflag*400)) )
							{
								if( g_Dlgflag == 1 )
								{
									ON_CHAR( '9' );
									VM_PlaySound(CLICKSOUND);
								}
							}
							else if( X > DMS_X(333) && X < DMS_X(666) && Y > DMS_Y(STARTY+1210-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1300-(g_Dlgflag*400)) )
							{
								if( g_Dlgflag == 1 )
								{
									ON_CHAR( '0' );
									VM_PlaySound(CLICKSOUND);
								}
							}
							else if( X > DMS_X(666) && X < DMS_X(1000) && Y > DMS_Y(STARTY+1210-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1300-(g_Dlgflag*400)) )
							{
								if( g_Dlgflag == 1 )
								{
									ON_KEY( 5 );
									VM_PlaySound(CLICKSOUND);
								}
							}
							else
							{
									g_Dlgflag = 1;
									g_MOVE_DLG(1);
								
									ShowSip(FALSE);
									g_Sipflag = 0;
							}
						}
						else
						{
							g_Dlgflag = 1;
							g_MOVE_DLG(1);
						
							ShowSip(FALSE);
							g_Sipflag = 0;
						}
					}
				}
				
				ON_DRAW();
			}
		}
		else if( m_bFirst == INIT_TELSEARCH )
		{
			if( POINTING_UP == nAction )
			{
				m_lEditCtrlIndex = lActiveIndex;
				
				if( theDevInfo.m_nType > FAMILY_PDA )
				{
					if( X > DMS_X(STARTX+350) && X < DMS_X(STARTX+1000) && Y > DMS_Y(STARTY+135) && Y < DMS_Y(STARTY+205)  )
					{
						if( Get_iDlgCtrlByID(EDT_DATA13) == lActiveIndex ||
						    Get_iDlgCtrlByID(EDT_DATA14) == lActiveIndex ||
						    Get_iDlgCtrlByID(EDT_DATA15) == lActiveIndex ||
						    Get_iDlgCtrlByID(EDT_DATA16) == lActiveIndex )	
						{
							g_Dlgflag = 1;
							g_MOVE_DLG(1);
	
							ShowSip(FALSE);
							g_Sipflag = 0;
							
							//SetKeyMode(KEYMODE_NUMBER);
			
							ShowSip(TRUE);
							g_Sipflag = 1;
						}
					}
					else
					{
						g_Dlgflag = 1;
						g_MOVE_DLG(1);
					
						ShowSip(FALSE);
						g_Sipflag = 0;
					}
				}
			
				ON_DRAW();
			}
		}
		else if( m_bFirst == INIT_JIBUNSEARCH )
		{
			if( POINTING_UP == nAction )
			{
				m_lEditCtrlIndex = lActiveIndex;
				
				if( theDevInfo.m_nType > FAMILY_PDA )
				{
					if( X > DMS_X(STARTX+200) && X < DMS_X(STARTX+520) && Y > DMS_Y(STARTY+345) && Y < DMS_Y(STARTY+415) ||
                        X > DMS_X(STARTX+650) && X < DMS_X(STARTX+1000) && Y > DMS_Y(STARTY+345) && Y < DMS_Y(STARTY+415) )
					{
						if( Get_iDlgCtrlByID(EDT_DATA8) == lActiveIndex ||
						    Get_iDlgCtrlByID(EDT_DATA9) == lActiveIndex )	
						{
							g_Dlgflag = 1;
							g_MOVE_DLG(1);

							ShowSip(FALSE);
							g_Sipflag = 0;
							
							//SetKeyMode(KEYMODE_NUMBER);
			
							ShowSip(TRUE);
							g_Sipflag = 1;
						}
					}
					else
					{
						g_Dlgflag = 1;
						g_MOVE_DLG(1);
					
						ShowSip(FALSE);
						g_Sipflag = 0;
					}
				}
				
				ON_DRAW();
			}
		}
		else if( m_bFirst == INIT_TGTSEARCH )
		{
			if( POINTING_UP == nAction )
			{
				m_lEditCtrlIndex = lActiveIndex;
				
				if( theDevInfo.m_nType > FAMILY_PDA )
				{
					if( X > DMS_X(STARTX+800) && X < DMS_X(STARTX+1000) && Y > DMS_Y(STARTY+345) && Y < DMS_Y(STARTY+415) )
					{
						if( Get_iDlgCtrlByID(EDT_DATA10) == lActiveIndex )	
						{
							g_Dlgflag = 1;
							g_MOVE_DLG(1);

							ShowSip(FALSE);
							g_Sipflag = 0;
							
							//SetKeyMode(KEYMODE_NUMBER);
			
							ShowSip(TRUE);
							g_Sipflag = 1;
						}
					}
					else
					{
						g_Dlgflag = 1;
						g_MOVE_DLG(1);
					
						ShowSip(FALSE);
						g_Sipflag = 0;
					}
				}
				
				ON_DRAW();
			}
		}
		else if( m_bFirst == INIT_NEWSEARCH )
		{
			if( POINTING_UP == nAction )
			{
				m_lEditCtrlIndex = lActiveIndex;
				
				if( theDevInfo.m_nType > FAMILY_PDA )
				{
					if( X > DMS_X(STARTX+200) && X < DMS_X(STARTX+500) && Y > DMS_Y(STARTY+345) && Y < DMS_Y(STARTY+415) ||
                        X > DMS_X(STARTX+700) && X < DMS_X(STARTX+1000) && Y > DMS_Y(STARTY+345) && Y < DMS_Y(STARTY+415) )
					{
						if( Get_iDlgCtrlByID(EDT_DATA11) == lActiveIndex ||
						    Get_iDlgCtrlByID(EDT_DATA12) == lActiveIndex )	
						{
							g_Dlgflag = 1;
							g_MOVE_DLG(1);

							ShowSip(FALSE);
							g_Sipflag = 0;
							
							//SetKeyMode(KEYMODE_NUMBER);
			
							ShowSip(TRUE);
							g_Sipflag = 1;
						}
					}
					else
					{
						g_Dlgflag = 1;
						g_MOVE_DLG(1);
					
						ShowSip(FALSE);
						g_Sipflag = 0;
					}
				}
				
				ON_DRAW();
			}
		} 
	}

//──────────────────────────────────────────────
	void	OnSelect(long Index)
	{
		long index = -1;
		char szcmb[20];
		char sztmp[200];
		
		if( m_bFirst == INIT_MAIN )
		{
			if( Str_Cmp(EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA1)), "계약번호" ) == 0 )
			{
				m_lCondition = 0;
				//return;
			}
			else if( Str_Cmp(EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA1)), "전화번호" ) == 0 )
			{
				m_lCondition = 1;
				m_lSearchFlag = 0;
				
				ON_EXIT();
				OnInit(INIT_TELSEARCH);
				return;
			}
			else if( Str_Cmp(EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA1)), "주소" ) == 0 )
			{
				m_lCondition = 2;
				m_lSearchFlag = 0;
				
				ON_EXIT();
				OnInit(INIT_JIBUNSEARCH);
				return;
			}
			else if( Str_Cmp(EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA1)), "바코드" ) == 0 )
			{
				m_lCondition = 3;
				m_lSearchFlag = 0;
				
				ON_EXIT();
				OnInit(INIT_TELSEARCH);
				return;
			}
			else if( Str_Cmp(EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA1)), "기물번호" ) == 0 )
			{
				m_lCondition = 4;
				m_lSearchFlag = 0;
				
				ON_EXIT();
				OnInit(INIT_TELSEARCH);
				return;
			}
			
			//현재 TBL이 선택되었는지를 확인
			//if (DlgTbl_IsSelect(ID_HISLIST))
			//{
				// 현재 선택된 인덱스
			//	index = DlgTbl_GetActiveRow(ID_HISLIST);
				// 선택 인덱스와 기존 인덱스가 동일 할 경우
			//	if ( index-1 == m_nActIndex_H )
			//	{
			//		return;
			//	}
			//	else
			//	{
			//		m_nActIndex_H = index - 1;//선택된 INDEX 저장
				
					//청구년월
					//EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA9), DlgTbl_GetStr( ID_HISLIST, m_nActIndex_H, 0));
					//주소
					//EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA1), DlgTbl_GetStr( ID_HISLIST, m_nActIndex_H, 5));
					//성명/상호
					//EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA3), DlgTbl_GetStr( ID_HISLIST, m_nActIndex_H, 6));
					//미납합계
					//EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA5), DlgTbl_GetStr( ID_HISLIST, m_nActIndex_H, 7));
					//전화번호
					//EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA2), DlgTbl_GetStr( ID_HISLIST, m_nActIndex_H, 8));
					//EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA2), DlgTbl_GetStr( ID_HISLIST, m_nActIndex_H, 9));
					//EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA3), DlgTbl_GetStr( ID_HISLIST, m_nActIndex_H, 10));

			//		ON_DRAW();
			//	}
			//}
		}
		else if( m_bFirst == INIT_CALCUL )
		{
			if( Str_Cmp(EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA1)), "계약번호" ) == 0 )
			{
				m_lCondition = 0;
				return;
			}
			else if( Str_Cmp(EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA1)), "전화번호" ) == 0 )
			{
				m_lCondition = 1;
				m_lSearchFlag = 0;
				
				ON_EXIT();
				OnInit(INIT_TELSEARCH);
				return;
			}
			else if( Str_Cmp(EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA1)), "주소" ) == 0 )
			{
				m_lCondition = 2;
				m_lSearchFlag = 0;
				
				ON_EXIT();
				OnInit(INIT_JIBUNSEARCH);
				return;
			}
			else if( Str_Cmp(EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA1)), "바코드" ) == 0 )
			{
				m_lCondition = 3;
				m_lSearchFlag = 0;
				
				ON_EXIT();
				OnInit(INIT_TELSEARCH);
				return;
			}
			else if( Str_Cmp(EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA1)), "기물번호" ) == 0 )
			{
				m_lCondition = 4;
				m_lSearchFlag = 0;
				
				ON_EXIT();
				OnInit(INIT_TELSEARCH);
				return;
			}
		}
		else if( m_bFirst == INIT_TELSEARCH )
		{
			//현재 TBL이 선택되었는지를 확인
			if (DlgTbl_IsSelect(ID_TELLIST))
			{
				// 현재 선택된 인덱스
				index = DlgTbl_GetActiveRow(ID_TELLIST);
				// 선택 인덱스와 기존 인덱스가 동일 할 경우
				if ( index-1 == m_nActIndex_T )
				{
					m_lCondition = 0;
					m_lSearchFlag = 1;
	
					if( m_lTabFlag == 0 )
					{
						ON_EXIT();
						OnInit(INIT_MAIN);
					}
					else if( m_lTabFlag == 1 )
					{
						ON_EXIT();
						OnInit(INIT_CALCUL);
					}

					return;
				}
				else
				{
					m_nActIndex_T = index - 1;//선택된 INDEX 저장
				
					//처음 선택된 대상의 주소를 상단에 표시
					Mem_Set( (byte*)m_szUse_cont_num, 0x00, sizeof(m_szUse_cont_num) );
					Str_Cpy( m_szUse_cont_num, DlgTbl_GetStr( ID_TELLIST, m_nActIndex_T, 2));
				}
			}
			
			if( Str_Cmp(EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA1)), "계약번호" ) == 0 )
			{
				m_lCondition = 0;
				m_lSearchFlag = 0;

				if( m_lTabFlag == 0 )
				{
					ON_EXIT();
					OnInit(INIT_MAIN);
				}
				else if( m_lTabFlag == 1 )
				{
					ON_EXIT();
					OnInit(INIT_CALCUL);
				}
				return;
			}
			else if( Str_Cmp(EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA1)), "전화번호" ) == 0 )
			{
				if( m_lCondition != 1 )
				{
					Mem_Set( (byte*)m_szCnt_page_T, 0x00, sizeof(m_szCnt_page_T) );
					Mem_Set((byte*)m_szTableBuf_T+(COL_T*MAXCHAR_T), 0x00, sizeof(m_szTableBuf_T)-(COL_T*MAXCHAR_T));
					g_Sql_DirectExecute("DELETE FROM RCV_RELEASE");
					m_lCondition = 1;

					EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA13), "");
					EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA14), "");
					EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA15), "");
					EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA16), "");
					TelDraw();
				}
				return;
			}
			else if( Str_Cmp(EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA1)), "주소" ) == 0 )
			{
				m_lCondition = 2;
				m_lSearchFlag = 0;
				
				ON_EXIT();
				OnInit(INIT_JIBUNSEARCH);
				return;
			}
			else if( Str_Cmp(EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA1)), "바코드" ) == 0 )
			{
				if( m_lCondition != 3 )
				{
					Mem_Set( (byte*)m_szCnt_page_T, 0x00, sizeof(m_szCnt_page_T) );
					Mem_Set((byte*)m_szTableBuf_T+(COL_T*MAXCHAR_T), 0x00, sizeof(m_szTableBuf_T)-(COL_T*MAXCHAR_T));
					g_Sql_DirectExecute("DELETE FROM RCV_RELEASE");
					m_lCondition = 3;

					EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA13), "");
					EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA14), "");
					EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA15), "");
					EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA16), "");
					TelDraw();
				}
				return;
			}
			else if( Str_Cmp(EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA1)), "기물번호" ) == 0 )
			{
				if( m_lCondition != 4 )
				{
					Mem_Set( (byte*)m_szCnt_page_T, 0x00, sizeof(m_szCnt_page_T) );
					Mem_Set((byte*)m_szTableBuf_T+(COL_T*MAXCHAR_T), 0x00, sizeof(m_szTableBuf_T)-(COL_T*MAXCHAR_T));
					g_Sql_DirectExecute("DELETE FROM RCV_RELEASE");
					m_lCondition = 4;

					EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA13), "");
					EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA14), "");
					EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA15), "");
					EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA16), "");
					TelDraw();
				}
				return;
			}
		}
		else if( m_bFirst == INIT_JIBUNSEARCH || m_bFirst == INIT_TGTSEARCH || m_bFirst == INIT_NEWSEARCH )
		{
			//현재 TBL이 선택되었는지를 확인
			if (DlgTbl_IsSelect(ID_ADDRLIST))
			{
				// 현재 선택된 인덱스
				index = DlgTbl_GetActiveRow(ID_ADDRLIST);
				// 선택 인덱스와 기존 인덱스가 동일 할 경우
				if ( index-1 == m_nActIndex_A )
				{
					m_lAddrFlag = 0;
					m_lCondition = 0;
					m_lSearchFlag = 1;
	
					if( m_lTabFlag == 0 )
					{
						ON_EXIT();
						OnInit(INIT_MAIN);
					}
					else if( m_lTabFlag == 1 )
					{
						ON_EXIT();
						OnInit(INIT_CALCUL);
					}

					return;
				}
				else
				{
					m_nActIndex_A = index - 1;//선택된 INDEX 저장
				
					//처음 선택된 대상의 주소를 상단에 표시
					Mem_Set( (byte*)m_szUse_cont_num, 0x00, sizeof(m_szUse_cont_num) );
					Str_Cpy( m_szUse_cont_num, DlgTbl_GetStr( ID_ADDRLIST, m_nActIndex_A, 3));
				}
			}

			if( Str_Cmp(EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA1)), "계약번호" ) == 0 )
			{
				m_lCondition = 0;
				m_lSearchFlag = 0;

				if( m_lTabFlag == 0 )
				{
					ON_EXIT();
					OnInit(INIT_MAIN);
				}
				else if( m_lTabFlag == 1 )
				{
					ON_EXIT();
					OnInit(INIT_CALCUL);
				}
				return;
			}
			else if( Str_Cmp(EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA1)), "전화번호" ) == 0 )
			{
				m_lCondition = 1;
				m_lSearchFlag = 0;
				
				ON_EXIT();
				OnInit(INIT_TELSEARCH);
				return;
			}
			else if( Str_Cmp(EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA1)), "주소" ) == 0 )
			{
				m_lCondition = 2;
				return;
			}
			else if( Str_Cmp(EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA1)), "바코드" ) == 0 )
			{
				m_lCondition = 3;
				m_lSearchFlag = 0;
				
				ON_EXIT();
				OnInit(INIT_TELSEARCH);
				return;
			}
			else if( Str_Cmp(EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA1)), "기물번호" ) == 0 )
			{
				m_lCondition = 4;
				m_lSearchFlag = 0;
				
				ON_EXIT();
				OnInit(INIT_TELSEARCH);
				return;
			}
		}
		
		ON_DRAW();
		return;
	}

//----------------------------------------------------------------------------------------------
	void	OnUart(long nEvent, long nData)
	{
		if (nEvent == UART_BARCODE)
		{
			if( theDevInfo.m_nType == FAMILY_PDA )
			{
				PDA_OnBarcodeRead();
			}
			else
			{
				OnBarcodeRead();
			}
		}
	}

//-----------------------------------------------------------------------------------------------
	void	OnTask(long nEvent, long nData)
	{
		char* ptr;
		long nRet = 0;
		
		if(nEvent == TASK_SYS_CALL && nData == TASK_BARCODE )
		{
			//카메라 바코드 스캔 값
			Mem_Set( (byte*)m_szBarcode_Num, 0x00, sizeof(m_szBarcode_Num) );
			ptr = (char*)System_GetResult((char*)&nRet);
			Str_Cpy(m_szBarcode_Num, ptr);

			if( theDevInfo.m_nType > FAMILY_PDA )
			{
				OnBarcodeRead();
			}
		}
	}

//------------------------------------------------------------------
	void SetBtnImg(void)
	{
		void* h;

		IconCtrl_SetImage(Get_hDlgCtrlByID(ICON_TITLE), 0, g_pImgMainTtl );		//타이틀
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_TITLE), EDITALIGN_CENTER|EDITALIGN_MIDDLE);

		if( theDevInfo.m_nType > FAMILY_PDA )
		{
			//상단공통메뉴
			h = GetSysButHandle(GID_HOME);
			ButCtrl_SetImage( h,  g_pImgHomeI);
			ButCtrl_SetActiveImage( h,  g_pImgHomeA);
			
			h = GetSysButHandle(GID_KEYBOARD);
			ButCtrl_SetImage( h,  g_pImgKeybrdI);
			ButCtrl_SetActiveImage( h,  g_pImgKeybrdA);
			
			h = GetSysButHandle(GID_SCREEN);
			ButCtrl_SetImage( h,  g_pImgScreenI);
			ButCtrl_SetActiveImage( h,  g_pImgScreenA);
			
			h = GetSysButHandle(GID_CMMNWK);
			ButCtrl_SetImage( h,  g_pImgCmmnwrkI);
			ButCtrl_SetActiveImage( h,  g_pImgCmmnwrkA);
			
			h = GetSysButHandle(GID_VMEXIT);
			ButCtrl_SetImage( h,  g_pImgExitI);
			ButCtrl_SetActiveImage( h,  g_pImgExitA);
		}
	}

//-----------------------------------------------------------------
	void	SetStyle(void)
	{
		EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_DATA1), EDITALIGN_MIDDLE);	//검색조건

		if( m_bFirst == INIT_MAIN )
		{
			//EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA1), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA2), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA3), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA4), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA5), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA6), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			//EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA7), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA8), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			//EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA9), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			
			EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA1), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA2), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA3), EDITALIGN_MIDDLE);
			
			EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_DATA2), EDITALIGN_MIDDLE);
			
			EditCtrl_SetMultiLine(Get_hDlgCtrlByID(TXT_DATA1), TRUE, 2, EDITSEP_NONE );
			
			if( theDevInfo.m_nType > FAMILY_PDA )
			{
				//숫자판
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_ONE), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_TWO), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_THREE), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_FOUR), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_FIVE), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_SIX), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_SEVEN), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_EIGHT), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_NINE), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_ZERO), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_DEL), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			}
		}
		else if( m_bFirst == INIT_CALCUL )
		{
			//EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA10), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA11), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA12), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA13), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA14), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA15), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA16), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA17), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA18), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA19), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA20), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA21), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA22), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA23), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA24), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA25), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA26), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA27), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA28), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA29), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA30), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA31), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA32), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA33), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA48), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA49), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA50), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA51), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA52), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA53), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA54), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA55), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA56), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA57), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA58), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA59), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA60), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA61), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA62), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA63), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA64), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA65), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA66), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA67), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA68), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA69), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA70), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA71), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA72), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA73), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA74), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA75), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA76), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA77), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA78), EDITALIGN_CENTER);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA79), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA80), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA81), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA82), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA83), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA84), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA85), EDITALIGN_CENTER|EDITALIGN_MIDDLE);

			EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA4), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA5), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA6), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA7), EDITALIGN_MIDDLE);
			
			EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_DATA4), EDITALIGN_MIDDLE);

			EditCtrl_SetMultiLine(Get_hDlgCtrlByID(TXT_DATA10), TRUE, 2, EDITSEP_NONE );

			if( theDevInfo.m_nType > FAMILY_PDA )
			{
				//숫자판
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_ONE), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_TWO), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_THREE), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_FOUR), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_FIVE), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_SIX), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_SEVEN), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_EIGHT), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_NINE), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_ZERO), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_DEL), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			}
		}
		else if( m_bFirst == INIT_TELSEARCH )
		{
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA46), EDITALIGN_CENTER|EDITALIGN_MIDDLE);

			EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA13), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA14), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA15), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA16), EDITALIGN_MIDDLE);
		}
		else if( m_bFirst == INIT_JIBUNSEARCH )
		{
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA34), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA35), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA36), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA37), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA47), EDITALIGN_CENTER|EDITALIGN_MIDDLE);	//리스트 페이지
			
			EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA8), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA9), EDITALIGN_MIDDLE);

			EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_DATA6), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_DATA7), EDITALIGN_MIDDLE);
		}
		else if(m_bFirst == INIT_TGTSEARCH)
		{
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA38), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA39), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA40), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA47), EDITALIGN_CENTER|EDITALIGN_MIDDLE);	//리스트 페이지

			EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA10), EDITALIGN_MIDDLE);

			EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_DATA8), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_DATA9), EDITALIGN_MIDDLE);
		}
		else if(m_bFirst == INIT_NEWSEARCH)
		{
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA41), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA42), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA43), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA44), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA47), EDITALIGN_CENTER|EDITALIGN_MIDDLE);	//리스트 페이지

			EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA11), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA12), EDITALIGN_MIDDLE);

			EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_DATA10), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_DATA11), EDITALIGN_MIDDLE);
		}
	}	
	
//------------------------------------------------------------------	
	void SetCombo(void)
	{
		ListCtrl_ResetAllItems (Get_hDlgCtrlByID(CMB_DATA1+2));
		ListCtrl_AddItem (Get_hDlgCtrlByID(CMB_DATA1+2), "계약번호", 0, ICON_NONE);
		ListCtrl_AddItem (Get_hDlgCtrlByID(CMB_DATA1+2), "전화번호", 0, ICON_NONE);
		ListCtrl_AddItem (Get_hDlgCtrlByID(CMB_DATA1+2), "주소", 0, ICON_NONE);
		ListCtrl_AddItem (Get_hDlgCtrlByID(CMB_DATA1+2), "바코드", 0, ICON_NONE);
		ListCtrl_AddItem (Get_hDlgCtrlByID(CMB_DATA1+2), "기물번호", 0, ICON_NONE);

		if( m_bFirst == INIT_MAIN )
		{
			g_Sql_SetCombo("SELECT ITEM_KNAME FROM COMMONCODE WHERE CODE_ID = 'A10110' AND C_VALUE = '1' ORDER BY SORT_ORDER", CMB_DATA2+2);
		}
		else if( m_bFirst == INIT_CALCUL )
		{
			g_Sql_SetCombo("SELECT ITEM_KNAME FROM COMMONCODE WHERE CODE_ID = 'A10110' AND C_VALUE = '1' ORDER BY SORT_ORDER", CMB_DATA4+2);
		}
		else if( m_bFirst == INIT_JIBUNSEARCH )
		{
			g_Sql_SetCombo("SELECT AREA FROM GUMDATA WHERE AREA IS NOT NULL GROUP BY AREA", CMB_DATA6+2);
			g_Sql_SetCombo("SELECT TOWN FROM GUMDATA WHERE TOWN IS NOT NULL GROUP BY TOWN", CMB_DATA7+2);
		}
		else if( m_bFirst == INIT_TGTSEARCH )
		{
			g_Sql_SetCombo("SELECT CO_LIVE_NM FROM GUMDATA WHERE CO_LIVE_NM IS NOT NULL GROUP BY CO_LIVE_NM", CMB_DATA8+2);
			g_Sql_SetCombo("SELECT BLD_NM FROM GUMDATA WHERE BLD_NM IS NOT NULL GROUP BY BLD_NM", CMB_DATA9+2);
		}
		else if( m_bFirst == INIT_NEWSEARCH )
		{
			g_Sql_SetCombo("SELECT AREA FROM GUMDATA WHERE AREA IS NOT NULL GROUP BY AREA", CMB_DATA10+2);
			g_Sql_SetCombo("SELECT NEW_ROAD_NM FROM GUMDATA WHERE NEW_ROAD_NM IS NOT NULL GROUP BY NEW_ROAD_NM", CMB_DATA11+2);
		}
	}
	
	
//------------------------------------------------------------------
	void ReDraw(void)
	{
		long i, idx;
		long lDrawFlag = 0;
		char szTmp[20];
		char szBuf[20];
		char szUse_cont_num[20];
		long ret = -1;	
		handle hdb = NULL;
		handle hstmt = NULL;
		SQLITE sql = NewSqLite();

		if( m_lTabFlag == 0 )
		{
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TAB1), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TAB2), TRUE );
		
			Mem_Set( (byte*)szTmp, 0x00, sizeof(szTmp) );
			Mem_Set( (byte*)szBuf, 0x00, sizeof(szBuf) );
			Mem_Set( (byte*)szUse_cont_num, 0x00, sizeof(szUse_cont_num) );
			if( Str_Len(m_szSearch_Use_cont_num) > 5 )
			{
				lDrawFlag = 1;
				Str_Cpy(g_szUSE_CONT_NUM, m_szSearch_Use_cont_num);

				Mem_Cpy( (byte*)szTmp, (byte*)g_szUSE_CONT_NUM,  5);
				Mem_Cpy( (byte*)szBuf, (byte*)g_szUSE_CONT_NUM+5,  5);
				Str_Cpy(szUse_cont_num, szTmp);
				Str_Cat(szUse_cont_num, "-");
				Str_Cat(szUse_cont_num, szBuf);
			}
			
			EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA1), szUse_cont_num);
		}
		else
		{
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TAB1), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TAB2), FALSE );

			Mem_Set( (byte*)szTmp, 0x00, sizeof(szTmp) );
			Mem_Set( (byte*)szBuf, 0x00, sizeof(szBuf) );
			Mem_Set( (byte*)szUse_cont_num, 0x00, sizeof(szUse_cont_num) );
			if( Str_Len(m_szSearch_Use_cont_num) > 5 )
			{
				lDrawFlag = 1;
				//Str_Cpy(g_szUSE_CONT_NUM_Fee, m_szSearch_Use_cont_num[1]);
				Str_Cpy(g_szUSE_CONT_NUM, m_szSearch_Use_cont_num);

				Mem_Cpy( (byte*)szTmp, (byte*)g_szUSE_CONT_NUM,  5);
				Mem_Cpy( (byte*)szBuf, (byte*)g_szUSE_CONT_NUM+5,  5);
				Str_Cpy(szUse_cont_num, szTmp);
				Str_Cat(szUse_cont_num, "-");
				Str_Cat(szUse_cont_num, szBuf);
			}
			
			//EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA4), g_szUSE_CONT_NUM_Fee);
			EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA4), szUse_cont_num);
			EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA5), g_szIndi_Cur);
		}

		if( m_lCondition == 0 )
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA1), "계약번호");
		}
		else if( m_lCondition == 1 )
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA1), "전화번호");
		}
		else if( m_lCondition == 2 )
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA1), "주소");
		}
		else if( m_lCondition == 3 )
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA1), "바코드");
		}
		else if( m_lCondition == 4 )
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA1), "기물번호");
		}
		
/*
		if( m_lTabFlag == 0 || m_lCondition == 3 || m_lCondition == 4 )
		{
			if( Str_Len(g_szUSE_CONT_NUM) > 5 && lDrawFlag == 1 )
			{
				hdb = sql->Open(sql);
				if( hdb == NULL )
				{
					goto Finally;
				}
		
				Mem_Set( (byte*)m_szSql, 0x00, sizeof(m_szSql) );
				if( g_nAddrFlag == 0 )
				{
					SPRINT(m_szSql[0], "SELECT CASE WHEN Length(Trim(CO_LIVE_NM))+Length(Trim(BLD_NM)) > 0 THEN ifnull(AREA,'') ||' '|| ifnull(TOWN,'') ||' '|| ifnull(VILLAGE,'') ||' '|| ifnull(ADDR1_M,'') ||'-'|| ifnull(ADDR1_S,'') ||' '|| ifnull(CO_LIVE_NM,'') ||' '|| ifnull(BLD_NM,'') ||'-'|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') ELSE ifnull(AREA,'') ||' '|| ifnull(TOWN,'') ||' '|| ifnull(VILLAGE,'') ||' '|| ifnull(ADDR1_M,'') ||'-'|| ifnull(ADDR1_S,'') ||' '|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') END, CUST_NM ||'/'|| FIRM_NM, CUST_NUM FROM GUMDATA WHERE USE_CONT_NUM = '%s'", g_szUSE_CONT_NUM, 0, 0);
					hstmt = sql->CreateStatement(sql, m_szSql[0]);
				}
				else
				{
					SPRINT(m_szSql[1], "SELECT CASE WHEN Length(Trim(CO_LIVE_NM))+Length(Trim(BLD_NM)) > 0 THEN ifnull(AREA,'') ||' '|| ifnull(NEW_ROAD_NM,'') ||' '|| ifnull(NEW_ADDR_M,'') ||'-'|| ifnull(NEW_ADDR_S,'') ||' '|| ifnull(CO_LIVE_NM,'') ||' '|| ifnull(BLD_NM,'') ||'-'|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') ELSE ifnull(AREA,'') ||' '|| ifnull(NEW_ROAD_NM,'') ||' '|| ifnull(NEW_ADDR_M,'') ||'-'|| ifnull(NEW_ADDR_S,'') ||' '|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') END, CUST_NM ||'/'|| FIRM_NM, CUST_NUM FROM GUMDATA WHERE USE_CONT_NUM = '%s'", g_szUSE_CONT_NUM, 0, 0);
					hstmt = sql->CreateStatement(sql, m_szSql[1]);
				}
				
				if( hstmt == NULL )
				{
					PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
					goto Finally;
				}
		
				if(sql->Execute(sql) == FALSE)
				{
					PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
					goto Finally;
				}
		
				Mem_Set( (byte*)szAddr, 0x00, sizeof(szAddr) );
				Mem_Set( (byte*)szName, 0x00, sizeof(szName) );
				Mem_Set( (byte*)g_szCUST_NUM, 0x00, sizeof(g_szCUST_NUM) );
				if(sql->Next(sql) == TRUE )
				{	
					i = 0;
					sql->GetValue( sql, i++, 'U', (long*) szAddr	    , 499+ 1, DECRYPT );
					sql->GetValue( sql, i++, 'U', (long*) szName	    ,  99+ 1, DECRYPT );
					sql->GetValue( sql, i++, 'U', (long*) g_szCUST_NUM	,  14+ 1, DECRYPT );
					
				}
				else
				{
					PRINT("::sql->Next fail [%s]",sql->GetLastError(sql),0,0);
					goto Finally;
				}

				EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA1), g_szUSE_CONT_NUM);
				EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA1), szAddr);
				EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA3), szName);

				m_nActIndex_H = 0;
				m_lpage_H = 0;

				DlgTbl_SetActive(ID_TELLIST , m_nActIndex_H+1 );
				DlgTbl_SetRowColor(ID_TELLIST, m_nActIndex_H+1, TABLEACTIVE_COLOR);
	
				//청구년월
				//EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA9), DlgTbl_GetStr( ID_HISLIST, m_nActIndex_H, 0));
				//전화번호
				EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA2), DlgTbl_GetStr( ID_HISLIST, m_nActIndex_H, 5));
				EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA2), DlgTbl_GetStr( ID_HISLIST, m_nActIndex_H, 6));
				EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA3), DlgTbl_GetStr( ID_HISLIST, m_nActIndex_H, 7));
				//미납합계
				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				Str_Cpy(sztmp, DlgTbl_GetStr( ID_HISLIST, m_nActIndex_H, 8));
				Str_Chg(sztmp, STRCHG_INS_COMMA);
				EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA5), sztmp);
				
Finally:
		//		sql->Commit(sql);
				DelSqLite(sql);
			}
		}
		else
		{
			if( Str_Len(g_szUSE_CONT_NUM_Fee) > 5 && lDrawFlag == 1 )
			{
				hdb = sql->Open(sql);
				if( hdb == NULL )
				{
					goto Finally2;
				}
		
				Mem_Set( (byte*)m_szSql, 0x00, sizeof(m_szSql) );
				if( g_nAddrFlag == 0 )
				{
					SPRINT(m_szSql[0], "SELECT CASE WHEN Length(Trim(CO_LIVE_NM))+Length(Trim(BLD_NM)) > 0 THEN ifnull(AREA,'') ||' '|| ifnull(TOWN,'') ||' '|| ifnull(VILLAGE,'') ||' '|| ifnull(ADDR1_M,'') ||'-'|| ifnull(ADDR1_S,'') ||' '|| ifnull(CO_LIVE_NM,'') ||' '|| ifnull(BLD_NM,'') ||'-'|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') ELSE ifnull(AREA,'') ||' '|| ifnull(TOWN,'') ||' '|| ifnull(VILLAGE,'') ||' '|| ifnull(ADDR1_M,'') ||'-'|| ifnull(ADDR1_S,'') ||' '|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') END, CUST_NM ||'/'|| FIRM_NM, CUST_NUM FROM GUMDATA WHERE USE_CONT_NUM = '%s'", g_szUSE_CONT_NUM_Fee, 0, 0);
					hstmt = sql->CreateStatement(sql, m_szSql[0]);
				}
				else
				{
					SPRINT(m_szSql[1], "SELECT CASE WHEN Length(Trim(CO_LIVE_NM))+Length(Trim(BLD_NM)) > 0 THEN ifnull(AREA,'') ||' '|| ifnull(NEW_ROAD_NM,'') ||' '|| ifnull(NEW_ADDR_M,'') ||'-'|| ifnull(NEW_ADDR_S,'') ||' '|| ifnull(CO_LIVE_NM,'') ||' '|| ifnull(BLD_NM,'') ||'-'|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') ELSE ifnull(AREA,'') ||' '|| ifnull(NEW_ROAD_NM,'') ||' '|| ifnull(NEW_ADDR_M,'') ||'-'|| ifnull(NEW_ADDR_S,'') ||' '|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') END, CUST_NM ||'/'|| FIRM_NM, CUST_NUM FROM GUMDATA WHERE USE_CONT_NUM = '%s'", g_szUSE_CONT_NUM_Fee, 0, 0);
					hstmt = sql->CreateStatement(sql, m_szSql[1]);
				}
				
				if( hstmt == NULL )
				{
					PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
					goto Finally2;
				}
		
				if(sql->Execute(sql) == FALSE)
				{
					PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
					goto Finally2;
				}
		
				Mem_Set( (byte*)szAddr, 0x00, sizeof(szAddr) );
				Mem_Set( (byte*)szName, 0x00, sizeof(szName) );
				Mem_Set( (byte*)g_szCUST_NUM, 0x00, sizeof(g_szCUST_NUM) );
				if(sql->Next(sql) == TRUE )
				{	
					i = 0;
					sql->GetValue( sql, i++, 'U', (long*) szAddr	, 499+ 1, DECRYPT );
					sql->GetValue( sql, i++, 'U', (long*) szName	,  99+ 1, DECRYPT );
					sql->GetValue( sql, i++, 'U', (long*) g_szCUST_NUM	,  14+ 1, DECRYPT );
				}
				else
				{
					PRINT("::sql->Next fail [%s]",sql->GetLastError(sql),0,0);
					goto Finally2;
				}
		
				EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA4), g_szUSE_CONT_NUM_Fee);
				EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA10), szAddr);
				EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA12), szName);
				
				ServiceDraw(242450);
				ServiceDraw(242452);
				
Finally2:
		//		sql->Commit(sql);
				DelSqLite(sql);
			}
		}
*/
		ON_DRAW();
		return;
	}

//------------------------------------------------------------------
	void SetData_History(void)
	{
		long i;
		char szindex[5];
		handle hdb = NULL;
		handle hstmt = NULL;
		SQLITE sql = NewSqLite();

		Mem_Set((byte*)&stFee_History, 0x00, sizeof(stFee_History));
				
		hdb = sql->Open(sql);
		if( hdb == NULL )
		{
			goto Finally;
		}

		hstmt = sql->CreateStatement(sql,
"SELECT \
PARAM1 , PARAM2 , PARAM3 , PARAM4 , PARAM5 , PARAM6 , PARAM7 , PARAM8 \
, PARAM9 , PARAM10 , PARAM11 , PARAM12 , PARAM13 , PARAM14 , PARAM15 , PARAM16 \
, PARAM17 , PARAM18 , PARAM19 , PARAM20 , PARAM21 , PARAM22 , PARAM23 , PARAM24 \
, PARAM25 , PARAM26 , PARAM27 , PARAM28 , PARAM29 , PARAM33 , PARAM34 , PARAM35 \
, PARAM36 , PARAM37 , PARAM38 , PARAM39 , PARAM40 \
, PARAM41 , PARAM42 , PARAM43 , PARAM44 , PARAM45 , PARAM46 , PARAM47  \
 FROM RCV_TMP ORDER BY PARAM10 DESC"
		);
		
		if( hstmt == NULL )
		{
			PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}

		if(sql->Execute(sql) == FALSE)
		{
			PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}

		if(sql->Next(sql) == TRUE )
		{	
			i = 0;
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.USE_CONT_NUM       , 20 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.SUPPLY_VAL         , 30 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.VAT                , 30 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.THIS_MM_OCCU_AMT   , 30 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.ADJ_ALT_AMT        , 30 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.SUBTR_REQ_AMT      , 30 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.RECEIVE_AMT        , 30 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.UNPAY_AMT          , 30 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.UNCOL_AMT_REMA     , 30 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.REQ_YM             , 10 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.DEADLINE_FLAG      , 10 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.USE_PERIOD_STR     , 30 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.USE_PERIOD_END     , 30 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.USE_QTY            , 30 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.SET_QTY            , 30 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.SUPPLY_UNIT_ENER   , 30 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.ENER_QTY           , 30 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.USE_CHARG          , 30 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.USE_CHARG_DISC_AMT , 30 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.BASE_CHARG         , 30 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.REPL_COST          , 30 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.OVERDUE_AMT        , 30 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.ADJ_SET_CHARG      , 30 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.CNL_CHARG_SUPPY    , 30 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.REVIS_PARA         , 30 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.INDI_COMPENS_VC    , 30 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.BF_UNPAY_AMT       , 30 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.SUMAMT2            , 30 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.DEBT_UNPAY_AMT     , 30 , DECRYPT );
			//sql->GetValue( sql, i++, 'U', (long*) stFee_History.CP_DDD             , 6  , DECRYPT );
			//sql->GetValue( sql, i++, 'U', (long*) stFee_History.CP_EXN             , 6  , DECRYPT );
			//sql->GetValue( sql, i++, 'U', (long*) stFee_History.CP_NUM             , 6  , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.WOORI_ACCNO        , 30 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.KOOKMIN_ACCNO      , 30 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.SHINHAN_ACCNO      , 30 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.HANA_ACCNO         , 30 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.FB_ACCNO           , 30 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.NH_ACCNO           , 30 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.CITY_ACCNO         , 30 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.IBK_ACCNO          , 30 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.CUST_NM            , 50 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.ADDR               , 350, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.CENTER_NM          , 50 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.TEL1_DDD           , 6  , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.TEL1_EXN           , 6  , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.TEL1_NUM           , 6  , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_History.BF_INDI_COMPENS_VC , 30 , DECRYPT );
		}
		else
		{
			PRINT("::sql->Next fail [%s]",sql->GetLastError(sql),0,0);
			goto Finally;
		}

		Str_Cpy(stFee_History.CP_DDD, EditCtrl_GetStr( Get_hDlgCtrlByID(CMB_DATA2)));
		Str_Cpy(stFee_History.CP_EXN, EditCtrl_GetStr( Get_hDlgCtrlByID(EDT_DATA2)));
		Str_Cpy(stFee_History.CP_NUM, EditCtrl_GetStr( Get_hDlgCtrlByID(EDT_DATA3)));
		
		Mem_Set((byte*) g_szCp_ddd, 0x00, sizeof( g_szCp_ddd) );
		Mem_Set((byte*) g_szCp_exn, 0x00, sizeof( g_szCp_exn) );
		Mem_Set((byte*) g_szCp_num, 0x00, sizeof( g_szCp_num) );
		Str_Cpy(g_szCp_ddd, stFee_History.CP_DDD);
		Str_Cpy(g_szCp_exn, stFee_History.CP_EXN);
		Str_Cpy(g_szCp_num, stFee_History.CP_NUM);

Finally:
//		sql->Commit(sql);
		DelSqLite(sql);
		return;

	}
	
//------------------------------------------------------------------
	void SetData_Calcul(void)
	{
		long i;
		char szindex[5];
		handle hdb = NULL;
		handle hstmt = NULL;
		SQLITE sql = NewSqLite();

		Mem_Set((byte*)&stFee_Calcul, 0x00, sizeof(stFee_Calcul));
				
		hdb = sql->Open(sql);
		if( hdb == NULL )
		{
			goto Finally;
		}

		hstmt = sql->CreateStatement(sql,
"SELECT \
PARAM1 , PARAM2 , PARAM3 , PARAM4 , PARAM5 , PARAM6 , PARAM7 , PARAM8 \
, PARAM9 , PARAM10 , PARAM11 , PARAM12 , PARAM13 , PARAM14 , PARAM15 , PARAM16 \
, PARAM17 , PARAM18 , PARAM19 , PARAM20 , PARAM21 , PARAM22 , PARAM23 , PARAM24 \
, PARAM25 , PARAM26 , PARAM27 , PARAM28 , PARAM29 , PARAM30 , PARAM31 , PARAM32 \
, PARAM33 , PARAM34 , PARAM35 , PARAM39 , PARAM40 , PARAM41 , PARAM42 , PARAM43 \
, PARAM44 , PARAM45 , PARAM46 , PARAM47 , PARAM48 , PARAM49 , PARAM50 , PARAM51 , PARAM52 \
 FROM RCV_CALCUL ORDER BY PARAM15 DESC"
		);
		
		if( hstmt == NULL )
		{
			PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}

		if(sql->Execute(sql) == FALSE)
		{
			PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}

		if(sql->Next(sql) == TRUE )
		{	
			i = 0;
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.USE_CONT_NUM             , 15 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.ADJ_BASE_YMD             , 20 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.ADJ_JOB_DTM              , 20 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.ADJ_REQ_STS              , 20 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.SUPPLY_VAL               , 15 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.VAT                      , 15 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.THIS_MM_OCCU_AMT         , 15 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.ADJ_ALT_AMT              , 15 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.SUBTR_REQ_AMT            , 15 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.RECEIVE_AMT              , 15 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.UNPAY_AMT                , 15 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.UNCOL_AMT_REMA           , 15 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.TOT_REQ_AMT              , 15 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.SUSPN_REMA               , 15 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.REQ_YM                   , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.DEADLINE_FLAG            , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.USE_PERIOD_STR           , 20 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.USE_PERIOD_END           , 20 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.USE_QTY                  , 20 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.SET_QTY                  , 20 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.SUPPLY_UNIT_ENER         , 20 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.ENER_QTY                 , 20 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.USE_CHARG                , 15 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.USE_CHARG_DISC_AMT       , 15 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.BASE_CHARG               , 15 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.REPL_COST                , 15 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.OVERDUE_AMT              , 15 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.ADJ_SET_CHARG            , 15 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.CNL_CHARG_SUPPY          , 15 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.REVIS_PARA               , 20 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.SEQ                      , 20 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.INDI_COMPENS_THIS_MM_VC  , 20 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.BF_UNPAY_AMT             , 15 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.SUMAMT2                  , 15 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.DEBT_UNPAY_AMT           , 15 +1, DECRYPT );
			//sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.CP_DDD                   , 6  +1, DECRYPT );
			//sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.CP_EXN                   , 6  +1, DECRYPT );
			//sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.CP_NUM                   , 6  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.WOORI_ACCNO              , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.KOOKMIN_ACCNO            , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.SHINHAN_ACCNO            , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.HANA_ACCNO               , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.FB_ACCNO                 , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.NH_ACCNO                 , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.CITY_ACCNO               , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.IBK_ACCNO                , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.CUST_NM                  , 50 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.ADDR                     , 300+1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.CENTER_NM                , 50 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.TEL1_DDD                 , 6  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.TEL1_EXN                 , 6  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stFee_Calcul.TEL1_NUM                 , 6  +1, DECRYPT );
		}
		else
		{
			PRINT("::sql->Next fail [%s]",sql->GetLastError(sql),0,0);
			goto Finally;
		}

		//미납총액
		Str_Cpy(stFee_Calcul.TOT_UNPAY_AMT, EditCtrl_GetStr( Get_hDlgCtrlByID(TXT_DATA14)));
		Str_Chg(stFee_Calcul.TOT_UNPAY_AMT, STRCHG_DEL_NONDIGIT);
		//전월지침 VC
		Str_Cpy(stFee_Calcul.INDI_COMPENS_VC, EditCtrl_GetStr( Get_hDlgCtrlByID(TXT_DATA18)));
		//전화번호
		Str_Cpy(stFee_Calcul.CP_DDD, EditCtrl_GetStr( Get_hDlgCtrlByID(CMB_DATA4)));
		Str_Cpy(stFee_Calcul.CP_EXN, EditCtrl_GetStr( Get_hDlgCtrlByID(EDT_DATA6)));
		Str_Cpy(stFee_Calcul.CP_NUM, EditCtrl_GetStr( Get_hDlgCtrlByID(EDT_DATA7)));

		Mem_Set((byte*) g_szCp_ddd, 0x00, sizeof( g_szCp_ddd) );
		Mem_Set((byte*) g_szCp_exn, 0x00, sizeof( g_szCp_exn) );
		Mem_Set((byte*) g_szCp_num, 0x00, sizeof( g_szCp_num) );
		Str_Cpy(g_szCp_ddd, stFee_Calcul.CP_DDD);
		Str_Cpy(g_szCp_exn, stFee_Calcul.CP_EXN);
		Str_Cpy(g_szCp_num, stFee_Calcul.CP_NUM);

Finally:
//		sql->Commit(sql);
		DelSqLite(sql);
		return;

	}
	
//------------------------------------------------------------------
	void PageDraw(void)
	{
		if( m_lCalcul_Viewpage == 1 )
		{
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_ONE), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TWO), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_THREE), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_FOUR), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_FIVE), TRUE );
		
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA19), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA20), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA21), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA22), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA23), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA24), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA25), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA26), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA27), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA28), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA29), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA30), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA31), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA32), TRUE);

			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA48), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA49), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA50), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA51), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA52), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA53), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA54), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA55), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA56), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA57), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA58), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA59), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA60), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA61), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA62), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA63), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA64), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA65), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA66), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA67), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA68), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA69), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA70), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA71), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA72), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA73), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA74), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA75), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA76), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA77), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA78), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA79), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA80), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA81), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA82), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA83), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA84), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA85), FALSE);
		}
		else if( m_lCalcul_Viewpage == 2 )
		{
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_ONE), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TWO), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_THREE), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_FOUR), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_FIVE), TRUE );

			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA48), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA49), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA50), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA51), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA52), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA53), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA54), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA55), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA56), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA57), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA58), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA59), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA60), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA61), TRUE);

			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA19), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA20), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA21), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA22), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA23), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA24), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA25), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA26), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA27), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA28), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA29), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA30), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA31), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA32), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA62), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA63), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA64), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA65), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA66), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA67), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA68), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA69), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA70), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA71), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA72), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA73), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA74), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA75), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA76), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA77), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA78), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA79), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA80), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA81), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA82), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA83), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA84), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA85), FALSE);

		}
		else if( m_lCalcul_Viewpage == 3 )
		{
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_ONE), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TWO), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_THREE), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_FOUR), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_FIVE), TRUE );

			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA62), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA63), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA64), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA65), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA66), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA67), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA68), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA69), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA70), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA71), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA72), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA73), TRUE);

			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA19), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA20), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA21), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA22), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA23), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA24), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA25), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA26), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA27), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA28), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA29), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA30), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA31), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA32), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA48), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA49), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA50), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA51), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA52), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA53), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA54), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA55), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA56), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA57), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA58), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA59), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA60), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA61), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA74), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA75), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA76), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA77), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA78), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA79), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA80), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA81), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA82), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA83), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA84), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA85), FALSE);
		}
		else if( m_lCalcul_Viewpage == 4 )
		{
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_ONE), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TWO), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_THREE), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_FOUR), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_FIVE), TRUE );

			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA74), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA75), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA76), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA77), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA78), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA79), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA80), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA81), TRUE);

			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA19), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA20), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA21), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA22), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA23), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA24), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA25), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA26), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA27), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA28), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA29), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA30), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA31), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA32), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA48), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA49), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA50), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA51), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA52), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA53), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA54), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA55), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA56), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA57), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA58), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA59), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA60), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA61), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA62), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA63), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA64), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA65), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA66), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA67), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA68), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA69), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA70), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA71), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA72), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA73), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA82), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA83), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA84), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA85), FALSE);
		}
		else if( m_lCalcul_Viewpage == 5 )
		{
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_ONE), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TWO), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_THREE), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_FOUR), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_FIVE), FALSE );

			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA82), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA83), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA84), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA85), TRUE);

			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA19), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA20), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA21), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA22), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA23), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA24), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA25), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA26), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA27), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA28), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA29), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA30), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA31), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA32), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA48), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA49), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA50), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA51), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA52), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA53), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA54), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA55), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA56), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA57), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA58), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA59), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA60), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA61), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA62), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA63), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA64), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA65), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA66), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA67), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA68), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA69), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA70), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA71), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA72), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA73), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA74), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA75), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA76), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA77), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA78), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA79), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA80), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA81), FALSE);
		}
		
		CalDraw();
		ON_DRAW();
		return;
	}
	
//------------------------------------------------------------------
	void CalDraw(void)
	{
		char szTmp[300];
		char szBuf[100];
		char szRet[100];
		long i = 0 , k = 0;
		long lLen = 0;
	
		if( m_lCalcul_Viewpage == 1 )
		{
			Mem_Set((byte*) szTmp, 0x00, sizeof( szTmp) );
			Str_Cpy(szTmp, stFee_Calcul.USE_QTY);
			Str_Chg(szTmp, STRCHG_INS_COMMA);
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA20), szTmp);
			
			Mem_Set((byte*) szTmp, 0x00, sizeof( szTmp) );
			if( Str_AtoI(stFee_Calcul.SUSPN_REMA) > Str_AtoI(stFee_Calcul.SUBTR_REQ_AMT) )
			{
				i = Str_AtoI(stFee_Calcul.BF_UNPAY_AMT) + Str_AtoI(stFee_Calcul.SUMAMT2) + Str_AtoI(stFee_Calcul.DEBT_UNPAY_AMT);
			}
			else
			{
				i = Str_AtoI(stFee_Calcul.SUBTR_REQ_AMT) - Str_AtoI(stFee_Calcul.SUSPN_REMA) + Str_AtoI(stFee_Calcul.BF_UNPAY_AMT) + Str_AtoI(stFee_Calcul.SUMAMT2) + Str_AtoI(stFee_Calcul.DEBT_UNPAY_AMT);
			}
			Str_ItoA(i, szTmp, 10);
			Str_Chg(szTmp,  STRCHG_INS_COMMA);
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA22), szTmp);
			
			//소수점 붙여서 다시 copy
			if( stFee_Calcul.REVIS_PARA[0] == '.' )
			{
				Mem_Set((byte*) szTmp, 0x00, sizeof( szTmp) );
				Str_Cpy(szTmp, "0");
				Str_Cat(szTmp, stFee_Calcul.REVIS_PARA);
				EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA24), szTmp);
			}
			else
			{
				Mem_Set((byte*) szTmp, 0x00, sizeof( szTmp) );
				Mem_Set((byte*) szBuf, 0x00, sizeof( szBuf) );
				lLen = Str_Len(stFee_Calcul.REVIS_PARA);
				for( i=0 ; i < lLen ; i++ )
				{
					if( stFee_Calcul.REVIS_PARA[i] == '.' )
					{
						break;
					}
					else if( stFee_Calcul.REVIS_PARA[i] == '' )
					{
						i = 0;
						break;
					}
				}
				if( i > 0 )
				{
					Mem_Cpy( (byte*)szTmp, (byte*)stFee_Calcul.REVIS_PARA,  i);
					Mem_Cpy( (byte*)szBuf, (byte*)stFee_Calcul.REVIS_PARA+i,  (lLen-i));
				}
				else
				{
					Str_Cpy(szTmp, "0");
				}
				Str_Chg(szTmp,  STRCHG_INS_COMMA);
				Str_Cat(szTmp, szBuf);
				EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA24), szTmp);
			}
			
			Mem_Set((byte*) szTmp, 0x00, sizeof( szTmp) );
			Mem_Set((byte*) szBuf, 0x00, sizeof( szBuf) );
			lLen = Str_Len(stFee_Calcul.SET_QTY);
			for( i=0 ; i < lLen ; i++ )
			{
				if( stFee_Calcul.SET_QTY[i] == '.' )
				{
					break;
				}
				else if( stFee_Calcul.SET_QTY[i] == '' )
				{
					i = 0;
					break;
				}
			}
			if( i > 0 )
			{
				Mem_Cpy( (byte*)szTmp, (byte*)stFee_Calcul.SET_QTY,  i);
				Mem_Cpy( (byte*)szBuf, (byte*)stFee_Calcul.SET_QTY+i,  (lLen-i));
			}
			else
			{
				Str_Cpy(szTmp, "0");
			}
			Str_Chg(szTmp,  STRCHG_INS_COMMA);
			Str_Cat(szTmp, szBuf);
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA26), szTmp);
			
			Mem_Set((byte*) szTmp, 0x00, sizeof( szTmp) );
			Mem_Set((byte*) szBuf, 0x00, sizeof( szBuf) );
			lLen = Str_Len(stFee_Calcul.SUPPLY_UNIT_ENER);
			for( i=0 ; i < lLen ; i++ )
			{
				if( stFee_Calcul.SUPPLY_UNIT_ENER[i] == '.' )
				{
					break;
				}
				else if( stFee_Calcul.SUPPLY_UNIT_ENER[i] == '' )
				{
					i = 0;
					break;
				}
			}
			if( i > 0 )
			{
				Mem_Cpy( (byte*)szTmp, (byte*)stFee_Calcul.SUPPLY_UNIT_ENER,  i);
				Mem_Cpy( (byte*)szBuf, (byte*)stFee_Calcul.SUPPLY_UNIT_ENER+i,  (lLen-i));
			}
			else
			{
				Str_Cpy(szTmp, "0");
			}
			Str_Chg(szTmp,  STRCHG_INS_COMMA);
			Str_Cat(szTmp, szBuf);
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA28), szTmp);
			
			Mem_Set((byte*) szTmp, 0x00, sizeof( szTmp) );
			Mem_Set((byte*) szBuf, 0x00, sizeof( szBuf) );
			lLen = Str_Len(stFee_Calcul.ENER_QTY);
			for( i=0 ; i < lLen ; i++ )
			{
				if( stFee_Calcul.ENER_QTY[i] == '.' )
				{
					break;
				}
				else if( stFee_Calcul.ENER_QTY[i] == '' )
				{
					i = 0;
					break;
				}
			}
			if( i > 0 )
			{
				Mem_Cpy( (byte*)szTmp, (byte*)stFee_Calcul.ENER_QTY,  i);
				Mem_Cpy( (byte*)szBuf, (byte*)stFee_Calcul.ENER_QTY+i,  (lLen-i));
			}
			else
			{
				Str_Cpy(szTmp, "0");
			}
			Str_Chg(szTmp,  STRCHG_INS_COMMA);
			Str_Cat(szTmp, szBuf);
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA30), szTmp);
			
			Mem_Set((byte*) szTmp, 0x00, sizeof( szTmp) );
			Mem_Set((byte*) szRet, 0x00, sizeof( szRet) );
			Mem_Set((byte*) szBuf, 0x00, sizeof( szBuf) );
			g_Str_DateType( szRet, stFee_Calcul.USE_PERIOD_STR);
			g_Str_DateType( szBuf, stFee_Calcul.USE_PERIOD_END);
			SPRINT(szTmp, "%s ~ %s", szRet, szBuf,0);			
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA32), szTmp);
		}
		else if( m_lCalcul_Viewpage == 2 )
		{
			Mem_Set((byte*) szTmp, 0x00, sizeof( szTmp) );
			Str_Cpy(szTmp, stFee_Calcul.USE_CHARG);
			Str_Chg(szTmp,  STRCHG_INS_COMMA);
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA49), szTmp);

			Mem_Set((byte*) szTmp, 0x00, sizeof( szTmp) );
			Str_Cpy(szTmp, stFee_Calcul.USE_CHARG_DISC_AMT);
			Str_Chg(szTmp,  STRCHG_INS_COMMA);
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA51), szTmp);

			Mem_Set((byte*) szTmp, 0x00, sizeof( szTmp) );
			Str_Cpy(szTmp, stFee_Calcul.BASE_CHARG);
			Str_Chg(szTmp,  STRCHG_INS_COMMA);
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA53), szTmp);

			Mem_Set((byte*) szTmp, 0x00, sizeof( szTmp) );
			Str_Cpy(szTmp, stFee_Calcul.CNL_CHARG_SUPPY);
			Str_Chg(szTmp,  STRCHG_INS_COMMA);
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA55), szTmp);

			Mem_Set((byte*) szTmp, 0x00, sizeof( szTmp) );
			Str_Cpy(szTmp, stFee_Calcul.ADJ_SET_CHARG);
			Str_Chg(szTmp,  STRCHG_INS_COMMA);
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA57), szTmp);

			Mem_Set((byte*) szTmp, 0x00, sizeof( szTmp) );
			Str_Cpy(szTmp, stFee_Calcul.SUPPLY_VAL);
			Str_Chg(szTmp,  STRCHG_INS_COMMA);
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA59), szTmp);

			Mem_Set((byte*) szTmp, 0x00, sizeof( szTmp) );
			Str_Cpy(szTmp, stFee_Calcul.VAT);
			Str_Chg(szTmp,  STRCHG_INS_COMMA);
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA61), szTmp);
		}
		else if( m_lCalcul_Viewpage == 3 )
		{
			Mem_Set((byte*) szTmp, 0x00, sizeof( szTmp) );
			Str_Cpy(szTmp, stFee_Calcul.OVERDUE_AMT);
			Str_Chg(szTmp,  STRCHG_INS_COMMA);
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA63), szTmp);

			Mem_Set((byte*) szTmp, 0x00, sizeof( szTmp) );
			Str_Cpy(szTmp, stFee_Calcul.SUSPN_REMA);
			Str_Chg(szTmp,  STRCHG_INS_COMMA);
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA65), szTmp);

			Mem_Set((byte*) szTmp, 0x00, sizeof( szTmp) );
			Str_Cpy(szTmp, stFee_Calcul.REPL_COST);
			Str_Chg(szTmp,  STRCHG_INS_COMMA);
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA67), szTmp);

			Mem_Set((byte*) szTmp, 0x00, sizeof( szTmp) );
			Str_Cpy(szTmp, stFee_Calcul.SUBTR_REQ_AMT);
			Str_Chg(szTmp,  STRCHG_INS_COMMA);
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA69), szTmp);

			Mem_Set((byte*) szTmp, 0x00, sizeof( szTmp) );
			Str_Cpy(szTmp, stFee_Calcul.UNCOL_AMT_REMA);
			Str_Chg(szTmp,  STRCHG_INS_COMMA);
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA71), szTmp);

			Mem_Set((byte*) szTmp, 0x00, sizeof( szTmp) );
			Str_Cpy(szTmp, stFee_Calcul.TOT_REQ_AMT);
			Str_Chg(szTmp,  STRCHG_INS_COMMA);
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA73), szTmp);
		}
		else if( m_lCalcul_Viewpage == 4 )
		{
			if( Str_AtoI(stFee_Calcul.SUSPN_REMA) > Str_AtoI(stFee_Calcul.TOT_REQ_AMT) )
			{
				Mem_Set((byte*) szTmp, 0x00, sizeof( szTmp) );
				Str_Cpy(szTmp, stFee_Calcul.TOT_REQ_AMT);
				Str_Chg(szTmp,  STRCHG_INS_COMMA);
				EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA75), szTmp);
				
				EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA77), "0");
			}
			else
			{
				Mem_Set((byte*) szTmp, 0x00, sizeof( szTmp) );
				Str_Cpy(szTmp, stFee_Calcul.SUSPN_REMA);
				Str_Chg(szTmp,  STRCHG_INS_COMMA);
				EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA75), szTmp);
				
				Mem_Set((byte*) szTmp, 0x00, sizeof( szTmp) );
				i = 0;
				i = Str_AtoI(stFee_Calcul.TOT_REQ_AMT) - Str_AtoI(stFee_Calcul.SUSPN_REMA);
				Str_ItoA(i, szTmp, 10);
				Str_Chg(szTmp,  STRCHG_INS_COMMA);
				EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA77), szTmp);
			}

			Mem_Set((byte*) szTmp, 0x00, sizeof( szTmp) );
			Str_Cpy(szTmp, stFee_Calcul.BF_UNPAY_AMT);
			Str_Chg(szTmp,  STRCHG_INS_COMMA);
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA79), szTmp);

			Mem_Set((byte*) szTmp, 0x00, sizeof( szTmp) );
			Mem_Set((byte*) szBuf, 0x00, sizeof( szBuf) );
			Mem_Set((byte*) szRet, 0x00, sizeof( szRet) );
			i = 0;
			Str_Cpy(szTmp, EditCtrl_GetStr( Get_hDlgCtrlByID(TXT_DATA77)));
			Str_Cpy(szBuf, EditCtrl_GetStr( Get_hDlgCtrlByID(TXT_DATA79)));
			Str_Chg(szTmp,  STRCHG_DEL_NONDIGIT);
			Str_Chg(szBuf,  STRCHG_DEL_NONDIGIT);
			i = Str_AtoI(szTmp) + Str_AtoI(szBuf);
			Str_ItoA(i, szRet, 10);
			Str_Chg(szRet,  STRCHG_INS_COMMA);
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA81), szRet);
		}
		else if( m_lCalcul_Viewpage == 5 )
		{
			Mem_Set((byte*) szTmp, 0x00, sizeof( szTmp) );
			Str_Cpy(szTmp, stFee_Calcul.SUMAMT2);
			Str_Chg(szTmp,  STRCHG_INS_COMMA);
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA83), szTmp);

			Mem_Set((byte*) szTmp, 0x00, sizeof( szTmp) );
			Str_Cpy(szTmp, stFee_Calcul.DEBT_UNPAY_AMT);
			Str_Chg(szTmp,  STRCHG_INS_COMMA);
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA85), szTmp);
		}


	//	EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA4), stFee_Calcul.CP_DDD);
	//	EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA6), stFee_Calcul.CP_EXN);
	//	EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA7), stFee_Calcul.CP_NUM);
		
		ON_DRAW();
		return;
	}

//------------------------------------------------------------------
	void AddrDraw(void)
	{
	long i, idx;
	long k = ROW_A + 1;
	char sztmp[400];
	long ret = -1;	
	long lstartidx;
	handle hdb = NULL;
	handle hstmt = NULL;
	SQLITE sql = NewSqLite();

		if( m_lTabFlag == 0 )
		{
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TAB1), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TAB2), TRUE );
		}
		else
		{
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TAB1), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TAB2), FALSE );
		}

		if( m_lCondition == 0 )
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA1), "계약번호");
		}
		else if( m_lCondition == 1 )
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA1), "전화번호");
		}
		else if( m_lCondition == 2 )
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA1), "주소");
		}
		else if( m_lCondition == 3 )
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA1), "바코드");
		}
		else if( m_lCondition == 4 )
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA1), "기물번호");
		}

		if( m_bFirst == INIT_JIBUNSEARCH )
		{
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_JIBUN), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_ROADNM), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TOGETHER), TRUE );
		}
		else if( m_bFirst == INIT_TGTSEARCH )
		{
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_JIBUN), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_ROADNM), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TOGETHER), FALSE );
		}
		else if( m_bFirst == INIT_NEWSEARCH )
		{
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_JIBUN), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_ROADNM), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TOGETHER), TRUE );
		}


		if( m_lAddrFlag == 1 )
		{
			SPRINT(sztmp, "SELECT COUNT(*) FROM GUMDATA WHERE %s",m_szAddr,0,0);
			g_Sql_RetInt( sztmp, &m_lTotpage_A );
			
			if( m_lTotpage_A % ROW_A > 0 )
			{
				m_lTotpage_A = (m_lTotpage_A / ROW_A) + 1;
			}
			else
			{
				m_lTotpage_A = m_lTotpage_A / ROW_A;
			}
			//페이지
			SPRINT(m_szCnt_page_A, "%d/%d", m_lpage_A+1, m_lTotpage_A, 0);
			
			hdb = sql->Open(sql);
			if( hdb == NULL )
			{
				goto Finally;
			}
			
			if( m_bFirst == INIT_NEWSEARCH )
			{
				hstmt = sql->CreateStatement(sql, m_szSql[1]);
			}
			else
			{
				hstmt = sql->CreateStatement(sql, m_szSql[0]);
			}
			
			if( hstmt == NULL )
			{
				PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
				goto Finally;
			}
			
			idx = 0;
			lstartidx = m_lpage_A*ROW_A;
			sql->Bind(sql, idx++, 'X', &lstartidx, 4, DECRYPT);
			i = m_lpage_A*ROW_A+ROW_A;
			sql->Bind(sql, idx++, 'X', &i, 4, DECRYPT);
			
			if(sql->Execute(sql) == FALSE)
			{
				PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
				goto Finally;
			}
	
			// 등록된 코드 리스트를 페이지에 맞게 보여준다.
			for (i=0 ; i<ROW_A ; i++)
			{
				//자료가 없을때 화면을 클리어 시킨다.
				if( k == i )
				{
					k++;
					DlgTbl_SetStr ( ID_ADDRLIST, i, 0, "" );
					DlgTbl_SetStr ( ID_ADDRLIST, i, 1, "" );
					DlgTbl_SetStr ( ID_ADDRLIST, i, 2, "" );
					DlgTbl_SetStr ( ID_ADDRLIST, i, 3, "" );
				}
				else
				{
					if(sql->Next(sql) == FALSE)
					{
						k = i + 1;
						DlgTbl_SetStr ( ID_ADDRLIST, i, 0, "" );
						DlgTbl_SetStr ( ID_ADDRLIST, i, 1, "" );
						DlgTbl_SetStr ( ID_ADDRLIST, i, 2, "" );
						DlgTbl_SetStr ( ID_ADDRLIST, i, 3, "" );
						continue;
					}
					
					idx = 0;
					//동명
					Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
					sql->GetValue(sql, idx++, 'U', (long*)sztmp, 50, DECRYPT);
					DlgTbl_SetStr ( ID_ADDRLIST, i, 0, sztmp );
					//주소
					Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
					sql->GetValue(sql, idx++, 'U', (long*)sztmp, 250, DECRYPT);
					DlgTbl_SetStr ( ID_ADDRLIST, i, 1, sztmp );
					//전화번호
					Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
					sql->GetValue(sql, idx++, 'U', (long*)sztmp, 20, DECRYPT);
					DlgTbl_SetStr ( ID_ADDRLIST, i, 2, sztmp );
					//USE_CONT_NUM
					Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
					sql->GetValue(sql, idx++, 'U', (long*)sztmp, 20, DECRYPT);
					DlgTbl_SetStr ( ID_ADDRLIST, i, 3, sztmp );
				}
			}		
	Finally:
			//sql->Commit(sql);
			DelSqLite(sql);
	
			if(m_lTotpage_A > 0)
			{
				if( m_nActIndex_A < 0 )
				{
					m_nActIndex_A = 0;
				}
			
				DlgTbl_SetActive(ID_ADDRLIST , m_nActIndex_A+1 );
				DlgTbl_SetRowColor(ID_ADDRLIST, m_nActIndex_A+1, TABLEACTIVE_COLOR);
	
				Mem_Set( (byte*)m_szUse_cont_num, 0x00, sizeof(m_szUse_cont_num) );
				Str_Cpy( m_szUse_cont_num, DlgTbl_GetStr( ID_ADDRLIST, m_nActIndex_A, 3));
			}
		}

		ON_DRAW();
		return;
	}

//---------------------------------------------------------------------------------------------
	long Rcv_Tel(void)
	{
		char sztmp[32];
		char szUtmp[100];
		char szUrl[256];
		char szSql[256];
		char szDdd[7];
		char szExn[7];
		char szNum[7];
		char szMtridnum[20];
		char szType[10];
		char* sndbuf;
		long ret;
		long ntotcnt;
		
		Mem_Set((byte*)szType, 0x00, sizeof(szType));
		Mem_Set((byte*)szMtridnum, 0x00, sizeof(szMtridnum));
		Mem_Set((byte*)szDdd, 0x00, sizeof(szDdd));	
		Mem_Set((byte*)szExn, 0x00, sizeof(szExn));	
		Mem_Set((byte*)szNum, 0x00, sizeof(szNum));	

		if( m_lCondition == 3 || m_lCondition == 4 )
		{
			if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA16)) == 0 )
			{
				MessageBoxEx (CONFIRM_OK, "기물번호를 입력해주세요.");
				return 0;
			}

			Str_Cpy(szType, "B");
			Str_Cpy(szMtridnum, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA16)));
			Str_Cpy(szDdd, "");
			Str_Cpy(szExn, "");
			Str_Cpy(szNum, "");
		}
		else
		{
			if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA13)) == 0 ||
			    EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA14)) == 0 ||
			    EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA15)) == 0 )
			{
				MessageBoxEx (CONFIRM_OK, "번호를 입력해주세요.");
				return 0;
			}

			Str_Cpy(szType, "A");
			Str_Cpy(szMtridnum, "");
			Str_Cpy(szDdd, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA13)));
			Str_Cpy(szExn, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA14)));
			Str_Cpy(szNum, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA15)));
		}

		g_Sql_DirectExecute("DELETE FROM RCV_RELEASE");
		
		if( g_pjcomm != NULL)
		{
			JSON_Finalize( g_pjcomm );
			g_pjcomm = NULL;
		}
		g_pjcomm = g_CreateJsonHead(g_pjcomm, szUrl, 242430, FALSE);
		
		JSON_SetValue(g_pjcomm, 'C', "type",  szType );
		JSON_SetValue(g_pjcomm, 'C', "mtr_id_num",  szMtridnum );
		JSON_SetValue(g_pjcomm, 'C', "ddd",  szDdd );
		JSON_SetValue(g_pjcomm, 'C', "exn",  szExn );
		JSON_SetValue(g_pjcomm, 'C', "num",  szNum );
			
		sndbuf = JSON_toString(g_pjcomm);
		
		g_SeverConnection();
		
		g_Save_JsonFile(sndbuf);
		
		Mem_Set((byte*)sztmp, 0x00, sizeof(sztmp));	
		GET_FILENM(sztmp, SQLITE_DB);
		
		callBackfunc = TR242430; //통신완료 후에 호출 함수
		ret = HTTP_DownloadData(szUrl, "FR242430_IN",  "FR242430" , sndbuf, sztmp );
		return 0 ;
	}
	
//---------------------------------------------------------------------------------------------
	long TR242430(void)
	{
		long ntotcnt = 0;
		char szMsg[128];
		char szTmp[10];
		
		g_Sock_Close();
		
		if(g_Chk_Json(242430) >= 0)
		{
			TelDraw();
			ON_DRAW();
			return 1;
		}
		else
		{
			CloseMessageBox();
			ON_DRAW();
			return -1;
		}
	}


//------------------------------------------------------------------
	void TelDraw(void)
	{
	long i, idx;
	long k = ROW_T + 1;
	char sztmp[400];
	long ret = -1;	
	long lstartidx;
	handle hdb = NULL;
	handle hstmt = NULL;
	SQLITE sql = NewSqLite();

		if( m_lTabFlag == 0 )
		{
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TAB1), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TAB2), TRUE );
		}
		else
		{
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TAB1), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TAB2), FALSE );
		}

		if( m_lCondition == 0 )
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA1), "계약번호");
		}
		else if( m_lCondition == 1 )
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA1), "전화번호");
			
			ButCtrl_SetText(Get_hDlgCtrlByID(BID_TELSEARCH), "검색");
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA13), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA14), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA15), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA16), FALSE);
		}
		else if( m_lCondition == 2 )
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA1), "주소");
		}
		else if( m_lCondition == 3 )
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA1), "바코드");
			
			ButCtrl_SetText(Get_hDlgCtrlByID(BID_TELSEARCH), "바코드");
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA13), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA14), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA15), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA16), TRUE);
		}
		else if( m_lCondition == 4 )
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA1), "기물번호");

			ButCtrl_SetText(Get_hDlgCtrlByID(BID_TELSEARCH), "검색");
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA13), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA14), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA15), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA16), TRUE);
		}
		
		SPRINT(sztmp, "SELECT COUNT(*) FROM RCV_RELEASE",0,0,0);
		g_Sql_RetInt( sztmp, &m_lTotpage_T );
		
		if( m_lTotpage_T % ROW_T > 0 )
		{
			m_lTotpage_T = (m_lTotpage_T / ROW_T) + 1;
		}
		else
		{
			m_lTotpage_T = m_lTotpage_T / ROW_T;
		}
		
		//페이지
		SPRINT(m_szCnt_page_T, "%d/%d", m_lpage_T+1, m_lTotpage_T, 0);
		
		hdb = sql->Open(sql);
		if( hdb == NULL )
		{
			goto Finally;
		}
		
		hstmt = sql->CreateStatement(sql, "SELECT param8, CASE WHEN Length(Trim(param14))+Length(Trim(param15)) > 0 THEN ifnull(param14,'') ||' '|| ifnull(param15,'') ||'-'|| ifnull(param16,'') ||' '|| ifnull(param17,'') ELSE ifnull(param12,'') ||'-'|| ifnull(param13,'') ||' '|| ifnull(param16,'') ||' '|| ifnull(param17,'') END, param1 FROM RCV_RELEASE LIMIT ?, ?" );
				
		if( hstmt == NULL )
		{
			PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}
		
		idx = 0;
		lstartidx = m_lpage_T*ROW_T;
		sql->Bind(sql, idx++, 'X', &lstartidx, 4, DECRYPT);
		i = m_lpage_T*ROW_T+ROW_T;
		sql->Bind(sql, idx++, 'X', &i, 4, DECRYPT);
		
		if(sql->Execute(sql) == FALSE)
		{
			PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}

		// 등록된 코드 리스트를 페이지에 맞게 보여준다.
		for (i=0 ; i<ROW_T ; i++)
		{
			//자료가 없을때 화면을 클리어 시킨다.
			if( k == i )
			{
				k++;
				DlgTbl_SetStr ( ID_TELLIST, i, 0, "" );
				DlgTbl_SetStr ( ID_TELLIST, i, 1, "" );
				DlgTbl_SetStr ( ID_TELLIST, i, 2, "" );
			}
			else
			{
				if(sql->Next(sql) == FALSE)
				{
					k = i + 1;
					DlgTbl_SetStr ( ID_TELLIST, i, 0, "" );
					DlgTbl_SetStr ( ID_TELLIST, i, 1, "" );
					DlgTbl_SetStr ( ID_TELLIST, i, 2, "" );
					continue;
				}
				
				idx = 0;
				//동명
				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				sql->GetValue(sql, idx++, 'U', (long*)sztmp, 50, DECRYPT);
				DlgTbl_SetStr ( ID_TELLIST, i, 0, sztmp );
				//주소
				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				sql->GetValue(sql, idx++, 'U', (long*)sztmp, 300, DECRYPT);
				DlgTbl_SetStr ( ID_TELLIST, i, 1, sztmp );
				//전화번호
				//Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				//sql->GetValue(sql, idx++, 'U', (long*)sztmp, 30, DECRYPT);
				//DlgTbl_SetStr ( ID_TELLIST, i, 2, sztmp );
				//USE_CONT_NUM
				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				sql->GetValue(sql, idx++, 'U', (long*)sztmp, 30, DECRYPT);
				DlgTbl_SetStr ( ID_TELLIST, i, 2, sztmp );
			}
		}		
Finally:
		//sql->Commit(sql);
		DelSqLite(sql);
		
		if(m_lTotpage_T > 0)
		{
			if( m_nActIndex_T < 0 )
			{
				m_nActIndex_T = 0;
			}
		
			DlgTbl_SetActive(ID_TELLIST , m_nActIndex_T+1 );
			DlgTbl_SetRowColor(ID_TELLIST, m_nActIndex_T+1, TABLEACTIVE_COLOR);

			Mem_Set( (byte*)m_szUse_cont_num, 0x00, sizeof(m_szUse_cont_num) );
			Str_Cpy( m_szUse_cont_num, DlgTbl_GetStr( ID_TELLIST, m_nActIndex_T, 2));
		}
		
		ON_DRAW();
		return;
	}
	
	
//------------------------------------------------------------------
	//검색조건(m_lCondition) 0 = 계약번호, 1 = 전화번호, 2 = 주소, 3 = 바코드, 4 = 기물번호
	void Search_Info(void)
	{
		long chki = 0;
		char szTmp[30];
		char szWhere[400];
	
		if( m_lCondition == 0 )
		{
			if( m_bFirst == INIT_MAIN )
			{
				Mem_Set( (byte*)szTmp, 0x00, sizeof(szTmp) );
				Str_Cpy(szTmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA1)));
				Str_Chg(szTmp, STRCHG_DEL_NONDIGIT);
				
				if( Str_Len(szTmp) > 8 )
				{
					Mem_Set( (byte*)g_szUSE_CONT_NUM, 0x00, sizeof(g_szUSE_CONT_NUM) );
					Str_Cpy(g_szUSE_CONT_NUM, szTmp);
				}
				else
				{
					Mem_Set( (byte*)g_szUSE_CONT_NUM, 0x00, sizeof(g_szUSE_CONT_NUM) );
					Str_Cpy(g_szUSE_CONT_NUM, m_szUse_cont_num);
				}

				//Mem_Set( (byte*)m_szSearch_Use_cont_num[0], 0x00, sizeof(m_szSearch_Use_cont_num[0]) );
				//Str_Cpy(m_szSearch_Use_cont_num[0], g_szUSE_CONT_NUM);
				
				Mem_Set( (byte*)m_szSearch_Use_cont_num, 0x00, sizeof(m_szSearch_Use_cont_num) );
				Str_Cpy(m_szSearch_Use_cont_num, g_szUSE_CONT_NUM);
			}
			else if( m_bFirst == INIT_CALCUL )
			{
				Mem_Set( (byte*)szTmp, 0x00, sizeof(szTmp) );
				Str_Cpy(szTmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA4)));
				Str_Chg(szTmp, STRCHG_DEL_NONDIGIT);

				if( Str_Len(szTmp) > 8 )
				{
//					Mem_Set( (byte*)g_szUSE_CONT_NUM_Fee, 0x00, sizeof(g_szUSE_CONT_NUM_Fee) );
//					Str_Cpy(g_szUSE_CONT_NUM_Fee, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA4)));
					Mem_Set( (byte*)g_szUSE_CONT_NUM, 0x00, sizeof(g_szUSE_CONT_NUM) );
					Str_Cpy(g_szUSE_CONT_NUM, szTmp);
				}
				else
				{
//					Mem_Set( (byte*)g_szUSE_CONT_NUM_Fee, 0x00, sizeof(g_szUSE_CONT_NUM_Fee) );
//					Str_Cpy(g_szUSE_CONT_NUM_Fee, m_szUse_cont_num);
					Mem_Set( (byte*)g_szUSE_CONT_NUM, 0x00, sizeof(g_szUSE_CONT_NUM) );
					Str_Cpy(g_szUSE_CONT_NUM, m_szUse_cont_num);
				}

				//Mem_Set( (byte*)m_szSearch_Use_cont_num[1], 0x00, sizeof(m_szSearch_Use_cont_num[1]) );
				//Str_Cpy(m_szSearch_Use_cont_num[1], g_szUSE_CONT_NUM_Fee);
				Mem_Set( (byte*)m_szSearch_Use_cont_num, 0x00, sizeof(m_szSearch_Use_cont_num) );
				Str_Cpy(m_szSearch_Use_cont_num, g_szUSE_CONT_NUM);
			}
			
			ReDraw();
			Rcv_Info();
		}
//		else if( m_lCondition == 1 )
//		{
//			if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA13)) == 0 ||
//			    EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA14)) == 0 ||
//			    EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA15)) == 0 )
//			{
//				MessageBoxEx (CONFIRM_OK, "번호입력을 확인하세요.");
//				return;
//			}
//
//			Mem_Set( (byte*)m_szTelNum, 0x00, sizeof(m_szTelNum) );
//			Str_Cpy(m_szTelNum, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA13)));
//			Str_Chg(m_szTelNum, STRCHG_DEL_NONDIGIT);
//		
//			Mem_Set( (byte*)m_szSql, 0x00, sizeof(m_szSql) );
//			SPRINT(m_szSql[0], "SELECT TOWN, CASE WHEN Length(Trim(CO_LIVE_NM))+Length(Trim(BLD_NM)) > 0 THEN ifnull(CO_LIVE_NM,'') ||' '|| ifnull(BLD_NM,'') ||'-'|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') ELSE ifnull(ADDR1_M,'') ||'-'|| ifnull(ADDR1_S,'') ||' '|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') END, CP_DDD ||'-'|| CP_EXN ||'-'|| CP_NUM, USE_CONT_NUM FROM GUMDATA WHERE CP_DDD||''||CP_EXN||''||CP_NUM = '%s' ORDER BY DONG_ORD, HOUSE_NUM_ORD, MTR_COURSE LIMIT ?, ?", m_szTelNum, 0, 0);
			
			//TelDraw();
//		}
		else if( m_lCondition == 2 )
		{
			Mem_Set( (byte*)m_szSql, 0x00, sizeof(m_szSql) );
			Mem_Set( (byte*)m_szAddr, 0x00, sizeof(m_szAddr) );
			
			Str_Cpy( m_szSql[0], "SELECT TOWN, CASE WHEN Length(Trim(CO_LIVE_NM))+Length(Trim(BLD_NM)) > 0 THEN ifnull(CO_LIVE_NM,'') ||' '|| ifnull(BLD_NM,'') ||'-'|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') ELSE ifnull(ADDR1_M,'') ||'-'|| ifnull(ADDR1_S,'') ||' '|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') END, CP_DDD ||'-'|| CP_EXN ||'-'|| CP_NUM, USE_CONT_NUM FROM GUMDATA WHERE ");
			Str_Cpy( m_szSql[1], "SELECT TOWN, CASE WHEN Length(Trim(CO_LIVE_NM))+Length(Trim(BLD_NM)) > 0 THEN ifnull(CO_LIVE_NM,'') ||' '|| ifnull(BLD_NM,'') ||'-'|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') ELSE ifnull(NEW_ADDR_M,'') ||'-'|| ifnull(NEW_ADDR_S,'') ||' '|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') END, CP_DDD ||'-'|| CP_EXN ||'-'|| CP_NUM, USE_CONT_NUM FROM GUMDATA WHERE ");
			
			if( m_bFirst == INIT_JIBUNSEARCH )
			{
				//지번
				if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(CMB_DATA6)) == 0 ||
				    EditCtrl_GetStrLen(Get_hDlgCtrlByID(CMB_DATA7)) == 0 ||
				    EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA8)) == 0 )
				{
					MessageBoxEx (CONFIRM_OK, "주소입력을 확인하세요.");
					return;
				}

				if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(CMB_DATA6) ) > 0   ) 
				{
					Mem_Set( (byte*)szWhere, 0x00, sizeof(szWhere) );
					Str_Cat( szWhere, "AREA = '" );
					Str_Cat( szWhere, EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA6) ) );
					Str_Cat( szWhere, "' " );
					Str_Cat( m_szSql[0], szWhere );
					Str_Cat( m_szSql[1], szWhere );
					Str_Cat( m_szAddr, szWhere );
					
					chki++;
				}
				
				if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(CMB_DATA7) ) > 0   ) 
				{
					Mem_Set( (byte*)szWhere, 0x00, sizeof(szWhere) );				
					if(chki > 0)
						Str_Cat( szWhere, " AND " );
					Str_Cat( szWhere, "TOWN = '" );
					Str_Cat( szWhere, EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA7) ) );
					Str_Cat( szWhere, "' " );
					Str_Cat( m_szSql[0], szWhere );
					Str_Cat( m_szSql[1], szWhere );
					Str_Cat( m_szAddr, szWhere );
					
					chki++;
				}
		
				if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA8) ) > 0   ) 
				{
					Mem_Set( (byte*)szWhere, 0x00, sizeof(szWhere) );
					if(chki > 0)
						Str_Cat( szWhere, " AND " );
					Str_Cat( szWhere, "ADDR1_M = '" );
					Str_Cat( szWhere, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA8) ) );
					Str_Cat( szWhere, "' " );
					Str_Cat( m_szSql[0], szWhere );
					Str_Cat( m_szSql[1], szWhere );
					Str_Cat( m_szAddr, szWhere );
					
					chki++;
				}
				
				if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA9) ) > 0   ) 
				{
					Mem_Set( (byte*)szWhere, 0x00, sizeof(szWhere) );
					if(chki > 0)
						Str_Cat( szWhere, " AND " );
					Str_Cat( szWhere, "ADDR1_S = '" );
					Str_Cat( szWhere, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA9) ) );
					Str_Cat( szWhere, "' " );
					Str_Cat( m_szSql[0], szWhere );
					Str_Cat( m_szSql[1], szWhere );
					Str_Cat( m_szAddr, szWhere );
				}
			}
			else if( m_bFirst == INIT_NEWSEARCH )
			{
				//도로명
				if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(CMB_DATA10)) == 0 ||
				    EditCtrl_GetStrLen(Get_hDlgCtrlByID(CMB_DATA11)) == 0 ||
				    EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA11)) == 0 )
				{
					MessageBoxEx (CONFIRM_OK, "주소입력을 확인하세요.");
					return;
				}
	
				if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(CMB_DATA10) ) > 0   ) 
				{
					Mem_Set( (byte*)szWhere, 0x00, sizeof(szWhere) );
					Str_Cat( szWhere, "AREA = '" );
					Str_Cat( szWhere, EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA10) ) );
					Str_Cat( szWhere, "' " );
					Str_Cat( m_szSql[0], szWhere );
					Str_Cat( m_szSql[1], szWhere );
					Str_Cat( m_szAddr, szWhere );
					chki++;
				}
		
				if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(CMB_DATA11) ) > 0   ) 
				{
					Mem_Set( (byte*)szWhere, 0x00, sizeof(szWhere) );
					if(chki > 0)
						Str_Cat( szWhere, " AND " );
					Str_Cat( szWhere, "NEW_ROAD_NM = '" );
					Str_Cat( szWhere, EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA11) ) );
					Str_Cat( szWhere, "' " );
					Str_Cat( m_szSql[0], szWhere );
					Str_Cat( m_szSql[1], szWhere );
					Str_Cat( m_szAddr, szWhere );
					chki++;
				}
		
				if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA11) ) > 0   ) 
				{
					Mem_Set( (byte*)szWhere, 0x00, sizeof(szWhere) );
					if(chki > 0)
						Str_Cat( szWhere, " AND " );
					Str_Cat( szWhere, "NEW_ADDR_M = '" );
					Str_Cat( szWhere, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA11) ) );
					Str_Cat( szWhere, "' " );
					Str_Cat( m_szSql[0], szWhere );
					Str_Cat( m_szSql[1], szWhere );
					Str_Cat( m_szAddr, szWhere );
					chki++;
				}
				
				if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA12) ) > 0   ) 
				{
					Mem_Set( (byte*)szWhere, 0x00, sizeof(szWhere) );
					if(chki > 0)
						Str_Cat( szWhere, " AND " );
					Str_Cat( szWhere, "NEW_ADDR_S = '" );
					Str_Cat( szWhere, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA12) ) );
					Str_Cat( szWhere, "' " );
					Str_Cat( m_szSql[0], szWhere );
					Str_Cat( m_szSql[1], szWhere );
					Str_Cat( m_szAddr, szWhere );
				}
			}
			else if( m_bFirst == INIT_TGTSEARCH )
			{
				//공동
				if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(CMB_DATA8)) == 0 )
				{
					MessageBoxEx (CONFIRM_OK, "공동 주택 입력을 확인하세요.");
					return;
				}
				else if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(CMB_DATA9)) == 0 )
				{
					MessageBoxEx (CONFIRM_OK, "건물명 입력을 확인하세요.");
					return;
				}

				if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(CMB_DATA8) ) > 0   ) 
				{
					Mem_Set( (byte*)szWhere, 0x00, sizeof(szWhere) );
					Str_Cat( szWhere, "CO_LIVE_NM = '" );
					Str_Cat( szWhere, EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA8) ) );
					Str_Cat( szWhere, "' " );
					Str_Cat( m_szSql[0], szWhere );
					Str_Cat( m_szSql[1], szWhere );
					Str_Cat( m_szAddr, szWhere );
					
					chki++;
				}
		
				if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(CMB_DATA9) ) > 0   ) 
				{
					Mem_Set( (byte*)szWhere, 0x00, sizeof(szWhere) );
					if(chki > 0)
						Str_Cat( szWhere, " AND " );
					Str_Cat( szWhere, "BLD_NM = '" );
					Str_Cat( szWhere, EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA9) ) );
					Str_Cat( szWhere, "' " );
					Str_Cat( m_szSql[0], szWhere );
					Str_Cat( m_szSql[1], szWhere );
					Str_Cat( m_szAddr, szWhere );
					
					chki++;
				}
				
				if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA10) ) > 0   ) 
				{
					Mem_Set( (byte*)szWhere, 0x00, sizeof(szWhere) );
					if(chki > 0)
						Str_Cat( szWhere, " AND " );
					Str_Cat( szWhere, "HOSU = '" );
					Str_Cat( szWhere, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA10) ) );
					Str_Cat( szWhere, "' " );
					Str_Cat( m_szSql[0], szWhere );
					Str_Cat( m_szSql[1], szWhere );
					Str_Cat( m_szAddr, szWhere );
				}
			}
			
			
			Str_Cat( m_szSql[0], "ORDER BY DONG_ORD, HOUSE_NUM_ORD, MTR_COURSE LIMIT ?, ?"  );
			Str_Cat( m_szSql[1], "ORDER BY DONG_ORD, HOUSE_NUM_ORD, MTR_COURSE LIMIT ?, ?"  );

			m_lAddrFlag = 1;
			AddrDraw();
		}
		
		return;
	}


//---------------------------------------------------------------------------------------------
	long Rcv_Info(void)
	{
		char sztmp[32];
		char szUtmp[100];
		char szUrl[256];
		char szSql[256];
		char sznm_kor[64];
		char* sndbuf;
		long ret;
		long ntotcnt;
		
		//GUM_FEE_INFO 테이블 FLAG > = 1 요금조회 정보 , = 2 요금계산 정보
		//if( m_bFirst == INIT_MAIN )
		//{
		//	g_Sql_DirectExecute("DELETE FROM GUM_FEE_INFO WHERE FLAG = '1'");
		//}
		//else if( m_bFirst == INIT_CALCUL )
		//{
		//	g_Sql_DirectExecute("DELETE FROM GUM_FEE_INFO WHERE FLAG = '2'");
		//}
		g_Sql_DirectExecute("DELETE FROM GUM_FEE_INFO");
				
		if( g_pjcomm != NULL)
		{
			JSON_Finalize( g_pjcomm );
			g_pjcomm = NULL;
		}
		g_pjcomm = g_CreateJsonHead(g_pjcomm, szUrl, 242420, FALSE);
		

//		if( m_bFirst == INIT_MAIN )
//		{
//			JSON_SetValue( g_pjcomm, 'C', "use_cont_num",  g_szUSE_CONT_NUM );
//		}
//		else if( m_bFirst == INIT_CALCUL )
//		{
//			JSON_SetValue( g_pjcomm, 'C', "use_cont_num",  g_szUSE_CONT_NUM_Fee );
//		}

		JSON_SetValue( g_pjcomm, 'C', "use_cont_num",  g_szUSE_CONT_NUM );
			
		sndbuf = JSON_toString(g_pjcomm);
		
		g_SeverConnection();
		
		//g_Save_JsonFile(sndbuf);
		
		Mem_Set((byte*)sztmp, 0x00, sizeof(sztmp));	
		GET_FILENM(sztmp, SQLITE_DB);
		
		callBackfunc = TR242420; //통신완료 후에 호출 함수
		ret = HTTP_DownloadData(szUrl, "FR242420_IN",  "FR242420" , sndbuf, sztmp );
		return 0 ;
	}
	
//---------------------------------------------------------------------------------------------
	long TR242420(void)
	{
		long ntotcnt = 0;
		char szMsg[128];
		char szTmp[10];
		
		g_Sock_Close();
		
		if(g_Chk_Json(242420) >= 0)
		{
			//GUM_FEE_INFO 테이블 FLAG > = 1 요금조회 정보 , = 2 요금계산 정보
			//if( m_bFirst == INIT_MAIN )
			//{
			//	g_Sql_DirectExecute("UPDATE GUM_FEE_INFO SET FLAG = '1' WHERE FLAG <> '2' OR FLAG IS NULL");
				
				//HistoryDraw();
			//}
			//else if( m_bFirst == INIT_CALCUL )
			//{
			//	g_Sql_DirectExecute("UPDATE GUM_FEE_INFO SET FLAG = '2' WHERE FLAG <> '1' OR FLAG IS NULL");
				
				//Rcv_Calcul_Vc();
			//}
			
			Rcv_Calcul_Vc();

			ON_DRAW();
			return 1;
		}
		else
		{
			if( m_bFirst == INIT_MAIN )
			{
				//테이블 클리어
				Mem_Set( (byte*)m_szCnt_page_H, 0x00, sizeof(m_szCnt_page_H) );
				Mem_Set((byte*)m_szTableBuf_H+(COL_H*MAXCHAR_H), 0x00, sizeof(m_szTableBuf_H)-(COL_T*MAXCHAR_H));
			}
			
			CloseMessageBox();
			ON_DRAW();
			return -1;
		}
	}

//---------------------------------------------------------------------------------------------
	long Rcv_History(void)
	{
		char sztmp[32];
		char szUtmp[100];
		char szUrl[256];
		char szSql[256];
		char sznm_kor[64];
		char* sndbuf;
		long ret;
		long ntotcnt;
		
		g_Sql_DirectExecute("DELETE FROM RCV_TMP");
				
		if( g_pjcomm != NULL)
		{
			JSON_Finalize( g_pjcomm );
			g_pjcomm = NULL;
		}
		g_pjcomm = g_CreateJsonHead(g_pjcomm, szUrl, 242410, FALSE);
		
		JSON_SetValue( g_pjcomm, 'C', "use_cont_num",  g_szUSE_CONT_NUM );
			
		sndbuf = JSON_toString(g_pjcomm);
		
		g_SeverConnection();
		
		//g_Save_JsonFile(sndbuf);
		
		Mem_Set((byte*)sztmp, 0x00, sizeof(sztmp));	
		GET_FILENM(sztmp, SQLITE_DB);
		
		callBackfunc = TR242410; //통신완료 후에 호출 함수
		ret = HTTP_DownloadData(szUrl, "FR242410_IN",  "FR242410" , sndbuf, sztmp );
		return 0 ;
	}
	
//---------------------------------------------------------------------------------------------
	long TR242410(void)
	{
		long ntotcnt = 0;
		char szMsg[128];
		char szTmp[10];
		
		g_Sock_Close();
		
		if(g_Chk_Json(242410) >= 0)
		{
			//Rcv_Calcul_Amt();
			g_lDataflag = 1;
			g_nSmsFlag = 3;
			SetData_History();
			Card_Move("GM_SMSSND");
			ON_DRAW();
			return 1;
		}
		else
		{
			CloseMessageBox();
			ON_DRAW();
			return -1;
		}
	}


//---------------------------------------------------------------------------------------------
	long Rcv_Calcul_Amt(void)
	{
		char sztmp[32];
		char szUtmp[100];
		char szUrl[256];
		char szSql[256];
		char sznm_kor[64];
		char* sndbuf;
		long ret;
		long ntotcnt;
		
		if( g_pjcomm != NULL)
		{
			JSON_Finalize( g_pjcomm );
			g_pjcomm = NULL;
		}
		g_pjcomm = g_CreateJsonHead(g_pjcomm, szUrl, 242450, FALSE);
		
		//JSON_SetValue( g_pjcomm, 'C', "use_cont_num",  g_szUSE_CONT_NUM_Fee );
		JSON_SetValue( g_pjcomm, 'C', "use_cont_num",  g_szUSE_CONT_NUM );
			
		sndbuf = JSON_toString(g_pjcomm);
		
		g_SeverConnection();
		
		//g_Save_JsonFile(sndbuf);
		
		Mem_Set((byte*)sztmp, 0x00, sizeof(sztmp));	
		GET_FILENM(sztmp, SQLITE_DB);
		
		callBackfunc = TR242450; //통신완료 후에 호출 함수
		ret = HTTP_DownloadData(szUrl, "FR242450_IN",  "FR242450" , sndbuf, sztmp );
		return 0 ;
	}
	
//---------------------------------------------------------------------------------------------
	long TR242450(void)
	{
		long ntotcnt = 0;
		char szMsg[128];
		char szTmp[10];
		
		g_Sock_Close();
		
		if(g_Chk_Json(242450) >= 0)
		{
			if( m_bFirst == INIT_MAIN )
			{
			//	ServiceDraw(242450);
			//	ReDraw();
			//	HistoryDraw();
			}
			else
			{
			//	Rcv_Calcul_Vc();
			}
			
			ON_DRAW();
			return 1;
		}
		else
		{
			CloseMessageBox();
			ON_DRAW();
			return -1;
		}
	}
	
//---------------------------------------------------------------------------------------------
	long Rcv_Calcul_Vc(void)
	{
		char sztmp[32];
		char szUtmp[100];
		char szUrl[256];
		char szSql[256];
		char sznm_kor[64];
		char* sndbuf;
		long ret;
		long ntotcnt;
		
		if( g_pjcomm != NULL)
		{
			JSON_Finalize( g_pjcomm );
			g_pjcomm = NULL;
		}
		g_pjcomm = g_CreateJsonHead(g_pjcomm, szUrl, 242452, FALSE);
		
		//JSON_SetValue( g_pjcomm, 'C', "use_cont_num",  g_szUSE_CONT_NUM_Fee );
		JSON_SetValue( g_pjcomm, 'C', "use_cont_num",  g_szUSE_CONT_NUM );
			
		sndbuf = JSON_toString(g_pjcomm);
		
		g_SeverConnection();
		
		//g_Save_JsonFile(sndbuf);
		
		Mem_Set((byte*)sztmp, 0x00, sizeof(sztmp));	
		GET_FILENM(sztmp, SQLITE_DB);
		
		callBackfunc = TR242452; //통신완료 후에 호출 함수
		ret = HTTP_DownloadData(szUrl, "FR242452_IN",  "FR242452" , sndbuf, sztmp );
		return 0 ;
	}
	
//---------------------------------------------------------------------------------------------
	long TR242452(void)
	{
		long ntotcnt = 0;
		char szMsg[128];
		char szTmp[10];
		
		g_Sock_Close();
		
		if(g_Chk_Json(242452) >= 0)
		{
			Mem_Set((byte*) g_szCp_ddd, 0x00, sizeof( g_szCp_ddd) );
			Mem_Set((byte*) g_szCp_exn, 0x00, sizeof( g_szCp_exn) );
			Mem_Set((byte*) g_szCp_num, 0x00, sizeof( g_szCp_num) );

			if( m_bFirst == INIT_MAIN )
			{
				HistoryDraw();
				Mem_Set((byte*)&stFee_Calcul, 0x00, sizeof(stFee_Calcul));
			}
			else if( m_bFirst == INIT_CALCUL )
			{
				EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA5), "");
				ServiceDraw(242452);
				ReDraw();
				HistoryDraw();
				ClearDraw_Calcul();
			}

			ON_DRAW();
			return 1;
		}
		else
		{
			CloseMessageBox();
			ON_DRAW();
			return -1;
		}
		
	}


//---------------------------------------------------------------------------------------------
	long Rcv64302(void)
	{
		char sztmp[32];
		char szUtmp[100];
		char szUrl[256];
		char szSql[256];
		char sznm_kor[64];
		char szadj_ymd[20];
		char szindi_vc_after[15];
		char* sndbuf;
		long ret;
		long ntotcnt;

		if( g_pjcomm != NULL)
		{
			JSON_Finalize( g_pjcomm );
			g_pjcomm = NULL;
		}
		g_pjcomm = g_CreateJsonHead(g_pjcomm, szUrl, 64302, FALSE);
		
		JSON_SetValue(g_pjcomm, 'C', "promise_assign_seq",  "" );
		//JSON_SetValue(g_pjcomm, 'C', "prod_cont_seq", "001" );
		//JSON_SetValue(g_pjcomm, 'C', "adj_type_cd",   "10" );
		//JSON_SetValue(g_pjcomm, 'C', "adj_ymd",       szadj_ymd );
		//JSON_SetValue(g_pjcomm, 'C', "indi_vc_after", szindi_vc_after );
		//JSON_SetValue(g_pjcomm, 'C', "indi_va_after", "" );
		//JSON_SetValue(g_pjcomm, 'C', "indi_vm_after", "" );

		Add_Item(g_pjcomm);

		sndbuf = JSON_toString(g_pjcomm);
		
		g_SeverConnection();
		
		g_Save_JsonFile(sndbuf);
		
		Mem_Set((byte*)sztmp, 0x00, sizeof(sztmp));	
		GET_FILENM(sztmp, SQLITE_DB);
		
		callBackfunc = TR64302; //통신완료 후에 호출 함수
		ret = HTTP_DownloadData(szUrl, "FR64302_IN",  "FR64302" , sndbuf, sztmp );
		return 0 ;
	}
	
//---------------------------------------------------------------------------------------------
	long TR64302(void)
	{
		long ntotcnt = 0;
		char szMsg[128];
		char szTmp[10];
		
		g_Sock_Close();
		
		if(g_Chk_Json(64302) >= 0)
		{
			Rcv_Calcul_Detal();
			ON_DRAW();
			return 1;
		}
		else
		{
			CloseMessageBox();
			ON_DRAW();
			return -1;
		}
	}


//---------------------------------------------------------------------------------------------
	long Add_Item(handle pj)
	{
	long ret = -1;
	long idx = 0;
	handle hdb = NULL;
	handle hstmt = NULL;
	SQLITE sql = NewSqLite();
	handle js = NULL;
	char szuse_cont_num[11];
	char szprod_cont_seq[11];
	char szadj_ymd[9];
	char szindi_vc_after[11];
	char szindi_va_after[11];
	char szindi_vm_after[11];
		
		
		Mem_Set((byte*)szadj_ymd, 0x00, sizeof(szadj_ymd));	
		Str_ItoA(Time_GetDate(), szadj_ymd, 10);
		Mem_Set((byte*)g_szIndi_Cur, 0x00, sizeof(g_szIndi_Cur));	
		Str_Cpy(g_szIndi_Cur, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA5)));

		js = JSON_Create(JSON_Array);
		if( js == NULL  )
		{
			goto Finally;
		}

		JSON_AddArrayItem(js);		
		
		JSON_SetArrayItem(js, 'C', "adj_type_cd",  "10" );
		JSON_SetArrayItem(js, 'C', "use_cont_num" , g_szUSE_CONT_NUM  );
		JSON_SetArrayItem(js, 'C', "prod_cont_seq", "001" );
		JSON_SetArrayItem(js, 'C', "adj_ymd",       szadj_ymd );
		JSON_SetArrayItem(js, 'C', "indi_vc_after", g_szIndi_Cur );
		JSON_SetArrayItem(js, 'C', "indi_va_after", "" );
		JSON_SetArrayItem(js, 'C', "indi_vm_after", "" );
		
		ret =1;

		JSON_Attach(pj, "item", js);

Finally:

		if(js != NULL)
		{
			JSON_Finalize(js);
			js = NULL;
		}

		return ret;
	}


	
//---------------------------------------------------------------------------------------------
	long Rcv_Calcul_Detal(void)
	{
		char sztmp[32];
		char szUtmp[100];
		char szUrl[256];
		char szSql[256];
		char sznm_kor[64];
		char szadj_ymd[20];
		char szindi_vc_after[15];
		char* sndbuf;
		long ret;
		long ntotcnt;
		
		g_Sql_DirectExecute("DELETE FROM RCV_CALCUL");
		
		//Mem_Set((byte*)szadj_ymd, 0x00, sizeof(szadj_ymd));	
		//Str_ItoA(Time_GetDate(), szadj_ymd, 10);
		//Mem_Set((byte*)szindi_vc_after, 0x00, sizeof(szindi_vc_after));	
		//Str_Cpy(g_szIndi_Cur, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA5)));
				
		if( g_pjcomm != NULL)
		{
			JSON_Finalize( g_pjcomm );
			g_pjcomm = NULL;
		}
		g_pjcomm = g_CreateJsonHead(g_pjcomm, szUrl, 242451, FALSE);
		
		//JSON_SetValue(g_pjcomm, 'C', "use_cont_num",  g_szUSE_CONT_NUM_Fee );
		JSON_SetValue( g_pjcomm, 'C', "use_cont_num",  g_szUSE_CONT_NUM );
			
		sndbuf = JSON_toString(g_pjcomm);
		
		g_SeverConnection();
		
		g_Save_JsonFile(sndbuf);
		
		Mem_Set((byte*)sztmp, 0x00, sizeof(sztmp));	
		GET_FILENM(sztmp, SQLITE_DB);
		
		callBackfunc = TR242451; //통신완료 후에 호출 함수
		ret = HTTP_DownloadData(szUrl, "FR242451_IN",  "FR242451" , sndbuf, sztmp );
		return 0 ;
	}
	
//---------------------------------------------------------------------------------------------
	long TR242451(void)
	{
		long ntotcnt = 0;
		char szMsg[128];
		char szTmp[10];
		
		g_Sock_Close();
		
		if(g_Chk_Json(242451) >= 0)
		{
			m_lCalcul_Viewpage = 1;
			g_lPAYFlag = 1;
			SetData_Calcul();
			ServiceDraw(242452);
			ReDraw();
			HistoryDraw();
			PageDraw();
			ON_DRAW();
			return 1;
		}
		else
		{
			CloseMessageBox();
			ON_DRAW();
			return -1;
		}
	}


//---------------------------------------------------------------------------------------------
	void HistoryDraw(void)
	{
	long i, idx;
	long k = ROW_H + 1;
	char sztmp[400];
	char szName[101];
	char szTotAmt[101];
	char szCompensVc[101];
	char szCpddd[6];
	char szCpexn[6];
	char szCpnum[6];
	long ret = -1;	
	long lstartidx;
	handle hdb = NULL;
	handle hstmt = NULL;
	SQLITE sql = NewSqLite();

/*
		if( m_lTabFlag == 0 )
		{
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TAB1), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TAB2), TRUE );
		}
		else
		{
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TAB1), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TAB2), FALSE );
		}

		if( m_lCondition == 0 )
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA1), "계약번호");
		}
		else if( m_lCondition == 1 )
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA1), "전화번호");
		}
		else if( m_lCondition == 2 )
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA1), "주소");
		}

		if( m_bFirst == INIT_JIBUNSEARCH )
		{
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_JIBUN), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_ROADNM), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TOGETHER), TRUE );
		}
		else if( m_bFirst == INIT_TGTSEARCH )
		{
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_JIBUN), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_ROADNM), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TOGETHER), FALSE );
		}
		else if( m_bFirst == INIT_NEWSEARCH )
		{
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_JIBUN), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_ROADNM), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TOGETHER), TRUE );
		}
*/

		if( m_bFirst == INIT_MAIN )
		{
			//g_Sql_RetInt( "SELECT COUNT(*) FROM GUM_FEE_INFO WHERE FLAG = '1'", &m_lTotpage_H );
			g_Sql_RetInt( "SELECT COUNT(*) FROM GUM_FEE_INFO", &m_lTotpage_H );
			
			if( m_lTotpage_H % ROW_H > 0 )
			{
				m_lTotpage_H = (m_lTotpage_H / ROW_H) + 1;
			}
			else
			{
				m_lTotpage_H = m_lTotpage_H / ROW_H;
			}
			//페이지
			SPRINT(m_szCnt_page_H, "%d/%d", m_lpage_H+1, m_lTotpage_H, 0);
			
			hdb = sql->Open(sql);
			if( hdb == NULL )
			{
				goto Finally;
			}
		
			//hstmt = sql->CreateStatement(sql, "SELECT REQ_YM, INDI_COMPENS_VC, USE_QTY, USE_AMT, PAY_YN, CURR_ADDR_UNION, NEW_ADDR_UNION, ifnull(CUST_NM, '') ||'/'|| ifnull(FIRM_NM, ''), TOT_UNPAY_AMT, CP_DDD, CP_EXN, CP_NUM, CUST_NUM FROM GUM_FEE_INFO WHERE FLAG = '1' ORDER BY REQ_YM DESC LIMIT ?, ?");
			hstmt = sql->CreateStatement(sql, "SELECT REQ_YM, INDI_COMPENS_VC, USE_QTY, USE_AMT, PAY_YN, CURR_ADDR_UNION, NEW_ADDR_UNION, ifnull(CUST_NM, '') ||'/'|| ifnull(FIRM_NM, ''), TOT_UNPAY_AMT, trim(CP_DDD), trim(CP_EXN), trim(CP_NUM), CUST_NUM FROM GUM_FEE_INFO ORDER BY REQ_YM DESC LIMIT ?, ?");
			if( hstmt == NULL )
			{
				PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
				goto Finally;
			}
			
			idx = 0;
			lstartidx = m_lpage_H*ROW_H;
			sql->Bind(sql, idx++, 'X', &lstartidx, 4, DECRYPT);
			i = m_lpage_H*ROW_H+ROW_H;
			sql->Bind(sql, idx++, 'X', &i, 4, DECRYPT);
			
			if(sql->Execute(sql) == FALSE)
			{
				PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
				goto Finally;
			}
	
			// 등록된 코드 리스트를 페이지에 맞게 보여준다.
			for (i=0 ; i<ROW_H ; i++)
			{
				//자료가 없을때 화면을 클리어 시킨다.
				if( k == i )
				{
					k++;
					DlgTbl_SetStr ( ID_HISLIST, i, 0, "" );
					DlgTbl_SetStr ( ID_HISLIST, i, 1, "" );
					DlgTbl_SetStr ( ID_HISLIST, i, 2, "" );
					DlgTbl_SetStr ( ID_HISLIST, i, 3, "" );
					DlgTbl_SetStr ( ID_HISLIST, i, 4, "" );
					DlgTbl_SetStr ( ID_HISLIST, i, 5, "" );
					DlgTbl_SetStr ( ID_HISLIST, i, 6, "" );
					DlgTbl_SetStr ( ID_HISLIST, i, 7, "" );
					DlgTbl_SetStr ( ID_HISLIST, i, 8, "" );
					DlgTbl_SetStr ( ID_HISLIST, i, 9, "" );
					DlgTbl_SetStr ( ID_HISLIST, i, 10, "" );
					DlgTbl_SetStr ( ID_HISLIST, i, 11, "" );
				}
				else
				{
					if(sql->Next(sql) == FALSE)
					{
						k = i + 1;
						DlgTbl_SetStr ( ID_HISLIST, i, 0, "" );
						DlgTbl_SetStr ( ID_HISLIST, i, 1, "" );
						DlgTbl_SetStr ( ID_HISLIST, i, 2, "" );
						DlgTbl_SetStr ( ID_HISLIST, i, 3, "" );
						DlgTbl_SetStr ( ID_HISLIST, i, 4, "" );
						DlgTbl_SetStr ( ID_HISLIST, i, 5, "" );
						DlgTbl_SetStr ( ID_HISLIST, i, 6, "" );
						DlgTbl_SetStr ( ID_HISLIST, i, 7, "" );
						DlgTbl_SetStr ( ID_HISLIST, i, 8, "" );
						DlgTbl_SetStr ( ID_HISLIST, i, 9, "" );
						DlgTbl_SetStr ( ID_HISLIST, i, 10, "" );
						DlgTbl_SetStr ( ID_HISLIST, i, 11, "" );
						continue;
					}
					
					idx = 0;
					//청구년월
					Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
					sql->GetValue(sql, 0, 'U', (long*)sztmp, 10, DECRYPT);
					DlgTbl_SetStr ( ID_HISLIST, i, 0, sztmp );
					//지침
					Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
					sql->GetValue(sql, 1, 'U', (long*)sztmp, 20, DECRYPT);
					DlgTbl_SetStr ( ID_HISLIST, i, 1, sztmp );
					//사용량
					Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
					sql->GetValue(sql, 2, 'U', (long*)sztmp, 20, DECRYPT);
					DlgTbl_SetStr ( ID_HISLIST, i, 2, sztmp );
					//금액
					Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
					sql->GetValue(sql, 3, 'U', (long*)sztmp, 20, DECRYPT);
					Str_Chg(sztmp, STRCHG_INS_COMMA);
					DlgTbl_SetStr ( ID_HISLIST, i, 3, sztmp );
					//납부
					Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
					sql->GetValue(sql, 4, 'U', (long*)sztmp, 20, DECRYPT);
					DlgTbl_SetStr ( ID_HISLIST, i, 4, sztmp );
					//상세주소
					Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
					if( g_nAddrFlag == 0 )
					{
						sql->GetValue(sql, 5, 'U', (long*)sztmp, 300, DECRYPT);
					}
					else
					{
						sql->GetValue(sql, 6, 'U', (long*)sztmp, 300, DECRYPT);
					}
					DlgTbl_SetStr ( ID_HISLIST, i, 5, sztmp );
					//성명/상호
					Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
					sql->GetValue(sql, 7, 'U', (long*)sztmp, 20, DECRYPT);
					DlgTbl_SetStr ( ID_HISLIST, i, 6, sztmp );
	
					//미납합계
					Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
					sql->GetValue(sql, 8, 'U', (long*)sztmp, 20, DECRYPT);
					DlgTbl_SetStr ( ID_HISLIST, i, 7, sztmp );
	
					//CP_DDD
					Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
					sql->GetValue(sql, 9, 'U', (long*)sztmp, 5, DECRYPT);
					DlgTbl_SetStr ( ID_HISLIST, i, 8, sztmp );
					//CP_EXN
					Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
					sql->GetValue(sql, 10, 'U', (long*)sztmp, 5, DECRYPT);
					DlgTbl_SetStr ( ID_HISLIST, i, 9, sztmp );
					//CP_NUM
					Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
					sql->GetValue(sql, 11, 'U', (long*)sztmp, 5, DECRYPT);
					DlgTbl_SetStr ( ID_HISLIST, i, 10, sztmp );
					//CUST_NUM
					Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
					sql->GetValue(sql, 12, 'U', (long*)sztmp, 15, DECRYPT);
					DlgTbl_SetStr ( ID_HISLIST, i, 11, sztmp );
				}
			}		
	Finally:
			//sql->Commit(sql);
			DelSqLite(sql);
	
			if(m_lTotpage_H > 0)
			{
				if( m_nActIndex_H < 0 )
				{
					m_nActIndex_H = 0;
				}
			
				DlgTbl_SetActive(ID_TELLIST , m_nActIndex_H+1 );
				DlgTbl_SetRowColor(ID_TELLIST, m_nActIndex_H+1, TABLEACTIVE_COLOR);
	
				//청구년월
				//EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA9), DlgTbl_GetStr( ID_HISLIST, m_nActIndex_H, 0));

				//주소
				EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA1), DlgTbl_GetStr( ID_HISLIST, m_nActIndex_H, 5));
				//성명/상호
				EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA3), DlgTbl_GetStr( ID_HISLIST, m_nActIndex_H, 6));
				//미납합계
				Str_Cpy(szTotAmt, DlgTbl_GetStr( ID_HISLIST, m_nActIndex_H, 7));
				Str_Chg(szTotAmt, STRCHG_INS_COMMA);
				EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA5), szTotAmt);

				if( Str_Len(g_szCp_ddd) > 0 ||
				    Str_Len(g_szCp_exn) > 0 ||
				    Str_Len(g_szCp_num) > 0 )
				{
					//전화번호
					EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA2), g_szCp_ddd);
					EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA2), g_szCp_exn);
					EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA3), g_szCp_num);
				}
				else
				{
					//전화번호
					EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA2), DlgTbl_GetStr( ID_HISLIST, m_nActIndex_H, 8));
					EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA2), DlgTbl_GetStr( ID_HISLIST, m_nActIndex_H, 9));
					EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA3), DlgTbl_GetStr( ID_HISLIST, m_nActIndex_H, 10));
				}

				//CUST_NUM
				Str_Cpy(g_szCUST_NUM, DlgTbl_GetStr( ID_HISLIST, m_nActIndex_H, 11));
			}
			else
			{
				//청구년월
				//EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA9), "");

				//주소
				EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA1), "");
				//성명/상호
				EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA3), "");
				//미납합계
				EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA5), "");
				//전화번호
				EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA2), "");
				EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA2), "");
				EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA3), "");
			}
		}
		else if( m_bFirst == INIT_CALCUL )
		{
			hdb = sql->Open(sql);
			if( hdb == NULL )
			{
				goto Finally2;
			}
		
			if( g_nAddrFlag == 0 )
			{
				//hstmt = sql->CreateStatement(sql, "SELECT CURR_ADDR_UNION, ifnull(CUST_NM, '') ||'/'|| ifnull(FIRM_NM, ''), TOT_UNPAY_AMT, CUST_NUM FROM GUM_FEE_INFO WHERE FLAG = '2' AND REQ_YM = (SELECT MAX(REQ_YM) FROM GUM_FEE_INFO)");
				hstmt = sql->CreateStatement(sql, "SELECT CURR_ADDR_UNION, ifnull(CUST_NM, '') ||'/'|| ifnull(FIRM_NM, ''), TOT_UNPAY_AMT, CUST_NUM, trim(CP_DDD), trim(CP_EXN), trim(CP_NUM) FROM GUM_FEE_INFO WHERE REQ_YM = (SELECT MAX(REQ_YM) FROM GUM_FEE_INFO)");
			}
			else
			{
				//hstmt = sql->CreateStatement(sql, "SELECT NEW_ADDR_UNION, ifnull(CUST_NM, '') ||'/'|| ifnull(FIRM_NM, ''), TOT_UNPAY_AMT, CUST_NUM FROM GUM_FEE_INFO WHERE FLAG = '2' AND REQ_YM = (SELECT MAX(REQ_YM) FROM GUM_FEE_INFO)");
				hstmt = sql->CreateStatement(sql, "SELECT NEW_ADDR_UNION, ifnull(CUST_NM, '') ||'/'|| ifnull(FIRM_NM, ''), TOT_UNPAY_AMT, CUST_NUM, trim(CP_DDD), trim(CP_EXN), trim(CP_NUM) FROM GUM_FEE_INFO WHERE REQ_YM = (SELECT MAX(REQ_YM) FROM GUM_FEE_INFO)");
			}
			
			if( hstmt == NULL )
			{
				PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
				goto Finally2;
			}
			
			if(sql->Execute(sql) == FALSE)
			{
				PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
				goto Finally2;
			}

			Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
			Mem_Set( (byte*)szName, 0x00, sizeof(szName) );
			Mem_Set( (byte*)szTotAmt, 0x00, sizeof(szTotAmt) );
			Mem_Set( (byte*)szCompensVc, 0x00, sizeof(szCompensVc) );
			Mem_Set( (byte*)szCpddd, 0x00, sizeof(szCpddd) );
			Mem_Set( (byte*)szCpexn, 0x00, sizeof(szCpexn) );
			Mem_Set( (byte*)szCpnum, 0x00, sizeof(szCpnum) );
			if(sql->Next(sql) == TRUE )
			{	
				i = 0;
				sql->GetValue( sql, i++, 'U', (long*) sztmp	      , 499+ 1, DECRYPT );
				sql->GetValue( sql, i++, 'U', (long*) szName	  ,  99+ 1, DECRYPT );
				sql->GetValue( sql, i++, 'U', (long*) szTotAmt	  ,  99+ 1, DECRYPT );
				//sql->GetValue( sql, i++, 'U', (long*) szCompensVc ,  99+ 1, DECRYPT );
				sql->GetValue( sql, i++, 'U', (long*) g_szCUST_NUM	,  14+ 1, DECRYPT );
				sql->GetValue( sql, i++, 'U', (long*) szCpddd	,  5+ 1, DECRYPT );
				sql->GetValue( sql, i++, 'U', (long*) szCpexn	,  5+ 1, DECRYPT );
				sql->GetValue( sql, i++, 'U', (long*) szCpnum	,  5+ 1, DECRYPT );
			}
			else
			{
				PRINT("::sql->Next fail [%s]",sql->GetLastError(sql),0,0);
				goto Finally2;
			}
	
			//EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA4), g_szUSE_CONT_NUM_Fee);
			//EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA4), g_szUSE_CONT_NUM);
			
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA10), sztmp);
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA12), szName);

			Str_Chg(szTotAmt, STRCHG_INS_COMMA);
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA14), szTotAmt);
			if( Str_Len(g_szCp_ddd) > 0 ||
			    Str_Len(g_szCp_exn) > 0 ||
			    Str_Len(g_szCp_num) > 0 )
			{
				//전화번호
				EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA4), g_szCp_ddd);
				EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA6), g_szCp_exn);
				EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA7), g_szCp_num);
			}
			else
			{
				//전화번호
				EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA4), szCpddd);
				EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA6), szCpexn);
				EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA7), szCpnum);
			}

			ServiceDraw(242452);

	Finally2:
			//sql->Commit(sql);
			DelSqLite(sql);
		}

		ON_DRAW();
		return;
	}
	
	
//---------------------------------------------------------------------------------------------
	long ServiceDraw(long nservicenum)
	{
	char szJsonpath[500];
	char szMsg[500];
	char szCol[128];
	char szDate[50];
	long *nCol;
	long nCnt = 0;
	long fd, i;
	long chkmsg = 0;
	long chkcode = 0;
	long fsize = 0;
	char *pStr;
	char *szcode;
	char *szmessage;
	char *szitem;
	char szType[2] = {0,0};
	long ret = 11;
	handle hitem = NULL;
	handle hcnt = NULL;
		
		//MessageBox(MESSAGE, "자료 확인중 입니다.", 0, 0, 0, 0);
		
		Mem_Set((byte*) szJsonpath, 0x00, sizeof( szJsonpath) );
		SPRINT(szJsonpath, "%sFR%d_Res.JSON",  SYSTEM_COMM, nservicenum, 0 );
		
		if(FFS_Exist(szJsonpath) != TRUE )
		{
			Mem_Set((byte*) szJsonpath, 0x00, sizeof( szJsonpath) );
			SPRINT(szJsonpath, "%sFR%d.JSON",  SYSTEM_COMM, nservicenum, 0 );
		}
		
		fsize = FFS_GetSize(szJsonpath);
		if(fsize <= 15)
		{
			ret = -1;
			goto Finally;
		}
		pStr = Mem_Alloc(fsize);
		fd = FFS_Open(szJsonpath, FS_READ_MODE, FS_NORMAL_FLAG);
		if(fd == -1)
		{
			ret = -1;
			goto Finally;
		}

		FFS_Read(fd, (byte*)pStr, fsize);
		for(i = 0 ; i < fsize-9 ; i++ )
		{
			if( Mem_Cmp((byte*)pStr+i,(byte*) "\"code\"", 6) == 0  )
			{
				chkcode++;
			}
			if( Mem_Cmp((byte*)pStr+i,(byte*) "\"message\"", 9) == 0  )
			{
				chkmsg++;
			}
			if(chkmsg > 0 &&  chkcode > 0)
				break;
		}

		FFS_Close(fd);
		
		Mem_Free((byte*)pStr);
		if(chkmsg == 0 || chkcode == 0)
		{
			ret = -1;
			goto Finally;
		}
		
		if(g_pjcomm != NULL)
		{
			JSON_Finalize(g_pjcomm);
			g_pjcomm = NULL;
		}
		
		g_pjcomm = JSON_Create( JSON_Object );
		if(g_pjcomm == NULL)
		{
			ret = -1;
			goto Finally;
		}
	
		if( JSON_LoadFile(g_pjcomm, szJsonpath) > 0)
		{
			szcode    = JSON_GetValue (g_pjcomm, "code",    szType);
			szmessage = JSON_GetValue (g_pjcomm, "message", szType);

			if( Str_Cmp(szcode, "0000") != 0)
			{
			  char* pMsg = NULL;
			  
				Mem_Set((byte*) szJsonpath, 0x00, sizeof( szJsonpath) );
				if(Str_Len(szmessage) < 500 )
					SQL_ConvMbStr( szMsg, szmessage);
				
				//SPRINT(szJsonpath, "[%s] %s", szcode, szMsg, 0 );
				pMsg = g_Chk_Code(szJsonpath, szcode, szMsg);
			
				MessageBoxEx (WARNING_OK, pMsg);
				ON_DRAW();
				ret = -1;
			}
			else
			{
				ret = 0;
				szitem =JSON_GetValue(g_pjcomm, "item", szType);
				if(szitem != NULL)
				{
					if( Str_Len(szitem) > 0 )
					{
						hitem = JSON_Create( JSON_Array );
						if( hitem != NULL)
						{
							JSON_toJson(hitem, szitem ) ;
							ret = JSON_GetArrayCount( hitem );
							
							if( ret > 0 )
							{
								if( nservicenum == 242450 )
								{
									//미납합계
									Mem_Set((byte*) stFee_Calcul.TOT_UNPAY_AMT, 0x00, sizeof( stFee_Calcul.TOT_UNPAY_AMT) );
									Mem_Set((byte*) szCol, 0x00, sizeof( szCol) );
									nCol = (long*)JSON_GetArrayItem ( hitem, 0, "unpay_amt", szType);
									//nCol = (long*)JSON_GetArrayItem ( hitem, 0, "param1", szType);
									nCnt = *nCol;
									Str_ItoA( nCnt, szCol, 10);
									Str_Cpy(stFee_Calcul.TOT_UNPAY_AMT, szCol);
									Str_Chg(szCol, STRCHG_INS_COMMA);
									EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA14),  szCol);
								}
								else if( nservicenum == 242452 )
								{
									//전월지침 VC
									Mem_Set((byte*) stFee_Calcul.INDI_COMPENS_VC, 0x00, sizeof( stFee_Calcul.INDI_COMPENS_VC) );
									Mem_Set((byte*) szCol, 0x00, sizeof( szCol) );
									nCol = (long*)JSON_GetArrayItem ( hitem, 0, "indi_compens_vc", szType);
									//nCol = (long*)JSON_GetArrayItem ( hitem, 0, "param2", szType);
									nCnt = *nCol;
									Str_ItoA(nCnt, szCol, 10);
									Str_Cpy(stFee_Calcul.INDI_COMPENS_VC, szCol);
									EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA18),  szCol);
								}
							}

							JSON_Finalize(hitem);
							hitem = NULL;
						}
					}
				}
			}
		}
		else
		{
			ret = 0;
		}
		
Finally:		
		
		if(g_pjcomm != NULL)
		{
			JSON_Finalize(g_pjcomm);
			g_pjcomm = NULL;
		}
		
		g_Close_SubDlg();
		EvtDraw();
		
		return ret;
	}
	
	//---------------------------------------------------------------------------------------------
	long Analy_Phone(char*phone, char* num1, char* num2, char* num3 )
	{
	long len;
	
		Str_Chg(phone, STRCHG_DEL_NONDIGIT );
		len = Str_Len(phone);
		
		if( len == 9 )
		{
			Mem_Cpy( (byte*)num1, (byte*)phone,  2);
			Mem_Cpy( (byte*)num2, (byte*)phone+2,  3);
			Mem_Cpy( (byte*)num3, (byte*)phone+5,  4);
		}
		else if( len == 10 )
		{
			if( Mem_Cmp((byte*)phone, (byte*)"01", 2) == 0  )
			{
				Mem_Cpy( (byte*)num1, (byte*)phone,  3);
				Mem_Cpy( (byte*)num2, (byte*)phone+3,  3);
				Mem_Cpy( (byte*)num3, (byte*)phone+6,  4);
			}
			else if(  Mem_Cmp((byte*)phone, (byte*)"02", 2) == 0 )
			{
				Mem_Cpy( (byte*)num1, (byte*)phone,  2);
				Mem_Cpy( (byte*)num2, (byte*)phone+2,  4);
				Mem_Cpy( (byte*)num3, (byte*)phone+6,  4);
			}
			else
			{
				Mem_Cpy( (byte*)num1, (byte*)phone,  3);
				Mem_Cpy( (byte*)num2, (byte*)phone+3,  3);
				Mem_Cpy( (byte*)num3, (byte*)phone+6,  4);
			}
		}
		else if( len == 11 )
		{
				Mem_Cpy( (byte*)num1, (byte*)phone,  3);
				Mem_Cpy( (byte*)num2, (byte*)phone+3,  4);
				Mem_Cpy( (byte*)num3, (byte*)phone+7,  4);
		}
		else if( len == 12 )
		{
				Mem_Cpy( (byte*)num1, (byte*)phone,  4);
				Mem_Cpy( (byte*)num2, (byte*)phone+4,  4);
				Mem_Cpy( (byte*)num3, (byte*)phone+8,  4);
		}
		else
		{
			return -1;
		}
		
		return 1;
	}
	
	//---------------------------------------------------------------------------------------------
	//이미 검색된 요금계산 결과 삭제
	void ClearDraw_Calcul(void)
	{
		m_lCalcul_Viewpage = 1;
		Mem_Set((byte*)&stFee_Calcul, 0x00, sizeof(stFee_Calcul));
		PageDraw();
		
		//page1
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA20) , "");
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA22) , "");
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA24) , "");
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA26) , "");
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA28) , "");
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA30) , "");
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA32) , "");
		//page2
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA49) , "");
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA51) , "");
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA53) , "");
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA55) , "");
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA57) , "");
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA59) , "");
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA61) , "");
		//page3
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA63) , "");
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA65) , "");
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA67) , "");
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA69) , "");
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA71) , "");
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA73) , "");
		//page4
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA75) , "");
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA77) , "");
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA79) , "");
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA81) , "");
		//page5
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA83) , "");
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA85) , "");
	}

//-----------------------------------------------------------------------------------------------
	void Barcode(void)
	{
		long ret = 0;
		handle h = NULL;
		handle hdata = NULL;

		//2017-08-22 Sanghyun Lee
		//카메라 바코드(스마트폰 전용) & 빔 바코드 구분 사용 추가(설정은 공통메뉴에서 진행)
		if( Str_Cmp(g_szBarcodeSet, PHOTO_BARCODE) == 0 && theDevInfo.m_nType > FAMILY_PDA )
		{
			h = JSON_Create( JSON_Object );
			if (h)
			{
				hdata = JSON_Create( JSON_Object );
				if(hdata == NULL)
				{
					goto Finally;
				}
				
				JSON_SetValue	(hdata	, 'C', "desc"				, "카메라바코드");
				JSON_SetValue	(hdata	, 'C', "imgSaveEnabled"		, "false");						//{true, false}
				JSON_SetValue	(hdata	, 'C', "imgOutPath"			, "Barcode/barcode.jpg");		//Smart 하위 경로만 설정
				
				JSON_SetValue	(h		, 'C', "method"				, "BarcodeActivity");
				
				JSON_Attach 	(h		, "data"					, hdata);
			
				System_Call		("Native_System_Call" , JSON_toString(h));
			}
			
		Finally:
		
			if (h)
			{
				JSON_Finalize(h);
			}	
		
			if (hdata)
			{
				JSON_Finalize(hdata);
			}	
		}
		else
		{
			//스마트폰 -> Barcode_Init, Barcode_Exit 필요 ,, PDA -> Barcode_Init, Barcode_Exit 불필요 
			if( theDevInfo.m_nType > FAMILY_PDA )
			{
				Barcode_Init();
			}

			ret = Barcode_SendCommand( "start" );
		}

		return;
	}

//=======================================================================================
	void OnBarcodeRead(void)
	{
	char szSql[300];
	char szBar[10];
	long lCnt, lRow;
	long RetFlag = -1;
	long ret = 0;

		if( Str_Cmp(g_szBarcodeSet, BEAM_BARCODE) == 0 )
		{
			Mem_Set( (byte*)m_szBarcode_Num, 0x00, sizeof(m_szBarcode_Num) );
			ret = Barcode_Read( m_szBarcode_Num );	
			if( ret < 0)
			{
				MessageBoxEx (ERROR_OK, "바코드 읽기 실패");
				goto Finally;
			}
		}

		if( Str_Len(m_szBarcode_Num) > 3 )
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA16), m_szBarcode_Num );
			RetFlag = 1;
		}
		else
		{
			MessageBoxEx (CONFIRM_OK, "바코드 길이가 맞지 않습니다.");
		}

Finally:
		
		if( theDevInfo.m_nType > FAMILY_PDA && Str_Cmp(g_szBarcodeSet, BEAM_BARCODE) == 0 )
		{
			Barcode_Exit();
		}

		//PRINT("m_szBarcode_Num  : %s",m_szBarcode_Num,0,0);
		if( RetFlag > 0 )
		{
			Rcv_Tel();
		}
		
		ON_DRAW();
		return;
	}


//=======================================================================================
	void PDA_OnBarcodeRead(void)
	{
	char sztmp[100];
	char szSql[300];
	char szBar[10];
	long lCnt, lRow;
	long RetFlag = -1;
	long ret = 0;

		Mem_Set( (byte*)m_szBarcode_Num, 0x00, sizeof(m_szBarcode_Num) );
		ret = Barcode_Read( m_szBarcode_Num );	
		if( ret < 0)
		{
			MessageBoxEx (ERROR_OK, "바코드 읽기 실패");
			goto Finally;
		}

		if( Str_Len(m_szBarcode_Num) > 3 )
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA16), m_szBarcode_Num );
			RetFlag = 1;
		}
		else
		{
			MessageBoxEx (CONFIRM_OK, "바코드 길이가 맞지 않습니다.");
		}

Finally:
		
		if( RetFlag > 0 )
		{
			Rcv_Tel();
		}
		ON_DRAW();
		return;
	}

}



