/*----------------------------------------------------------------------------------
	Project Name:
	Smart Application : 카드 기본폼
	Smart Version : Smart 1.0
	Copyright(c) 2014  ValueCMD Co., Ltd.
----------------------------------------------------------------------------------*/
card GM_SMSGM
{
	#include <include.h>
	#include "globalcard.h"
	#include "SQL.lib"
	#include "Calendar.h"
	#include "Biglong.lib"
	
//	#define USE_ON_EXIT
	#define USE_ON_CHAR
//	#define USE_ON_KEY
//	#define USE_ON_DRAW
//	#define USE_ON_TIMER
	#define USE_ON_POINTING
	#define USE_ON_SELECT

	#include "DefEvent.h"
	
	//BUTTON ID define
	BEGIN_BUTTON_ID()
//문자발송
		DEF_BUTTON_ID ( BID_TAB1 )
		DEF_BUTTON_ID ( BID_SMSPREV )
		DEF_BUTTON_ID ( BID_SMSNEXT )
		DEF_BUTTON_ID ( BID_ADDR )
		DEF_BUTTON_ID ( BID_CALENDAR )
		DEF_BUTTON_ID ( BID_DELETE )
		DEF_BUTTON_ID ( BID_SND)
		DEF_BUTTON_ID ( BID_RSRVCNCL )
		DEF_BUTTON_ID ( BID_TOTCHK )
//등록/변경
		DEF_BUTTON_ID ( BID_TAB2 )
		DEF_BUTTON_ID ( BID_CHG_QUICK )
		DEF_BUTTON_ID ( BID_CHGADDR )
		DEF_BUTTON_ID ( BID_CHGPREV )
		DEF_BUTTON_ID ( BID_CHGNEXT )
		DEF_BUTTON_ID ( BID_SEARCH )
//등록/변경-주소검색
		DEF_BUTTON_ID ( BID_FIND )
		DEF_BUTTON_ID ( BID_FINDPREV )
		DEF_BUTTON_ID ( BID_FINDNEXT )
		DEF_BUTTON_ID ( BID_JIBUN )
		DEF_BUTTON_ID ( BID_ROADNM )
		DEF_BUTTON_ID ( BID_TOGETHER )
		DEF_BUTTON_ID ( BID_CANCEL )
		DEF_BUTTON_ID ( BID_SAVE )
	//화면 상단 공통 메뉴 모음
		DEF_BUTTON_ID ( BID_HOME )		//홈
		DEF_BUTTON_ID ( BID_MENU )		//메뉴
		DEF_BUTTON_ID ( BID_KEYBOARD )	//키보드
		DEF_BUTTON_ID ( BID_SCREEN )	//화면 상하
		DEF_BUTTON_ID ( BID_CMMNWORK )	//공통업무
		DEF_BUTTON_ID ( BID_PREV )		//이전
		DEF_BUTTON_ID ( BID_EXIT )		//종료
	END_BUTTON_ID()
	
	BEGIN_OBJECT_ID()
		DEF_OBJECT_ID ( TXT_TITLE )		//타이틀
		DEF_OBJECT_ID ( TXT_BORDER )
//문자발송
		DEF_OBJECT_ID ( TXT_DATA1 )
		DEF_OBJECT_ID ( TXT_DATA2 )
		DEF_OBJECT_ID ( TXT_DATA3 )
		DEF_OBJECT_ID ( TXT_DATA4 )
		DEF_OBJECT_ID ( TXT_DATA5 )
		DEF_OBJECT_ID ( TXT_DATA6 )
		DEF_OBJECT_ID ( TXT_DATA23 )
		DEF_OBJECT_ID ( TXT_DATA25 )
//등록/변경
		DEF_OBJECT_ID ( TXT_DATA24 )
//등록/변경-주소검색
		DEF_OBJECT_ID ( TXT_DATA7 )
		DEF_OBJECT_ID ( TXT_DATA8 )
		DEF_OBJECT_ID ( TXT_DATA9 )
		DEF_OBJECT_ID ( TXT_DATA10 )
		DEF_OBJECT_ID ( TXT_DATA11 )
		DEF_OBJECT_ID ( TXT_DATA12 )
		DEF_OBJECT_ID ( TXT_DATA13 )
		DEF_OBJECT_ID ( TXT_DATA14 )
		DEF_OBJECT_ID ( TXT_DATA15 )
		DEF_OBJECT_ID ( TXT_DATA16 )
		DEF_OBJECT_ID ( TXT_DATA17 )
		DEF_OBJECT_ID ( TXT_DATA18 )
		DEF_OBJECT_ID ( TXT_DATA19 )
		DEF_OBJECT_ID ( TXT_DATA20 )
//등록/변경-기물,사용계약번호검색
		DEF_OBJECT_ID ( TXT_DATA21 )
		DEF_OBJECT_ID ( TXT_DATA22 )
		
//포인팅 자판
		DEF_OBJECT_ID ( TXT_KEY_ONE )
		DEF_OBJECT_ID ( TXT_KEY_TWO )
		DEF_OBJECT_ID ( TXT_KEY_THREE )
		DEF_OBJECT_ID ( TXT_KEY_FOUR )
		DEF_OBJECT_ID ( TXT_KEY_FIVE )
		DEF_OBJECT_ID ( TXT_KEY_SIX )
		DEF_OBJECT_ID ( TXT_KEY_SEVEN )
		DEF_OBJECT_ID ( TXT_KEY_EIGHT )
		DEF_OBJECT_ID ( TXT_KEY_NINE )
		DEF_OBJECT_ID ( TXT_KEY_ZERO )
		DEF_OBJECT_ID ( TXT_KEY_DEL )
		
//문자발송
		DEF_OBJECT_ID ( EDT_DATA1 )
		DEF_OBJECT_ID ( EDT_DATA2 )
//등록/변경-주소검색
		DEF_OBJECT_ID ( EDT_DATA3 )
		DEF_OBJECT_ID ( EDT_DATA4 )
		DEF_OBJECT_ID ( EDT_DATA5 )
		DEF_OBJECT_ID ( EDT_DATA6 )
		DEF_OBJECT_ID ( EDT_DATA7 )
		DEF_OBJECT_ID ( EDT_DATA8 )
		DEF_OBJECT_ID ( EDT_DATA9 )
//등록/변경-기물,사용계약번호검색
		DEF_OBJECT_ID ( EDT_DATA10 )
		DEF_OBJECT_ID ( EDT_DATA11 )

		DEF_OBJECT_ID ( ICON_TITLE )		//타이틀
		
//문자발송
		DEF_OBJECT_ID ( ID_SMSLIST )	// 테이블 리스트
//등록/변경
		DEF_OBJECT_ID ( ID_CHGLIST )	// 테이블 리스트
//등록/변경-주소검색
		DEF_OBJECT_ID ( ID_FINDLIST )	// 테이블 리스트

//문자발송
		DEF_OBJECT_ID ( CMB_DATA1 )
		DEF_OBJECT_ID ( CMB_DATA2 = CMB_DATA1 + 3 )
//등록/변경-주소검색
		DEF_OBJECT_ID ( CMB_DATA3 = CMB_DATA2 + 3 )
		DEF_OBJECT_ID ( CMB_DATA4 = CMB_DATA3 + 3 )
		DEF_OBJECT_ID ( CMB_DATA5 = CMB_DATA4 + 3 )
		DEF_OBJECT_ID ( CMB_DATA6 = CMB_DATA5 + 3 )
		DEF_OBJECT_ID ( CMB_DATA7 = CMB_DATA6 + 3 )
		DEF_OBJECT_ID ( CMB_DATA8 = CMB_DATA7 + 3 )
		DEF_OBJECT_ID ( CMB_DATA9 = CMB_DATA8 + 3 )
		DEF_OBJECT_ID ( CMB_DATA10 = CMB_DATA9 + 3 )
		DEF_OBJECT_ID ( CMB_DATA11 = CMB_DATA10 + 3 )
//문자발송 - 예약시간 입력
		DEF_OBJECT_ID ( CMB_DATA12 = CMB_DATA11 + 3 )
	END_OBJECT_ID()
	
	#define INIT_MAIN	1
	#define INIT_CHANGE 2
	#define INIT_ADDR   3
	#define INIT_NUM	4
		
	SysButCtrl SysButRes_MAIN[] =
	 {
		  SYS_BUT_IMG (  BTNX_1, BTNY_1, BTNWD_1, BTNHT_1, 0, 0, BUTSTY_BOLD , 0, 0, 0, OBJ_BUT, GID_HOME,  0),
		  SYS_BUT_IMG (  BTNX_2, BTNY_1, BTNWD_1, BTNHT_1, 0, 0, BUTSTY_BOLD , 0, 0, 0, OBJ_BUT, GID_KEYBOARD,  0),
		  SYS_BUT_IMG (  BTNX_3, BTNY_1, BTNWD_1, BTNHT_1, 0, 0, BUTSTY_BOLD , 0, 0, 0, OBJ_BUT, GID_SCREEN, 0),
		  SYS_BUT_IMG (  BTNX_4, BTNY_1, BTNWD_1, BTNHT_1, 0, 0, BUTSTY_BOLD , 0, 0, 0, OBJ_BUT, GID_CMMNWK,  0),
		  SYS_BUT_IMG (  BTNX_5, BTNY_1, BTNWD_1, BTNHT_1, 0, 0, BUTSTY_BOLD , 0, 0, 0, OBJ_BUT, GID_VMEXIT, 0),
		  SYS_BUT_IMG (  BTNX_6, BTNY_2, BTNWD_2, BTNHT_2, 0, 0, BUTSTY_BOLD|BUTSTY_BORDER , 0, TRANSPARENT, TRANSPARENT, OBJ_BUT, GID_MENU, 0),
		  SYS_BUT_IMG (  BTNX_7, BTNY_2, BTNWD_2, BTNHT_2, 0, 0, BUTSTY_BOLD|BUTSTY_BORDER , 0, TRANSPARENT, TRANSPARENT, OBJ_BUT, GID_PREV, 0),
	 };
	
	//-------------------------------------------------------------------------------------------------	
	//	Table정의에 관련된 내용들(문자발송)
	//-------------------------------------------------------------------------------------------------
	#define		ROW_S	    	5					// table의 행개수
	#define		COL_S	    	9					// table의 열개수
	#define		GRID_H_H_S		(CHT+10)			// table 헤더 행 높이
	#define		GRID_H_H_S_P	(CHT+20)			// table 헤더 행 높이 PDA
	#define		GRID_H_S		(CHT+50)			// table 바디 행 높이
	#define		GRID_H_S_P		(CHT+60)			// table 바디 행 높이 PDA
	#define		GRID_CLR_S		TRANSPARENT   		// table 클리어 color
	#define		GRID_X_S		STARTX 			    // table 시작x좌표
	#define		MAXCHAR_S		300 			    // table에 들어갈수 있는 최대  char 길이
	#define		GRID_Y_S		STARTY+205	 	    // table 시작y좌표
	#define		GRID_Y_S_P  	STARTY+120  		    // table 시작y좌표
	#define		GRID_ENDY_S		(GRID_Y_S+(ROW_S+1)*GRID_H_S) //table마지막 row의 Y값
	
	char	m_szTableBuf_S [COL_S*(ROW_S+1)*MAXCHAR_S]; // 각 CELL에 들어가 텍스트 내용을 담은 버퍼
		
	Column m_stGridTitle_S[] = {
		{""              , CWD*3    , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0},
		{"동명"          , CWD*8 , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0},
		{"주소"          , CWD*12+10 , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0},
		{"발신자"        , CWD*7+13 , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0},
		{"상태"          , CWD*9 , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0},
		{"USE_CONT_NUM"  , CWD*0 , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0},
		{"CUST_NM"       , CWD*0 , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0},
		{"MTR_ID_NUM"    , CWD*0 , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0},
		{"PLAN_DTM"      , CWD*0 , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0}
	};

	//-------------------------------------------------------------------------------------------------	
	//	Table정의에 관련된 내용들(등록/변경)
	//-------------------------------------------------------------------------------------------------
	#define		ROW_C	    7					// table의 행개수
	#define		COL_C	    5					// table의 열개수
	#define		GRID_H_C	(CHT+47)			// table 행 높이
	#define		GRID_H_C_P	(CHT+59)			// table 행 높이 PDA
	#define		GRID_CLR_C	TRANSPARENT   		// table 클리어 color
	#define		GRID_X_C	STARTX 			    // table 시작x좌표
	#define		MAXCHAR_C	400 			    // table에 들어갈수 있는 최대  char 길이
	#define		GRID_Y_C	STARTY+205	 	    // table 시작y좌표
	#define		GRID_Y_C_P  STARTY+120  		    // table 시작y좌표
	#define		GRID_ENDY_C	(GRID_Y_C+(ROW_C+1)*GRID_H_C) //table마지막 row의 Y값
	
	char	m_szTableBuf_C [COL_C*(ROW_C+1)*MAXCHAR_C]; // 각 CELL에 들어가 텍스트 내용을 담은 버퍼
		
	Column m_stGridTitle_C[] = {
		{"동명"          , CWD*8     , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0},
		{"주소"          , CWD*16+13 , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0},
		{"전화번호"      , CWD*15+10 , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0},
		{"USE_CONT_NUM"  , CWD*0     , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0},
		{"CUST_NM"       , CWD*0     , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0}
	};

	//-------------------------------------------------------------------------------------------------	
	//	Table정의에 관련된 내용들(등록/변경-주소검색)
	//-------------------------------------------------------------------------------------------------
	#define		ROW_F	    3					// table의 행개수
	#define		COL_F	    4					// table의 열개수
	#define		GRID_H_F	(CHT+17)			// table 행 높이
	#define		GRID_H_F_P	(CHT+25)			// table 행 높이 PDA
	#define		GRID_FLR_F	TRANSPARENT   		// table 클리어 color
	#define		GRID_X_F	STARTX 			    // table 시작x좌표
	#define		MAXCHAR_F	201 			    // table에 들어갈수 있는 최대  char 길이
	#define		GRID_Y_F	STARTY+485	 	    // table 시작y좌표
	#define		GRID_Y_F_P  STARTY+430  		    // table 시작y좌표
	#define		GRID_ENDY_F	(GRID_Y_F+(ROW_F+1)*GRID_H_F) //table마지막 row의 Y값
	
	char	m_szTableBuf_F [COL_F*(ROW_F+1)*MAXCHAR_F]; // 각 CELL에 들어가 텍스트 내용을 담은 버퍼
		
	Column m_stGridTitle_F[] = {
		{"동명"          , CWD*8     , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0},
		{"주소"          , CWD*16+13 , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0},
		{"전화번호"      , CWD*15+10 , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0},
		{"USE_CONT_NUM"  , CWD*0     , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0}
	};

	typedef struct _USERINFO
	{
		char szCp_ddd[6];
		char szCp_exn[6];
		char szCp_num[6];
		char szSend_type[5];
		char szReseve_dtm[30];
		char szCust_nm[50];
		char szCust_num[20];
		char szNonpay_manage_sec[20];
		char szUse_cont_num[20];
		char szSms_num[20];
		char szSmsdesc[400];
	}	USERINFO;

	USERINFO m_stUserinfo;

	long m_bFirst;
	
    long m_lSmsAgreeFlag = 0;  // = 0 문자검침 동의 세대여부 수신 , = 1 문자검침 동의 세대여부 수신 X 후 문자대상 상태체크
	long m_lActFlag = 0;		// =0 active된 테이블 색상 컬러 해제, =1 active된 테이블 색상 컬러 해제 실행X
	long m_lSmsRow = -1;		// 전화번호변경 row
	long m_lSmsViewRow = -1;	// 회신 문자 화면 row
	long m_lpage_S = 0;			// 현재 페이지
	long m_lTotpage_S = 0;		// 총 페이지
	long m_nActIndex_S = -1;	// 선택된 row index
	char m_szCnt_page_S[20];	// 페이지 표시 변수
	char m_szTot_Cnt_S[20];		// 총 대상 수
	char m_szSel_Cnt_S[20];		// 선택 대상 
	char m_szSendStr[20];
	char m_szCobSel[50];

	long m_lpage_C = 0;			// 현재 페이지
	long m_lTotpage_C = 0;		// 총 페이지
	long m_nActIndex_C = -1;	// 선택된 row index
	char m_szCnt_page_C[20];	// 페이지 표시 변수

	long m_lpage_F = 0;			// 현재 페이지
	long m_lTotpage_F = 0;		// 총 페이지
	long m_nActIndex_F = -1;	// 선택된 row index
	char m_szCnt_page_F[20];	// 페이지 표시 변수
	char m_szCp_ddd[6];
	char m_szCp_exn[6];
	char m_szCp_num[6];
	char m_szSearchtype[20];	//검색 조건 타입
	char m_szSql[1500];	
	char m_szReserve_Dtm[50];	//예약발송 -> 예약일자 입력(발송 진행)
	char m_szPlan_Dtm[50];		//예약발송 -> 발송 예정일지(이미 예약인 대상의 시간)

	long m_lEditCtrlIndex = -1;
	long m_lSearchFlag = 0;		// 등록/변경 주소검색 Flag, 0 = 등록/변경, 1 = 주소검색
	long m_lSearchType = 0;		// = 0 지번 , = 1 도로명 , = 2 공동 , = 3 기물번호 , = 4 사용계약번호
	long m_lTotChkFlag = 0;		//문자대상 전체 선택Flag = 0 선택 X , = 1 전체선택
	long m_lSndSmsMsgFlag = 0;	// = 0 메세지출력 X, = 1 즉시발송&예약발송 , = 2 예약취소 , = 3 삭제, = 4 회신문자 확인
	long m_lAddrFlag = 0;		// = 0 지번 , = 1 도로명 ==>> 등록/변경 대상검색 시 주소결과 표현.

	long SearchStr(char *Str, CodeTable *CT);	
	long SearchCD(char *CD, CodeTable *CT);	    
	void SetBtnImg(void);
	void SetStyle(void);
	void SetCombo(void);
	long Analy_Phone(char*phone, char* num1, char* num2, char* num3 );
	long Validate(long BtnId);

	//문자 발송 대상
	void ReDraw(void);
	void Save_Row(long row, long col);
	long Rcv_Info(void);
	long TR25007(void);
	//문자 그룹 발송
	void Set_SmsInfo(void);
	void Set_SmsDesc(long nservicenum);
	long Rcv_SmsDesc(void);
	long TR25009(void);
	long Snd_GrpSms(void);
	long TR25003(void);
	//문자검침 상태
	long Rcv_Many(void);
	long TR25010(void);
	long Rcv_SmsSts(void);
	long TR25008(void);
	long GmSms_Sts(long nservicenum);
	void GmSms_Sts_Cnt(void);
	
	//문자 대상 삭제
	long Snd_Delete(void);
	long TR25005(void);

	//문자 대상 예약취소
	long Snd_Reserve_Cancel(void);
	long TR25006(void);
	
	//등록/변경
	void ChgDraw(void);
	bool Search_Addr(void);
	void FindDraw(void);
	void Grid_QuickList(void);
	void OnList(quad lParam);
	
	//번호변경
	long TR25002(void);
	long Snd_Change(void);
	
	// 메인 다이얼로그
	//---------------------------------------------------------------
	DlgObject	DlgRes[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_TEXT(0, 0, 998, BTNHT_1, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, WHITE, TRANSPARENT, TXT_BORDER, ""),
		DLG_ICON(0, BTNY_2, ICON_TITLE, ""),		
		//타이틀
		DLG_TEXT(TX, TY, STWD, STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "문자검침"),

		DLG_BUTTON(STARTX,      STARTY+65, 500, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB1, "문자발송"),
		DLG_BUTTON(STARTX+500,  STARTY+65, 500, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB2, "등록/변경"),
		DLG_BUTTON(STARTX,     STARTY+135, 250, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ADDR, "도로명"),
		DLG_BUTTON(STARTX+250, STARTY+135, 200, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SMSPREV, "▲"),
		DLG_BUTTON(STARTX+450, STARTY+135, 200, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SMSNEXT, "▼"),
		
		DLG_TEXT(STARTX,	   STARTY+830, 530, 69, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA25, m_szPlan_Dtm),
		DLG_BUTTON(STARTX,     STARTY+830, 500, 69, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_DELETE, "삭제"),
		DLG_BUTTON(STARTX+530, STARTY+830, 470, 69, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_RSRVCNCL, "예약취소"),
		DLG_BUTTON(STARTX+500, STARTY+830, 500, 69, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SND, "문자발송"),

		DLG_TEXT(STARTX,       STARTY+705, 200,  60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA23, m_szCnt_page_S),
		DLG_TEXT(STARTX+200,   STARTY+705, 150,  60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA1, "전체"),
		DLG_TEXT(STARTX+350,   STARTY+705, 200,  60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA2, m_szTot_Cnt_S),
		DLG_TEXT(STARTX+550,   STARTY+705, 250,  60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA3, "선택건수"),
		DLG_TEXT(STARTX+800,   STARTY+705, 200,  60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA4, m_szSel_Cnt_S),

		DLG_TEXT(STARTX+200,    STARTY+765, 300, 65, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA5, ""),
		DLG_BUTTON(STARTX+500,	STARTY+765, 110, 65, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC , "", BID_CALENDAR, "▼"),
		//DLG_EDIT(STARTX+760,    STARTY+765, 100, 65, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA1, 2,  ""),
		DLG_TEXT(STARTX+840,    STARTY+765,  40, 65, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA6, ":"),
		DLG_EDIT(STARTX+880,    STARTY+765, 120, 65, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA2, 2,  ""),

		// 리스트 
		DLG_TABLE(GRID_X_S, GRID_Y_S, ROW_S, COL_S, 0, GRID_H_S, 1, GRID_H_H_S, SEL_COL, MAXCHAR_S, m_stGridTitle_S, ID_SMSLIST, m_szTableBuf_S),
		DLG_BUTTON(STARTX,      STARTY+205, 75, 50, 0, 0, 0, BUTSTY_BOLD|BUTSTY_BORDER, TXTCTRLFRCOLOR, TABLETITLE_COLOR, CALL_FUNC , "", BID_TOTCHK, CHKOFF),

		DLG_COMBO(STARTX+650,  STARTY+135, 350, 290, 100, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA1, 20),
		DLG_COMBO(STARTX,      STARTY+765, 200, 290, 90, 65, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA2, 20),
		DLG_COMBO(STARTX+610,    STARTY+765, 230, 65, 110, 65, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA12, 5),
	};	
	
	// PDA 다이얼로그
	//---------------------------------------------------------------
	DlgObject	DlgRes_P[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_ICON(P_TTLTX, 0, ICON_TITLE, ""),		
		//타이틀
		DLG_TEXT(P_TX, P_TY, P_STWD, P_STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, WHITE, TRANSPARENT, TXT_TITLE, "문자검침"),
		DLG_BUTTON(P_BTNX, P_BTNY, P_BTNWD, P_BTNHD, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", GID_PREV, ""),

		DLG_BUTTON(STARTX,      STARTY-40, 500, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB1, "문자발송"),
		DLG_BUTTON(STARTX+500,  STARTY-40, 500, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB2, "등록/변경"),
		DLG_BUTTON(STARTX,      STARTY+40, 250, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ADDR, "도로명"),
		DLG_BUTTON(STARTX+250,  STARTY+40, 200, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SMSPREV, "▲"),
		DLG_BUTTON(STARTX+450,  STARTY+40, 200, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SMSNEXT, "▼"),
		
		DLG_TEXT(STARTX,       STARTY+675, 200,  70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA23, m_szCnt_page_S),
		DLG_TEXT(STARTX+200,   STARTY+675, 150,  70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA1, "전체"),
		DLG_TEXT(STARTX+350,   STARTY+675, 200,  70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA2, m_szTot_Cnt_S),
		DLG_TEXT(STARTX+550,   STARTY+675, 250,  70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA3, "선택건수"),
		DLG_TEXT(STARTX+800,   STARTY+675, 200,  70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA4, m_szSel_Cnt_S),
		DLG_TEXT(STARTX+200,    STARTY+745, 300, 80, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA5, ""),
		DLG_BUTTON(STARTX+500,	STARTY+745, 110, 80, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC , "", BID_CALENDAR, "▼"),
		//DLG_EDIT(STARTX+760,    STARTY+765, 100, 80, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA1, 2,  ""),
		DLG_TEXT(STARTX+840,    STARTY+745,  40, 80, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA6, ":"),
		DLG_EDIT(STARTX+880,    STARTY+745, 120, 80, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA2, 2,  ""),

		DLG_TEXT(STARTX,	   STARTY+825, 530, 74, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA25, m_szPlan_Dtm),
		DLG_BUTTON(STARTX,     STARTY+825, 500, 74, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_DELETE, "삭제"),
		DLG_BUTTON(STARTX+530, STARTY+825, 470, 74, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_RSRVCNCL, "예약취소"),
		DLG_BUTTON(STARTX+500, STARTY+825, 500, 74, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SND, "문자발송"),

		// 리스트 
		DLG_TABLE(GRID_X_S, GRID_Y_S_P, ROW_S, COL_S, 0, GRID_H_S_P, 1, GRID_H_H_S_P, SEL_COL, MAXCHAR_S, m_stGridTitle_S, ID_SMSLIST, m_szTableBuf_S),
		DLG_BUTTON(STARTX,      STARTY+120, 75, GRID_H_H_S_P, 0, 0, 0, BUTSTY_BOLD|BUTSTY_BORDER, TXTCTRLFRCOLOR, TABLETITLE_COLOR, CALL_FUNC , "", BID_TOTCHK, CHKOFF),

		DLG_COMBO(STARTX+650,   STARTY+40, 350, 290, 100, 80, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA1, 20),
		DLG_COMBO(STARTX,      STARTY+745, 200, 290, 90, 80, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA2, 20),
		DLG_COMBO(STARTX+610,  STARTY+745, 230, 65, 110, 80, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA12, 5),
	};		
	
	
	// 메인 다이얼로그(등록/변경)
	//---------------------------------------------------------------
	DlgObject	DlgRes_Chg[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_TEXT(0, 0, 998, BTNHT_1, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, WHITE, TRANSPARENT, TXT_BORDER, ""),
		DLG_ICON(0, BTNY_2, ICON_TITLE, ""),		
		//타이틀
		DLG_TEXT(TX, TY, STWD, STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "문자검침"),

		DLG_BUTTON(STARTX,      STARTY+65, 500, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB1, "문자발송"),
		DLG_BUTTON(STARTX+500,  STARTY+65, 500, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB2, "등록/변경"),
		
		DLG_BUTTON(STARTX,     STARTY+135, 200, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SEARCH, "검색"),
		DLG_BUTTON(STARTX+200, STARTY+135, 200, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CHGPREV, "▲"),
		DLG_BUTTON(STARTX+400, STARTY+135, 200, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CHGNEXT, "▼"),
		DLG_BUTTON(STARTX+600, STARTY+135, 200, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CHGADDR, "지번"),
		
		DLG_BUTTON(STARTX+800, STARTY+135, 200, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CHG_QUICK, m_szCnt_page_C),
		//DLG_TEXT(STARTX+740,   STARTY+135, 260,  70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA24, m_szCnt_page_C),

		// 리스트
		DLG_TABLE(GRID_X_C, GRID_Y_C, ROW_C, COL_C, 0, GRID_H_C, 1, GRID_H_C, SEL_ROW, MAXCHAR_C, m_stGridTitle_C, ID_CHGLIST, m_szTableBuf_C),
	};	
	
	// PDA 다이얼로그(등록/변경)
	//---------------------------------------------------------------
	DlgObject	DlgRes_Chg_P[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_ICON(P_TTLTX, 0, ICON_TITLE, ""),		
		//타이틀
		DLG_TEXT(P_TX, P_TY, P_STWD, P_STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, WHITE, TRANSPARENT, TXT_TITLE, "문자검침"),
		DLG_BUTTON(P_BTNX, P_BTNY, P_BTNWD, P_BTNHD, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", GID_PREV, ""),

		DLG_BUTTON(STARTX,      STARTY-40, 500, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB1, "문자발송"),
		DLG_BUTTON(STARTX+500,  STARTY-40, 500, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB2, "등록/변경"),
		
		DLG_BUTTON(STARTX,     STARTY+40, 200, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SEARCH, "검색"),
		DLG_BUTTON(STARTX+200, STARTY+40, 200, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CHGPREV, "▲"),
		DLG_BUTTON(STARTX+400, STARTY+40, 200, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CHGNEXT, "▼"),
		DLG_BUTTON(STARTX+600, STARTY+40, 200, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CHGADDR, "지번"),
		
		//DLG_BUTTON(STARTX+800, STARTY+40, 200, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CHG_QUICK, m_szCnt_page_C),
		DLG_TEXT(STARTX+800, STARTY+40, 200, 80, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA24, m_szCnt_page_C),

		// 리스트
		DLG_TABLE(GRID_X_C, GRID_Y_C_P, ROW_C, COL_C, 0, GRID_H_C_P, 1, GRID_H_C_P-20, SEL_ROW, MAXCHAR_C, m_stGridTitle_C, ID_CHGLIST, m_szTableBuf_C),
	};		


	// 메인 다이얼로그(등록/변경-주소검색)
	//---------------------------------------------------------------
	DlgObject	DlgRes_Addr[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_TEXT(0, 0, 998, BTNHT_1, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, WHITE, TRANSPARENT, TXT_BORDER, ""),
		DLG_ICON(0, BTNY_2, ICON_TITLE, ""),		
		//타이틀
		DLG_TEXT(TX, TY, STWD, STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "문자검침"),

		DLG_BUTTON(STARTX,      STARTY+65, 500, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB1, "문자발송"),
		DLG_BUTTON(STARTX+500,  STARTY+65, 500, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB2, "등록/변경"),
		DLG_BUTTON(STARTX,      STARTY+135, 500, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SEARCH, "대상검색"),
		
		DLG_BUTTON(STARTX+700,  STARTY+205, 300, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_FIND, "주소찾기"),
		
		DLG_BUTTON(STARTX,      STARTY+275, 200, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_JIBUN, "지번"),
		DLG_BUTTON(STARTX+200,  STARTY+275, 200, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ROADNM, "도로명"),
		DLG_BUTTON(STARTX+400,  STARTY+275, 200, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TOGETHER, "공동"),
		DLG_BUTTON(STARTX+600,  STARTY+275, 200, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_FINDPREV, "▲"),
		DLG_BUTTON(STARTX+800,  STARTY+275, 200, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_FINDNEXT, "▼"),
		DLG_BUTTON(STARTX,      STARTY+830, 500, 69, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CANCEL, "취소"),
		DLG_BUTTON(STARTX+500,  STARTY+830, 500, 69, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SAVE, "저장"),

		DLG_COMBO(STARTX+500,   STARTY+135, 500, 290, 150, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA10, 20),

		DLG_TEXT(STARTX,        STARTY+205, 700, 70, 0, 0, EDITSTY_BOLD, 0, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA7, ">문자수신 전화번호 등록"),

//지번
		DLG_TEXT(STARTX,        STARTY+345, 150, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA8, "구"),
		DLG_COMBO(STARTX+150,   STARTY+345, 355, 330, 120, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA3, 20),
		DLG_TEXT(STARTX+505,    STARTY+345, 150, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA9, "동"),
		DLG_COMBO(STARTX+655,   STARTY+345, 345, 290, 120, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA4, 20),
		DLG_TEXT(STARTX,        STARTY+415, 150, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA10, "번지"),
		DLG_EDIT(STARTX+150,    STARTY+415, 355, 70, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA5, 10,  ""),
		DLG_TEXT(STARTX+505,    STARTY+415, 150, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA11, "호수"),
		DLG_EDIT(STARTX+655,    STARTY+415, 345, 70, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA6, 10,  ""),

//도로명
		DLG_TEXT(STARTX,        STARTY+345, 150, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA13, "구"),
		DLG_COMBO(STARTX+150,   STARTY+345, 330, 290, 120, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA5, 20),
		DLG_TEXT(STARTX+480,    STARTY+345, 170, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA14, "도로명"),
		DLG_COMBO(STARTX+650,   STARTY+345, 350, 290, 120, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA6, 20),
		DLG_TEXT(STARTX,        STARTY+415, 150, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA15, "본번"),
		DLG_EDIT(STARTX+150,    STARTY+415, 330, 70, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA7, 10,  ""),
		DLG_TEXT(STARTX+480,    STARTY+415, 170, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA16, "부번"),
		DLG_EDIT(STARTX+650,    STARTY+415, 350, 70, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA8, 10,  ""),

//공동
		DLG_TEXT(STARTX,        STARTY+345, 300, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA17, "공동주택명"),
		DLG_COMBO(STARTX+300,   STARTY+345, 700, 290, 120, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA7, 20),
		DLG_TEXT(STARTX,        STARTY+415, 200, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA18, "건물명"),
		DLG_COMBO(STARTX+200,   STARTY+415, 470, 290, 120, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA8, 20),
		DLG_TEXT(STARTX+670,    STARTY+415, 130, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA19, "호"),
		DLG_EDIT(STARTX+800,    STARTY+415, 200, 70, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA9, 10,  ""),
		
		// 리스트
		DLG_TABLE(GRID_X_F, GRID_Y_F, ROW_F, COL_F, 0, GRID_H_F, 1, GRID_H_F, SEL_ROW, MAXCHAR_F, m_stGridTitle_F, ID_FINDLIST, m_szTableBuf_F),

		DLG_TEXT(STARTX,        STARTY+710, 300, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA20, "변경사유"),
		DLG_COMBO(STARTX+300,   STARTY+710, 700, 290, 150, 60, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA11, 20),
		DLG_TEXT(STARTX,        STARTY+770, 300, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA12, "전화번호"),
		DLG_COMBO(STARTX+300,   STARTY+770, 350, 290, 120, 60, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA9, 20),
		DLG_EDIT(STARTX+650,    STARTY+770, 175, 60, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA3, 5,  ""),
		DLG_EDIT(STARTX+825,    STARTY+770, 175, 60, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA4, 5,  ""),
		
		//숫자 자판
		DLG_TEXT(0,    STARTY+940, 333, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_ONE, "1"),
		DLG_TEXT(333,  STARTY+940, 333, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_TWO, "2"),
		DLG_TEXT(666,  STARTY+940, 334, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_THREE, "3"),
		DLG_TEXT(0,   STARTY+1030, 333, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_FOUR, "4"),
		DLG_TEXT(333, STARTY+1030, 333, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_FIVE, "5"),
		DLG_TEXT(666, STARTY+1030, 334, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_SIX, "6"),
		DLG_TEXT(0,   STARTY+1120, 333, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_SEVEN, "7"),
		DLG_TEXT(333, STARTY+1120, 333, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_EIGHT, "8"),
		DLG_TEXT(666, STARTY+1120, 334, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_NINE, "9"),
		DLG_TEXT(333, STARTY+1210, 333, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_ZERO, "0"),
		DLG_TEXT(666, STARTY+1210, 334, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_DEL, "←"),
	};	
	
	// PDA 다이얼로그(등록/변경-주소검색)
	//---------------------------------------------------------------
	DlgObject	DlgRes_Addr_P[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_ICON(P_TTLTX, 0, ICON_TITLE, ""),		
		//타이틀
		DLG_TEXT(P_TX, P_TY, P_STWD, P_STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, WHITE, TRANSPARENT, TXT_TITLE, "문자검침"),
		DLG_BUTTON(P_BTNX, P_BTNY, P_BTNWD, P_BTNHD, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", GID_PREV, ""),

		DLG_BUTTON(STARTX,      STARTY-40, 500, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB1, "문자발송"),
		DLG_BUTTON(STARTX+500,  STARTY-40, 500, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB2, "등록/변경"),
		DLG_BUTTON(STARTX,      STARTY+40, 500, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SEARCH, "대상검색"),
		DLG_COMBO(STARTX+500,   STARTY+40, 500, 290, 150, 80, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA10, 20),
		
		DLG_TEXT(STARTX,        STARTY+120, 700, 80, 0, 0, EDITSTY_BOLD, 0, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA7, ">문자수신 전화번호 등록"),
		DLG_BUTTON(STARTX+700,  STARTY+120, 300, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_FIND, "주소찾기"),
		
		DLG_BUTTON(STARTX,      STARTY+200, 200, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_JIBUN, "지번"),
		DLG_BUTTON(STARTX+200,  STARTY+200, 200, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ROADNM, "도로명"),
		DLG_BUTTON(STARTX+400,  STARTY+200, 200, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TOGETHER, "공동"),
		DLG_BUTTON(STARTX+600,  STARTY+200, 200, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_FINDPREV, "▲"),
		DLG_BUTTON(STARTX+800,  STARTY+200, 200, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_FINDNEXT, "▼"),

//지번
		DLG_TEXT(STARTX,        STARTY+270, 150, 80, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA8, "구"),
		DLG_COMBO(STARTX+150,   STARTY+270, 355, 330, 120, 80, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA3, 20),
		DLG_TEXT(STARTX+505,    STARTY+270, 150, 80, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA9, "동"),
		DLG_COMBO(STARTX+655,   STARTY+270, 345, 290, 120, 80, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA4, 20),
		DLG_TEXT(STARTX,        STARTY+350, 150, 80, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA10, "번지"),
		DLG_EDIT(STARTX+150,    STARTY+350, 355, 80, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA5, 10,  ""),
		DLG_TEXT(STARTX+505,    STARTY+350, 150, 80, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA11, "호수"),
		DLG_EDIT(STARTX+655,    STARTY+350, 345, 80, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA6, 10,  ""),

//도로명
		DLG_TEXT(STARTX,        STARTY+270, 150, 80, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA13, "구"),
		DLG_COMBO(STARTX+150,   STARTY+270, 330, 290, 120, 80, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA5, 20),
		DLG_TEXT(STARTX+480,    STARTY+270, 170, 80, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA14, "도로명"),
		DLG_COMBO(STARTX+650,   STARTY+270, 350, 290, 120, 80, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA6, 20),
		DLG_TEXT(STARTX,        STARTY+350, 150, 80, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA15, "본번"),
		DLG_EDIT(STARTX+150,    STARTY+350, 330, 80, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA7, 10,  ""),
		DLG_TEXT(STARTX+480,    STARTY+350, 170, 80, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA16, "부번"),
		DLG_EDIT(STARTX+650,    STARTY+350, 350, 80, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA8, 10,  ""),

//공동
		DLG_TEXT(STARTX,        STARTY+270, 300, 80, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA17, "공동주택명"),
		DLG_COMBO(STARTX+300,   STARTY+270, 700, 290, 120, 80, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA7, 20),
		DLG_TEXT(STARTX,        STARTY+350, 200, 80, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA18, "건물명"),
		DLG_COMBO(STARTX+200,   STARTY+350, 470, 290, 120, 80, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA8, 20),
		DLG_TEXT(STARTX+670,    STARTY+350, 130, 80, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA19, "호"),
		DLG_EDIT(STARTX+800,    STARTY+350, 200, 80, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA9, 10,  ""),
		
		// 리스트
		DLG_TABLE(GRID_X_F, GRID_Y_F_P, ROW_F, COL_F, 0, GRID_H_F_P, 1, GRID_H_F_P, SEL_ROW, MAXCHAR_F, m_stGridTitle_F, ID_FINDLIST, m_szTableBuf_F),

		DLG_TEXT(STARTX,        STARTY+690, 300, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA20, "변경사유"),
		DLG_COMBO(STARTX+300,   STARTY+690, 700, 290, 150, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA11, 20),
		DLG_TEXT(STARTX,        STARTY+760, 300, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA12, "전화번호"),
		DLG_COMBO(STARTX+300,   STARTY+760, 350, 290, 120, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA9, 20),
		DLG_EDIT(STARTX+650,    STARTY+760, 175, 70, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA3, 5,  ""),
		DLG_EDIT(STARTX+825,    STARTY+760, 175, 70, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA4, 5,  ""),
		DLG_BUTTON(STARTX,      STARTY+830, 500, 69, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CANCEL, "취소"),
		DLG_BUTTON(STARTX+500,  STARTY+830, 500, 69, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SAVE, "저장"),
	};		


	// 메인 다이얼로그(등록/변경-기물,사용계약번호)
	//---------------------------------------------------------------
	DlgObject	DlgRes_Num[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_TEXT(0, 0, 998, BTNHT_1, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, WHITE, TRANSPARENT, TXT_BORDER, ""),
		DLG_ICON(0, BTNY_2, ICON_TITLE, ""),		
		//타이틀
		DLG_TEXT(TX, TY, STWD, STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "문자검침"),

		DLG_BUTTON(STARTX,      STARTY+65, 500, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB1, "문자발송"),
		DLG_BUTTON(STARTX+500,  STARTY+65, 500, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB2, "등록/변경"),
		DLG_BUTTON(STARTX,      STARTY+135, 500, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SEARCH, "대상검색"),
		
		DLG_BUTTON(STARTX+700,  STARTY+205, 300, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_FIND, "찾기"),
		DLG_BUTTON(STARTX+600,  STARTY+345, 200, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_FINDPREV, "▲"),
		DLG_BUTTON(STARTX+800,  STARTY+345, 200, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_FINDNEXT, "▼"),
		DLG_BUTTON(STARTX,      STARTY+830, 500, 69, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CANCEL, "취소"),
		DLG_BUTTON(STARTX+500,  STARTY+830, 500, 69, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SAVE, "저장"),

		DLG_COMBO(STARTX+500,   STARTY+135, 500, 290, 150, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA10, 20),

		DLG_TEXT(STARTX,        STARTY+205, 700, 70, 0, 0, EDITSTY_BOLD, 0, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA7, ">문자수신 전화번호 등록"),

		DLG_TEXT(STARTX,        STARTY+275, 250, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA21, "기물번호"),
		DLG_EDIT(STARTX+250,    STARTY+275, 750, 70, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA10, 20,  ""),

		DLG_TEXT(STARTX,        STARTY+275, 250, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA22, "계약번호"),
		DLG_EDIT(STARTX+250,    STARTY+275, 750, 70, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA11, 20,  ""),
	
		// 리스트
		DLG_TABLE(GRID_X_F, GRID_Y_F, ROW_F, COL_F, 0, GRID_H_F, 1, GRID_H_F, SEL_ROW, MAXCHAR_F, m_stGridTitle_F, ID_FINDLIST, m_szTableBuf_F),

		DLG_TEXT(STARTX,        STARTY+710, 300, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA20, "변경사유"),
		DLG_COMBO(STARTX+300,   STARTY+710, 700, 290, 150, 60, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA11, 20),
		DLG_TEXT(STARTX,        STARTY+770, 300, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA12, "전화번호"),
		DLG_COMBO(STARTX+300,   STARTY+770, 350, 290, 120, 60, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA9, 20),
		DLG_EDIT(STARTX+650,    STARTY+770, 175, 60, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA3, 5,  ""),
		DLG_EDIT(STARTX+825,    STARTY+770, 175, 60, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA4, 5,  ""),
	};	
	
	// PDA 다이얼로그(등록/변경-기물,사용계약번호)
	//---------------------------------------------------------------
	DlgObject	DlgRes_Num_P[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_ICON(P_TTLTX, 0, ICON_TITLE, ""),		
		//타이틀
		DLG_TEXT(P_TX, P_TY, P_STWD, P_STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, WHITE, TRANSPARENT, TXT_TITLE, "문자검침"),
		DLG_BUTTON(P_BTNX, P_BTNY, P_BTNWD, P_BTNHD, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", GID_PREV, ""),

		DLG_BUTTON(STARTX,      STARTY-40, 500, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB1, "문자발송"),
		DLG_BUTTON(STARTX+500,  STARTY-40, 500, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB2, "등록/변경"),
		DLG_BUTTON(STARTX,      STARTY+40, 500, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SEARCH, "대상검색"),
		DLG_COMBO(STARTX+500,   STARTY+40, 500, 290, 150, 80, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA10, 20),
		DLG_TEXT(STARTX,        STARTY+120, 700, 80, 0, 0, EDITSTY_BOLD, 0, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA7, ">문자수신 전화번호 등록"),		
		DLG_BUTTON(STARTX+700,  STARTY+120, 300, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_FIND, "찾기"),

		DLG_BUTTON(STARTX+600,  STARTY+280, 200, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_FINDPREV, "▲"),
		DLG_BUTTON(STARTX+800,  STARTY+280, 200, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_FINDNEXT, "▼"),

		DLG_TEXT(STARTX,        STARTY+200, 250, 80, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA21, "기물번호"),
		DLG_EDIT(STARTX+250,    STARTY+200, 750, 80, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA10, 20,  ""),

		DLG_TEXT(STARTX,        STARTY+200, 250, 80, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA22, "계약번호"),
		DLG_EDIT(STARTX+250,    STARTY+200, 750, 80, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA11, 20,  ""),
	
		// 리스트
		DLG_TABLE(GRID_X_F, GRID_Y_F_P, ROW_F, COL_F, 0, GRID_H_F_P, 1, GRID_H_F_P, SEL_ROW, MAXCHAR_F, m_stGridTitle_F, ID_FINDLIST, m_szTableBuf_F),

		DLG_TEXT(STARTX,        STARTY+690, 300, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA20, "변경사유"),
		DLG_COMBO(STARTX+300,   STARTY+690, 700, 290, 150, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA11, 20),
		DLG_TEXT(STARTX,        STARTY+760, 300, 70, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA12, "전화번호"),
		DLG_COMBO(STARTX+300,   STARTY+760, 350, 290, 120, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA9, 20),
		DLG_EDIT(STARTX+650,    STARTY+760, 175, 70, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA3, 5,  ""),
		DLG_EDIT(STARTX+825,    STARTY+760, 175, 70, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA4, 5,  ""),
		DLG_BUTTON(STARTX,      STARTY+830, 500, 69, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CANCEL, "취소"),
		DLG_BUTTON(STARTX+500,  STARTY+830, 500, 69, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SAVE, "저장"),
	};		

	//----------------------------------------------------------------------
	bool	main (quad MsgType, quad wParam, quad lParam)
	{
		EVENT_HANDLER (MsgType, wParam, lParam);

		if (MsgType == MSG_EXTCTRL && wParam == EXTCTRL_LIST)
		{
			OnList(lParam);
		}

		return TRUE;
	}
	
//┌─────────────────────────────────────┐
//│ 				   『	OnInit Function  』  				              │
//└─────────────────────────────────────┘
	void	OnInit(char bFirst)
	{
		long i = 0;
	
		if( g_nSmsFlag == 5 )
		{
			bFirst = INIT_MAIN;
			m_nActIndex_S = g_nActIndex;
			//g_nSmsFlag = 0;
		}
		else if( g_nSmsFlag == 2 )
		{
			bFirst = INIT_CHANGE;
			m_lpage_C = g_nActIndex / ROW_C;
			m_nActIndex_C = g_nActIndex % ROW_C;
			
			g_nSmsFlag = 0;
		}
		
		//bFirst = INIT_ADDR;
		
		m_bFirst = bFirst;
	
		switch (bFirst)
		{
			case INIT_MAIN:
				switch (theDevInfo.m_nType)
				{
					case FAMILY_PDA:
						CREATE_DIALOG_OBJECT (DlgRes_P, SIZEOF(DlgRes_P));
						break;
					default:
						CREATE_GLOBAL_BUTTON (SysButRes_MAIN);
						CREATE_DIALOG_OBJECT (DlgRes, SIZEOF(DlgRes));
						break;		
				}

				DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TAB1), FALSE );
				DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TAB2), TRUE );
				m_lSearchFlag = 0;

				SetBtnImg();	
				SetStyle();
				
				if( g_nSmsFlag == 5 )
				{
					g_nSmsFlag = 0;
					ReDraw();
				}
				else
				{
					Rcv_Info();
				}
				break;
				
			case INIT_CHANGE:
				switch (theDevInfo.m_nType)
				{
					case FAMILY_PDA:
						CREATE_DIALOG_OBJECT (DlgRes_Chg_P, SIZEOF(DlgRes_Chg_P));
						EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA24), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
						break;
					default:
						CREATE_GLOBAL_BUTTON (SysButRes_MAIN);
						CREATE_DIALOG_OBJECT (DlgRes_Chg, SIZEOF(DlgRes_Chg));
						break;		
				}

				SetBtnImg();

				DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TAB1), TRUE );
				DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TAB2), FALSE );
				
				ChgDraw();
				break;
				
			case INIT_ADDR:
				switch (theDevInfo.m_nType)
				{
					case FAMILY_PDA:
						CREATE_DIALOG_OBJECT (DlgRes_Addr_P, SIZEOF(DlgRes_Addr_P));
						break;
					default:
						CREATE_GLOBAL_BUTTON (SysButRes_MAIN);
						CREATE_DIALOG_OBJECT (DlgRes_Addr, SIZEOF(DlgRes_Addr));
						break;		
				}
				DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TAB1), TRUE );
				DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TAB2), FALSE );

				ListCtrl_ResetAllItems (Get_hDlgCtrlByID(CMB_DATA10+2));
				ListCtrl_AddItem (Get_hDlgCtrlByID(CMB_DATA10+2), "주소", 0, ICON_NONE);
				ListCtrl_AddItem (Get_hDlgCtrlByID(CMB_DATA10+2), "기물번호", 0, ICON_NONE);
				ListCtrl_AddItem (Get_hDlgCtrlByID(CMB_DATA10+2), "계약번호", 0, ICON_NONE);

				for ( i = 0 ;  GM_TELCHG_WHY[i].Str[0] != 0 ; i++)
				{
					ListCtrl_AddItem (Get_hDlgCtrlByID(CMB_DATA11+2), GM_TELCHG_WHY[i].Str, 0, ICON_NONE);
				}
				
				//테이블 클리어
				Mem_Set((byte*)m_szTableBuf_F+(COL_F*MAXCHAR_F), 0x00, sizeof(m_szTableBuf_F)-(COL_F*MAXCHAR_F));

				SetBtnImg();	
				SetStyle();
				break;
			case INIT_NUM:
				switch (theDevInfo.m_nType)
				{
					case FAMILY_PDA:
						CREATE_DIALOG_OBJECT (DlgRes_Num_P, SIZEOF(DlgRes_Num_P));
						break;
					default:
						CREATE_GLOBAL_BUTTON (SysButRes_MAIN);
						CREATE_DIALOG_OBJECT (DlgRes_Num, SIZEOF(DlgRes_Num));
						break;		
				}
				DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TAB1), TRUE );
				DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TAB2), FALSE );

				ListCtrl_ResetAllItems (Get_hDlgCtrlByID(CMB_DATA10+2));
				ListCtrl_AddItem (Get_hDlgCtrlByID(CMB_DATA10+2), "주소", 0, ICON_NONE);
				ListCtrl_AddItem (Get_hDlgCtrlByID(CMB_DATA10+2), "기물번호", 0, ICON_NONE);
				ListCtrl_AddItem (Get_hDlgCtrlByID(CMB_DATA10+2), "계약번호", 0, ICON_NONE);

				for ( i = 0 ;  GM_TELCHG_WHY[i].Str[0] != 0 ; i++)
				{
					ListCtrl_AddItem (Get_hDlgCtrlByID(CMB_DATA11+2), GM_TELCHG_WHY[i].Str, 0, ICON_NONE);
				}

				//테이블 클리어
				Mem_Set((byte*)m_szTableBuf_F+(COL_F*MAXCHAR_F), 0x00, sizeof(m_szTableBuf_F)-(COL_F*MAXCHAR_F));

				SetBtnImg();	
				SetStyle();
				break;
		}
	}

//------------------------------------------------------------------
	void	OnButton(long ID)
	{	
		long d, k, i, lCmbcd;
		char sztmp[100];
		char szSql[256];
		char szDp[20];

		switch(ID)
		{
			case BID_TAB1:
				if( m_bFirst != INIT_MAIN )
				{
					ON_EXIT();
					OnInit(INIT_MAIN);
				}
				break;
			case BID_TAB2:
				if( m_bFirst == INIT_MAIN )
				{
					ON_EXIT();
					OnInit(INIT_CHANGE);
				}
				break;
			case BID_TOTCHK:
				if( m_lTotChkFlag == 0 )
				{
					m_lTotChkFlag = 1;
					
					if( Str_Cmp(m_szCobSel, "전체") != 0 && Str_Len(m_szCobSel) > 2 )
					{
						lCmbcd = 0;
						lCmbcd = SearchStr( m_szCobSel, GM_SEND_STS );
						if(lCmbcd >= 0)
						{
							Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
							Str_Cpy(sztmp, GM_SEND_STS[lCmbcd].Code);
						}
						
						Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
						SPRINT(szSql, "UPDATE GUM_SMS_TARGET SET CHK_YN = 'Y' WHERE GMTR_SEND_STS = '%s'",sztmp,0,0);
						g_Sql_DirectExecute(szSql);
					}
					else
					{
						//전체일때 -> 대상선정 데이터만 선택되도록.
						g_Sql_DirectExecute( "UPDATE GUM_SMS_TARGET SET CHK_YN = 'Y' WHERE GMTR_SEND_STS = '10'" );
					}

					ButCtrl_SetText(Get_hDlgCtrlByID(BID_TOTCHK), CHKON);
					ButCtrl_SetForeColorEx(Get_hDlgCtrlByID(BID_TOTCHK), RED);
				}
				else
				{
					m_lTotChkFlag = 0;
					
					if( Str_Cmp(m_szCobSel, "전체") != 0 && Str_Len(m_szCobSel) > 2 )
					{
						//콤보박스 필터링
						lCmbcd = 0;
						lCmbcd = SearchStr( m_szCobSel, GM_SEND_STS );
						if(lCmbcd >= 0)
						{
							Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
							Str_Cpy(sztmp, GM_SEND_STS[lCmbcd].Code);
						}
						
						Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
						SPRINT(szSql, "UPDATE GUM_SMS_TARGET SET CHK_YN = 'N' WHERE GMTR_SEND_STS = '%s'",sztmp,0,0);
						g_Sql_DirectExecute(szSql);
					}
					else
					{
						//전체일때 -> 대상선정 데이터만 선택되도록.
						g_Sql_DirectExecute( "UPDATE GUM_SMS_TARGET SET CHK_YN = 'N' WHERE GMTR_SEND_STS = '10'" );
					}
					
					ButCtrl_SetText(Get_hDlgCtrlByID(BID_TOTCHK), CHKOFF);
					ButCtrl_SetForeColorEx(Get_hDlgCtrlByID(BID_TOTCHK), BLACK);
				}

				ReDraw();
				break;
			case BID_SMSPREV:
				m_lpage_S--;
				if(m_lpage_S < 0)
				{
					m_lpage_S = 0;
					if(m_lTotpage_S > 0)
					{
						if( m_nActIndex_S < 0)
						{
							m_nActIndex_S = 0;
						}
					}
					break;
				}
				m_nActIndex_S = 0;
				ReDraw();
				break;			
			case BID_SMSNEXT:
				m_lpage_S++ ;
				if( m_lpage_S > m_lTotpage_S-1 )
				{
					m_lpage_S = m_lTotpage_S-1;
					if(m_lpage_S < 0)
					{
						m_lpage_S = 0;
					}
					if(m_lTotpage_S > 0)
					{
						if( m_nActIndex_S < 0 )
						{
							m_nActIndex_S = 0;
						}
					}
					break;
				}
				m_nActIndex_S = 0;
				ReDraw();
				break;
			case BID_ADDR:
				if( g_nAddrFlag == 0 )
				{
					g_nAddrFlag = 1;
					ButCtrl_SetText(Get_hDlgCtrlByID(BID_ADDR), "도로명");
				}
				else
				{
					g_nAddrFlag = 0;
					ButCtrl_SetText(Get_hDlgCtrlByID(BID_ADDR), "지번");
				}
				ReDraw();
				break;
			case BID_CALENDAR:
				Mem_Set((byte*)sztmp, 0x00, sizeof(sztmp));		
				Str_Cpy(sztmp, EditCtrl_GetStr(Get_hDlgCtrlByID(TXT_DATA5)));
				k = Str_AtoI(sztmp);
			
				Load_Calendar_Card();
				d = CalendarDialog(&k);
				Unload_Calendar_Card();
				if(d == 0)
				{
					break;
				}
				else
				{
					if( Time_GetDate() > d )
					{
						MessageBoxEx (CONFIRM_OK, "예약일자를 확인해주세요.");
						break;
					}
					else
					{
						Mem_Set((byte*)sztmp, 0x00, sizeof(sztmp));
						Mem_Set((byte*)szDp, 0x00, sizeof(szDp));
						Str_ItoA ( d, sztmp, 10);
						g_Str_DateType( szDp, sztmp);
						EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA5), szDp );
					}
				}
				break;
			case BID_DELETE:
				if( Validate(BID_DELETE) < 0 )
				{
					break;
				}
				
				if( MessageBoxEx (CONFIRM_YESNO, "대상을 삭제하시겠습니까?")  == MB_OK)
				{
					m_lSndSmsMsgFlag = 3;
					//문자대상 기본정보 셋팅
					Set_SmsInfo();
					Rcv_SmsSts();
					//Snd_Delete();
				}
				break;
			case BID_RSRVCNCL:
				if( Validate(BID_RSRVCNCL) < 0 )
				{
					break;
				}
				
				if( MessageBoxEx (CONFIRM_YESNO, "예약을 취소하시겠습니까?")  ==MB_OK)
				{
					m_lSndSmsMsgFlag = 2;
					//문자대상 기본정보 셋팅
					Set_SmsInfo();
					Rcv_SmsSts();
					//Snd_Reserve_Cancel();
				}
				break;
			case BID_SND:
				if( Validate(BID_SND) < 0 )
				{
					break;
				}
				
				if( MessageBoxEx (CONFIRM_YESNO, "문자를 발송 하시겠습니까?")  ==MB_OK)
				{
					m_lSndSmsMsgFlag = 1;
					m_lSmsAgreeFlag = 0;
					
					//문자대상 기본정보 셋팅
					Set_SmsInfo();
					//Rcv_SmsSts();
					Rcv_Many();
					//Rcv_SmsDesc();
					//Set_SmsInfo();
				}
				ON_DRAW();
				break;
			case GID_HOME:
				if( g_Dlgflag > 0 )
				{
					return;
				}

				if( MessageBoxEx (CONFIRM_YESNO, "메인 메뉴로 나가시겠습니까?")  == MB_OK)
				{
					Card_Move("MENU");
				}
				break;
			case GID_MENU:
				if( MessageBoxEx (CONFIRM_YESNO, "검침 메뉴로 나가시겠습니까?")  == MB_OK)
				{
					Card_Move("GM_MENU");
				}
				break;
			case GID_KEYBOARD:
				g_SHOW_SIP();
				break;
			case GID_SCREEN:
				g_MOVE_DLG(400);
				break;
			case GID_CMMNWK:
				break;				
			case GID_PREV:
				if( g_Dlgflag > 0 )
				{
					return;
				}
				
				Card_Move("GM_MENU");
				break;	
			case GID_VMEXIT:
				g_Exit();
				break;
//등록/변경
			case BID_CHG_QUICK:
				Grid_QuickList();
				break;
			case BID_CHGADDR:
				if( g_nAddrFlag == 0 )
				{
					g_nAddrFlag = 1;
				}
				else
				{
					g_nAddrFlag = 0;
				}
				ChgDraw();
				break;
			case BID_SEARCH:
				if( m_bFirst == INIT_CHANGE )
				{
					m_lSearchFlag = 1;
					ON_EXIT();
					OnInit(INIT_ADDR);
				}
				else if( m_bFirst != INIT_CHANGE )
				{
					m_lSearchFlag = 0;
					ON_EXIT();
					OnInit(INIT_CHANGE);
				}
				break;
			case BID_CHGPREV:
				m_lpage_C--;
				if(m_lpage_C < 0)
				{
					m_lpage_C = 0;
					if(m_lTotpage_C > 0)
					{
						if( m_nActIndex_C < 0)
						{
							m_nActIndex_C = 0;
						}
					}
					break;
				}
				m_nActIndex_C = 0;
				ChgDraw();
				break;			
			case BID_CHGNEXT:
				m_lpage_C++ ;
				if( m_lpage_C > m_lTotpage_C-1 )
				{
					m_lpage_C = m_lTotpage_C-1;
					if(m_lpage_C < 0)
					{
						m_lpage_C = 0;
					}
					if(m_lTotpage_C > 0)
					{
						if( m_nActIndex_C < 0 )
						{
							m_nActIndex_C = 0;
						}
					}
					break;
				}
				m_nActIndex_C = 0;
				ChgDraw();
				break;

//등록/변경-검색
			case BID_FIND:
				Search_Addr();
				break;
			case BID_JIBUN:
				m_lSearchType = 0;
				SetStyle();
				break;
			case BID_ROADNM:
				m_lSearchType = 1;
				SetStyle();
				break;
			case BID_TOGETHER:
				m_lSearchType = 2;
				SetStyle();
				break;
			case BID_FINDPREV:
				m_lpage_F--;
				if(m_lpage_F < 0)
				{
					m_lpage_F = 0;
					if(m_lTotpage_F > 0)
					{
						if( m_nActIndex_F < 0)
						{
							m_nActIndex_F = 0;
						}
					}
					break;
				}
				m_nActIndex_F = 0;
				FindDraw();
				break;
			case BID_FINDNEXT:
				m_lpage_F++ ;
				if( m_lpage_F > m_lTotpage_F-1 )
				{
					m_lpage_F = m_lTotpage_F-1;
					if(m_lpage_F < 0)
					{
						m_lpage_F = 0;
					}
					if(m_lTotpage_F > 0)
					{
						if( m_nActIndex_F < 0 )
						{
							m_nActIndex_F = 0;
						}
					}
					break;
				}
				m_nActIndex_F = 0;
				FindDraw();
				break;
			case BID_CANCEL:
				ON_EXIT();
				OnInit(INIT_CHANGE);
				break;
			case BID_SAVE:
				Snd_Change();
				break;
		}
	}		

//-------------------------------------------------------------------
	void	OnChar(long nChar)
	{
		if( m_bFirst == INIT_MAIN )
		{
			//숫자만 입력 가능
//			if( Get_iDlgCtrlByID(EDT_DATA1) == m_lEditCtrlIndex ||
//			    Get_iDlgCtrlByID(EDT_DATA2) == m_lEditCtrlIndex  )
			if( Get_iDlgCtrlByID(EDT_DATA2) == m_lEditCtrlIndex  )
			{
				if( (nChar < 48 ||  nChar > 57) )
				{
					MessageBoxEx (CONFIRM_OK, "숫자만 입력가능합니다.");
					EditCtrl_SetStr(Get_hDlgCtrlByIndex(m_lEditCtrlIndex), "");
					return;
				}
			}
		}
		else if( m_bFirst == INIT_ADDR )
		{
			//숫자만 입력 가능
			if( Get_iDlgCtrlByID(EDT_DATA3) == m_lEditCtrlIndex ||
			    Get_iDlgCtrlByID(EDT_DATA4) == m_lEditCtrlIndex ||
			    Get_iDlgCtrlByID(EDT_DATA5) == m_lEditCtrlIndex ||
			    Get_iDlgCtrlByID(EDT_DATA6) == m_lEditCtrlIndex ||
			    Get_iDlgCtrlByID(EDT_DATA7) == m_lEditCtrlIndex ||
			    Get_iDlgCtrlByID(EDT_DATA8) == m_lEditCtrlIndex ||
			    Get_iDlgCtrlByID(EDT_DATA9) == m_lEditCtrlIndex  )
			{
				if( (nChar < 48 ||  nChar > 57) )
				{
					MessageBoxEx (CONFIRM_OK, "숫자만 입력가능합니다.");
					EditCtrl_SetStr(Get_hDlgCtrlByIndex(m_lEditCtrlIndex), "");
					return;
				}
			}
		}
		else if( m_bFirst == INIT_NUM )
		{
			//숫자만 입력 가능
			if( Get_iDlgCtrlByID(EDT_DATA3) == m_lEditCtrlIndex  ||
			    Get_iDlgCtrlByID(EDT_DATA4) == m_lEditCtrlIndex  ||
			    Get_iDlgCtrlByID(EDT_DATA10) == m_lEditCtrlIndex ||
			    Get_iDlgCtrlByID(EDT_DATA11) == m_lEditCtrlIndex )
			{
				if( (nChar < 48 ||  nChar > 57) )
				{
					MessageBoxEx (CONFIRM_OK, "숫자만 입력가능합니다.");
					EditCtrl_SetStr(Get_hDlgCtrlByIndex(m_lEditCtrlIndex), "");
					return;
				}
			}
		}
	}


	//-------------------------------------------------------------------------
	void	OnPointing(long nAction, long X, long Y)
	{
		long lActiveIndex = -1;

		lActiveIndex = Dialog_GetActiveCtrlIndex(this->m_hDlg);	
		
		if( m_bFirst == INIT_MAIN )
		{
			if( POINTING_UP == nAction )
			{
				m_lEditCtrlIndex = lActiveIndex;

				if( theDevInfo.m_nType > FAMILY_PDA )
				{
					if( Str_Cmp(EditCtrl_GetStr( Get_hDlgCtrlByID(CMB_DATA2)), "예약발송") == 0 )
					{
						if( X > DMS_X(STARTX+880) && X < DMS_X(STARTX+1000) && Y > DMS_Y(STARTY+765-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+830-(g_Dlgflag*400)) )
						{
							if( Get_iDlgCtrlByID(EDT_DATA2) == lActiveIndex )	
							{
								g_Dlgflag = 0;
								g_MOVE_DLG(400);
							
								ShowSip(FALSE);
								g_Sipflag = 0;
								
								//SetKeyMode(KEYMODE_NUMBER);
				
								ShowSip(TRUE);
								g_Sipflag = 1;
							}
						}
						else
						{
							g_Dlgflag = 1;
							g_MOVE_DLG(1);
						
							ShowSip(FALSE);
							g_Sipflag = 0;
						}
					}
				}
				
				ON_DRAW();
			}
		}
		else if( m_bFirst == INIT_ADDR )
		{
			if( POINTING_UP == nAction )
			{
				m_lEditCtrlIndex = lActiveIndex;
				
				if( theDevInfo.m_nType > FAMILY_PDA )
				{
					if( X > DMS_X(STARTX+150) && X < DMS_X(STARTX+485)  && Y > DMS_Y(STARTY+415-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+485-(g_Dlgflag*400)) ||
					    X > DMS_X(STARTX+655) && X < DMS_X(STARTX+1000) && Y > DMS_Y(STARTY+415-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+485-(g_Dlgflag*400)) ||
					    X > DMS_X(STARTX+150) && X < DMS_X(STARTX+480)  && Y > DMS_Y(STARTY+415-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+485-(g_Dlgflag*400)) ||
					    X > DMS_X(STARTX+650) && X < DMS_X(STARTX+1000) && Y > DMS_Y(STARTY+415-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+485-(g_Dlgflag*400)) ||
					    X > DMS_X(STARTX+800) && X < DMS_X(STARTX+1000) && Y > DMS_Y(STARTY+415-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+485-(g_Dlgflag*400)) ||
					    X > DMS_X(STARTX+650) && X < DMS_X(STARTX+825)  && Y > DMS_Y(STARTY+770-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+830-(g_Dlgflag*400)) ||
					    X > DMS_X(STARTX+825) && X < DMS_X(STARTX+1000) && Y > DMS_Y(STARTY+770-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+830-(g_Dlgflag*400))  )
					{
						if( Get_iDlgCtrlByID(EDT_DATA5) == lActiveIndex ||
						    Get_iDlgCtrlByID(EDT_DATA6) == lActiveIndex ||
						    Get_iDlgCtrlByID(EDT_DATA7) == lActiveIndex ||
						    Get_iDlgCtrlByID(EDT_DATA8) == lActiveIndex ||
						    Get_iDlgCtrlByID(EDT_DATA9) == lActiveIndex ||
						    Get_iDlgCtrlByID(EDT_DATA3) == lActiveIndex ||
						    Get_iDlgCtrlByID(EDT_DATA4) == lActiveIndex )
						{
							g_Dlgflag = 0;
							g_MOVE_DLG(400);
						
							ShowSip(FALSE);
							g_Sipflag = 0;
							
							//SetKeyMode(KEYMODE_NUMBER);
			
						//	ShowSip(TRUE);
						//	g_Sipflag = 1;
						}
					}
					else
					{
						if( X > DMS_X(0) && X < DMS_X(333) && Y > DMS_Y(STARTY+940-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1030-(g_Dlgflag*400))  )
						{
							if( g_Dlgflag == 1 )
							{
								ON_CHAR( '1' );
								VM_PlaySound(CLICKSOUND);
							}
						}
						else if( X > DMS_X(333) && X < DMS_X(666) && Y > DMS_Y(STARTY+940-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1030-(g_Dlgflag*400)) )
						{
							if( g_Dlgflag == 1 )
							{
								ON_CHAR( '2' );
								VM_PlaySound(CLICKSOUND);
							}
						}
						else if( X > DMS_X(666) && X < DMS_X(1000) && Y > DMS_Y(STARTY+940-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1030-(g_Dlgflag*400)) )
						{
							if( g_Dlgflag == 1 )
							{
								ON_CHAR( '3' );
								VM_PlaySound(CLICKSOUND);
							}
						}
						else if( X > DMS_X(0) && X < DMS_X(333) && Y > DMS_Y(STARTY+1030-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1120-(g_Dlgflag*400)) )
						{
							if( g_Dlgflag == 1 )
							{
								ON_CHAR( '4' );
								VM_PlaySound(CLICKSOUND);
							}
						}
						else if( X > DMS_X(333) && X < DMS_X(666) && Y > DMS_Y(STARTY+1030-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1120-(g_Dlgflag*400)) )
						{
							if( g_Dlgflag == 1 )
							{
								ON_CHAR( '5' );
								VM_PlaySound(CLICKSOUND);
							}
						}
						else if( X > DMS_X(666) && X < DMS_X(1000) && Y > DMS_Y(STARTY+1030-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1120-(g_Dlgflag*400)) )
						{
							if( g_Dlgflag == 1 )
							{
								ON_CHAR( '6' );
								VM_PlaySound(CLICKSOUND);
							}
						}
						else if( X > DMS_X(0) && X < DMS_X(333) && Y > DMS_Y(STARTY+1120-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1210-(g_Dlgflag*400)) )
						{
							if( g_Dlgflag == 1 )
							{
								ON_CHAR( '7' );
								VM_PlaySound(CLICKSOUND);
							}
						}
						else if( X > DMS_X(333) && X < DMS_X(666) && Y > DMS_Y(STARTY+1120-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1210-(g_Dlgflag*400)) )
						{
							if( g_Dlgflag == 1 )
							{
								ON_CHAR( '8' );
								VM_PlaySound(CLICKSOUND);
							}
						}
						else if( X > DMS_X(666) && X < DMS_X(1000) && Y > DMS_Y(STARTY+1120-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1210-(g_Dlgflag*400)) )
						{
							if( g_Dlgflag == 1 )
							{
								ON_CHAR( '9' );
								VM_PlaySound(CLICKSOUND);
							}
						}
						else if( X > DMS_X(333) && X < DMS_X(666) && Y > DMS_Y(STARTY+1210-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1300-(g_Dlgflag*400)) )
						{
							if( g_Dlgflag == 1 )
							{
								ON_CHAR( '0' );
								VM_PlaySound(CLICKSOUND);
							}
						}
						else if( X > DMS_X(666) && X < DMS_X(1000) && Y > DMS_Y(STARTY+1210-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1300-(g_Dlgflag*400)) )
						{
							if( g_Dlgflag == 1 )
							{
								ON_KEY( 5 );
								VM_PlaySound(CLICKSOUND);
							}
						}
						else
						{
								g_Dlgflag = 1;
								g_MOVE_DLG(1);
							
								ShowSip(FALSE);
								g_Sipflag = 0;
						}
					}
				}
				
				ON_DRAW();
			}
		}
		else if( m_bFirst == INIT_NUM )
		{
			if( POINTING_UP == nAction )
			{
				m_lEditCtrlIndex = lActiveIndex;
				
				if( theDevInfo.m_nType > FAMILY_PDA )
				{
					if( X > DMS_X(STARTX+245) && X < DMS_X(STARTX+993) && Y > DMS_Y(STARTY+280) && Y < DMS_Y(STARTY+340) ||
                        X > DMS_X(STARTX+245) && X < DMS_X(STARTX+993) && Y > DMS_Y(STARTY+280) && Y < DMS_Y(STARTY+340) )
					{
						if( Get_iDlgCtrlByID(EDT_DATA10) == lActiveIndex ||
						    Get_iDlgCtrlByID(EDT_DATA11) == lActiveIndex )	
						{
							g_Dlgflag = 1;
							g_MOVE_DLG(1);

							ShowSip(FALSE);
							g_Sipflag = 0;
							
							//SetKeyMode(KEYMODE_NUMBER);
			
							ShowSip(TRUE);
							g_Sipflag = 1;
						}
					}
					else if( X > DMS_X(STARTX+645) && X < DMS_X(STARTX+820) && Y > DMS_Y(STARTY+770-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+830-(g_Dlgflag*400)) ||
					         X > DMS_X(STARTX+820) && X < DMS_X(STARTX+993) && Y > DMS_Y(STARTY+770-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+830-(g_Dlgflag*400)) )
					{
						if( Get_iDlgCtrlByID(EDT_DATA3) == lActiveIndex ||
						    Get_iDlgCtrlByID(EDT_DATA4) == lActiveIndex )
						{
							g_Dlgflag = 0;
							g_MOVE_DLG(400);
						
							ShowSip(FALSE);
							g_Sipflag = 0;
							
							//SetKeyMode(KEYMODE_NUMBER);
			
							ShowSip(TRUE);
							g_Sipflag = 1;
						}
					}

					else
					{
						g_Dlgflag = 1;
						g_MOVE_DLG(1);
					
						ShowSip(FALSE);
						g_Sipflag = 0;
					}
				}
				
				ON_DRAW();
			}
		}
	}

//──────────────────────────────────────────────
	void	OnSelect(long Index)
	{
		long index = -1;
		long lrow, lcol;
		long i = 0;
		char sztmp[256];
		char szcmb[50];
		
		if( m_bFirst == INIT_MAIN )
		{
			if (DlgTbl_IsSelect(ID_SMSLIST))
			{
				if( g_Dlgflag > 0 )
				{
					return;
				}

/*
				// 선택 인덱스와 기존 인덱스가 동일 할 경우
				Str_Cpy( sztmp, DlgTbl_GetStr( ID_SMSLIST, m_nActIndex_S, 0) );
				if( Str_Cmp( sztmp, CHKON) == 0 )
				{
					DlgTbl_SetStr ( ID_SMSLIST, m_nActIndex_S, 0, CHKOFF );
					EditCtrl_SetForeColorEx( DlgTbl_GetHandle 	( ID_SMSLIST, m_nActIndex_S, 0 ), BLACK);
				}
				else
				{
					DlgTbl_SetStr ( ID_SMSLIST, m_nActIndex_S, 0, CHKON );
					EditCtrl_SetForeColorEx( DlgTbl_GetHandle 	( ID_SMSLIST, m_nActIndex_S, 0 ), RED );
				}
				
				Mem_Set( (byte*)m_szSendStr, 0x00, sizeof(m_szSendStr) );
				Str_Cpy(m_szSendStr, DlgTbl_GetStr( ID_SMSLIST, m_nActIndex_S, 4));
				Mem_Set( (byte*)m_stUserinfo.szUse_cont_num, 0x00, sizeof(m_stUserinfo.szUse_cont_num) );
				Str_Cpy(m_stUserinfo.szUse_cont_num, DlgTbl_GetStr( ID_SMSLIST, m_nActIndex_S, 5));

				Save_Row(m_nActIndex_S, 0);
*/

				if( m_lActFlag == 0 )
				{
					m_lActFlag = 1;

					lrow = m_nActIndex_S/COL_S;
					lcol = m_nActIndex_S%COL_S;
					DlgTbl_SetCellColor(TBL_BKCOLOR, ID_SMSLIST, lrow, lcol, TRANSPARENT);
				}

				// 현재 선택된 인덱스
				index = DlgTbl_GetActiveRow(ID_SMSLIST);

				m_nActIndex_S = index;
				
				lrow = m_nActIndex_S/COL_S;
				lcol = m_nActIndex_S%COL_S;
				lrow--;

				if( m_lSmsRow == lrow && lcol > 0  && lcol < 4 )
				{
					Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
					SPRINT(sztmp, "SELECT IFNULL(RECEIVER_TEL_DDD, '') ||''|| IFNULL(RECEIVER_TEL_EXN, '') ||''|| IFNULL(RECEIVER_TEL_NUM, '') FROM GUM_SMS_TARGET WHERE USE_CONT_NUM = '%s'",m_stUserinfo.szUse_cont_num,0,0);
					g_Sql_RetStr(sztmp, 15, g_szCpNum);

					g_nSmsFlag = 5;
					g_nActIndex = lrow;
					
					Card_Move("GM_SMSSND");
					return;
				}
				else if( m_lSmsViewRow == lrow && lcol == 4 )
				{
					i = SearchStr( m_szSendStr, GM_SEND_STS );
					if(i >= 0)
					{
						Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
						Str_Cpy(sztmp, GM_SEND_STS[i].Code);
					}

					if( Str_Cmp(sztmp, "60") == 0 ||
					    Str_Cmp(sztmp, "70") == 0 ||
					    Str_Cmp(sztmp, "80") == 0 )
					{
						m_lSndSmsMsgFlag = 4;
						g_nActIndex = lrow;
						Rcv_SmsSts();
						
						//g_nSmsFlag = 5;
						//g_nActIndex = lrow;
						//Card_Move("GM_SMS_VIEW");
					}
					return;
				}
				else
				{
					if( lcol == 0 )
					{
						m_lSmsRow = -1;
					}
					else if( lcol == 4 )
					{
						m_lSmsViewRow = lrow;
						m_lSmsRow = -1;
					}
					else
					{
						m_lSmsViewRow = -1;
						m_lSmsRow = lrow;
					}
				}

				Mem_Set( (byte*)g_szCntSql, 0x00, sizeof(g_szCntSql) );
				Str_Cpy(g_szCntSql, DlgTbl_GetStr( ID_SMSLIST, lrow, 2));		//주소
				Mem_Set( (byte*)g_szTown, 0x00, sizeof(g_szTown) );
				Str_Cpy(g_szTown, DlgTbl_GetStr( ID_SMSLIST, lrow, 6));			//고객명

				Mem_Set( (byte*)m_szSendStr, 0x00, sizeof(m_szSendStr) );
				Str_Cpy(m_szSendStr, DlgTbl_GetStr( ID_SMSLIST, lrow, 4));		//발송상태
				
				Mem_Set( (byte*)m_stUserinfo.szUse_cont_num, 0x00, sizeof(m_stUserinfo.szUse_cont_num) );
				Mem_Set( (byte*)g_szUSE_CONT_NUM, 0x00, sizeof(g_szUSE_CONT_NUM) );
				Str_Cpy(m_stUserinfo.szUse_cont_num, DlgTbl_GetStr( ID_SMSLIST, lrow, 5));	
				Str_Cpy(g_szUSE_CONT_NUM, m_stUserinfo.szUse_cont_num);			//사용계약번호
				
				Mem_Set( (byte*)g_szMTR_ID_NUM, 0x00, sizeof(g_szMTR_ID_NUM) );
				Str_Cpy(g_szMTR_ID_NUM, DlgTbl_GetStr( ID_SMSLIST, lrow, 7));	//계량기 기물번호

				Str_Cpy( sztmp, DlgTbl_GetStr( ID_SMSLIST, lrow, lcol) );
				if( lcol == 0 )
				{
					if( Str_Cmp( sztmp, CHKON) == 0 )
					{
						DlgTbl_SetStr ( ID_SMSLIST, lrow, lcol, CHKOFF );
						EditCtrl_SetForeColorEx( DlgTbl_GetHandle 	( ID_SMSLIST, lrow, lcol ), BLACK);
					}
					else
					{
						DlgTbl_SetStr ( ID_SMSLIST, lrow, lcol, CHKON );
						EditCtrl_SetForeColorEx( DlgTbl_GetHandle 	( ID_SMSLIST, lrow, lcol ), RED );
					}
						
					Save_Row(lrow, lcol);
					
					i = SearchStr( m_szSendStr, GM_SEND_STS );
					if(i >= 0)
					{
						Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
						Str_Cpy(sztmp, GM_SEND_STS[i].Code);
					}
					if( Str_Cmp(sztmp, "30") == 0 )
					{
						Mem_Set( (byte*)m_szPlan_Dtm, 0x00, sizeof(m_szPlan_Dtm) );
						Str_Cpy(m_szPlan_Dtm, DlgTbl_GetStr( ID_SMSLIST, lrow, 8));		//예약일자
					}

					//2017-07-17 Sanghyun Lee
					//선택한 대상의 상태에 따라 UI변경
					GmSms_Sts_Cnt();
				}

				ON_DRAW();
				return;
			}

			if( Get_iDlgCtrlByID(CMB_DATA1+1) == m_lEditCtrlIndex )
			{
				Mem_Set((byte*)szcmb, 0x00, sizeof(szcmb));
				Str_Cpy( szcmb ,EditCtrl_GetStr( Get_hDlgCtrlByID(CMB_DATA1) ) );
				//콤보박스 선택으로 리스트 목록 필터링
				if( Str_Cmp(m_szCobSel, szcmb ) != 0 )
				{
					ButCtrl_SetText(Get_hDlgCtrlByID(BID_TOTCHK), CHKOFF);
					ButCtrl_SetForeColorEx(Get_hDlgCtrlByID(BID_TOTCHK), BLACK);
					g_Sql_DirectExecute( "UPDATE GUM_SMS_TARGET SET CHK_YN = 'N'" );
	
					Mem_Set((byte*)m_szCobSel, 0x00, sizeof(m_szCobSel));
					Str_Cpy(m_szCobSel, szcmb);
					Mem_Set( (byte*)g_szCmb_Str, 0x00, sizeof(g_szCmb_Str) );
					Str_Cpy(g_szCmb_Str, m_szCobSel);

					m_lTotChkFlag = 0;
					m_lpage_S = 0;
					m_nActIndex_S = 0;
					ReDraw();
				}
			}
			
			if( Get_iDlgCtrlByID(CMB_DATA2+1) == m_lEditCtrlIndex )
			{
				if( Str_Cmp(EditCtrl_GetStr( Get_hDlgCtrlByID(CMB_DATA2)), "즉시발송") == 0 )
				{
					ButCtrl_SetText(Get_hDlgCtrlByID(BID_SND), "즉시발송");
	
					EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA5), "" );
					//EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA1), "" );
					EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA12), "" );
					EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA2), "" );
					
					DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA5), TRUE );
					DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_CALENDAR), TRUE );
					//DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA1), TRUE );
					DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA12), TRUE );
					DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA12+1), TRUE );
					
					DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA2), TRUE );
					DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_CALENDAR), FALSE );
					//DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA1), FALSE );
					DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA12), FALSE );
					DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA12+1), FALSE );
					DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA2), FALSE );
				}
				else
				{
					ButCtrl_SetText(Get_hDlgCtrlByID(BID_SND), "예약발송");
	
					DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA5), FALSE );
					DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_CALENDAR), FALSE );
					//DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA1), FALSE );
					DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA12), FALSE );
					DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA12+1), FALSE );
					
					DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA2), FALSE );
					DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_CALENDAR), TRUE );
					//DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA1), TRUE );
					DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA12), TRUE );
					DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA12+1), TRUE );
					DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA2), TRUE );
				}
			}
		}
		else if( m_bFirst == INIT_CHANGE )
		{
			//현재 TBL이 선택되었는지를 확인
			if (DlgTbl_IsSelect(ID_CHGLIST))
			{
				// 현재 선택된 인덱스
				index = DlgTbl_GetActiveRow(ID_CHGLIST);
				// 선택 인덱스와 기존 인덱스가 동일 할 경우
				if ( index-1 == m_nActIndex_C )
				{
					g_nSmsFlag = 2;
					g_nActIndex = m_lpage_C*ROW_C + m_nActIndex_C;
					Card_Move("GM_SMSSND");
					return;
				}
				else
				{
					m_nActIndex_C = index - 1;//선택된 INDEX 저장
				
					Mem_Set( (byte*)g_szCntSql, 0x00, sizeof(g_szCntSql) );
					Str_Cpy(g_szCntSql, DlgTbl_GetStr( ID_CHGLIST, m_nActIndex_C, 1));		//주소
					Mem_Set( (byte*)g_szTown, 0x00, sizeof(g_szTown) );
					Str_Cpy(g_szTown, DlgTbl_GetStr( ID_CHGLIST, m_nActIndex_C, 4));	//고객명

					Mem_Set( (byte*)g_szCpNum, 0x00, sizeof(g_szCpNum) );
					Str_Cpy(g_szCpNum, DlgTbl_GetStr( ID_CHGLIST, m_nActIndex_C, 2));
					Str_Chg(g_szCpNum, STRCHG_DEL_NONDIGIT);
					
					Mem_Set( (byte*)g_szUSE_CONT_NUM, 0x00, sizeof(g_szUSE_CONT_NUM) );
					Str_Cpy(g_szUSE_CONT_NUM, DlgTbl_GetStr( ID_CHGLIST, m_nActIndex_C, 3));
				}
			}
		}
		else if( m_bFirst == INIT_ADDR )
		{
			//현재 TBL이 선택되었는지를 확인
			if (DlgTbl_IsSelect(ID_FINDLIST))
			{
				// 현재 선택된 인덱스
				index = DlgTbl_GetActiveRow(ID_FINDLIST);
				// 선택 인덱스와 기존 인덱스가 동일 할 경우
				if ( index-1 == m_nActIndex_F )
				{
					return;
				}
				else
				{
					m_nActIndex_F = index - 1;//선택된 INDEX 저장
							
					Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
					Mem_Set( (byte*)m_szCp_ddd, 0x00, sizeof(m_szCp_ddd) );
					Mem_Set( (byte*)m_szCp_exn, 0x00, sizeof(m_szCp_exn) );
					Mem_Set( (byte*)m_szCp_num, 0x00, sizeof(m_szCp_num) );
					Str_Cpy(sztmp, DlgTbl_GetStr( ID_FINDLIST, m_nActIndex_F, 2));
					Str_Chg(sztmp, STRCHG_DEL_NONDIGIT);
					Analy_Phone(sztmp, m_szCp_ddd, m_szCp_exn, m_szCp_num);
					EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA9), m_szCp_ddd );
					EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA3), m_szCp_exn );
					EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA4), m_szCp_num );
			
					Mem_Set( (byte*)g_szUSE_CONT_NUM, 0x00, sizeof(g_szUSE_CONT_NUM) );
					Str_Cpy(g_szUSE_CONT_NUM, DlgTbl_GetStr( ID_FINDLIST, m_nActIndex_F, 3));
				}
				
				return;
			}

			Mem_Set((byte*)szcmb, 0x00, sizeof(szcmb));
			Str_Cpy( szcmb ,EditCtrl_GetStr( Get_hDlgCtrlByID(CMB_DATA10) ) );
			//콤보박스 선택으로 리스트 목록 필터링
			if( Str_Cmp(m_szSearchtype, szcmb ) != 0 )
			{
				Mem_Set((byte*)m_szSearchtype, 0x00, sizeof(m_szSearchtype));
				Str_Cpy(m_szSearchtype, szcmb);
				m_lpage_F = 0;
				m_nActIndex_F = 0;
				if( Str_Cmp(m_szSearchtype, "주소") == 0 )
				{
					return;
				}
				else if( Str_Cmp(m_szSearchtype, "기물번호") == 0 )
				{
					m_lSearchType = 3;
					ON_EXIT();
					OnInit(INIT_NUM);
				}
				else if( Str_Cmp(m_szSearchtype, "계약번호") == 0 )
				{
					m_lSearchType = 4;
					ON_EXIT();
					OnInit(INIT_NUM);
				}
			}
		}
		else if( m_bFirst == INIT_NUM )
		{
			Mem_Set((byte*)szcmb, 0x00, sizeof(szcmb));
			Str_Cpy( szcmb ,EditCtrl_GetStr( Get_hDlgCtrlByID(CMB_DATA10) ) );
			//콤보박스 선택으로 리스트 목록 필터링
			if( Str_Cmp(m_szSearchtype, szcmb ) != 0 )
			{
				Mem_Set((byte*)m_szSearchtype, 0x00, sizeof(m_szSearchtype));
				Str_Cpy(m_szSearchtype, szcmb);
				m_lpage_F = 0;
				m_nActIndex_F = 0;
				if( Str_Cmp(m_szSearchtype, "주소") == 0 )
				{
					m_lSearchType = 0;
					ON_EXIT();
					OnInit(INIT_ADDR);
					return;
				}
				else if( Str_Cmp(m_szSearchtype, "기물번호") == 0 )
				{
					 m_lSearchType = 3;
				}
				else if( Str_Cmp(m_szSearchtype, "계약번호") == 0 )
				{
					m_lSearchType = 4;
				}
				SetStyle();
			}
		}
	}

//--------------------------------------------------------------------------------------------------------
	void OnList(quad lParam)
	{
		long i = 0, j = 0;
		long lRowid = 0;
		char szRowid[10];
		char szSql[800];
		char szWhere[512];
		handle hdb = NULL;
		handle hstmt = NULL;
		SQLITE sql = NewSqLite();
		
		i = lParam;
		//PRINT(">>>>>> lParam : %d , i : %d",lParam,i,0);
		
		if( i > -1 )
		{
			if( m_bFirst == INIT_CHANGE )
			{
				g_Sql_SaveSeq( "SELECT ROWID FROM GUMDATA ORDER BY HOUSE_NUM_ORD, DONG_ORD, MTR_COURSE", SREACH_FILE);
				lRowid = g_SREACHFILE_GetSeq(SREACH_FILE, lParam);

				hdb = sql->Open(sql);
				if( hdb == NULL )
				{
					DelSqLite(sql);
					goto Finally;
				}
		
				Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
				if( g_nAddrFlag == 0 )
				{
					Str_Cpy(szSql, "SELECT CASE WHEN Length(Trim(CO_LIVE_NM))+Length(Trim(BLD_NM)) > 0 THEN \
 ifnull(CO_LIVE_NM,'') ||' '|| ifnull(BLD_NM,'') ||'-'|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') ELSE  \
 ifnull(ADDR1_M,'') ||'-'|| ifnull(ADDR1_S,'') ||' '|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') END \
, CASE WHEN (LENGTH(ifnull(TRIM(SMS_CP_DDD),'')) + LENGTH(ifnull(TRIM(SMS_CP_EXN),'')) + LENGTH(ifnull(TRIM(SMS_CP_NUM),''))) > 3 \
THEN ifnull(SMS_CP_DDD, '') ||'-'|| ifnull(SMS_CP_EXN, '') ||'-'|| ifnull(SMS_CP_NUM, '') \
ELSE ifnull(CP_DDD, '') ||'-'|| ifnull(CP_EXN, '') ||'-'|| ifnull(CP_NUM, '') END \
, CUST_NM, USE_CONT_NUM FROM GUMDATA WHERE ROWID = ? ORDER BY DONG_ORD, HOUSE_NUM_ORD, MTR_COURSE");
				}
				else
				{
					Str_Cpy(szSql, "SELECT CASE WHEN Length(Trim(CO_LIVE_NM))+Length(Trim(BLD_NM)) > 0 THEN \
 ifnull(CO_LIVE_NM,'') ||' '|| ifnull(BLD_NM,'') ||'-'|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') ELSE  \
ifnull(NEW_ADDR_M,'') ||'-'|| ifnull(NEW_ADDR_S,'') ||' '|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') END \
, CASE WHEN (LENGTH(ifnull(TRIM(SMS_CP_DDD),'')) + LENGTH(ifnull(TRIM(SMS_CP_EXN),'')) + LENGTH(ifnull(TRIM(SMS_CP_NUM),''))) > 3 \
THEN ifnull(SMS_CP_DDD, '') ||'-'|| ifnull(SMS_CP_EXN, '') ||'-'|| ifnull(SMS_CP_NUM, '') \
ELSE ifnull(CP_DDD, '') ||'-'|| ifnull(CP_EXN, '') ||'-'|| ifnull(CP_NUM, '') END \
, CUST_NM, USE_CONT_NUM FROM GUMDATA WHERE ROWID = ? ORDER BY DONG_ORD, HOUSE_NUM_ORD, MTR_COURSE");
				}
				hstmt = sql->CreateStatement(sql, szSql);
PRINT("szSql : %d, %s",Str_Len(szSql),szSql,0);
				if( hstmt == NULL )
				{
					PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
					DelSqLite(sql);
					goto Finally;
				}
		
				j = 0;
				Mem_Set((byte*)szRowid, 0x00, sizeof(szRowid));
				Str_ItoA(lRowid,szRowid,10);
				sql->Bind(sql, j++, 'U', (long*)&szRowid , 10, DECRYPT);
	
				if(sql->Execute(sql) == FALSE)
				{
					PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
					DelSqLite(sql);
					goto Finally;
				}
		
				if(sql->Next(sql) == TRUE )
				{	
					Mem_Set( (byte*)g_szCntSql, 0x00, sizeof(g_szCntSql) );
					Mem_Set( (byte*)g_szCpNum, 0x00, sizeof(g_szCpNum) );
					Mem_Set( (byte*)g_szTown, 0x00, sizeof(g_szTown) );
					Mem_Set( (byte*)g_szUSE_CONT_NUM, 0x00, sizeof(g_szUSE_CONT_NUM) );
		
					j = 0;
					sql->GetValue( sql, j++, 'U', (long*) g_szCntSql			, 511 + 1, DECRYPT );	//주소
					sql->GetValue( sql, j++, 'U', (long*) g_szCpNum				, 19  + 1, DECRYPT );	//전화번호
					sql->GetValue( sql, j++, 'U', (long*) g_szTown				, 50  + 1, DECRYPT );	//고객명
					sql->GetValue( sql, j++, 'U', (long*) g_szUSE_CONT_NUM		, 14  + 1, DECRYPT );	//사용계약번호
					
					DelSqLite(sql);
				}
				else
				{
					PRINT("::sql->Next fail [%s]",sql->GetLastError(sql),0,0);
					DelSqLite(sql);
					goto Finally;
				}

				g_nActIndex = lParam;
				g_nSmsFlag = 2;
				Card_Move("GM_SMSSND");
			}
		}
		
Finally:

		return;
	}

//------------------------------------------------------------------
	void SetBtnImg(void)
	{
		void* h;

		IconCtrl_SetImage(Get_hDlgCtrlByID(ICON_TITLE), 0, g_pImgMainTtl );		//타이틀
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_TITLE), EDITALIGN_CENTER|EDITALIGN_MIDDLE);

		if( theDevInfo.m_nType > FAMILY_PDA )
		{
			//상단공통메뉴
			h = GetSysButHandle(GID_HOME);
			ButCtrl_SetImage( h,  g_pImgHomeI);
			ButCtrl_SetActiveImage( h,  g_pImgHomeA);
			
			h = GetSysButHandle(GID_KEYBOARD);
			ButCtrl_SetImage( h,  g_pImgKeybrdI);
			ButCtrl_SetActiveImage( h,  g_pImgKeybrdA);
			
			h = GetSysButHandle(GID_SCREEN);
			ButCtrl_SetImage( h,  g_pImgScreenI);
			ButCtrl_SetActiveImage( h,  g_pImgScreenA);
			
			h = GetSysButHandle(GID_CMMNWK);
			ButCtrl_SetImage( h,  g_pImgCmmnwrkI);
			ButCtrl_SetActiveImage( h,  g_pImgCmmnwrkA);
			
			h = GetSysButHandle(GID_VMEXIT);
			ButCtrl_SetImage( h,  g_pImgExitI);
			ButCtrl_SetActiveImage( h,  g_pImgExitA);
		}
	}

//-----------------------------------------------------------------
	void	SetStyle(void)
	{
		long i = 0;
		
		if( m_bFirst == INIT_MAIN )
		{
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA1), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA2), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA3), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA4), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA5), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA6), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA23), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA25), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			
			//EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA1), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_DATA12), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA2), EDITALIGN_MIDDLE);
			
			EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_DATA1), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_DATA2), EDITALIGN_MIDDLE);
	
			//시간(시) 목록
			for ( i = 0 ;  TIME_HOUR[i].Str[0] != 0 ; i++)
			{
				ListCtrl_AddItem (Get_hDlgCtrlByID(CMB_DATA12+2), TIME_HOUR[i].Str, 0, ICON_NONE);
			}

			//상태 목록
			for ( i = 0 ;  GM_SEND_STS[i].Str[0] != 0 ; i++)
			{
				ListCtrl_AddItem (Get_hDlgCtrlByID(CMB_DATA1+2), GM_SEND_STS[i].Str, 0, ICON_NONE);
			}
			
			//발송 타입
			for ( i = 0 ;  GM_SEND_TYPE[i].Str[0] != 0 ; i++)
			{
				ListCtrl_AddItem (Get_hDlgCtrlByID(CMB_DATA2+2), GM_SEND_TYPE[i].Str, 0, ICON_NONE);
			}
			
			if( Str_Len(g_szCmb_Str) > 2 )
			{
				Mem_Set((byte*)m_szCobSel, 0x00, sizeof(m_szCobSel));
				Str_Cpy(m_szCobSel, g_szCmb_Str);
				EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA1), g_szCmb_Str );
			}
			else
			{
				EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA1), "전체" );
			}
			
			EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA2), "즉시발송" );
			if( Str_Cmp(EditCtrl_GetStr( Get_hDlgCtrlByID(CMB_DATA2)), "즉시발송") == 0 )
			{
				EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA5), "" );
				//EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA1), "" );
				EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA12), "" );
				EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA2), "" );
				
				DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA5), TRUE );
				DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_CALENDAR), TRUE );
				DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA12+1), TRUE );
				DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA2), TRUE );
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_CALENDAR), FALSE );
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA12+1), FALSE );
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA2), FALSE );

				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(BID_SND),  TRUE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(BID_DELETE),  TRUE);
	
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA25),  FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(BID_RSRVCNCL),  FALSE);
			}
			else
			{
				DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA5), FALSE );
				DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_CALENDAR), FALSE );
				DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA12+1), FALSE );
				DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA2), FALSE );
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_CALENDAR), TRUE );
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA12+1), TRUE );
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA2), TRUE );

				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(BID_SND),  FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(BID_DELETE),  FALSE);
	
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA25),  TRUE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(BID_RSRVCNCL),  TRUE);
			}

		}
		else if( m_bFirst == INIT_ADDR )
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA10), "주소" );

			//m_lSearchType // = 0 지번 , = 1 도로명 , = 2 공동 , = 3 기물번호 , = 4 사용계약번호
			if( m_lSearchType == 0 )
			{
				g_Sql_SetCombo("SELECT AREA FROM GUMDATA WHERE AREA IS NOT NULL GROUP BY AREA", CMB_DATA3+2);
				g_Sql_SetCombo("SELECT TOWN FROM GUMDATA WHERE TOWN IS NOT NULL GROUP BY TOWN", CMB_DATA4+2);

				DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_JIBUN), FALSE );
				DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_ROADNM), TRUE );
				DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TOGETHER), TRUE );
			
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA8),  TRUE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA9),  TRUE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA10), TRUE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA11), TRUE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA5),  TRUE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA6),  TRUE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA3),  TRUE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA3+1),TRUE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA4),  TRUE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA4+1),TRUE);

				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA13), FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA14), FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA15), FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA16), FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA7),  FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA8),  FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA5),  FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA5+1),FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA6),  FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA6+1),FALSE);

				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA17), FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA18), FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA19), FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA9),  FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA7),  FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA7+1),FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA8),  FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA8+1),FALSE);
	
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA8), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA9), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA10), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA11), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				
				EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA5), EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA6), EDITALIGN_MIDDLE);
				
				EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_DATA3), EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_DATA4), EDITALIGN_MIDDLE);
			}
			else if( m_lSearchType == 1 )
			{
				g_Sql_SetCombo("SELECT AREA FROM GUMDATA WHERE AREA IS NOT NULL GROUP BY AREA", CMB_DATA5+2);
				g_Sql_SetCombo("SELECT NEW_ROAD_NM FROM GUMDATA WHERE NEW_ROAD_NM IS NOT NULL GROUP BY NEW_ROAD_NM", CMB_DATA6+2);

				DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_JIBUN), TRUE );
				DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_ROADNM), FALSE );
				DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TOGETHER), TRUE );

				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA8),  FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA9),  FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA10), FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA11), FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA5),  FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA6),  FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA3),  FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA3+1),FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA4),  FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA4+1),FALSE);

				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA13), TRUE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA14), TRUE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA15), TRUE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA16), TRUE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA7),  TRUE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA8),  TRUE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA5),  TRUE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA5+1),TRUE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA6),  TRUE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA6+1),TRUE);

				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA17), FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA18), FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA19), FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA9),  FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA7),  FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA7+1),FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA8),  FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA8+1),FALSE);

				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA13), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA14), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA15), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA16), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				
				EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA7), EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA8), EDITALIGN_MIDDLE);
	
				EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_DATA5), EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_DATA6), EDITALIGN_MIDDLE);
			}
			else if( m_lSearchType == 2 )
			{
				g_Sql_SetCombo("SELECT CO_LIVE_NM FROM GUMDATA WHERE CO_LIVE_NM IS NOT NULL GROUP BY CO_LIVE_NM", CMB_DATA7+2);
				g_Sql_SetCombo("SELECT BLD_NM FROM GUMDATA WHERE BLD_NM IS NOT NULL GROUP BY BLD_NM", CMB_DATA8+2);

				DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_JIBUN), TRUE );
				DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_ROADNM), TRUE );
				DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TOGETHER), FALSE );

				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA8),  FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA9),  FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA10), FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA11), FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA5),  FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA6),  FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA3),  FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA3+1),FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA4),  FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA4+1),FALSE);

				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA13), FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA14), FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA15), FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA16), FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA7),  FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA8),  FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA5),  FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA5+1),FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA6),  FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA6+1),FALSE);

				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA17), TRUE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA18), TRUE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA19), TRUE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA9),  TRUE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA7),  TRUE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA7+1),TRUE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA8),  TRUE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA8+1),TRUE);

				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA17), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA18), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA19), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				
				EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA9), EDITALIGN_MIDDLE);
	
				EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_DATA7), EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_DATA8), EDITALIGN_MIDDLE);
			}

			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA7), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA12), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA20), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA3), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA4), EDITALIGN_MIDDLE);

			EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_DATA9), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_DATA10), EDITALIGN_MIDDLE);
			
			if( theDevInfo.m_nType > FAMILY_PDA )
			{
				//숫자판
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_ONE), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_TWO), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_THREE), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_FOUR), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_FIVE), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_SIX), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_SEVEN), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_EIGHT), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_NINE), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_ZERO), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_DEL), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			}
		}
		else if( m_bFirst == INIT_NUM )
		{
			if( m_lSearchType == 3 )
			{
				EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA10), "기물번호" );
	
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA21),  TRUE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA10),  TRUE);
				
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA22),  FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA11),  FALSE);

				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA21), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA10), EDITALIGN_MIDDLE);
			}
			else if( m_lSearchType == 4 )
			{
				EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA10), "계약번호" );
			
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA21),  FALSE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA10),  FALSE);
				
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA22),  TRUE);
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA11),  TRUE);

				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA22), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA11), EDITALIGN_MIDDLE);
			}
		
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA7), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA12), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA20), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA3), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA4), EDITALIGN_MIDDLE);

			EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_DATA9), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_DATA10), EDITALIGN_MIDDLE);
		}
	}	


	/*=======================================================================================
	함수명 : SearchStr
	기  능 : 스트링으로 코드인덱스를 찾는다.
	Param  : 
	Return : 코드인덱스, 없으면 -1
	========================================================================================*/
	long	SearchStr( char *Str, CodeTable *CT)
	{
		long i;

		for ( i = 0 ; CT[i].Code[0] != 0 ; i++)
		{
			if( Str_Cmp(Str, CT[i].Str) == 0 )
				return i;
		}
		
		return -1;
	}
	
	/*=======================================================================================
	함수명 : SearchCD
	기  능 : 코드값으로 코드인덱스를 찾는다.
	Param  : 
	Return : 코드인덱스, 없으면 -1
	========================================================================================*/
	long	SearchCD( char *CD, CodeTable *CT)
	{
		long i;
		
		for(i = 0; CT[i].Code[0] != 0; i++)
		{	
			if ( Str_Cmp(CD, CT[i].Code) == 0)
				return i;
		}
		
		return -1;
	}

	
//------------------------------------------------------------------
	void ReDraw(void)
	{
	long lCmbcd = 0;
	long i, idx;
	long lSndStsCd = 0;
	long k = ROW_S + 1;
	long lRow = 0, lCol = 0;
	char szSql[500];
	char sztmp[400];
	char szBuf[50];
	long ret = -1;	
	long lstartidx;
	handle hdb = NULL;
	handle hstmt = NULL;
	SQLITE sql = NewSqLite();
		
		hdb = sql->Open(sql);
		if( hdb == NULL )
		{
			goto Finally;
		}

		if( Str_Cmp(m_szCobSel, "전체") != 0 && Str_Len(m_szCobSel) > 2 )
		{
			lCmbcd = 0;
			lCmbcd = SearchStr( m_szCobSel, GM_SEND_STS );
			if(lCmbcd >= 0)
			{
				Mem_Set( (byte*)szBuf, 0x00, sizeof(szBuf) );
				Str_Cpy(szBuf, GM_SEND_STS[lCmbcd].Code);
			}
			
			//총 갯수
			Mem_Set( (byte*) m_szTot_Cnt_S, 0x00, sizeof( m_szTot_Cnt_S) );
			Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
			SPRINT(szSql, "SELECT COUNT(*) FROM GUM_SMS_TARGET WHERE GMTR_SEND_STS = '%s'",szBuf,0,0);
			g_Sql_RetStr(szSql, 10, m_szTot_Cnt_S);
			m_lTotpage_S = Str_AtoI(m_szTot_Cnt_S);
	
			//선택 갯수
			Mem_Set( (byte*) m_szSel_Cnt_S, 0x00, sizeof( m_szSel_Cnt_S) );
			Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
			SPRINT(szSql, "SELECT COUNT(*) FROM GUM_SMS_TARGET WHERE CHK_YN = 'Y' AND GMTR_SEND_STS = '%s'",szBuf,0,0);
			g_Sql_RetStr(szSql, 10, m_szSel_Cnt_S);
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA4), m_szSel_Cnt_S );

			//페이지 수
			if( m_lTotpage_S % ROW_S > 0 )
			{
				m_lTotpage_S = (m_lTotpage_S / ROW_S) + 1;
			}
			else
			{
				m_lTotpage_S = m_lTotpage_S / ROW_S;
			}
			SPRINT(m_szCnt_page_S, "%d/%d", m_lpage_S+1, m_lTotpage_S, 0);

			//콤보 필터링
			Mem_Set( (byte*)m_szSql, 0x00, sizeof(m_szSql) );
			SPRINT(m_szSql, "SELECT CHK_YN, TOWN, CASE WHEN Length(Trim(CO_LIVE_NM))+Length(Trim(BLD_NM)) > 0 THEN ifnull(CO_LIVE_NM,'') ||' '|| ifnull(BLD_NM,'') ||'-'|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') ELSE ifnull(NEW_ADDR_M,'') ||'-'|| ifnull(NEW_ADDR_S,'') ||' '|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') END, CASE WHEN Length(Trim(CO_LIVE_NM))+Length(Trim(BLD_NM)) > 0 THEN ifnull(CO_LIVE_NM,'') ||' '|| ifnull(BLD_NM,'') ||'-'|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') ELSE ifnull(ADDR1_M,'') ||'-'|| ifnull(ADDR1_S,'') ||' '|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') END, SMS_SEND_FLAG, GMTR_SEND_STS, USE_CONT_NUM, CUST_NM, MTR_ID_NUM, PLAN_DTM FROM GUM_SMS_TARGET WHERE GMTR_SEND_STS = '%s' LIMIT ?, ? ", szBuf,0,0);
			hstmt = sql->CreateStatement(sql, m_szSql);
		}
		else
		{
			//총갯수
			Mem_Set( (byte*) m_szTot_Cnt_S, 0x00, sizeof( m_szTot_Cnt_S) );
			g_Sql_RetStr("SELECT COUNT(*) FROM GUM_SMS_TARGET", 10, m_szTot_Cnt_S);
			m_lTotpage_S = Str_AtoI(m_szTot_Cnt_S);
			
			//선택 갯수
			Mem_Set( (byte*) m_szSel_Cnt_S, 0x00, sizeof( m_szSel_Cnt_S) );
			g_Sql_RetStr("SELECT COUNT(*) FROM GUM_SMS_TARGET WHERE CHK_YN = 'Y' ", 10, m_szSel_Cnt_S);
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA4), m_szSel_Cnt_S );
			
			//페이지 수
			if( m_lTotpage_S % ROW_S > 0 )
			{
				m_lTotpage_S = (m_lTotpage_S / ROW_S) + 1;
			}
			else
			{
				m_lTotpage_S = m_lTotpage_S / ROW_S;
			}
			SPRINT(m_szCnt_page_S, "%d/%d", m_lpage_S+1, m_lTotpage_S, 0);

			//hstmt = sql->CreateStatement(sql, "SELECT CHK_YN, TOWN, CASE WHEN Length(Trim(CO_LIVE_NM))+Length(Trim(BLD_NM)) > 0 THEN ifnull(CO_LIVE_NM,'') ||' '|| ifnull(BLD_NM,'') ||'-'|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') ELSE ifnull(NEW_ADDR_M,'') ||'-'|| ifnull(NEW_ADDR_S,'') ||' '|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') END, CASE WHEN Length(Trim(CO_LIVE_NM))+Length(Trim(BLD_NM)) > 0 THEN ifnull(CO_LIVE_NM,'') ||' '|| ifnull(BLD_NM,'') ||'-'|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') ELSE ifnull(ADDR1_M,'') ||'-'|| ifnull(ADDR1_S,'') ||' '|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') END, SMS_SEND_FLAG, GMTR_SEND_STS, USE_CONT_NUM, CUST_NM FROM GUM_SMS_TARGET LIMIT ?, ?" );
			hstmt = sql->CreateStatement(sql, "SELECT CHK_YN, TOWN, CASE WHEN Length(Trim(CO_LIVE_NM))+Length(Trim(BLD_NM)) > 0 THEN ifnull(CO_LIVE_NM,'') ||' '|| ifnull(BLD_NM,'') ||'-'|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') ELSE ifnull(NEW_ADDR_M,'') ||'-'|| ifnull(NEW_ADDR_S,'') ||' '|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') END, CASE WHEN Length(Trim(CO_LIVE_NM))+Length(Trim(BLD_NM)) > 0 THEN ifnull(CO_LIVE_NM,'') ||' '|| ifnull(BLD_NM,'') ||'-'|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') ELSE ifnull(ADDR1_M,'') ||'-'|| ifnull(ADDR1_S,'') ||' '|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') END, SMS_SEND_FLAG, GMTR_SEND_STS, USE_CONT_NUM, CUST_NM, MTR_ID_NUM, PLAN_DTM FROM GUM_SMS_TARGET LIMIT ?, ?" );
		}
				
		if( hstmt == NULL )
		{
			PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}
		
		idx = 0;
		lstartidx = m_lpage_S*ROW_S;
		sql->Bind(sql, idx++, 'X', &lstartidx, 4, DECRYPT);
		i = m_lpage_S*ROW_S+ROW_S;
		sql->Bind(sql, idx++, 'X', &i, 4, DECRYPT);
		
		if(sql->Execute(sql) == FALSE)
		{
			PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}

		// 등록된 코드 리스트를 페이지에 맞게 보여준다.
		for (i=0 ; i<ROW_S ; i++)
		{
			//자료가 없을때 화면을 클리어 시킨다.
			if( k == i )
			{
				k++;
				DlgTbl_SetStr ( ID_SMSLIST, i, 0, "" );
				DlgTbl_SetStr ( ID_SMSLIST, i, 1, "" );
				DlgTbl_SetStr ( ID_SMSLIST, i, 2, "" );
				DlgTbl_SetStr ( ID_SMSLIST, i, 3, "" );
				DlgTbl_SetStr ( ID_SMSLIST, i, 4, "" );
				DlgTbl_SetStr ( ID_SMSLIST, i, 5, "" );
				DlgTbl_SetStr ( ID_SMSLIST, i, 6, "" );
				DlgTbl_SetStr ( ID_SMSLIST, i, 7, "" );
				DlgTbl_SetStr ( ID_SMSLIST, i, 8, "" );
			}
			else
			{
				if(sql->Next(sql) == FALSE)
				{
					k = i + 1;
					DlgTbl_SetStr ( ID_SMSLIST, i, 0, "" );
					DlgTbl_SetStr ( ID_SMSLIST, i, 1, "" );
					DlgTbl_SetStr ( ID_SMSLIST, i, 2, "" );
					DlgTbl_SetStr ( ID_SMSLIST, i, 3, "" );
					DlgTbl_SetStr ( ID_SMSLIST, i, 4, "" );
					DlgTbl_SetStr ( ID_SMSLIST, i, 5, "" );
					DlgTbl_SetStr ( ID_SMSLIST, i, 6, "" );
					DlgTbl_SetStr ( ID_SMSLIST, i, 7, "" );
					DlgTbl_SetStr ( ID_SMSLIST, i, 8, "" );
					continue;
				}

				idx = 0;
				//체크상태
				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				sql->GetValue(sql, 0, 'U', (long*)sztmp, 30, DECRYPT);
				if( Str_Cmp(sztmp, "Y") == 0 )
				{
					DlgTbl_SetStr ( ID_SMSLIST, i, 0, CHKON );
					EditCtrl_SetForeColorEx( DlgTbl_GetHandle 	( ID_SMSLIST, i, 0 ), RED );
				}
				else
				{
					DlgTbl_SetStr ( ID_SMSLIST, i, 0, CHKOFF );
					EditCtrl_SetForeColorEx( DlgTbl_GetHandle 	( ID_SMSLIST, i, 0 ), BLACK );
				}
				//동명
				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				sql->GetValue(sql, 1, 'U', (long*)sztmp, 50, DECRYPT);
				DlgTbl_SetStr ( ID_SMSLIST, i, 1, sztmp );
				//주소
				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				if( g_nAddrFlag == 1 )
				{
					sql->GetValue(sql, 2, 'U', (long*)sztmp, 300, DECRYPT);
				}
				else
				{
					sql->GetValue(sql, 3, 'U', (long*)sztmp, 300, DECRYPT);
				}
				DlgTbl_SetStr ( ID_SMSLIST, i, 2, sztmp );
				//발신자
				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				sql->GetValue(sql, 4, 'U', (long*)sztmp, 50, DECRYPT);
				if( Str_Cmp(sztmp, "P") == 0 )
				{
					DlgTbl_SetStr ( ID_SMSLIST, i, 3, "모바일" );
				}
				else if( Str_Cmp(sztmp, "E") == 0 )
				{
					DlgTbl_SetStr ( ID_SMSLIST, i, 3, "PC" );
				}
				else if( Str_Cmp(sztmp, "") == 0 )
				{
					DlgTbl_SetStr ( ID_SMSLIST, i, 3, " " );
				}
				//상태
				//문자검침발송진행상태 (10 : 대상선정, 20 : 발송중, 30 : 예약, 40 : 발송완료, 50 : 발송실패, 60 :  회신완료, 70 : 회신오류, 80 : 검침적용, 90 : 취소, 99 : 오류)
				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				sql->GetValue(sql, 5, 'U', (long*)sztmp, 30, DECRYPT);
				lSndStsCd = SearchCD( sztmp, GM_SEND_STS );
				if (lSndStsCd == -1)
				{
					DlgTbl_SetStr ( ID_SMSLIST, i, 4, "" );
				}
				else
				{
					DlgTbl_SetStr ( ID_SMSLIST, i, 4, GM_SEND_STS[lSndStsCd].Str );
				}
				//USE_CONT_NUM
				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				sql->GetValue(sql, 6, 'U', (long*)sztmp, 20, DECRYPT);
				DlgTbl_SetStr ( ID_SMSLIST, i, 5, sztmp );
				//cust_nm
				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				sql->GetValue(sql, 7, 'U', (long*)sztmp, 50, DECRYPT);
				DlgTbl_SetStr ( ID_SMSLIST, i, 6, sztmp );
				//mtr_id_num
				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				sql->GetValue(sql, 8, 'U', (long*)sztmp, 50, DECRYPT);
				DlgTbl_SetStr ( ID_SMSLIST, i, 7, sztmp );
				//plan_dtm
				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				sql->GetValue(sql, 9, 'U', (long*)sztmp, 50, DECRYPT);
				DlgTbl_SetStr ( ID_SMSLIST, i, 8, sztmp );
			}
		}		
Finally:
		//sql->Commit(sql);

		DelSqLite(sql);

		if( m_lTotpage_S > 0 )
		{
			if( m_nActIndex_S < 0 )
			{
				m_nActIndex_S = 0;
			}

			//m_lActFlag = 0;
			//lRow = (m_nActIndex_S-1)/COL_S;
			//lCol = (m_nActIndex_S-1)%COL_S;
			//DlgTbl_SetActive(ID_SMSLIST , lRow );
			//DlgTbl_SetCellColor(TBL_BKCOLOR, ID_SMSLIST, lRow, lCol, TABLEACTIVE_COLOR);
			
			Mem_Set( (byte*)g_szCntSql, 0x00, sizeof(g_szCntSql) );
			Str_Cpy(g_szCntSql, DlgTbl_GetStr( ID_SMSLIST, lRow, 2));		//주소
			Mem_Set( (byte*)g_szTown, 0x00, sizeof(g_szTown) );
			Str_Cpy(g_szTown, DlgTbl_GetStr( ID_SMSLIST, lRow, 6));			//고객명
			
			Mem_Set( (byte*)m_szSendStr, 0x00, sizeof(m_szSendStr) );
			Str_Cpy(m_szSendStr, DlgTbl_GetStr( ID_SMSLIST, lRow, 4));		//발송상태

			Mem_Set( (byte*)m_stUserinfo.szUse_cont_num, 0x00, sizeof(m_stUserinfo.szUse_cont_num) );
			Mem_Set( (byte*)g_szUSE_CONT_NUM, 0x00, sizeof(g_szUSE_CONT_NUM) );
			Str_Cpy(m_stUserinfo.szUse_cont_num, DlgTbl_GetStr( ID_SMSLIST, lRow, 5));
			Str_Cpy(g_szUSE_CONT_NUM, m_stUserinfo.szUse_cont_num);			//계약번호
	
			Mem_Set( (byte*)g_szMTR_ID_NUM, 0x00, sizeof(g_szMTR_ID_NUM) );
			Str_Cpy(g_szMTR_ID_NUM, DlgTbl_GetStr( ID_SMSLIST, lRow, 7));	//기물번호

			i = SearchStr( m_szSendStr, GM_SEND_STS );
			if(i >= 0)
			{
				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				Str_Cpy(sztmp, GM_SEND_STS[i].Code);
			}
			if( Str_Cmp(sztmp, "30") == 0 )
			{
				Mem_Set( (byte*)m_szPlan_Dtm, 0x00, sizeof(m_szPlan_Dtm) );
				Str_Cpy(m_szPlan_Dtm, DlgTbl_GetStr( ID_SMSLIST, lRow, 8));		//예약일자
			}

			//2017-07-17 Sanghyun Lee
			//선택한 대상의 상태에 따라 UI변경
			GmSms_Sts_Cnt();
		}

		ON_DRAW();
		return;
	}
	
	//------------------------------------------------------------------
	void Save_Row(long row, long col)
	{
		long lChkCnt = 0, lTotCnt = 0;
		long lCmbcd = 0;
		char szBuf[30];
		char sztmp[30];
		char szSql[800];
	
		Mem_Set((byte*)sztmp ,0x00, sizeof(sztmp) );
		Mem_Set((byte*)szSql ,0x00, sizeof(szSql) );

		Str_Cpy( sztmp, DlgTbl_GetStr( ID_SMSLIST, row, col) );

		//테이블 key값 알아보기! where 조건에 넣어줘야함.
		//적합일 경우 항목 삭제
		if(Str_Cmp( sztmp, CHKON) == 0)
		{
			Mem_Set((byte*)szSql ,0x00, sizeof(szSql) );
			SPRINT(szSql, "UPDATE GUM_SMS_TARGET SET CHK_YN = 'Y' WHERE USE_CONT_NUM = '%s'", m_stUserinfo.szUse_cont_num, 0, 0);
			g_Sql_DirectExecute( szSql );
		}
		else // 부적합일 경우 항목 추가
		{
			Mem_Set((byte*)szSql ,0x00, sizeof(szSql) );
			SPRINT(szSql, "UPDATE GUM_SMS_TARGET SET CHK_YN = 'N' WHERE USE_CONT_NUM = '%s'", m_stUserinfo.szUse_cont_num, 0, 0);
			g_Sql_DirectExecute( szSql );
		}
		
		if( Str_Cmp(m_szCobSel, "전체") != 0 && Str_Len(m_szCobSel) > 2 )
		{
			lCmbcd = 0;
			lCmbcd = SearchStr( m_szCobSel, GM_SEND_STS );
			if(lCmbcd >= 0)
			{
				Mem_Set( (byte*)szBuf, 0x00, sizeof(szSql) );
				Str_Cpy(szBuf, GM_SEND_STS[lCmbcd].Code);
			}

			//선택 갯수 , long lChkCnt = 0, lTotCnt = 0;
			Mem_Set( (byte*) m_szSel_Cnt_S, 0x00, sizeof( m_szSel_Cnt_S) );
			Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
			SPRINT(szSql, "SELECT COUNT(*) FROM GUM_SMS_TARGET WHERE CHK_YN = 'Y' AND GMTR_SEND_STS = '%s'",szBuf,0,0);
			g_Sql_RetStr(szSql, 10, m_szSel_Cnt_S);
			lChkCnt = Str_AtoI(m_szSel_Cnt_S);
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA4), m_szSel_Cnt_S );
			
			if( lChkCnt == 0 )
			{
				m_lTotChkFlag = 0;
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_TOTCHK), CHKOFF);
				ButCtrl_SetForeColorEx(Get_hDlgCtrlByID(BID_TOTCHK), BLACK);
			}
			else
			{
				Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
				SPRINT(szSql, "SELECT COUNT(*) FROM GUM_SMS_TARGET WHERE GMTR_SEND_STS = '%s' ",szBuf,0,0);
				g_Sql_RetInt( szSql, &lTotCnt );
				if( lTotCnt == lChkCnt )
				{
					m_lTotChkFlag = 1;
					ButCtrl_SetText(Get_hDlgCtrlByID(BID_TOTCHK), CHKON);
					ButCtrl_SetForeColorEx(Get_hDlgCtrlByID(BID_TOTCHK), RED);
				}
				else if( lTotCnt > lChkCnt )
				{
					m_lTotChkFlag = 0;
					ButCtrl_SetText(Get_hDlgCtrlByID(BID_TOTCHK), CHKOFF);
					ButCtrl_SetForeColorEx(Get_hDlgCtrlByID(BID_TOTCHK), BLACK);
				}
			}
		}
		else
		{
			Mem_Set( (byte*) szSql, 0x00, sizeof( szSql) );
			Mem_Set( (byte*) m_szSel_Cnt_S, 0x00, sizeof( m_szSel_Cnt_S) );
			SPRINT( szSql, "SELECT COUNT(*) FROM GUM_SMS_TARGET WHERE CHK_YN = 'Y' ", 0, 0, 0 );
			g_Sql_RetStr(szSql, 10, m_szSel_Cnt_S);
			lChkCnt = Str_AtoI(m_szSel_Cnt_S);
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA4), m_szSel_Cnt_S );

			if( lChkCnt == 0 )
			{
				m_lTotChkFlag = 0;
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_TOTCHK), CHKOFF);
				ButCtrl_SetForeColorEx(Get_hDlgCtrlByID(BID_TOTCHK), BLACK);
			}
			else
			{
				g_Sql_RetInt( "SELECT COUNT(*) FROM GUM_SMS_TARGET", &lTotCnt );
				if( lTotCnt == lChkCnt )
				{
					m_lTotChkFlag = 1;
					ButCtrl_SetText(Get_hDlgCtrlByID(BID_TOTCHK), CHKON);
					ButCtrl_SetForeColorEx(Get_hDlgCtrlByID(BID_TOTCHK), RED);
				}
				else if( lTotCnt > lChkCnt )
				{
					m_lTotChkFlag = 0;
					ButCtrl_SetText(Get_hDlgCtrlByID(BID_TOTCHK), CHKOFF);
					ButCtrl_SetForeColorEx(Get_hDlgCtrlByID(BID_TOTCHK), BLACK);
				}
			}
		}

		ON_DRAW();
		return;
	}

	
	//------------------------------------------------------------------------------------------
	long Rcv_Info(void)
	{
		char sztmp[256];
		char szUrl[256];
		char szReqym[10];
		char szDeadlineFlag[10];
		char* sndbuf;
		long ret;
		
		g_Sql_DirectExecute("DELETE FROM GUM_SMS_TARGET");
		
		Mem_Set( (byte*) sztmp, 0x00, sizeof( sztmp) );
		Mem_Set( (byte*) szReqym, 0x00, sizeof( szReqym) );
		SPRINT( sztmp, "SELECT PARAM1 FROM RCV_LOG WHERE GUBUN = '1' ", 0, 0, 0 );
		g_Sql_RetStr(sztmp, 10, szReqym);
		
		Mem_Set( (byte*) sztmp, 0x00, sizeof( sztmp) );
		Mem_Set((byte*)szDeadlineFlag, 0x00, sizeof(szDeadlineFlag));	
		SPRINT( sztmp, "SELECT PARAM2 FROM RCV_LOG WHERE GUBUN = '1' ", 0, 0, 0 );
		g_Sql_RetStr(sztmp, 10, szDeadlineFlag);

		if( g_pjcomm != NULL)
		{
			JSON_Finalize( g_pjcomm );
			g_pjcomm = NULL;
		}		
		g_pjcomm = g_CreateJsonHead(g_pjcomm, szUrl, 25007, FALSE);
		
		JSON_SetValue( g_pjcomm, 'C', "req_ym",              szReqym               );
		JSON_SetValue( g_pjcomm, 'C', "deadline_flag",       szDeadlineFlag        );
		
		sndbuf = JSON_toString(g_pjcomm);
		
		//g_Save_JsonFile(sndbuf);
		
		Mem_Set((byte*)sztmp, 0x00, sizeof(sztmp));	
		GET_FILENM(sztmp, SQLITE_DB);
		
		callBackfunc = TR25007; //통신완료 후에 호출 함수
		ret = HTTP_DownloadData(szUrl, "FR25007_IN",  "FR25007" , sndbuf, sztmp );
		return 0 ;
	}
	
	
	//------------------------------------------------------------------------------------------
	long TR25007(void)	
	{
		if( g_Chk_Json(25007) >= 0)
		{
			//m_lSndSmsMsgFlag  = 0 메세지출력 X, = 1 즉시발송&예약발송 , = 2 예약취소 , = 3 삭제
			if( m_lSndSmsMsgFlag == 1 )
			{
				m_lSndSmsMsgFlag = 0;
				MessageBoxEx (CONFIRM_OK, "문자를 발송하였습니다.");
			}
			else if( m_lSndSmsMsgFlag == 2 )
			{
				m_lSndSmsMsgFlag = 0;
				MessageBoxEx (CONFIRM_OK, "예약이 취소되었습니다.");
			}
			else if( m_lSndSmsMsgFlag == 3 )
			{
				m_lSndSmsMsgFlag = 0;
				m_lpage_S = 0;
				m_nActIndex_S = 0;
				MessageBoxEx (CONFIRM_OK, "대상이 삭제되었습니다.");
			}
			
			ReDraw();
			ON_DRAW();
			return 1;	
		}
		else
		{
			g_Sock_Close();
			ON_DRAW();
			return -1;
		}
	}

	//------------------------------------------------------------------------------------------
	void Set_SmsInfo(void)
	{
		long i;
		long lindex = 0;
		char szSql[200];
		char szindex[10];
		handle hdb = NULL;
		handle hstmt = NULL;
		SQLITE sql = NewSqLite();

		Mem_Set((byte*)&m_stUserinfo, 0x00, sizeof(m_stUserinfo));

		hdb = sql->Open(sql);
		if( hdb == NULL )
		{
			goto Finally;
		}

		hstmt = sql->CreateStatement(sql,
"SELECT RECEIVER_TEL_DDD, RECEIVER_TEL_EXN, RECEIVER_TEL_NUM, CUST_NM, CUST_NUM, NONPAY_MANAGE_SEC, USE_CONT_NUM, SMS_NUM \
FROM GUM_SMS_TARGET WHERE CHK_YN = 'Y' LIMIT 0,1"
		);
		
		if( hstmt == NULL )
		{
			PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}

		if(sql->Execute(sql) == FALSE)
		{
			PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}

		if(sql->Next(sql) == TRUE )
		{	
			i = 0;
			sql->GetValue( sql, i++, 'U', (long*) m_stUserinfo.szCp_ddd            , 6 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) m_stUserinfo.szCp_exn            , 6 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) m_stUserinfo.szCp_num            , 6 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) m_stUserinfo.szCust_nm           , 50, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) m_stUserinfo.szCust_num          , 20, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) m_stUserinfo.szNonpay_manage_sec , 20, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) m_stUserinfo.szUse_cont_num      , 20, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) m_stUserinfo.szSms_num           , 20, DECRYPT );
		}
		else
		{
			PRINT("::sql->Next fail [%s]",sql->GetLastError(sql),0,0);
			goto Finally;
		}

Finally:
//		sql->Commit(sql);
		DelSqLite(sql);
		return;
	}

	//------------------------------------------------------------------------------------------
	void Set_SmsDesc(long nservicenum)
	{
	char szJsonpath[500];
	char szMsg[500];
	char szCol[128];
	char szTmp[100];
	long *nCol;
	long nCnt = 0;
	long fd, i;
	long chkmsg = 0;
	long chkcode = 0;
	long fsize = 0;
	char *pStr;
	char *szcode;
	char *szmessage;
	char *szitem;
	char *szCpddd;
	char *szCpexn;
	char *szCpnum;
	char *szCustnm;
	char *szSmsdesc;
	char szType[2] = {0,0};
	long ret = 11;
	handle hitem = NULL;
	handle hcnt = NULL;
		
		//MessageBox(MESSAGE, "자료 확인중 입니다.", 0, 0, 0, 0);
		
		Mem_Set((byte*) szJsonpath, 0x00, sizeof( szJsonpath) );
		SPRINT(szJsonpath, "%sFR%d_Res.JSON",  SYSTEM_COMM, nservicenum, 0 );
		
		if(FFS_Exist(szJsonpath) != TRUE )
		{
			Mem_Set((byte*) szJsonpath, 0x00, sizeof( szJsonpath) );
			SPRINT(szJsonpath, "%sFR%d.JSON",  SYSTEM_COMM, nservicenum, 0 );
		}
		
		fsize = FFS_GetSize(szJsonpath);
		if(fsize <= 15)
		{
			ret = -1;
			goto Finally;
		}
		pStr = Mem_Alloc(fsize);
		fd = FFS_Open(szJsonpath, FS_READ_MODE, FS_NORMAL_FLAG);
		if(fd == -1)
		{
			ret = -1;
			goto Finally;
		}

		FFS_Read(fd, (byte*)pStr, fsize);
		for(i = 0 ; i < fsize-9 ; i++ )
		{
			if( Mem_Cmp((byte*)pStr+i,(byte*) "\"code\"", 6) == 0  )
			{
				chkcode++;
			}
			if( Mem_Cmp((byte*)pStr+i,(byte*) "\"message\"", 9) == 0  )
			{
				chkmsg++;
			}
			if(chkmsg > 0 &&  chkcode > 0)
				break;
		}

		FFS_Close(fd);
		
		Mem_Free((byte*)pStr);
		if(chkmsg == 0 || chkcode == 0)
		{
			ret = -1;
			goto Finally;
		}
		
		if(g_pjcomm != NULL)
		{
			JSON_Finalize(g_pjcomm);
			g_pjcomm = NULL;
		}
		
		g_pjcomm = JSON_Create( JSON_Object );
		if(g_pjcomm == NULL)
		{
			ret = -1;
			goto Finally;
		}

		if( JSON_LoadFile(g_pjcomm, szJsonpath) > 0)
		{
			szcode    = JSON_GetValue (g_pjcomm, "code",    szType);
			szmessage = JSON_GetValue (g_pjcomm, "message", szType);

			if( Str_Cmp(szcode, "0000") != 0)
			{
			  char* pMsg = NULL;
			  
				Mem_Set((byte*) szJsonpath, 0x00, sizeof( szJsonpath) );
				if(Str_Len(szmessage) < 500 )
					SQL_ConvMbStr( szMsg, szmessage);
				
				//SPRINT(szJsonpath, "[%s] %s", szcode, szMsg, 0 );
				pMsg = g_Chk_Code(szJsonpath, szcode, szMsg);
			
				MessageBoxEx (WARNING_OK, pMsg);
				ON_DRAW();
				ret = -1;
			}
			else
			{
				ret = 0;
				szitem =JSON_GetValue(g_pjcomm, "item", szType);
				if(szitem != NULL)
				{
					if( Str_Len(szitem) > 0 )
					{
						hitem = JSON_Create( JSON_Array );
						if( hitem != NULL)
						{
							JSON_toJson(hitem, szitem ) ;
							ret = JSON_GetArrayCount( hitem );
							
							if( ret > 0 )
							{
								//문자내용
								Mem_Set((byte*) szCol, 0x00, sizeof( szCol) );
								szSmsdesc = (char*)JSON_GetArrayItem ( hitem, 0, "sms_template_desc", szType);
								SQL_ConvMbStr(m_stUserinfo.szSmsdesc, szSmsdesc);
							}
							
							JSON_Finalize(hitem);
							hitem = NULL;
						}
					}
				}
			}
		}
		else
		{
			ret = 0;
		}
		
Finally:		
		
		if(g_pjcomm != NULL)
		{
			JSON_Finalize(g_pjcomm);
			g_pjcomm = NULL;
		}
		
		g_Close_SubDlg();
		EvtDraw();
		
		return;
	}

	//------------------------------------------------------------------------------------------
	long Rcv_SmsDesc(void)
	{
		char sztmp[256];
		char szUrl[256];
		//char szDate[30];
		char* sndbuf;
		char szReqym[10];
		char szDeadlineFlag[10];
		long ntotcnt = 0;
		long ret;
		
		//문자대상 기본정보 셋팅
		//Set_SmsInfo();
		
		/* 20170920 요금팀 황영자 과장님 요청, 신기호 개발, 1차조정 마감일 날짜 새팅
		Mem_Set( (byte*) szDate, 0x00, sizeof( szDate) );
		if( Str_Cmp(EditCtrl_GetStr( Get_hDlgCtrlByID(CMB_DATA2)), "예약발송") == 0 )
		{
			Mem_Cpy( (byte*)szDate, (byte*)m_szReserve_Dtm,  8);
		}
		else
		{
			Str_ItoA(Time_GetDate(), szDate, 10);
		}
		//PRINT("szDate : %s",szDate,0,0);
		*/
		
		//20170920 요금팀 황영자 과장님 요청, 신기호 개발
		Mem_Set( (byte*) sztmp, 0x00, sizeof( sztmp) );
		Mem_Set( (byte*) szReqym, 0x00, sizeof( szReqym) );
		SPRINT( sztmp, "SELECT PARAM1 FROM RCV_LOG WHERE GUBUN = '1' ", 0, 0, 0 );
		g_Sql_RetStr(sztmp, 10, szReqym);
		
		Mem_Set( (byte*) sztmp, 0x00, sizeof( sztmp) );
		Mem_Set((byte*)szDeadlineFlag, 0x00, sizeof(szDeadlineFlag));	
		SPRINT( sztmp, "SELECT PARAM2 FROM RCV_LOG WHERE GUBUN = '1' ", 0, 0, 0 );
		g_Sql_RetStr(sztmp, 10, szDeadlineFlag);
		
		if( g_pjcomm != NULL)
		{
			JSON_Finalize( g_pjcomm );
			g_pjcomm = NULL;
		}		
		g_pjcomm = g_CreateJsonHead(g_pjcomm, szUrl, 25009, FALSE);
		
		JSON_SetValue( g_pjcomm, 'C', "use_cont_num",    m_stUserinfo.szUse_cont_num   );
		//JSON_SetValue( g_pjcomm, 'C', "desc_time",       szDate             );
		JSON_SetValue( g_pjcomm, 'C', "req_ym", szReqym   );
		JSON_SetValue( g_pjcomm, 'C', "deadline_flag", szDeadlineFlag  );
		
		sndbuf = JSON_toString(g_pjcomm);
		
		//g_Save_JsonFile(sndbuf);
		
		Mem_Set((byte*)sztmp, 0x00, sizeof(sztmp));	
		GET_FILENM(sztmp, SQLITE_DB);
		
		callBackfunc = TR25009; //통신완료 후에 호출 함수
		ret = HTTP_DownloadData(szUrl, "FR25009_IN",  "FR25009" , sndbuf, sztmp );
		return 0 ;
	}
	
	//------------------------------------------------------------------------------------------
	long TR25009(void)
	{
		if( g_Chk_Json(25009) >= 0)
		{
			Set_SmsDesc(25009);
			Snd_GrpSms();
			ON_DRAW();
			return 1;	
		}
		else
		{
			g_Sock_Close();
			ON_DRAW();
			return -1;
		}
	}

	//------------------------------------------------------------------------------------------
	long Snd_GrpSms(void)
	{
		char szSql[256];
		char sztmp[32];
		char szUrl[256];
		char szReqym[10];
		char szDeadlineFlag[10];
		char szCustnm[50];
		char szReserveDtm[50];
		char szSmsdesc[500];
		char* sndbuf;
		long ret;
		
		if( g_pjcomm != NULL)
		{
			JSON_Finalize( g_pjcomm );
			g_pjcomm = NULL;
		}		
		
		g_pjcomm = g_CreateJsonHead(g_pjcomm, szUrl, 25003, FALSE);

		Mem_Set( (byte*) szSql, 0x00, sizeof( szSql) );
		Mem_Set( (byte*) szReqym, 0x00, sizeof( szReqym) );
		SPRINT( szSql, "SELECT PARAM1 FROM RCV_LOG WHERE GUBUN = '1' ", 0, 0, 0 );
		g_Sql_RetStr(szSql, 10, szReqym);
		
		Mem_Set( (byte*) szSql, 0x00, sizeof( szSql) );
		Mem_Set((byte*)szDeadlineFlag, 0x00, sizeof(szDeadlineFlag));	
		SPRINT( szSql, "SELECT PARAM2 FROM RCV_LOG WHERE GUBUN = '1' ", 0, 0, 0 );
		g_Sql_RetStr(szSql, 10, szDeadlineFlag);

		JSON_SetValue( g_pjcomm, 'C', "req_ym",        		szReqym );
		JSON_SetValue( g_pjcomm, 'C', "deadline_flag",      szDeadlineFlag );
		JSON_SetValue( g_pjcomm, 'C', "use_cont_num",       m_stUserinfo.szUse_cont_num );
		JSON_SetValue( g_pjcomm, 'C', "cp_ddd",        		m_stUserinfo.szCp_ddd );
		JSON_SetValue( g_pjcomm, 'C', "cp_exn",        		m_stUserinfo.szCp_exn );
		JSON_SetValue( g_pjcomm, 'C', "cp_num",        	    m_stUserinfo.szCp_num );

		Mem_Set( (byte*) szCustnm, 0x00, sizeof( szCustnm) );
		SQL_ConvUcStr( szCustnm, m_stUserinfo.szCust_nm );
		JSON_SetValue( g_pjcomm, 'C', "receiver_nm",        szCustnm );

		if( Str_Cmp(EditCtrl_GetStr( Get_hDlgCtrlByID(CMB_DATA2)), "즉시발송") == 0 )
		{
			JSON_SetValue( g_pjcomm, 'C', "send_flag",        	"1" );	//( 1 :  즉시발송 , 2: 예약발송 )
			JSON_SetValue( g_pjcomm, 'C', "reserve_dtm",        "" );	//예약인 경우에만 입력
			JSON_SetValue( g_pjcomm, 'C', "gmtr_send_sts",      "40" );	//(  20 : 발송중, 30 : 예약,  90 : 취소, 40 : 발송완료 )
		}
		else
		{
			JSON_SetValue( g_pjcomm, 'C', "send_flag",        	"2" );	//( 1 :  즉시발송 , 2: 예약발송 )
			JSON_SetValue( g_pjcomm, 'C', "gmtr_send_sts",      "30" );	//(  20 : 발송중, 30 : 예약,  90 : 취소, 40 : 발송완료 )
			JSON_SetValue( g_pjcomm, 'C', "reserve_dtm",        m_szReserve_Dtm );	//예약인 경우에만 입력
		}
		
		Mem_Set( (byte*) szSmsdesc, 0x00, sizeof( szSmsdesc) );
		SQL_ConvUcStr( szSmsdesc, m_stUserinfo.szSmsdesc );
		JSON_SetValue( g_pjcomm, 'C', "sms_desc",        	szSmsdesc );

		JSON_SetValue( g_pjcomm, 'C', "cust_num",        	m_stUserinfo.szCust_num );
		JSON_SetValue( g_pjcomm, 'C', "center_cd",        	stUserinfo.szcenter_cd );
		JSON_SetValue( g_pjcomm, 'C', "nonpay_manage_sec",  m_stUserinfo.szNonpay_manage_sec );
		JSON_SetValue( g_pjcomm, 'C', "send_type",        	"20" );  //10 : 개인 , 20 : 그룹
		JSON_SetValue( g_pjcomm, 'C', "sms_num",        	"" );
		
		sndbuf = JSON_toString(g_pjcomm);
		
		g_Save_JsonFile(sndbuf);
		
		Mem_Set((byte*)sztmp, 0x00, sizeof(sztmp));	
		GET_FILENM(sztmp, SQLITE_DB);
		
		callBackfunc = TR25003; //통신완료 후에 호출 함수
		ret = HTTP_DownloadData(szUrl, "FR25003_IN",  "FR25003" , sndbuf, sztmp );
		return 0 ;
	}

	//-----------------------------------------------------------------------
	long TR25003(void)
	{
		long ntotcnt = 0;
		long i = 0;
		char szSql[300];
	
		if( g_Chk_Json(25003) >= 0)
		{
			Mem_Set((byte*)szSql, 0x00, sizeof(szSql));	
			SPRINT(szSql, "UPDATE GUM_SMS_TARGET SET CHK_YN = 'N' WHERE USE_CONT_NUM = '%s'",m_stUserinfo.szUse_cont_num,0,0);
			g_Sql_DirectExecute(szSql);
		
			g_Sql_RetInt( "SELECT COUNT(*) FROM GUM_SMS_TARGET WHERE CHK_YN = 'Y'", &ntotcnt );
			if( ntotcnt > 0 )
			{
				m_lSmsAgreeFlag = 0;
				
				//Rcv_SmsDesc();
				//문자대상 기본정보 셋팅
				Set_SmsInfo();
				Rcv_Many();
				//Rcv_SmsSts();
			}
			else
			{
				m_lTotChkFlag = 0;
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_TOTCHK), CHKOFF);
				ButCtrl_SetForeColorEx(Get_hDlgCtrlByID(BID_TOTCHK), BLACK);

				for(i = 0 ; i < ROW_S ; i++)
				{
					EditCtrl_SetForeColorEx( DlgTbl_GetHandle 	( ID_SMSLIST, i, 0 ), BLACK);
				}
				
				Rcv_Info();
			}
			ON_DRAW();
			return 1;	
		}
		else
		{
			g_Sock_Close();
			ON_DRAW();
			return -1;
		}
	}


	//------------------------------------------------------------------------------------------
	long Snd_Delete(void)
	{
		char szTmp[500];
		char szUrl[200];
		char szbuf[128];
		char szReqym[10];
		char szDeadlineFlag[10];
		char szSmsChgWhy[10];
		char* sndbuf;
		long i = 0;
		long ret = 0;
		long nLen = 0;
	
		//문자대상 기본정보 셋팅
		//Set_SmsInfo();
		//문자대상 상태 확인
		//ret = Rcv_SmsSts();
		//if( ret < 0 )
		//{
		//	return 0;
		//}

		Mem_Set( (byte*) szTmp, 0x00, sizeof( szTmp) );
		Mem_Set( (byte*) szReqym, 0x00, sizeof( szReqym) );
		SPRINT( szTmp, "SELECT PARAM1 FROM RCV_LOG WHERE GUBUN = '1' ", 0, 0, 0 );
		g_Sql_RetStr(szTmp, 10, szReqym);
		
		Mem_Set( (byte*) szTmp, 0x00, sizeof( szTmp) );
		Mem_Set((byte*)szDeadlineFlag, 0x00, sizeof(szDeadlineFlag));	
		SPRINT( szTmp, "SELECT PARAM2 FROM RCV_LOG WHERE GUBUN = '1' ", 0, 0, 0 );
		g_Sql_RetStr(szTmp, 10, szDeadlineFlag);
		
		if( g_pjcomm != NULL)
		{
			JSON_Finalize( g_pjcomm );
			g_pjcomm = NULL;
		}		
		g_pjcomm = g_CreateJsonHead(g_pjcomm, szUrl, 25005, FALSE);

		JSON_SetValue( g_pjcomm, 'C', "req_ym",              szReqym               );
		JSON_SetValue( g_pjcomm, 'C', "deadline_flag",       szDeadlineFlag        );
		JSON_SetValue( g_pjcomm, 'C', "use_cont_num",        m_stUserinfo.szUse_cont_num );
				
		sndbuf = JSON_toString(g_pjcomm);
		
		//전송데이터 확인
		g_Save_JsonFile(sndbuf);

		Mem_Set((byte*)szbuf, 0x00, sizeof(szbuf));	
		GET_FILENM(szbuf, SQLITE_DB);

		callBackfunc = TR25005; //통신완료 후에 호출 함수
		HTTP_DownloadData( szUrl, "FR25005_IN",  "FR25005" , sndbuf, szbuf );

		return 1;
	}
	
	//------------------------------------------------------------------
	long TR25005(void)
	{
		char szSql[350];
		char szTmp[100];
		long ntotcnt = 0, i = 0;

		if(g_Chk_Json(25005) >= 0)
		{
			Mem_Set((byte*)szSql, 0x00, sizeof(szSql));	
			//SPRINT(szSql, "UPDATE GUM_SMS_TARGET SET CHK_YN = 'N' WHERE USE_CONT_NUM = '%s'",m_stUserinfo.szUse_cont_num,0,0);
			SPRINT(szSql, "DELETE FROM GUM_SMS_TARGET WHERE USE_CONT_NUM = '%s'",m_stUserinfo.szUse_cont_num,0,0);
			g_Sql_DirectExecute(szSql);

			//저장된 검침대상 정보 삭제.(검침취소 로직)
			Mem_Set((byte*)szSql, 0x00, sizeof(szSql));	
			SPRINT(szSql, "UPDATE GUMDATA SET SMS_GMTR_MAN_YN = 'N', MTR_WORK_CODE = '', INDI_SET_VM = '', INDI_SET_VA = '' \
, INDI_SET_VC = '', INDI_QTY = '', INDI_DATE = '', SEND_YN = 'N', INDI_DATE = '', CURR_TEMPER = '', CURR_PRES = '', CURR_REVIS_PARA = '' \
WHERE USE_CONT_NUM = '%s'",m_stUserinfo.szUse_cont_num,0,0);
			g_Sql_DirectExecute(szSql);
		
			g_Sql_RetInt( "SELECT COUNT(*) FROM GUM_SMS_TARGET WHERE CHK_YN = 'Y'", &ntotcnt );
			if( ntotcnt > 0 )
			{
				//Snd_Delete();
				//문자대상 기본정보 셋팅
				Set_SmsInfo();
				Rcv_SmsSts();
			}
			else
			{
				m_lTotChkFlag = 0;
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_TOTCHK), CHKOFF);
				ButCtrl_SetForeColorEx(Get_hDlgCtrlByID(BID_TOTCHK), BLACK);

				for(i = 0 ; i < ROW_S ; i++)
				{
					EditCtrl_SetForeColorEx( DlgTbl_GetHandle 	( ID_SMSLIST, i, 0 ), BLACK);
				}
				
				Rcv_Info();
			}
			ON_DRAW();
			return 1;
		}
		else
		{
			g_Sock_Close();
			CloseMessageBox();
			ON_DRAW();
			return -1;
		}
	}


	//------------------------------------------------------------------------------------------
	long Snd_Reserve_Cancel(void)
	{
		char szTmp[500];
		char szUrl[200];
		char szbuf[128];
		char szReqym[10];
		char szDeadlineFlag[10];
		char szSmsChgWhy[10];
		char* sndbuf;
		long i = 0;
		long ntotcnt = 0;
		long nLen = 0;
		long ret = 0;
	
		//문자대상 기본정보 셋팅
		//Set_SmsInfo();
		//문자대상 상태 확인
		//ret = Rcv_SmsSts();
		//if( ret < 0 )
		//{
		//	return 0;
		//}

		Mem_Set( (byte*) szTmp, 0x00, sizeof( szTmp) );
		Mem_Set( (byte*) szReqym, 0x00, sizeof( szReqym) );
		SPRINT( szTmp, "SELECT PARAM1 FROM RCV_LOG WHERE GUBUN = '1' ", 0, 0, 0 );
		g_Sql_RetStr(szTmp, 10, szReqym);
		
		Mem_Set( (byte*) szTmp, 0x00, sizeof( szTmp) );
		Mem_Set((byte*)szDeadlineFlag, 0x00, sizeof(szDeadlineFlag));	
		SPRINT( szTmp, "SELECT PARAM2 FROM RCV_LOG WHERE GUBUN = '1' ", 0, 0, 0 );
		g_Sql_RetStr(szTmp, 10, szDeadlineFlag);
		
		if( g_pjcomm != NULL)
		{
			JSON_Finalize( g_pjcomm );
			g_pjcomm = NULL;
		}		
		g_pjcomm = g_CreateJsonHead(g_pjcomm, szUrl, 25006, FALSE);

		JSON_SetValue( g_pjcomm, 'C', "req_ym",              szReqym                );
		JSON_SetValue( g_pjcomm, 'C', "deadline_flag",       szDeadlineFlag         );
		JSON_SetValue( g_pjcomm, 'C', "use_cont_num",        m_stUserinfo.szUse_cont_num  );
//		JSON_SetValue( g_pjcomm, 'C', "cp_ddd",              m_stUserinfo.szCp_ddd  );
//		JSON_SetValue( g_pjcomm, 'C', "cp_exn",              m_stUserinfo.szCp_exn  );
//		JSON_SetValue( g_pjcomm, 'C', "cp_num",              m_stUserinfo.szCp_num  );
		JSON_SetValue( g_pjcomm, 'C', "sms_num",             m_stUserinfo.szSms_num );
		JSON_SetValue( g_pjcomm, 'C', "send_seq",            stGm.SEND_SEQ );

		sndbuf = JSON_toString(g_pjcomm);
		
		//전송데이터 확인
		g_Save_JsonFile(sndbuf);

		Mem_Set((byte*)szbuf, 0x00, sizeof(szbuf));	
		GET_FILENM(szbuf, SQLITE_DB);

		callBackfunc = TR25006; //통신완료 후에 호출 함수
		HTTP_DownloadData( szUrl, "FR25006_IN",  "FR25006" , sndbuf, szbuf );

		return 1;
	}
	
	//------------------------------------------------------------------
	long TR25006(void)
	{
		char szSql[250];
		char szTmp[100];
		long ntotcnt = 0, i = 0;

		if(g_Chk_Json(25006) >= 0)
		{
			Mem_Set((byte*)szSql, 0x00, sizeof(szSql));	
			SPRINT(szSql, "UPDATE GUM_SMS_TARGET SET CHK_YN = 'N' WHERE USE_CONT_NUM = '%s'",m_stUserinfo.szUse_cont_num,0,0);
			g_Sql_DirectExecute(szSql);

			g_Sql_RetInt( "SELECT COUNT(*) FROM GUM_SMS_TARGET WHERE CHK_YN = 'Y'", &ntotcnt );
			if( ntotcnt > 0 )
			{
				//Snd_Reserve_Cancel();
				//문자대상 기본정보 셋팅
				Set_SmsInfo();
				Rcv_SmsSts();
			}
			else
			{
				m_lTotChkFlag = 0;
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_TOTCHK), CHKOFF);
				ButCtrl_SetForeColorEx(Get_hDlgCtrlByID(BID_TOTCHK), BLACK);

				for(i = 0 ; i < ROW_S ; i++)
				{
					EditCtrl_SetForeColorEx( DlgTbl_GetHandle 	( ID_SMSLIST, i, 0 ), BLACK);
				}
				
				Rcv_Info();
			}

			ON_DRAW();
			return 1;
		}
		else
		{
			g_Sock_Close();
			CloseMessageBox();
			ON_DRAW();
			return -1;
		}
	}

	//------------------------------------------------------------------
	void ChgDraw(void)
	{
	long i, idx;
	long lSndStsCd = 0;
	long k = ROW_C + 1;
	char sztmp[400];
	char szDate[50];
	long ret = -1;	
	long lstartidx;
	handle hdb = NULL;
	handle hstmt = NULL;
	SQLITE sql = NewSqLite();

		g_Sql_RetInt( "SELECT COUNT(*) FROM GUMDATA", &m_lTotpage_C );
		
		if( m_lTotpage_C % ROW_C > 0 )
		{
			m_lTotpage_C = (m_lTotpage_C / ROW_C) + 1;
		}
		else
		{
			m_lTotpage_C = m_lTotpage_C / ROW_C;
		}
		//페이지
		SPRINT(m_szCnt_page_C, "%d/%d", m_lpage_C+1, m_lTotpage_C, 0);

		hdb = sql->Open(sql);
		if( hdb == NULL )
		{
			goto Finally;
		}
		
		hstmt = sql->CreateStatement(sql, "SELECT TOWN, CASE WHEN Length(Trim(CO_LIVE_NM))+Length(Trim(BLD_NM)) > 0 THEN \
 ifnull(CO_LIVE_NM,'') ||' '|| ifnull(BLD_NM,'') ||'-'|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') ELSE  \
 ifnull(ADDR1_M,'') ||'-'|| ifnull(ADDR1_S,'') ||' '|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') END \
, CASE WHEN Length(Trim(CO_LIVE_NM))+Length(Trim(BLD_NM)) > 0 THEN \
 ifnull(CO_LIVE_NM,'') ||' '|| ifnull(BLD_NM,'') ||'-'|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') ELSE  \
ifnull(NEW_ADDR_M,'') ||'-'|| ifnull(NEW_ADDR_S,'') ||' '|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') END \
, CASE WHEN (LENGTH(ifnull(TRIM(SMS_CP_DDD),'')) + LENGTH(ifnull(TRIM(SMS_CP_EXN),'')) + LENGTH(ifnull(TRIM(SMS_CP_NUM),''))) > 3 \
THEN ifnull(SMS_CP_DDD, '') ||'-'|| ifnull(SMS_CP_EXN, '') ||'-'|| ifnull(SMS_CP_NUM, '') \
ELSE ifnull(CP_DDD, '') ||'-'|| ifnull(CP_EXN, '') ||'-'|| ifnull(CP_NUM, '') END, USE_CONT_NUM, CUST_NM \
FROM GUMDATA ORDER BY DONG_ORD, HOUSE_NUM_ORD, MTR_COURSE LIMIT ?, ? " );
				
		if( hstmt == NULL )
		{
			PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}
		
		idx = 0;
		lstartidx = m_lpage_C*ROW_C;
		sql->Bind(sql, idx++, 'X', &lstartidx, 4, DECRYPT);
		i = m_lpage_C*ROW_C+ROW_C;
		sql->Bind(sql, idx++, 'X', &i, 4, DECRYPT);
		
		if(sql->Execute(sql) == FALSE)
		{
			PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}

		// 등록된 코드 리스트를 페이지에 맞게 보여준다.
		for (i=0 ; i<ROW_C ; i++)
		{
			//자료가 없을때 화면을 클리어 시킨다.
			if( k == i )
			{
				k++;
				DlgTbl_SetStr ( ID_CHGLIST, i, 0, "" );
				DlgTbl_SetStr ( ID_CHGLIST, i, 1, "" );
				DlgTbl_SetStr ( ID_CHGLIST, i, 2, "" );
				DlgTbl_SetStr ( ID_CHGLIST, i, 3, "" );
				DlgTbl_SetStr ( ID_CHGLIST, i, 4, "" );
			}
			else
			{
				if(sql->Next(sql) == FALSE)
				{
					k = i + 1;
					DlgTbl_SetStr ( ID_CHGLIST, i, 0, "" );
					DlgTbl_SetStr ( ID_CHGLIST, i, 1, "" );
					DlgTbl_SetStr ( ID_CHGLIST, i, 2, "" );
					DlgTbl_SetStr ( ID_CHGLIST, i, 3, "" );
					DlgTbl_SetStr ( ID_CHGLIST, i, 4, "" );
					continue;
				}

				idx = 0;
				//동명
				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				sql->GetValue(sql, 0, 'U', (long*)sztmp, 50, DECRYPT);
				DlgTbl_SetStr ( ID_CHGLIST, i, 0, sztmp );
				//주소
				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				if( g_nAddrFlag == 0 )
				{
					ButCtrl_SetText(Get_hDlgCtrlByID(BID_CHGADDR), "지번");

					sql->GetValue(sql, 1, 'U', (long*)sztmp, 300, DECRYPT);
				}
				else
				{
					ButCtrl_SetText(Get_hDlgCtrlByID(BID_CHGADDR), "도로명");

					sql->GetValue(sql, 2, 'U', (long*)sztmp, 300, DECRYPT);
				}
				DlgTbl_SetStr ( ID_CHGLIST, i, 1, sztmp );
				//전화번호
				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				sql->GetValue(sql, 3, 'U', (long*)sztmp, 50, DECRYPT);
				DlgTbl_SetStr ( ID_CHGLIST, i, 2, sztmp );
				//use_cont_num
				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				sql->GetValue(sql, 4, 'U', (long*)sztmp, 50, DECRYPT);
				DlgTbl_SetStr ( ID_CHGLIST, i, 3, sztmp );
				//cust_nm
				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				sql->GetValue(sql, 5, 'U', (long*)sztmp, 50, DECRYPT);
				DlgTbl_SetStr ( ID_CHGLIST, i, 4, sztmp );
			}
		}		
Finally:
		//sql->Commit(sql);
		DelSqLite(sql);

		if( m_lTotpage_C > 0 )
		{
			if( m_nActIndex_C < 0 )
			{
				m_nActIndex_C = 0;
			}

			DlgTbl_SetActive(ID_CHGLIST , m_nActIndex_C+1 );
			DlgTbl_SetRowColor(ID_CHGLIST, m_nActIndex_C+1, TABLEACTIVE_COLOR);

			Mem_Set( (byte*)g_szCntSql, 0x00, sizeof(g_szCntSql) );
			Str_Cpy(g_szCntSql, DlgTbl_GetStr( ID_CHGLIST, m_nActIndex_C, 1));		//주소
			Mem_Set( (byte*)g_szTown, 0x00, sizeof(g_szTown) );
			Str_Cpy(g_szTown, DlgTbl_GetStr( ID_CHGLIST, m_nActIndex_C, 4));	//고객명
	
			Mem_Set( (byte*)g_szCpNum, 0x00, sizeof(g_szCpNum) );
			Str_Cpy(g_szCpNum, DlgTbl_GetStr( ID_CHGLIST, m_nActIndex_C, 2));
			Str_Chg(g_szCpNum, STRCHG_DEL_NONDIGIT);
		
			Mem_Set( (byte*)g_szUSE_CONT_NUM, 0x00, sizeof(g_szUSE_CONT_NUM) );
			Str_Cpy(g_szUSE_CONT_NUM, DlgTbl_GetStr( ID_CHGLIST, m_nActIndex_C, 3));
		}

		ON_DRAW();
		return;
	}

//------------------------------------------------------------------
	long Snd_Change(void)
	{
		char szTmp[500];
		char szUrl[200];
		char szbuf[128];
		char szReqym[10];
		char szDeadlineFlag[10];
		char szSmsChgWhy[10];
		char* sndbuf;
		long i = 0;
		long ret = 0;
		long nLen = 0;
	

		Mem_Set( (byte*) szTmp, 0x00, sizeof( szTmp) );
		Mem_Set( (byte*) szReqym, 0x00, sizeof( szReqym) );
		SPRINT( szTmp, "SELECT PARAM1 FROM RCV_LOG WHERE GUBUN = '1' ", 0, 0, 0 );
		g_Sql_RetStr(szTmp, 10, szReqym);
		
		Mem_Set( (byte*) szTmp, 0x00, sizeof( szTmp) );
		Mem_Set((byte*)szDeadlineFlag, 0x00, sizeof(szDeadlineFlag));	
		SPRINT( szTmp, "SELECT PARAM2 FROM RCV_LOG WHERE GUBUN = '1' ", 0, 0, 0 );
		g_Sql_RetStr(szTmp, 10, szDeadlineFlag);

		//변경사유 -> 코드값 쿼리에 있는걸로?? 내일 확인
		Mem_Set( (byte*) szTmp, 0x00, sizeof( szTmp) );
		Mem_Set((byte*)szSmsChgWhy, 0x00, sizeof(szSmsChgWhy));	
        i = SearchStr( EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA11)), GM_TELCHG_WHY );
        if (i == -1)
        {
            Str_Cpy(szSmsChgWhy, GM_TELCHG_WHY[0].Code);
        }
        else
        {
            Str_Cpy(szSmsChgWhy, GM_TELCHG_WHY[i].Code);
        }

		Mem_Set( (byte*) m_szCp_ddd, 0x00, sizeof( m_szCp_ddd) );
		Str_Cpy(m_szCp_ddd, EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA9)));
		Mem_Set( (byte*) m_szCp_exn, 0x00, sizeof( m_szCp_exn) );
		Str_Cpy(m_szCp_exn, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA3)));
		Mem_Set( (byte*) m_szCp_num, 0x00, sizeof( m_szCp_num) );
		Str_Cpy(m_szCp_num, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA4)));
		
		if( Str_Len(m_szCp_ddd) < 1 || Str_Len(m_szCp_exn) < 1 || Str_Len(m_szCp_num) < 1 )
		{
			MessageBoxEx (CONFIRM_OK, "수신 전화번호를 확인해주세요.");
			return 1;
		}
		
		if( !g_CheckPhoneNumber("1", m_szCp_ddd, m_szCp_exn, m_szCp_num) )
		{
			MessageBoxEx (CONFIRM_OK, "수신 전화번호를 확인해주세요.");
			return 1;
		}
		
		if( g_pjcomm != NULL)
		{
			JSON_Finalize( g_pjcomm );
			g_pjcomm = NULL;
		}		
		g_pjcomm = g_CreateJsonHead(g_pjcomm, szUrl, 25002, FALSE);

		JSON_SetValue( g_pjcomm, 'C', "req_ym",              szReqym               );
		JSON_SetValue( g_pjcomm, 'C', "deadline_flag",       szDeadlineFlag        );
		JSON_SetValue( g_pjcomm, 'C', "use_cont_num",        g_szUSE_CONT_NUM     );
		JSON_SetValue( g_pjcomm, 'C', "cp_ddd",              m_szCp_ddd            );
		JSON_SetValue( g_pjcomm, 'C', "cp_exn",              m_szCp_exn            );
		JSON_SetValue( g_pjcomm, 'C', "cp_num",              m_szCp_num            );
		JSON_SetValue( g_pjcomm, 'C', "sms_agree_chg_why",   szSmsChgWhy           );
				
		sndbuf = JSON_toString(g_pjcomm);
		
		//전송데이터 확인
		g_Save_JsonFile(sndbuf);

		Mem_Set((byte*)szbuf, 0x00, sizeof(szbuf));	
		GET_FILENM(szbuf, SQLITE_DB);

		callBackfunc = TR25002; //통신완료 후에 호출 함수
		HTTP_DownloadData( szUrl, "FR25002_IN",  "FR25002" , sndbuf, szbuf );

		return 1;
	}
	
//------------------------------------------------------------------
	long TR25002(void)
	{
		char szSql[250];
		char szTmp[100];

		if(g_Chk_Json(25002) >= 0)
		{
			//검침 전화번호 변경 후!!!!!!!!!!!
			//서버 송신 완료 후, 로컬 DB 및 스트럭쳐 값 적용시킬것.

			Mem_Set((byte*)szSql, 0x00, sizeof(szSql));	
			Mem_Set((byte*)szTmp, 0x00, sizeof(szTmp));	
			SPRINT(szSql, "UPDATE GUMDATA SET SMS_CP_DDD = '%s', SMS_CP_EXN = '%s', SMS_CP_NUM = '%s' ", m_szCp_ddd, m_szCp_exn, m_szCp_num);
			SPRINT(szTmp, " WHERE USE_CONT_NUM = '%s'", g_szUSE_CONT_NUM, 0, 0);
			Str_Cat(szSql, szTmp);
			g_Sql_DirectExecute(szSql);
			
			MessageBoxEx (CONFIRM_OK, "번호가 변경되었습니다.");
			FindDraw();
			ON_DRAW();
			return 1;
		}
		else
		{
			g_Sock_Close();
			CloseMessageBox();
			ON_DRAW();
			return -1;
		}
	}

//------------------------------------------------------------------
	bool Search_Addr(void)
	{
		char szWhere[400];
		char szSql[600];
		long chki= 0;
	
		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		Mem_Set( (byte*)szWhere, 0x00, sizeof(szWhere) );
		Mem_Set( (byte*)m_szSql, 0x00, sizeof(m_szSql) );
		
		Str_Cpy(szSql, "SELECT COUNT(*) FROM GUMDATA WHERE ");
		Str_Cpy( m_szSql, "SELECT TOWN, CASE WHEN Length(Trim(CO_LIVE_NM))+Length(Trim(BLD_NM)) > 0 THEN ifnull(CO_LIVE_NM,'') ||' '|| ifnull(BLD_NM,'') ||'-'|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') ELSE ifnull(ADDR1_M,'') ||'-'|| ifnull(ADDR1_S,'') ||' '|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') END, CASE WHEN Length(Trim(CO_LIVE_NM))+Length(Trim(BLD_NM)) > 0 THEN ifnull(CO_LIVE_NM,'') ||' '|| ifnull(BLD_NM,'') ||'-'|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') ELSE  ifnull(NEW_ADDR_M,'') ||'-'|| ifnull(NEW_ADDR_S,'') ||' '|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') END , ifnull(cp_ddd, '') ||'-'|| ifnull(cp_exn, '') ||'-'|| ifnull(cp_num, ''), USE_CONT_NUM FROM GUMDATA WHERE ");
		
		if( m_lSearchType == 0 )
		{
			m_lAddrFlag = 0;
			
			//지번 단독 검색
			if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(CMB_DATA3)) == 0 ||
			    EditCtrl_GetStrLen(Get_hDlgCtrlByID(CMB_DATA4)) == 0 ||
			    EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA5)) == 0 )
			{
				MessageBoxEx (CONFIRM_OK, "주소입력을 확인하세요.");
				return FALSE;
			}
			
			if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(CMB_DATA3) ) > 0   ) 
			{
				Mem_Set( (byte*)szWhere, 0x00, sizeof(szWhere) );
				Str_Cat( szWhere, "AREA = '" );
				Str_Cat( szWhere, EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA3) ) );
				Str_Cat( szWhere, "' " );
				
				Str_Cat( szSql, szWhere );
				Str_Cat( m_szSql, szWhere );
				
				chki++;
			}
			
			if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(CMB_DATA4) ) > 0   ) 
			{
				Mem_Set( (byte*)szWhere, 0x00, sizeof(szWhere) );				
				if(chki > 0)
					Str_Cat( szWhere, " AND " );
				Str_Cat( szWhere, "TOWN = '" );
				Str_Cat( szWhere, EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA4) ) );
				Str_Cat( szWhere, "' " );

				Str_Cat( szSql, szWhere );
				Str_Cat( m_szSql, szWhere );
				
				chki++;
			}
	
			if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA5) ) > 0   ) 
			{
				Mem_Set( (byte*)szWhere, 0x00, sizeof(szWhere) );
				if(chki > 0)
					Str_Cat( szWhere, " AND " );
				Str_Cat( szWhere, "ADDR1_M = '" );
				Str_Cat( szWhere, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA5) ) );
				Str_Cat( szWhere, "' " );

				Str_Cat( szSql, szWhere );
				Str_Cat( m_szSql, szWhere );
				
				chki++;
			}
			
			if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA6) ) > 0   ) 
			{
				Mem_Set( (byte*)szWhere, 0x00, sizeof(szWhere) );
				if(chki > 0)
					Str_Cat( szWhere, " AND " );
				Str_Cat( szWhere, "ADDR1_S = '" );
				Str_Cat( szWhere, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA6) ) );
				Str_Cat( szWhere, "' " );

				Str_Cat( szSql, szWhere );
				Str_Cat( m_szSql, szWhere );
			}
		}
		else if( m_lSearchType == 1 )
		{	
			m_lAddrFlag = 1;
			
			//도로명 검색
			if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(CMB_DATA5)) == 0 ||
			    EditCtrl_GetStrLen(Get_hDlgCtrlByID(CMB_DATA6)) == 0 ||
			    EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA7)) == 0 )
			{
				MessageBoxEx (CONFIRM_OK, "주소입력을 확인하세요.");
				return FALSE;
			}

			if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(CMB_DATA5) ) > 0   ) 
			{
				Mem_Set( (byte*)szWhere, 0x00, sizeof(szWhere) );
				Str_Cat( szWhere, "AREA = '" );
				Str_Cat( szWhere, EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA5) ) );
				Str_Cat( szWhere, "' " );

				Str_Cat( szSql, szWhere );
				Str_Cat( m_szSql, szWhere );

				chki++;
			}
	
			if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(CMB_DATA6) ) > 0   ) 
			{
				Mem_Set( (byte*)szWhere, 0x00, sizeof(szWhere) );
				if(chki > 0)
					Str_Cat( szWhere, " AND " );
				Str_Cat( szWhere, "NEW_ROAD_NM = '" );
				Str_Cat( szWhere, EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA6) ) );
				Str_Cat( szWhere, "' " );

				Str_Cat( szSql, szWhere );
				Str_Cat( m_szSql, szWhere );

				chki++;
			}
	
			if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA7) ) > 0   ) 
			{
				Mem_Set( (byte*)szWhere, 0x00, sizeof(szWhere) );
				if(chki > 0)
					Str_Cat( szWhere, " AND " );
				Str_Cat( szWhere, "NEW_ADDR_M = '" );
				Str_Cat( szWhere, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA7) ) );
				Str_Cat( szWhere, "' " );

				Str_Cat( szSql, szWhere );
				Str_Cat( m_szSql, szWhere );

				chki++;
			}
			
			if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA8) ) > 0   ) 
			{
				Mem_Set( (byte*)szWhere, 0x00, sizeof(szWhere) );
				if(chki > 0)
					Str_Cat( szWhere, " AND " );
				Str_Cat( szWhere, "NEW_ADDR_S = '" );
				Str_Cat( szWhere, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA8) ) );
				Str_Cat( szWhere, "' " );

				Str_Cat( szSql, szWhere );
				Str_Cat( m_szSql, szWhere );
			}
		}
		else if( m_lSearchType == 2 )
		{
			//지번 공동 검색
			if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(CMB_DATA7)) == 0 )
			{
				MessageBoxEx (CONFIRM_OK, "공동 주택 입력을 확인하세요.");
				return FALSE;
			}
			else if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(CMB_DATA8)) == 0 )
			{
				MessageBoxEx (CONFIRM_OK, "건물명 입력을 확인하세요.");
				return FALSE;
			}
			
			if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(CMB_DATA7) ) > 0   ) 
			{
				Mem_Set( (byte*)szWhere, 0x00, sizeof(szWhere) );
				Str_Cat( szWhere, "CO_LIVE_NM = '" );
				Str_Cat( szWhere, EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA7) ) );
				Str_Cat( szWhere, "' " );

				Str_Cat( szSql, szWhere );
				Str_Cat( m_szSql, szWhere );
				
				chki++;
			}
	
			if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(CMB_DATA8) ) > 0   ) 
			{
				Mem_Set( (byte*)szWhere, 0x00, sizeof(szWhere) );
				if(chki > 0)
					Str_Cat( szWhere, " AND " );
				Str_Cat( szWhere, "BLD_NM = '" );
				Str_Cat( szWhere, EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA8) ) );
				Str_Cat( szWhere, "' " );

				Str_Cat( szSql, szWhere );
				Str_Cat( m_szSql, szWhere );
				
				chki++;
			}
			
			if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA9) ) > 0   ) 
			{
				Mem_Set( (byte*)szWhere, 0x00, sizeof(szWhere) );
				if(chki > 0)
					Str_Cat( szWhere, " AND " );
				Str_Cat( szWhere, "HOSU = '" );
				Str_Cat( szWhere, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA9) ) );
				Str_Cat( szWhere, "' " );
				
				Str_Cat( szSql, szWhere );
				Str_Cat( m_szSql, szWhere );
			}
		}
		else if( m_lSearchType == 3 )
		{
			if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA10)) == 0 )
			{
				MessageBoxEx (CONFIRM_OK, "기물번호를 입력하세요.");
				return FALSE;
			}
			
			Mem_Set( (byte*)szWhere, 0x00, sizeof(szWhere) );
			Str_Cat( szWhere, "MTR_ID_NUM = '" );
			Str_Cat( szWhere, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA10) ) );
			Str_Cat( szWhere, "' " );
			
			Str_Cat( szSql, szWhere );
			Str_Cat( m_szSql, szWhere );
		}
		else if( m_lSearchType == 4 )
		{
			if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA11)) == 0 )
			{
				MessageBoxEx (CONFIRM_OK, "계약번호를 입력하세요.");
				return FALSE;
			}
			
			Mem_Set( (byte*)szWhere, 0x00, sizeof(szWhere) );
			Str_Cat( szWhere, "USE_CONT_NUM = '" );
			Str_Cat( szWhere, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA11) ) );
			Str_Cat( szWhere, "' " );
			
			Str_Cat( szSql, szWhere );
			Str_Cat( m_szSql, szWhere );
		}
		
		Str_Cat( m_szSql, "ORDER BY DONG_ORD, HOUSE_NUM_ORD, MTR_COURSE LIMIT ?, ?"  );

		//검색 카운트
		g_Sql_RetInt( szSql, &m_lTotpage_F );
		if( m_lTotpage_F % ROW_F > 0 )
		{
			m_lTotpage_F = (m_lTotpage_F / ROW_F) + 1;
		}
		else
		{
			m_lTotpage_F = m_lTotpage_F / ROW_F;
		}
		
		if( m_lTotpage_F < 1 )
		{
			MessageBoxEx (CONFIRM_OK, "수신받은 대상이 없습니다.");
			return FALSE;
		}
		else
		{
			//페이지를 초기화시킨다.
			m_lpage_F = 0;
		    EditCtrl_SetStr(Get_hDlgCtrlByID(CMB_DATA11), GM_TELCHG_WHY[0].Str);
			FindDraw();
		}
		return TRUE;
	}

	//------------------------------------------------------------------
	void FindDraw(void)
	{
	long i, idx;
	long lSndStsCd = 0;
	long k = ROW_F + 1;
	char sztmp[400];
	char szDate[50];
	long ret = -1;	
	long lstartidx;
	handle hdb = NULL;
	handle hstmt = NULL;
	SQLITE sql = NewSqLite();

		//페이지
		SPRINT(m_szCnt_page_F, "%d/%d", m_lpage_F+1, m_lTotpage_F, 0);
		
		hdb = sql->Open(sql);
		if( hdb == NULL )
		{
			goto Finally;
		}
		
		hstmt = sql->CreateStatement(sql, m_szSql );
				
		if( hstmt == NULL )
		{
			PRINT("::SQL_FreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}
		
		idx = 0;
		lstartidx = m_lpage_F*ROW_F;
		sql->Bind(sql, idx++, 'X', &lstartidx, 4, DECRYPT);
		i = m_lpage_F*ROW_F+ROW_F;
		sql->Bind(sql, idx++, 'X', &i, 4, DECRYPT);
		
		if(sql->Execute(sql) == FALSE)
		{
			PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}

		// 등록된 코드 리스트를 페이지에 맞게 보여준다.
		for (i=0 ; i<ROW_F ; i++)
		{
			//자료가 없을때 화면을 클리어 시킨다.
			if( k == i )
			{
				k++;
				DlgTbl_SetStr ( ID_FINDLIST, i, 0, "" );
				DlgTbl_SetStr ( ID_FINDLIST, i, 1, "" );
				DlgTbl_SetStr ( ID_FINDLIST, i, 2, "" );
				DlgTbl_SetStr ( ID_FINDLIST, i, 3, "" );
			}
			else
			{
				if(sql->Next(sql) == FALSE)
				{
					k = i + 1;
					DlgTbl_SetStr ( ID_FINDLIST, i, 0, "" );
					DlgTbl_SetStr ( ID_FINDLIST, i, 1, "" );
					DlgTbl_SetStr ( ID_FINDLIST, i, 2, "" );
					DlgTbl_SetStr ( ID_FINDLIST, i, 3, "" );
					continue;
				}
				idx = 0;
				//동명
				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				sql->GetValue(sql, 0, 'U', (long*)sztmp, 50, DECRYPT);
				DlgTbl_SetStr ( ID_FINDLIST, i, 0, sztmp );
				//주소
				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				if( m_lAddrFlag == 0 )
				{
					sql->GetValue(sql, 1, 'U', (long*)sztmp, 300, DECRYPT);
				}
				else
				{
					sql->GetValue(sql, 2, 'U', (long*)sztmp, 300, DECRYPT);
				}
				DlgTbl_SetStr ( ID_FINDLIST, i, 1, sztmp );
				//전화번호
				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				sql->GetValue(sql, 3, 'U', (long*)sztmp, 50, DECRYPT);
				DlgTbl_SetStr ( ID_FINDLIST, i, 2, sztmp );
				//use_cont_num
				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				sql->GetValue(sql, 4, 'U', (long*)sztmp, 50, DECRYPT);
				DlgTbl_SetStr ( ID_FINDLIST, i, 3, sztmp );
			}
		}	

Finally:
		//sql->Commit(sql);
		DelSqLite(sql);

		if( m_lTotpage_F > 0 )
		{
			if( m_nActIndex_F < 0 )
			{
				m_nActIndex_F = 0;
			}

			DlgTbl_SetActive(ID_FINDLIST , m_nActIndex_F+1 );
			DlgTbl_SetRowColor(ID_FINDLIST, m_nActIndex_F+1, TABLEACTIVE_COLOR);
		
			Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
			Mem_Set( (byte*)m_szCp_ddd, 0x00, sizeof(m_szCp_ddd) );
			Mem_Set( (byte*)m_szCp_exn, 0x00, sizeof(m_szCp_exn) );
			Mem_Set( (byte*)m_szCp_num, 0x00, sizeof(m_szCp_num) );
			Str_Cpy(sztmp, DlgTbl_GetStr( ID_FINDLIST, m_nActIndex_F, 2));
			Str_Chg(sztmp, STRCHG_DEL_NONDIGIT);
			Analy_Phone(sztmp, m_szCp_ddd, m_szCp_exn, m_szCp_num);
			EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA9), m_szCp_ddd );
			EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA3), m_szCp_exn );
			EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA4), m_szCp_num );
	
			Mem_Set( (byte*)g_szUSE_CONT_NUM, 0x00, sizeof(g_szUSE_CONT_NUM) );
			Str_Cpy(g_szUSE_CONT_NUM, DlgTbl_GetStr( ID_FINDLIST, m_nActIndex_F, 3));
		}

		ON_DRAW();
		return;
	}

	//---------------------------------------------------------------------------------------------
	long Analy_Phone(char*phone, char* num1, char* num2, char* num3 )
	{
	long len;
	
		Str_Chg(phone, STRCHG_DEL_NONDIGIT );
		len = Str_Len(phone);
		
		if( len == 9 )
		{
			Mem_Cpy( (byte*)num1, (byte*)phone,  2);
			Mem_Cpy( (byte*)num2, (byte*)phone+2,  3);
			Mem_Cpy( (byte*)num3, (byte*)phone+5,  4);
		}
		else if( len == 10 )
		{
			if( Mem_Cmp((byte*)phone, (byte*)"01", 2) == 0  )
			{
				Mem_Cpy( (byte*)num1, (byte*)phone,  3);
				Mem_Cpy( (byte*)num2, (byte*)phone+3,  3);
				Mem_Cpy( (byte*)num3, (byte*)phone+6,  4);
			}
			else if(  Mem_Cmp((byte*)phone, (byte*)"02", 2) == 0 )
			{
				Mem_Cpy( (byte*)num1, (byte*)phone,  2);
				Mem_Cpy( (byte*)num2, (byte*)phone+2,  4);
				Mem_Cpy( (byte*)num3, (byte*)phone+6,  4);
			}
			else
			{
				Mem_Cpy( (byte*)num1, (byte*)phone,  3);
				Mem_Cpy( (byte*)num2, (byte*)phone+3,  3);
				Mem_Cpy( (byte*)num3, (byte*)phone+6,  4);
			}
		}
		else if( len == 11 )
		{
				Mem_Cpy( (byte*)num1, (byte*)phone,  3);
				Mem_Cpy( (byte*)num2, (byte*)phone+3,  4);
				Mem_Cpy( (byte*)num3, (byte*)phone+7,  4);
		}
		else if( len == 12 )
		{
				Mem_Cpy( (byte*)num1, (byte*)phone,  4);
				Mem_Cpy( (byte*)num2, (byte*)phone+4,  4);
				Mem_Cpy( (byte*)num3, (byte*)phone+8,  4);
		}
		else
		{
			return -1;
		}
		
		return 1;
	}

	//------------------------------------------------------------------------------------------
	long Rcv_Many(void)
	{
		char sztmp[256];
		char szUrl[256];
		char szReqym[10];
		char szDeadlineFlag[10];
		char* sndbuf;
		long ret;

		if( g_pjcomm != NULL)
		{
			JSON_Finalize( g_pjcomm );
			g_pjcomm = NULL;
		}		
		g_pjcomm = g_CreateJsonHead(g_pjcomm, szUrl, 25010, FALSE);
		
		JSON_SetValue( g_pjcomm, 'C', "use_cont_num",        m_stUserinfo.szUse_cont_num     );
		
		sndbuf = JSON_toString(g_pjcomm);
		
		g_Save_JsonFile(sndbuf);
		
		Mem_Set((byte*)sztmp, 0x00, sizeof(sztmp));	
		GET_FILENM(sztmp, SQLITE_DB);
		
		callBackfunc = TR25010; //통신완료 후에 호출 함수
		ret = HTTP_DownloadData(szUrl, "FR25010_IN",  "FR25010" , sndbuf, sztmp );
		return 1 ;
	}

	//------------------------------------------------------------------------------------------
	long TR25010(void)
	{
		long lRet = -1;
		
		if( g_Chk_Json(25010) >= 0)
		{
			lRet = GmSms_Sts(25010);

			if( m_lSndSmsMsgFlag == 1 )
			{
				if( Str_Cmp(stGm.MULTI_USE_CONT_YN, "Y") == 0 )
				{
					MessageBoxEx (CONFIRM_OK, "대상 선정 시 단독계약 세대였지만 현 시점에는 복수계약 세대가 되었습니다. \n복수계약 세대는 문자검침을 할 수 없습니다.");
				}
				else if( Str_Cmp(stGm.SMS_SEND_AGREE_YN, "N") == 0 )
				{
					MessageBoxEx (CONFIRM_OK, "문자검침 동의 세대가 아닙니다.");
				}
				else if( Str_Cmp(stGm.CONT_STS_CD, "N") == 0 )
				{
					MessageBoxEx (CONFIRM_OK, "사용계약상태가 정상이 아닙니다.");
				}
				else
				{
					Rcv_SmsSts();
				}
			}
			else
			{
				Rcv_SmsSts();
			}
			
			ON_DRAW();
			return lRet;	
		}
		else
		{
			g_Sock_Close();
			ON_DRAW();
			return lRet;
		}
	}


	//------------------------------------------------------------------------------------------
	long Rcv_SmsSts(void)
	{
		char sztmp[256];
		char szUrl[256];
		char szReqym[10];
		char szDeadlineFlag[10];
		char* sndbuf;
		long ret;
		
		Mem_Set( (byte*) sztmp, 0x00, sizeof( sztmp) );
		Mem_Set( (byte*) szReqym, 0x00, sizeof( szReqym) );
		SPRINT( sztmp, "SELECT PARAM1 FROM RCV_LOG WHERE GUBUN = '1' ", 0, 0, 0 );
		g_Sql_RetStr(sztmp, 10, szReqym);
		
		Mem_Set( (byte*) sztmp, 0x00, sizeof( sztmp) );
		Mem_Set((byte*)szDeadlineFlag, 0x00, sizeof(szDeadlineFlag));	
		SPRINT( sztmp, "SELECT PARAM2 FROM RCV_LOG WHERE GUBUN = '1' ", 0, 0, 0 );
		g_Sql_RetStr(sztmp, 10, szDeadlineFlag);

		if( g_pjcomm != NULL)
		{
			JSON_Finalize( g_pjcomm );
			g_pjcomm = NULL;
		}		
		g_pjcomm = g_CreateJsonHead(g_pjcomm, szUrl, 25008, FALSE);
		
		JSON_SetValue( g_pjcomm, 'C', "req_ym",              szReqym               );
		JSON_SetValue( g_pjcomm, 'C', "deadline_flag",       szDeadlineFlag        );
		JSON_SetValue( g_pjcomm, 'C', "use_cont_num",        m_stUserinfo.szUse_cont_num     );
		
		sndbuf = JSON_toString(g_pjcomm);
		
		//g_Save_JsonFile(sndbuf);
		
		Mem_Set((byte*)sztmp, 0x00, sizeof(sztmp));	
		GET_FILENM(sztmp, SQLITE_DB);
		
		callBackfunc = TR25008; //통신완료 후에 호출 함수
		ret = HTTP_DownloadData(szUrl, "FR25008_IN",  "FR25008" , sndbuf, sztmp );
		return 0 ;
	}

	//------------------------------------------------------------------------------------------
	long TR25008(void)
	{
		long lRet = -1;
		
		if( g_Chk_Json(25008) >= 0)
		{
			lRet = GmSms_Sts(25008);
			
			if( m_lSndSmsMsgFlag == 4 )
			{
				g_nSmsFlag = 5;
				Card_Move("GM_SMS_VIEW");
			}
			
			ON_DRAW();
			return lRet;	
		}
		else
		{
			g_Sock_Close();
			ON_DRAW();
			return lRet;
		}
	}

	//------------------------------------------------------------------------------------------
	long GmSms_Sts(long nservicenum)
	{
	char szJsonpath[500];
	char szMsg[500];
	char szCol[128];
	char szTmp[100];
	long *nCol;
	long nCnt = 0;
	long fd, i;
	long chkmsg = 0;
	long chkcode = 0;
	long fsize = 0;
	long lServerDtm = 0 , lReceiveDtm = 0 , lRet = 0;
	char *pStr;
	char *szcode;
	char *szmessage;
	char *szitem;
	char *szSmsSts;
	char *szSmsdesc;
	char *szServerDtm;
	char *szPlanDtm;
	char *szAgreeYn;
	char *szContCd;
	long *nSendSeq;
	char szType[2] = {0,0};
	long ret = 11;
	handle hitem = NULL;
	handle hcnt = NULL;
		
		//MessageBox(MESSAGE, "자료 확인중 입니다.", 0, 0, 0, 0);
		
		Mem_Set((byte*) szJsonpath, 0x00, sizeof( szJsonpath) );
		SPRINT(szJsonpath, "%sFR%d_Res.JSON",  SYSTEM_COMM, nservicenum, 0 );
		
		if(FFS_Exist(szJsonpath) != TRUE )
		{
			Mem_Set((byte*) szJsonpath, 0x00, sizeof( szJsonpath) );
			SPRINT(szJsonpath, "%sFR%d.JSON",  SYSTEM_COMM, nservicenum, 0 );
		}
		
		fsize = FFS_GetSize(szJsonpath);
		if(fsize <= 15)
		{
			ret = -1;
			goto Finally;
		}
		pStr = Mem_Alloc(fsize);
		fd = FFS_Open(szJsonpath, FS_READ_MODE, FS_NORMAL_FLAG);
		if(fd == -1)
		{
			ret = -1;
			goto Finally;
		}

		FFS_Read(fd, (byte*)pStr, fsize);
		for(i = 0 ; i < fsize-9 ; i++ )
		{
			if( Mem_Cmp((byte*)pStr+i,(byte*) "\"code\"", 6) == 0  )
			{
				chkcode++;
			}
			if( Mem_Cmp((byte*)pStr+i,(byte*) "\"message\"", 9) == 0  )
			{
				chkmsg++;
			}
			if(chkmsg > 0 &&  chkcode > 0)
				break;
		}

		FFS_Close(fd);
		
		Mem_Free((byte*)pStr);
		if(chkmsg == 0 || chkcode == 0)
		{
			ret = -1;
			goto Finally;
		}
		
		if(g_pjcomm != NULL)
		{
			JSON_Finalize(g_pjcomm);
			g_pjcomm = NULL;
		}
		
		g_pjcomm = JSON_Create( JSON_Object );
		if(g_pjcomm == NULL)
		{
			ret = -1;
			goto Finally;
		}

		if( JSON_LoadFile(g_pjcomm, szJsonpath) > 0)
		{
			szcode    = JSON_GetValue (g_pjcomm, "code",    szType);
			szmessage = JSON_GetValue (g_pjcomm, "message", szType);

			if( Str_Cmp(szcode, "0000") != 0)
			{
				Mem_Set((byte*) szJsonpath, 0x00, sizeof( szJsonpath) );
				if(Str_Len(szmessage) < 500 )
					SQL_ConvMbStr( szMsg, szmessage);
				
				SPRINT(szJsonpath, "[%s] %s", szcode, szMsg, 0 );
			
				MessageBoxEx (WARNING_OK, szJsonpath);
				ON_DRAW();
				ret = -1;
			}
			else
			{
				ret = 0;
				szitem =JSON_GetValue(g_pjcomm, "item", szType);
				if(szitem != NULL)
				{
					if( Str_Len(szitem) > 0 )
					{
						hitem = JSON_Create( JSON_Array );
						if( hitem != NULL)
						{
							JSON_toJson(hitem, szitem ) ;
							ret = JSON_GetArrayCount( hitem );
							
							if( ret > 0 )
							{
								if( nservicenum == 25008 )
								{
									//문자검침발송진행상태
									Mem_Set((byte*) stGm.GMTR_SEND_STS, 0x00, sizeof( stGm.GMTR_SEND_STS) );
									szSmsSts = (char*)JSON_GetArrayItem ( hitem, 0, "gmtr_send_sts", szType);
									Str_Cpy(stGm.GMTR_SEND_STS, szSmsSts);
									Str_Chg(stGm.GMTR_SEND_STS, STRCHG_DEL_NONDIGIT);
	
									//서버시간
									Mem_Set((byte*) stGm.SERVER_DTM, 0x00, sizeof( stGm.SERVER_DTM) );
									szServerDtm = (char*)JSON_GetArrayItem ( hitem, 0, "server_dtm", szType);
									Str_Cpy(stGm.SERVER_DTM, szServerDtm);
	
									//예약시간
									Mem_Set((byte*) stGm.PLAN_DTM, 0x00, sizeof( stGm.PLAN_DTM) );
									szPlanDtm = (char*)JSON_GetArrayItem ( hitem, 0, "plan_dtm", szType);
									Str_Cpy(stGm.PLAN_DTM, szPlanDtm);

									//수신문자내용
									Mem_Set((byte*) stGm.RCV_SMS_DESC, 0x00, sizeof( stGm.RCV_SMS_DESC) );
									szSmsdesc = (char*)JSON_GetArrayItem ( hitem, 0, "rcv_sms_desc", szType);
									SQL_ConvMbStr(stGm.RCV_SMS_DESC, szSmsdesc);

									//문자검침 회신검증코드
									Mem_Set((byte*) stGm.RCV_STS_VERIFY_CD, 0x00, sizeof( stGm.RCV_STS_VERIFY_CD) );
									szSmsSts = (char*)JSON_GetArrayItem ( hitem, 0, "rcv_sts_verify_cd", szType);
									Str_Cpy(stGm.RCV_STS_VERIFY_CD, szSmsSts);

									//stGm.SEND_SEQ
									Mem_Set((byte*) stGm.SEND_SEQ, 0x00, sizeof( stGm.SEND_SEQ) );
									nSendSeq = (long*)JSON_GetArrayItem ( hitem, 0, "send_seq", szType);
									nCnt = *nSendSeq;
									Str_ItoA(nCnt, stGm.SEND_SEQ, 10);
								}
								else if( nservicenum == 25010 )
								{
									//복수세대 여부
									Mem_Set((byte*) stGm.MULTI_USE_CONT_YN, 0x00, sizeof( stGm.MULTI_USE_CONT_YN) );
									szSmsSts = (char*)JSON_GetArrayItem ( hitem, 0, "multi_use_cont_yn", szType);
									Str_Cpy(stGm.MULTI_USE_CONT_YN, szSmsSts);

									//문자검침 동의 여부
									Mem_Set((byte*) stGm.SMS_SEND_AGREE_YN, 0x00, sizeof( stGm.SMS_SEND_AGREE_YN) );
									szAgreeYn = (char*)JSON_GetArrayItem ( hitem, 0, "sms_send_agree_yn", szType);
									Str_Cpy(stGm.SMS_SEND_AGREE_YN, szAgreeYn);
									
									//사용계약상태
									Mem_Set((byte*) stGm.CONT_STS_CD, 0x00, sizeof( stGm.CONT_STS_CD) );
									szContCd = (char*)JSON_GetArrayItem ( hitem, 0, "cont_sts_cd", szType);
									Str_Cpy(stGm.CONT_STS_CD, szContCd);
								}
							}
							
							JSON_Finalize(hitem);
							hitem = NULL;
							
							if( nservicenum == 25010 )
							{
								goto Finally2;
							}
						}
					}
				}
			}
		}
		else
		{
			ret = 1;
		}
		
Finally:		

		if( nservicenum == 25008 )
		{
			if( m_lSndSmsMsgFlag == 1 )
			{
				if( Str_Cmp(stGm.GMTR_SEND_STS, "10") == 0 || Str_Cmp(stGm.GMTR_SEND_STS, "50") == 0 )
				{
					Rcv_SmsDesc();
				}
				else
				{
					MessageBoxEx (CONFIRM_OK, "선택한 대상의 상태를 확인해주세요.");
					ret = 0;
					goto Finally2;
				}
			}
			else if( m_lSndSmsMsgFlag == 2 )
			{
	//PRINT(">>>>>>>>>>>>>>>>>>>>> stGm.GMTR_SEND_STS : %s",stGm.GMTR_SEND_STS,0,0);
				if( Str_Cmp(stGm.GMTR_SEND_STS, "30") == 0 )
				{
					lRet = 0;
					Mem_Set((byte*) szTmp, 0x00, sizeof( szTmp) );
					Str_Sub(stGm.PLAN_DTM, stGm.SERVER_DTM, szTmp);
					lRet = Str_AtoI(szTmp);
					if( lRet > 1000 )
					{
						//문자검침 대상 예약 취소 후 삭제
						Snd_Reserve_Cancel();
						ret = 1;
					}
					else if( lRet >= 0 && lRet < 1000 )
					{
						Mem_Set((byte*) szTmp, 0x00, sizeof( szTmp) );
						Mem_Set((byte*) szCol, 0x00, sizeof( szCol) );
						g_Str_DateType(szCol, stGm.PLAN_DTM);
						SPRINT(szTmp, "문자발송 예약시간 10분 전에는 취소가 불가능합니다.\n[예약일자:%s]", szCol,0,0);
						MessageBoxEx (CONFIRM_OK, szTmp);
						ret = 0;
						goto Finally2;
					}
					else
					{
						Mem_Set((byte*) szTmp, 0x00, sizeof( szTmp) );
						Mem_Set((byte*) szCol, 0x00, sizeof( szCol) );
						g_Str_DateType(szCol, stGm.PLAN_DTM);
						SPRINT(szTmp, "문자발송 예약시간을 확인해주세요.\n[예약일자:%s]", szCol,0,0);
						MessageBoxEx (CONFIRM_OK, szTmp);
						ret = 0;
						goto Finally2;
					}
				}
				else
				{
					MessageBoxEx (CONFIRM_OK, "선택한 대상의 상태를 확인해주세요.");
					ret = 0;
					goto Finally2;
				}
			}
			else if( m_lSndSmsMsgFlag == 3 )
			{
				if( Str_Cmp(stGm.GMTR_SEND_STS, "10") == 0 || Str_Cmp(stGm.GMTR_SEND_STS, "50") == 0 )
				{
					Snd_Delete();
					ret = 1;
					goto Finally2;
				}
				else
				{
					MessageBoxEx (CONFIRM_OK, "선택한 대상의 상태를 확인해주세요.");
					ret = 0;
					goto Finally2;
				}
			}
		}
		
Finally2:

		if(g_pjcomm != NULL)
		{
			JSON_Finalize(g_pjcomm);
			g_pjcomm = NULL;
		}

		g_Close_SubDlg();
		ON_DRAW();
		
		return ret;
	}
	
	
	//------------------------------------------------------------------------------------------
	long Validate(long BtnId)
	{
		char sztmp[50];
		long lRet = -1;
		long lCnt = 0;
		long lDate = 0;
	
		lCnt = 0;
		g_Sql_RetInt( "SELECT COUNT(*) FROM GUM_SMS_TARGET WHERE CHK_YN = 'Y'", &lCnt );
		if( lCnt == 0 )
		{
			MessageBoxEx (CONFIRM_OK, "대상을 선택해주세요.");
			return lRet;
		}

		if( BtnId == BID_DELETE )
		{
			lCnt = 0;
			g_Sql_RetInt( "SELECT COUNT(*) FROM GUM_SMS_TARGET WHERE CHK_YN = 'Y' AND GMTR_SEND_STS = '30'", &lCnt );
			if( lCnt > 0 )
			{
				MessageBoxEx (CONFIRM_OK, "예약을 취소해주세요.");
				return lRet;
			}

			lCnt = 0;
			g_Sql_RetInt( "SELECT COUNT(*) FROM GUM_SMS_TARGET WHERE CHK_YN = 'Y' AND GMTR_SEND_STS != '10' AND GMTR_SEND_STS != '30' AND GMTR_SEND_STS != '50' ", &lCnt );
			if( lCnt > 0 )
			{
				MessageBoxEx (CONFIRM_OK, "선택한 대상의 상태를 확인해주세요.");
				return lRet;
			}
		}
		else if( BtnId == BID_RSRVCNCL )
		{
			lCnt = 0;
			g_Sql_RetInt( "SELECT COUNT(*) FROM GUM_SMS_TARGET WHERE CHK_YN = 'Y' AND GMTR_SEND_STS != '30'", &lCnt );
			if( lCnt > 0 )
			{
				MessageBoxEx (CONFIRM_OK, "선택한 대상의 상태를 확인해주세요.");
				return lRet;
			}
		}
		else if( BtnId == BID_SND )
		{
			
			if( Str_Cmp(EditCtrl_GetStr( Get_hDlgCtrlByID(CMB_DATA2)), "예약발송") == 0 )
			{
				if(Str_Len(EditCtrl_GetStr( Get_hDlgCtrlByID(TXT_DATA5))) == 0 ||
				   Str_Len(EditCtrl_GetStr( Get_hDlgCtrlByID(CMB_DATA12))) == 0 ||
				   Str_Len(EditCtrl_GetStr( Get_hDlgCtrlByID(EDT_DATA2))) == 0 )
				{
					MessageBoxEx (CONFIRM_OK, "예약발송 날짜 및 시간을 입력해주세요.");
					Mem_Set((byte*)m_szReserve_Dtm, 0x00, sizeof(m_szReserve_Dtm));	
					return lRet;
				}
				
				Mem_Set( (byte*) m_szReserve_Dtm, 0x00, sizeof( m_szReserve_Dtm) );
				//년월일
				Str_Cpy(m_szReserve_Dtm, EditCtrl_GetStr( Get_hDlgCtrlByID(TXT_DATA5)));
				Str_Chg(m_szReserve_Dtm, STRCHG_DEL_NONDIGIT);
				//당일인지 미래인지 체크
				lDate = Str_AtoI(m_szReserve_Dtm) - Time_GetDate();
				if( lDate >= 0 )
				{
					//시
				//	if( Str_Len(EditCtrl_GetStr( Get_hDlgCtrlByID(CMB_DATA12))) < 2 )
				//	{
				//		Mem_Set((byte*)sztmp, 0x00, sizeof(sztmp));	
				//		Str_Cpy(sztmp, "0");
				//		Str_Cat(sztmp, EditCtrl_GetStr( Get_hDlgCtrlByID(EDT_DATA1)));
				//	}
				//	else
				//	{
				//		Mem_Set((byte*)sztmp, 0x00, sizeof(sztmp));	
				//		Str_Cpy(sztmp, EditCtrl_GetStr( Get_hDlgCtrlByID(EDT_DATA1)));
				//	}
				
					Mem_Set((byte*)sztmp, 0x00, sizeof(sztmp));	
					Str_Cpy(sztmp, EditCtrl_GetStr( Get_hDlgCtrlByID(CMB_DATA12)));
					
					if( (lDate == 0 && Str_AtoI(sztmp) < Time_GetHour()) ||
					    (Str_AtoI(sztmp) < 0 || Str_AtoI(sztmp) > 23) )
					{
						MessageBoxEx (CONFIRM_OK, "예약시간를 확인해주세요.[H]");
						Mem_Set((byte*)m_szReserve_Dtm, 0x00, sizeof(m_szReserve_Dtm));	
						return lRet;
					}

					Str_Cat(m_szReserve_Dtm, sztmp);
					
					//분
					if( Str_Len(EditCtrl_GetStr( Get_hDlgCtrlByID(EDT_DATA2))) < 2 )
					{
						Mem_Set((byte*)sztmp, 0x00, sizeof(sztmp));	
						Str_Cpy(sztmp, "0");
						Str_Cat(sztmp, EditCtrl_GetStr( Get_hDlgCtrlByID(EDT_DATA2)));
					}
					else
					{
						Mem_Set((byte*)sztmp, 0x00, sizeof(sztmp));	
						Str_Cpy(sztmp, EditCtrl_GetStr( Get_hDlgCtrlByID(EDT_DATA2)));
					}
					
					if( (lDate == 0 && Str_AtoI(EditCtrl_GetStr( Get_hDlgCtrlByID(CMB_DATA12))) == Time_GetHour() && Str_AtoI(sztmp) <= Time_GetMinute()) ||
					    (Str_AtoI(sztmp) < 0 || Str_AtoI(sztmp) > 59))
					{
						MessageBoxEx (CONFIRM_OK, "예약시간를 확인해주세요.[M]");
						Mem_Set((byte*)m_szReserve_Dtm, 0x00, sizeof(m_szReserve_Dtm));	
						return lRet;
					}
					
					Str_Cat(m_szReserve_Dtm, sztmp);
					Str_Chg(m_szReserve_Dtm, STRCHG_DEL_NONDIGIT);
				}
				else
				{
					MessageBoxEx (CONFIRM_OK, "예약일자를 확인해주세요.");
					Mem_Set((byte*)m_szReserve_Dtm, 0x00, sizeof(m_szReserve_Dtm));	
					return lRet;
				}
			}
			
			lCnt = 0;
			g_Sql_RetInt( "SELECT COUNT(*) FROM GUM_SMS_TARGET WHERE CHK_YN = 'Y' AND GMTR_SEND_STS != '10' AND GMTR_SEND_STS != '50'", &lCnt );
			if( lCnt > 0 )
			{
				MessageBoxEx (CONFIRM_OK, "선택한 대상의 상태를 확인해주세요.");
				return lRet;
			}
		}
		
		lRet = 1;
		ON_DRAW();
		return lRet;
	}
	
	//------------------------------------------------------------------
	void GmSms_Sts_Cnt(void)
	{
		char szTmp[256];
		long i = 0;
		long idx = 0;
		long Snd_Cnt = 0;
		long Reserve_Cnt = 0;
		long Etc_Cnt = 0;
		handle hdb = NULL;
		handle hstmt = NULL;
		SQLITE sql = NewSqLite();

		hdb = sql->Open(sql);
		if( hdb == NULL )
		{
			goto Finally;
		}
		
		hstmt = sql->CreateStatement(sql, "SELECT GMTR_SEND_STS FROM GUM_SMS_TARGET WHERE CHK_YN = 'Y'" );
				
		if( hstmt == NULL )
		{
			PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}
		
		if(sql->Execute(sql) == FALSE)
		{
			PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}


		while( sql->Next(sql) )
		{
			idx = 0;
			Mem_Set( (byte*)szTmp, 0x00, sizeof(szTmp) );
			sql->GetValue(sql, idx++, 'U', (long*)szTmp, 20, DECRYPT);
				
			if( Str_Cmp(szTmp, "10") == 0 || Str_Cmp(szTmp, "50") == 0 )
			{
				Snd_Cnt++;
			}
			else if( Str_Cmp(szTmp, "30") == 0 )
			{
				Reserve_Cnt++;
			}
			else
			{
				Etc_Cnt++;
			}
		}
	
Finally:

		DelSqLite(sql);
		
		//PRINT(">>>>>>>>>> Snd_Cnt : %d, Reserve_Cnt : %d, Etc_Cnt : %d",Snd_Cnt,Reserve_Cnt,Etc_Cnt);
		//UI 적용 우선순위
		//1.대상선정,발송실패,예약 이외의 상태 값인 경우를 체크 했을 경우
		//2.예약인 대상을 선택했을 경우
		//3.대상선정,발송실패 대상을 선택했을 경우
		if( Etc_Cnt > 0 )
		{
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(BID_SND),  TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(BID_DELETE),  TRUE);

			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA25),  FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(BID_RSRVCNCL),  FALSE);

			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_SND), TRUE );
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_SND), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_DELETE), TRUE );
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_DELETE), FALSE );

			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA25), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_RSRVCNCL), FALSE );

			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA2+1), TRUE );
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA2+1), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA5), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_CALENDAR), TRUE );
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_CALENDAR), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA12+1), TRUE );
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA12+1), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA2), TRUE );
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA2), FALSE );
		}
		else if( Reserve_Cnt > 0 )
		{
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(BID_SND),  FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(BID_DELETE),  FALSE);

			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA25),  TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(BID_RSRVCNCL),  TRUE);

			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_SND), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_DELETE), FALSE );

			if( Snd_Cnt > 0 )
			{
				DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA25), FALSE );
				DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_RSRVCNCL), TRUE );
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_RSRVCNCL), FALSE );
			}
			else
			{
				DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA25), FALSE );
				DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_RSRVCNCL), FALSE );
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_RSRVCNCL), TRUE );
			}

			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA2+1), TRUE );
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA2+1), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA5), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_CALENDAR), TRUE );
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_CALENDAR), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA12+1), TRUE );
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA12+1), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA2), TRUE );
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA2), FALSE );
		}
		else if( Snd_Cnt > 0 )
		{
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(BID_SND),  TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(BID_DELETE),  TRUE);

			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA25),  FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(BID_RSRVCNCL),  FALSE);

			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_SND), FALSE );
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_SND), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_DELETE), FALSE );
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_DELETE), TRUE );

			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA25), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_RSRVCNCL), FALSE );

			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA2+1), FALSE );
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA2+1), TRUE );

			if( Str_Cmp(EditCtrl_GetStr( Get_hDlgCtrlByID(CMB_DATA2)), "즉시발송") == 0 )
			{
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_SND), "즉시발송");

				EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA5), "" );
				EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA12), "" );
				EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA2), "" );
				
				DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA5), TRUE );
				DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_CALENDAR), TRUE );
				DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA12), TRUE );
				DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA12+1), TRUE );
				DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA2), TRUE );
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_CALENDAR), FALSE );
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA12), FALSE );
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA12+1), FALSE );
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA2), FALSE );
			}
			else
			{
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_SND), "예약발송");

				DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA5), FALSE );
				DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_CALENDAR), FALSE );
				DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA12), FALSE );
				DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA12+1), FALSE );
				DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA2), FALSE );
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_CALENDAR), TRUE );
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA12), TRUE );
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA12+1), TRUE );
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA2), TRUE );
			}
		}
		else
		{
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(BID_SND),  TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(BID_DELETE),  TRUE);

			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA25),  FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(BID_RSRVCNCL),  FALSE);

			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_SND), TRUE );
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_SND), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_DELETE), TRUE );
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_DELETE), FALSE );

			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA25), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_RSRVCNCL), FALSE );

			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA2+1), TRUE );
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA2+1), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA5), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_CALENDAR), TRUE );
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_CALENDAR), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA12+1), TRUE );
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA12+1), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA2), TRUE );
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA2), FALSE );
		}

		//임의의 곳으로 액티브 포커스 이동.
		Dialog_SetActiveCtrl(this->m_hDlg, Get_iDlgCtrlByID(BID_TAB1));

		ON_DRAW();
		return;
	}
	
	//---------------------------------------------------------------------------------------------------------------
	void Grid_QuickList(void)
	{
		handle h = NULL;
		handle hData = NULL;
		handle hHead = NULL;
		char key[32];
		char val[32];
		long i, j;
		long col_count;
		long col_height;
		long start_position;
		
		char col_name[5][32] = {"동명", "주소", "전화번호", "", ""};
		//필드 간격 조정
		char col_weight[5][10] = {"4","7","4","0","0"};
		char col_align[5][10]  = {"left", "left", "left","", ""};
	
		h = JSON_Create( JSON_Object );
		if (h)
		{
			hData = JSON_Create( JSON_Object );
			if(hData == NULL)
			{
				goto Finally;
			}

			JSON_SetValue	(hData	, 'C', "list_type"	, "GridListView");
			//재 호출했을때, 이전 위치를 기억하고 있으려면 매 호출시 마다
			//true를 해 주어야 한다.
			//만약 종류가 다른 뷰를 호출할 경우, 문제가 되므로 반드시 매번 호출시
			//개별 판단하여 제어를 해야 한다.
			JSON_SetValue	(hData	, 'C', "list_position_save"	, "true");		//true/false
			
			col_count = 3;
			JSON_SetValue	(hData	, 'X', "col_count"			, &col_count);

			col_height = 250;
			JSON_SetValue	(hData	, 'X', "col_height"			, &col_height);

			start_position = m_lpage_C*ROW_C + m_nActIndex_C;
			JSON_SetValue	(hData	, 'X', "start_position"		, &start_position);
			
			JSON_SetValue	(hData	, 'C', "bind_type"	, "query");				//json or query
			JSON_SetValue	(hData	, 'C', "dbname"		, "APP_DBF/SCGGAS.db");
			
			if( g_nAddrFlag == 0 )
			{
				JSON_SetValue	(hData	, 'C', "query",
	"SELECT TOWN, CASE WHEN Length(Trim(CO_LIVE_NM))+Length(Trim(BLD_NM)) > 0 THEN \
 ifnull(CO_LIVE_NM,'') ||' '|| ifnull(BLD_NM,'') ||'-'|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') ELSE  \
 ifnull(ADDR1_M,'') ||'-'|| ifnull(ADDR1_S,'') ||' '|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') END \
, CASE WHEN (LENGTH(ifnull(TRIM(SMS_CP_DDD),'')) + LENGTH(ifnull(TRIM(SMS_CP_EXN),'')) + LENGTH(ifnull(TRIM(SMS_CP_NUM),''))) > 3 \
THEN ifnull(SMS_CP_DDD, '') ||'-'|| ifnull(SMS_CP_EXN, '') ||'-'|| ifnull(SMS_CP_NUM, '') \
ELSE ifnull(CP_DDD, '') ||'-'|| ifnull(CP_EXN, '') ||'-'|| ifnull(CP_NUM, '') END \
FROM GUMDATA ORDER BY DONG_ORD, HOUSE_NUM_ORD, MTR_COURSE"
								);
			}
			else
			{
				JSON_SetValue	(hData	, 'C', "query",
	"SELECT TOWN, CASE WHEN Length(Trim(CO_LIVE_NM))+Length(Trim(BLD_NM)) > 0 THEN \
 ifnull(CO_LIVE_NM,'') ||' '|| ifnull(BLD_NM,'') ||'-'|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') ELSE  \
ifnull(NEW_ADDR_M,'') ||'-'|| ifnull(NEW_ADDR_S,'') ||' '|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') END \
, CASE WHEN (LENGTH(ifnull(TRIM(SMS_CP_DDD),'')) + LENGTH(ifnull(TRIM(SMS_CP_EXN),'')) + LENGTH(ifnull(TRIM(SMS_CP_NUM),''))) > 3 \
THEN ifnull(SMS_CP_DDD, '') ||'-'|| ifnull(SMS_CP_EXN, '') ||'-'|| ifnull(SMS_CP_NUM, '') \
ELSE ifnull(CP_DDD, '') ||'-'|| ifnull(CP_EXN, '') ||'-'|| ifnull(CP_NUM, '') END \
FROM GUMDATA ORDER BY DONG_ORD, HOUSE_NUM_ORD, MTR_COURSE"
								);
			}
			
			hHead = JSON_Create( JSON_Array );
			if(hHead == NULL)
			{
				goto Finally;
			}		
	
			for (i=0; i<col_count; i++)
			{
				JSON_AddArrayItem(hHead);
				JSON_SetArrayItem(hHead, 'C', "col_head"	, col_name[i]);
				JSON_SetArrayItem(hHead, 'C', "col_weight"	, col_weight[i]);
				JSON_SetArrayItem(hHead, 'C', "col_align"	, col_align[i]);
			}
			
			JSON_Attach 	(hData	, "head"				, hHead);
			
			JSON_SetValue	(h		, 'C', "title"			, "문자검침 등록/변경");
			JSON_SetValue	(h		, 'C', "method"			, "ListViewActivity");
			JSON_Attach 	(h		, "data"				, hData);
		
			System_Call		("Native_System_Call" , JSON_toString(h));
		}
		
	Finally:
	
		if (h)
		{
			JSON_Finalize(h);
		}	
	
		if (hData)
		{
			JSON_Finalize(hData);
		}
			
		if (hHead)
		{
			JSON_Finalize(hHead);
		}	
	}
}



