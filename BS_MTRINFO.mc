/*----------------------------------------------------------------------------------
	Project Name:
	Smart Application : 카드 기본폼
	Smart Version : Smart 1.0
	Copyright(c) 2014  ValueCMD Co., Ltd.
----------------------------------------------------------------------------------*/
card BS_MTRINFO
{
	#include <include.h>
	#include "globalcard.h"
	#include "SQL.lib"
	#include "Calendar.h"
	
//	#define USE_ON_EXIT
	#define USE_ON_CHAR
//	#define USE_ON_KEY
//	#define USE_ON_DRAW
//	#define USE_ON_TIMER
	#define USE_ON_POINTING
	#define USE_ON_SELECT

	#include "DefEvent.h"
	
	//BUTTON ID define
	BEGIN_BUTTON_ID()
		DEF_BUTTON_ID ( BID_FEE )		//요금
		DEF_BUTTON_ID ( BID_GR )		//계량기
		DEF_BUTTON_ID ( BID_NOBS )		//미점검
		DEF_BUTTON_ID ( BID_BS )		//계량기점검
		DEF_BUTTON_ID ( BID_PREVLST )	//연소기(보일러) 리스트
		DEF_BUTTON_ID ( BID_NEXTLST )	//연소기(보일러) 리스트
		DEF_BUTTON_ID ( BID_BS2 )		//연소기(보일러)점검
		DEF_BUTTON_ID ( BID_COMPLETE )	//완료
		DEF_BUTTON_ID ( BID_PREVPG )	//◀(계량기변경)
		DEF_BUTTON_ID ( BID_NEXTPG )	//▶(계량기변경)
		DEF_BUTTON_ID ( BID_DELCANCEL )	//삭제취소
		DEF_BUTTON_ID ( BID_DELETE )	//삭제
		DEF_BUTTON_ID ( BID_CHANGE )	//수정
		DEF_BUTTON_ID ( BID_NEW )		//신규
		DEF_BUTTON_ID ( BID_MEMO )		//메모
//신규등록
		DEF_BUTTON_ID ( BID_BOIL )		//보일러
		DEF_BUTTON_ID ( BID_BURN )		//연소기
		DEF_BUTTON_ID ( BID_CLOSE )
//보일러 수정
		DEF_BUTTON_ID ( BID_CANCEL )
		DEF_BUTTON_ID ( BID_SAVE )
		DEF_BUTTON_ID ( BID_SCHDL )
		DEF_BUTTON_ID ( BID_WRITE1 )		//
		DEF_BUTTON_ID ( BID_WRITE2 )		//
//연소기 수정
		DEF_BUTTON_ID ( BID_CANCEL2 )
		DEF_BUTTON_ID ( BID_SAVE2 )
		DEF_BUTTON_ID ( BID_SCHDL2 )
		DEF_BUTTON_ID ( BID_WRITE3 )		//
//화면 상단 공통 메뉴 모음
		DEF_BUTTON_ID ( BID_HOME )		//홈
		DEF_BUTTON_ID ( BID_MENU )		//메뉴
		DEF_BUTTON_ID ( BID_KEYBOARD )	//키보드
		DEF_BUTTON_ID ( BID_SCREEN )	//화면 상하
		DEF_BUTTON_ID ( BID_CMMNWORK )	//공통업무
		DEF_BUTTON_ID ( BID_PREV )		//이전
		DEF_BUTTON_ID ( BID_EXIT )		//종료
		
		DEF_BUTTON_ID ( BID_DETA_LOC ) 
		
	END_BUTTON_ID()
	
	BEGIN_OBJECT_ID()
		DEF_OBJECT_ID ( TXT_TITLE )		//타이틀
		DEF_OBJECT_ID ( TXT_BSOUT )		//제외사유
		DEF_OBJECT_ID ( TXT_GOO   )		//구
		DEF_OBJECT_ID ( TXT_RATE  )		//등급
		DEF_OBJECT_ID ( TXT_MODEL )		//모델
		DEF_OBJECT_ID ( TXT_OBJNUM)		//기물번호
		DEF_OBJECT_ID ( TXT_GYE   )		//계
		DEF_OBJECT_ID ( TXT_BO    )		//보
		DEF_OBJECT_ID ( TXT_OBJECT)		//상품
		DEF_OBJECT_ID ( TXT_STATE )		//상태
		DEF_OBJECT_ID ( TXT_COMPANY )	//상호
		DEF_OBJECT_ID ( TXT_GR    )		//계량기
		DEF_OBJECT_ID ( TXT_RSLT  )		//점검 결과 표시
		DEF_OBJECT_ID ( TXT_DATA1 )
		DEF_OBJECT_ID ( TXT_DATA2 )
		DEF_OBJECT_ID ( TXT_DATA3 )
		DEF_OBJECT_ID ( TXT_DATA4 )
		DEF_OBJECT_ID ( TXT_DATA5 )
		DEF_OBJECT_ID ( TXT_DATA6 )
		DEF_OBJECT_ID ( TXT_DATA7 )
		DEF_OBJECT_ID ( TXT_DATA8 )
		DEF_OBJECT_ID ( TXT_DATA9 )
		DEF_OBJECT_ID ( TXT_DATA10 )
		DEF_OBJECT_ID ( TXT_PAGE   )		//계량기페이지
		DEF_OBJECT_ID ( TXT_PAGELST)		//리스트페이지
//보일러 수정
		DEF_OBJECT_ID ( TXT_DATA11 )
		DEF_OBJECT_ID ( TXT_DATA12 )
		DEF_OBJECT_ID ( TXT_DATA13 )
		DEF_OBJECT_ID ( TXT_DATA14 )
		DEF_OBJECT_ID ( TXT_DATA15 )
		DEF_OBJECT_ID ( TXT_DATA16 )
		DEF_OBJECT_ID ( TXT_DATA17 )
		DEF_OBJECT_ID ( TXT_DATA18 )
		DEF_OBJECT_ID ( TXT_DATA19 )
		DEF_OBJECT_ID ( TXT_DATA20 )
		DEF_OBJECT_ID ( TXT_DATA21 )
		DEF_OBJECT_ID ( TXT_DATA30 )
		DEF_OBJECT_ID ( TXT_DATA31 )
		DEF_OBJECT_ID ( TXT_DATA32 )
		DEF_OBJECT_ID ( TXT_DATA33 )
//연소기 수정
		DEF_OBJECT_ID ( TXT_DATA22 )
		DEF_OBJECT_ID ( TXT_DATA23 )
		DEF_OBJECT_ID ( TXT_DATA24 )
		DEF_OBJECT_ID ( TXT_DATA25 )
		DEF_OBJECT_ID ( TXT_DATA26 )
		DEF_OBJECT_ID ( TXT_DATA27 )
		DEF_OBJECT_ID ( TXT_DATA28 )
		DEF_OBJECT_ID ( TXT_DATA29 )
		DEF_OBJECT_ID ( TXT_DATA34 )
		DEF_OBJECT_ID ( TXT_DATA35 )
		DEF_OBJECT_ID ( TXT_DATA36 )
		DEF_OBJECT_ID ( TXT_DATA37 )
//사회복지시설
		DEF_OBJECT_ID ( TXT_DATA38 )

//시공사
		DEF_OBJECT_ID ( TXT_WORKFIRM )
		DEF_OBJECT_ID ( TXT_DATA39 )
//서류접수
		DEF_OBJECT_ID ( TXT_WORKYMD )
		DEF_OBJECT_ID ( TXT_DATA40 )

//연소기 위치
		DEF_OBJECT_ID ( TXT_LOCNM )
		DEF_OBJECT_ID ( TXT_DATA41 )
		
//보일러 수정
		DEF_OBJECT_ID ( EDT_DATA1 )
		DEF_OBJECT_ID ( EDT_DATA2 )
		DEF_OBJECT_ID ( EDT_DATA3 )
		DEF_OBJECT_ID ( EDT_DATA7 )
		DEF_OBJECT_ID ( EDT_DATA8 )
		DEF_OBJECT_ID ( EDT_DATA9 )
//연소기 수정
		DEF_OBJECT_ID ( EDT_DATA4 )
		DEF_OBJECT_ID ( EDT_DATA5 )
		DEF_OBJECT_ID ( EDT_DATA6 )
		DEF_OBJECT_ID ( EDT_DATA10 )
		DEF_OBJECT_ID ( EDT_DATA11 )
		DEF_OBJECT_ID ( EDT_DATA12 )

		DEF_OBJECT_ID ( ID_TBLLIST )		//연소기
		
		DEF_OBJECT_ID ( ICON_TITLE )
		
		DEF_OBJECT_ID ( TXT_DETA_LOC )
		DEF_OBJECT_ID ( EDT_DETA_LOC )
		
		
		DEF_OBJECT_ID ( CMB_DATA1 )
//보일러 수정
		DEF_OBJECT_ID ( CMB_DATA2 = CMB_DATA1+3 )
		DEF_OBJECT_ID ( CMB_DATA3 = CMB_DATA2+3 )
		DEF_OBJECT_ID ( CMB_DATA4 = CMB_DATA3+3 )
		DEF_OBJECT_ID ( CMB_DATA5 = CMB_DATA4+3 )
		DEF_OBJECT_ID ( CMB_DATA6 = CMB_DATA5+3 )
//연소기 수정
		DEF_OBJECT_ID ( CMB_DATA7 = CMB_DATA6+3 )
		DEF_OBJECT_ID ( CMB_DATA8 = CMB_DATA7+3 )
		DEF_OBJECT_ID ( CMB_DATA9 = CMB_DATA8+3 )
//사회복지시설
		DEF_OBJECT_ID ( CMB_DATA10 = CMB_DATA9+3 )
	END_OBJECT_ID()
	
	//-------------------------------------------------------------------------------------------------	
	//	Table정의에 관련된 내용들(연소기 리스트)
	//-------------------------------------------------------------------------------------------------
	/*
	#define		ROW 	    4				// table의 행개수
	#define		COL 	    6				// table의 열개수
	#define		GRID_H		(CHT+10)		// table 행 높이
	#define		GRID_H_P	(CHT+22)		// table 행 높이 PDA
	#define		GRID_CLR	TRANSPARENT   	// table 클리어 color
	#define		GRID_X		STARTX 			// table 시작x좌표
	#define		MAXCHAR		51 			    // table에 들어갈수 있는 최대  char 길이
	#define		GRID_Y		STARTY+510 	    // table 시작y좌표
	#define		GRID_Y_P	STARTY+410      // table 시작y좌표
	#define		GRID_ENDY	(GRID_Y+(ROW+1)*GRID_H) //table마지막 row의 Y값
	#define		GRID_ENDY_P	(GRID_Y_P+(ROW+1)*GRID_H) //table마지막 row의 Y값 PDA
	*/
	
	#define		ROW 	    3				// table의 행개수
	#define		COL 	    7				// table의 열개수
	#define		GRID_H		(CHT+10)		// table 행 높이
	#define		GRID_H_P	(CHT+22)		// table 행 높이 PDA
	#define		GRID_CLR	TRANSPARENT   	// table 클리어 color
	#define		GRID_X		STARTX 			// table 시작x좌표
	#define		MAXCHAR		51 			    // table에 들어갈수 있는 최대  char 길이
	#define		GRID_Y		STARTY+560 	    // table 시작y좌표
	#define		GRID_Y_P	STARTY+460      // table 시작y좌표
	#define		GRID_ENDY	(GRID_Y+(ROW+1)*GRID_H) //table마지막 row의 Y값
	#define		GRID_ENDY_P	(GRID_Y_P+(ROW+1)*GRID_H) //table마지막 row의 Y값 PDA
	
	char	m_szTableBuf [COL*(ROW+1)*MAXCHAR]; // 각 CELL에 들어가 텍스트 내용을 담은 버퍼
		
	Column m_stGridTitle[] = {
		{""          , CWD*4   , EDITALIGN_CENTER|EDITALIGN_MIDDLE, TABLE_TEXT, 0},
		{"종류"      , CWD*12  , EDITALIGN_CENTER|EDITALIGN_MIDDLE, TABLE_TEXT, 0},
		{"용량"      , CWD*9   , EDITALIGN_CENTER|EDITALIGN_MIDDLE, TABLE_TEXT, 0},
		{"위치"      , CWD*9+23, EDITALIGN_CENTER|EDITALIGN_MIDDLE, TABLE_TEXT, 0},
		{"결과"      , CWD*5   , EDITALIGN_CENTER|EDITALIGN_MIDDLE, TABLE_TEXT, 0},
		{"계량기번호", CWD*0   , EDITALIGN_CENTER|EDITALIGN_MIDDLE, TABLE_TEXT, 0},
		{"연소기번호", CWD*0   , EDITALIGN_CENTER|EDITALIGN_MIDDLE, TABLE_TEXT, 0}
	};


	#define INIT_MAIN	 1
	#define INIT_BURNEW  2
	#define INIT_BOILCHG 3
	#define INIT_BURNCHG 4
	
	long m_lPrev;
	long m_bFirst;
	long m_lEditCtrlIndex = -1;
	long m_lActIndex;
	long m_lSelIndex = -1;
	long m_lpage = 0;
	long m_lLstpage = 0;
	long m_ltotcnt = 0;
	long m_ltotLstcnt = 0;
	long m_lDelFlag = 0;
	char m_szCnt_page[10];			//계량기 페이지 표시 변수
	char m_szLstCnt_page[10];		//연소기 페이지 표시 변수
	long m_lActiveIndex;
		
	void SetStyle(void);
	void SetBtnImg(void);
	void SetCombo(void);
	void SetData(void);
	void SetBurData(void);
	void SetClickData(void);
	void SetClickNodel(void);
	void REDRAW(void);
	void BOIL_DRAW(void);
	void BURN_DRAW(void);
	void Del_Bur(void);
	bool CHG_Boil(void);
	bool CHG_Bur(void);
	bool Save_Chk(void);
	bool Save_Result(void);
	void Del_PipeData(void);
	long SearchStr(char *Str, CodeTable *CT);	//코드 값을 찾는다.
	long SearchCD(char *CD, CodeTable *CT);	//코드 값을 찾는다.
	void PrevPG(void);
	void NextPG(void);
	
	SysButCtrl SysButRes_MAIN[] =
	 {
		  SYS_BUT_IMG (  BTNX_1, BTNY_1, BTNWD_1, BTNHT_1, 0, 0, BUTSTY_BOLD , 0, 0, 0, OBJ_BUT, GID_HOME,  0),
		  SYS_BUT_IMG (  BTNX_2, BTNY_1, BTNWD_1, BTNHT_1, 0, 0, BUTSTY_BOLD , 0, 0, 0, OBJ_BUT, GID_KEYBOARD,  0),
		  SYS_BUT_IMG (  BTNX_3, BTNY_1, BTNWD_1, BTNHT_1, 0, 0, BUTSTY_BOLD , 0, 0, 0, OBJ_BUT, GID_SCREEN, 0),
		  SYS_BUT_IMG (  BTNX_4, BTNY_1, BTNWD_1, BTNHT_1, 0, 0, BUTSTY_BOLD , 0, 0, 0, OBJ_BUT, GID_CMMNWK,  0),
		  SYS_BUT_IMG (  BTNX_5, BTNY_1, BTNWD_1, BTNHT_1, 0, 0, BUTSTY_BOLD , 0, 0, 0, OBJ_BUT, GID_VMEXIT, 0),
		  SYS_BUT_IMG (  BTNX_6, BTNY_2, BTNWD_2, BTNHT_2, 0, 0, BUTSTY_BOLD|BUTSTY_BORDER , 0, TRANSPARENT, TRANSPARENT, OBJ_BUT, GID_MENU, 0),
		  SYS_BUT_IMG (  BTNX_7, BTNY_2, BTNWD_2, BTNHT_2, 0, 0, BUTSTY_BOLD|BUTSTY_BORDER , 0, TRANSPARENT, TRANSPARENT, OBJ_BUT, GID_PREV, 0),
	 };
	
	// 메인 다이얼로그
	//---------------------------------------------------------------
	DlgObject	DlgRes[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_ICON(0, BTNY_2, ICON_TITLE, ""),
		//타이틀
		DLG_TEXT(TX, TY, STWD, STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "계량기 정보"),
			
		DLG_BUTTON(STARTX,     STARTY+450, 300, 55, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, GREEN, CALL_FUNC , "", BID_FEE, "요금"),
		DLG_BUTTON(STARTX+700, STARTY+450, 300, 55, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BLUE, CALL_FUNC , "", BID_BS, "점검"),
		DLG_BUTTON(STARTX,     STARTY+830, 250, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_PREVPG, "◀"),
		DLG_BUTTON(STARTX+250, STARTY+830, 250, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_NEXTPG, "▶"),
		DLG_BUTTON(STARTX+500, STARTY+830, 250, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_BS2, "점검"),
		DLG_BUTTON(STARTX+750, STARTY+830, 250, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_COMPLETE, "완료"),
		// DLG_BUTTON(STARTX,     STARTY+830, 500, 69, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, ORANGE        , CALL_FUNC , "", BID_DELCANCEL, "삭제취소"),
		// DLG_BUTTON(STARTX+500, STARTY+830, 250, 69, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_DELETE, "삭제"),
		DLG_BUTTON(STARTX+750, STARTY+760, 250, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CHANGE, "수정"),
		// DLG_BUTTON(STARTX+750, STARTY+830, 250, 69, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_NEW, "신규"),
		
		DLG_TEXT(STARTX,      STARTY+65, 250, 60, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_PAGE, m_szCnt_page),
		DLG_TEXT(STARTX+250,  STARTY+65, 250, 60, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, BRIGHTPINK,  TXT_BSOUT, "제외사유"),
		DLG_TEXT(STARTX,     STARTY+125, 100, 55, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK,   TXT_GOO, "구"),
		DLG_TEXT(STARTX+100, STARTY+125, 150, 55, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK,   TXT_RATE, "등급"),
		DLG_TEXT(STARTX+250, STARTY+125, 325, 55, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK,   TXT_MODEL, "모델"),
		DLG_TEXT(STARTX+575, STARTY+125, 425, 55, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK,   TXT_OBJNUM, "기물번호"),
		DLG_TEXT(STARTX,     STARTY+180, 100, 55, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK,   TXT_GYE, "계"),
		DLG_TEXT(STARTX+100, STARTY+180, 150, 55, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA1, ""),
		DLG_TEXT(STARTX+250, STARTY+180, 325, 55, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA2, ""),
		DLG_TEXT(STARTX+575, STARTY+180, 425, 55, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA3, ""),
		DLG_TEXT(STARTX,     STARTY+235, 100, 55, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK,   TXT_BO, "보"),
		DLG_TEXT(STARTX+100, STARTY+235, 150, 55, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA4, ""),
		DLG_TEXT(STARTX+250, STARTY+235, 325, 55, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA5, ""),
		DLG_TEXT(STARTX+575, STARTY+235, 425, 55, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA6, ""),
		DLG_TEXT(STARTX,     STARTY+290, 130, 55, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK,   TXT_OBJECT, "상품"),
		DLG_TEXT(STARTX+130, STARTY+290, 570, 55, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA7, ""),
		DLG_TEXT(STARTX+700, STARTY+290, 130, 55, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK,   TXT_STATE, "상태"),
		DLG_TEXT(STARTX+830, STARTY+290, 170, 55, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA8, ""),
		DLG_TEXT(STARTX,     STARTY+345, 130, 55, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK,   TXT_COMPANY, "상호"),
		DLG_TEXT(STARTX+130, STARTY+345, 570, 55, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA9, ""),
		DLG_TEXT(STARTX+700, STARTY+345, 300, 55, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA10, ""),
		
		DLG_TEXT(STARTX,     STARTY+400, 500, 50, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK,   TXT_DATA38, "사회복지시설 여부"),
		
		DLG_TEXT(STARTX+300, STARTY+450, 200, 55, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, BRIGHTPINK,  TXT_GR, "계량기"),
		DLG_TEXT(STARTX+500, STARTY+450, 200, 55, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_RSLT, "미점검"),
		
		DLG_COMBO(STARTX+500, STARTY+65, 500, 290, 130, 60, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA1, 10),
		DLG_COMBO(STARTX+500, STARTY+400, 500, 290, 130, 50, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA10, 10),
		
		DLG_TEXT(STARTX,       STARTY+505, 250, 55, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_PAGELST, m_szLstCnt_page),
		DLG_BUTTON(STARTX+250, STARTY+505, 250, 55, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_MEMO, "메모"),
		DLG_BUTTON(STARTX+500, STARTY+505, 250, 55, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_PREVLST, "▲"),
		DLG_BUTTON(STARTX+750, STARTY+505, 250, 55, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_NEXTLST, "▼"),
		DLG_TABLE(GRID_X, GRID_Y, ROW, COL, 0, GRID_H, 1, GRID_H, SEL_ROW, MAXCHAR, m_stGridTitle, ID_TBLLIST, m_szTableBuf),
	};	
	
	// PDA 다이얼로그
	//---------------------------------------------------------------
	DlgObject	DlgRes_P[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_ICON(P_TTLTX, 0, ICON_TITLE, ""),
		//타이틀
		DLG_TEXT(P_TX, P_TY, P_STWD, P_STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, WHITE, TRANSPARENT, TXT_TITLE, "계량기 정보"),
		DLG_BUTTON(P_BTNX, P_BTNY, P_BTNWD, P_BTNHD, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", GID_PREV, ""),

		DLG_BUTTON(STARTX,     STARTY+270, 280, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, GREEN, CALL_FUNC , "", BID_FEE, "요금"),
		DLG_BUTTON(STARTX+720, STARTY+270, 280, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BLUE, CALL_FUNC , "", BID_BS, "점검"),
		DLG_TEXT(STARTX,       STARTY+340, 250, 70, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_PAGELST, m_szLstCnt_page),
		DLG_BUTTON(STARTX+250, STARTY+340, 250, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_MEMO, "메모"),
		DLG_BUTTON(STARTX+500, STARTY+340, 250, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_PREVLST, "▲"),
		DLG_BUTTON(STARTX+750, STARTY+340, 250, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_NEXTLST, "▼"),

		DLG_BUTTON(STARTX,     STARTY+720, 250, 90, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_PREVPG, "◀"),
		DLG_BUTTON(STARTX+250, STARTY+720, 250, 90, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_NEXTPG, "▶"),
		DLG_BUTTON(STARTX+500, STARTY+720, 250, 90, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_BS2, "점검"),
		DLG_BUTTON(STARTX+750, STARTY+720, 250, 90, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_COMPLETE, "완료"),
		DLG_BUTTON(STARTX,     STARTY+810, 250, 89, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, ORANGE        , CALL_FUNC , "", BID_DELCANCEL, "삭제\n취소"),
		DLG_BUTTON(STARTX+250, STARTY+810, 250, 89, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_DELETE, "삭제"),
		DLG_BUTTON(STARTX+500, STARTY+810, 250, 89, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CHANGE, "수정"),
		// DLG_BUTTON(STARTX+750, STARTY+810, 250, 89, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_NEW, "신규"),
		
		DLG_TEXT(STARTX,      STARTY-40, 250, 60, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_PAGE, m_szCnt_page),
		DLG_TEXT(STARTX+250,  STARTY-40, 250, 60, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, BRIGHTPINK,  TXT_BSOUT, "제외사유"),
		DLG_TEXT(STARTX,      STARTY+20, 100, 50, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK,   TXT_GOO, "구"),
		DLG_TEXT(STARTX+100,  STARTY+20, 150, 50, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK,   TXT_RATE, "등급"),
		DLG_TEXT(STARTX+250,  STARTY+20, 325, 50, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK,   TXT_MODEL, "모델"),
		DLG_TEXT(STARTX+575,  STARTY+20, 425, 50, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK,   TXT_OBJNUM, "기물번호"),
		DLG_TEXT(STARTX,      STARTY+70, 100, 50, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK,   TXT_GYE, "계"),
		DLG_TEXT(STARTX+100,  STARTY+70, 150, 50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA1, ""),
		DLG_TEXT(STARTX+250,  STARTY+70, 325, 50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA2, ""),
		DLG_TEXT(STARTX+575,  STARTY+70, 425, 50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA3, ""),
		DLG_TEXT(STARTX,     STARTY+120, 100, 50, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK,   TXT_BO, "보"),
		DLG_TEXT(STARTX+100, STARTY+120, 150, 50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA4, ""),
		DLG_TEXT(STARTX+250, STARTY+120, 325, 50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA5, ""),
		DLG_TEXT(STARTX+575, STARTY+120, 425, 50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA6, ""),
		DLG_TEXT(STARTX,     STARTY+170, 130, 50, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK,   TXT_OBJECT, "상품"),
		DLG_TEXT(STARTX+130, STARTY+170, 565, 50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA7, ""),
		DLG_TEXT(STARTX+695, STARTY+170, 130, 50, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK,   TXT_STATE, "상태"),
		DLG_TEXT(STARTX+825, STARTY+170, 175, 50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA8, ""),
		DLG_TEXT(STARTX,     STARTY+220, 130, 50, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK,   TXT_COMPANY, "상호"),
		DLG_TEXT(STARTX+130, STARTY+220, 565, 50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA9, ""),
		DLG_TEXT(STARTX+695, STARTY+220, 305, 50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA10, ""),
		DLG_TEXT(STARTX+280, STARTY+270, 220, 70, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, BRIGHTPINK,  TXT_GR, "계량기"),
		DLG_TEXT(STARTX+500, STARTY+270, 220, 70, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_RSLT, "미점검"),
		
		DLG_COMBO(STARTX+500,   STARTY-40, 500, 290, 130, 60, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA1, 10),
		
		DLG_TABLE(GRID_X, GRID_Y_P, ROW, COL, 0, GRID_H_P, 1, GRID_H_P, SEL_ROW, MAXCHAR, m_stGridTitle, ID_TBLLIST, m_szTableBuf),

	};

	//  다이얼로그:연소기,보일러 신규등록
	//---------------------------------------------------------------
	DlgObject	DlgRes_BURNEW[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),
		DLG_ICON(POPTX, POPTY, ICON_TITLE, ""),
		DLG_TEXT(POPTX, POPTY, POPSTWD, POPSTHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "신규 등록"),
		DLG_BUTTON(BTNX_7, P_BTNY, BTNWD_2, BTNHT_2, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_CLOSE, ""),

		DLG_BUTTON(STARTX,		STARTY+300, 400, 150, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_BOIL,  "보일러"),
		DLG_BUTTON(STARTX+600,  STARTY+300, 400, 150, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_BURN,  "연소기"),
	};
	
	//  다이얼로그:연소기,보일러 신규등록
	//---------------------------------------------------------------
	DlgObject	DlgRes_BURNEW_P[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),
		DLG_ICON(P_TTLTX, 0, ICON_TITLE, ""),
		DLG_TEXT(P_TX, P_TY, P_STWD, P_STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "신규 등록"),
		DLG_BUTTON(P_BTNX, P_BTNY, P_BTNWD, P_BTNHD, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_CLOSE, ""),

		DLG_BUTTON(STARTX,		STARTY+300, 400, 150, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_BOIL,  "보일러"),
		DLG_BUTTON(STARTX+600,  STARTY+300, 400, 150, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_BURN,  "연소기"),
	};
	
	//  다이얼로그:보일러 수정
	//---------------------------------------------------------------
	DlgObject	DlgRes_BOILCHG[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),
		DLG_ICON(POPTX, POPTY, ICON_TITLE, ""),
		DLG_TEXT(POPTX, POPTY, POPSTWD, POPSTHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "보일러 수정"),
		DLG_BUTTON(BTNX_7, P_BTNY, BTNWD_2, BTNHT_2, 0, 0, EDITSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_CANCEL, ""),
		
		DLG_TEXT ( STARTX,      STARTY-29, 250, 70, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA11, "종류"),
		DLG_TEXT ( STARTX,      STARTY+41, 250, 70, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA12, "제조사명"),
		DLG_TEXT ( STARTX,     STARTY+111, 250, 70, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA13, "모델명"),
		DLG_BUTTON(STARTX+250,  STARTY+111, 750, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_WRITE1,  ""),	
		DLG_TEXT( STARTX+250,  STARTY+111, 750, 70, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA1, ""),
		DLG_TEXT ( STARTX,     STARTY+181, 250, 70, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA14, "용량"),
		DLG_EDIT( STARTX+250,  STARTY+181, 300, 70, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA2, 10,  ""),
		DLG_COMBO (STARTX+550, STARTY+181, 450, 200, 175, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA4, 30),

		DLG_TEXT ( STARTX,     STARTY+251, 250, 70, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA20, "설치일자"),
		//DLG_TEXT ( STARTX+250, STARTY+280, 300, 70, 0,0, 0, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, TXT_DATA21, ""),
		//DLG_BUTTON(STARTX+550, STARTY+280, 150,  70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SCHDL, "▼"),
		DLG_EDIT( STARTX+250,  STARTY+251, 200, 70, 0, 0, EDITSTY_BOLD, 0, TXTFRCOLOR, EDTCTRLBK, EDT_DATA7, 4,  ""),
		DLG_TEXT(STARTX+450,   STARTY+251,  18, 40, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA30, ""),
		DLG_TEXT(STARTX+450,   STARTY+291,  18, 30, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA31, "."),
		DLG_EDIT( STARTX+468,  STARTY+251, 170, 70, 0, 0, EDITSTY_BOLD, 0, TXTFRCOLOR, EDTCTRLBK, EDT_DATA8, 2,  ""),
		DLG_TEXT(STARTX+638,   STARTY+251,  17, 40, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA32, ""),
		DLG_TEXT(STARTX+638,   STARTY+291,  17, 30, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA33, "."),
		DLG_EDIT( STARTX+655,  STARTY+251, 170, 70, 0, 0, EDITSTY_BOLD, 0, TXTFRCOLOR, EDTCTRLBK, EDT_DATA9, 2,  ""),
		DLG_BUTTON(STARTX+825, STARTY+251, 175, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, TXTFRCOLOR, PDAEDTCTRLBK, CALL_FUNC , "", BID_SCHDL, "▼"),

		DLG_TEXT  (STARTX,     STARTY+321, 270, 70, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DETA_LOC, "연소기위치"),
		DLG_BUTTON(STARTX+270, STARTY+321, 730, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_DETA_LOC,  ""),	
		DLG_EDIT  (STARTX+270, STARTY+321, 730, 70, 0,0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DETA_LOC, 50,  ""),

		// DLG_TEXT ( STARTX,     STARTY+321, 250, 70, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA15, "구분"),
		// DLG_TEXT ( STARTX+250, STARTY+321, 750, 70, 0,0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA16, ""),
		DLG_TEXT ( STARTX,     STARTY+391, 250, 70, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA17, "설치위치"),
		DLG_TEXT ( STARTX,     STARTY+461, 250, 70, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA18, "제조번호"),
		DLG_BUTTON(STARTX+250,  STARTY+461, 750, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_WRITE2,  ""),	
		DLG_TEXT( STARTX+250,  STARTY+461, 750, 70, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA3,  ""),

		DLG_TEXT ( STARTX,     STARTY+531, 250, 70, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA19, "형식"),	
		DLG_TEXT ( STARTX,     STARTY+601, 250, 70, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_WORKFIRM, "시 공 사 "),
		DLG_TEXT ( STARTX+250, STARTY+601, 750, 70, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA39,  ""),
		DLG_TEXT ( STARTX,     STARTY+671, 250, 70, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_WORKYMD, "서류접수"),
		DLG_TEXT( STARTX+250,  STARTY+671, 750, 70, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA40,  ""),
		
		DLG_COMBO (STARTX+250,  STARTY-29,  750, 200, 150, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA2, 30),
		DLG_COMBO (STARTX+250,  STARTY+41, 750, 200, 150, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA3, 30),
		DLG_COMBO (STARTX+250, STARTY+391, 750, 200, 150, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA5, 30),
		DLG_COMBO (STARTX+250, STARTY+531, 750, 200, 150, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA6, 30),
		
		DLG_TEXT  (STARTX,     STARTY+759, 270, 70, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA15, "구분"),
		DLG_TEXT  (STARTX+250, STARTY+759, 750, 70, 0,0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA16, ""),
		
		// DLG_BUTTON(STARTX+270, STARTY+769, 730, 60, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_DETA_LOC,  ""),	
		// DLG_EDIT  (STARTX+270, STARTY+769, 730, 60, 0,0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DETA_LOC, 50,  ""),
		
		DLG_BUTTON(STARTX,      STARTY+829, 500, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CANCEL,  "닫기"),
		DLG_BUTTON(STARTX+500,  STARTY+829, 500, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SAVE,  "저장"),
		
	};
	
	//  다이얼로그:보일러 수정
	//---------------------------------------------------------------
	DlgObject	DlgRes_BOILCHG_P[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),
		DLG_ICON(P_TTLTX, 0, ICON_TITLE, ""),
		DLG_TEXT(P_TX, P_TY, P_STWD, P_STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "보일러 수정"),
		DLG_BUTTON(P_BTNX, P_BTNY, P_BTNWD, P_BTNHD, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_CANCEL, ""),

		DLG_BUTTON(STARTX,      STARTY+750, 400, 100, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CANCEL,  "닫기"),
		DLG_BUTTON(STARTX+600,  STARTY+750, 400, 100, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SAVE,  "저장"),
		
		DLG_TEXT ( STARTX,      STARTY-40, 250, 80, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA11, "종류"),
		DLG_TEXT ( STARTX,      STARTY+40, 250, 80, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA12, "제조사명"),
		DLG_TEXT ( STARTX,     STARTY+120, 250, 80, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA13, "모델명"),
		DLG_EDIT( STARTX+250,  STARTY+120, 750, 80, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA1, 20,  ""),
		DLG_TEXT ( STARTX,     STARTY+200, 250, 80, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA14, "용량"),
		DLG_EDIT( STARTX+250,  STARTY+200, 300, 80, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA2, 10,  ""),

		DLG_TEXT ( STARTX,     STARTY+280, 250, 80, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA20, "설치일자"),
		DLG_EDIT( STARTX+250,  STARTY+280, 170, 80, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA7, 4,  ""),
		DLG_TEXT(STARTX+420,   STARTY+280,  20, 40, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA30, ""),
		DLG_TEXT(STARTX+420,   STARTY+320,  20, 40, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA31, "."),
		DLG_EDIT( STARTX+440,  STARTY+280, 170, 80, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA8, 2,  ""),
		DLG_TEXT(STARTX+610,   STARTY+280,  20, 40, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA32, ""),
		DLG_TEXT(STARTX+610,   STARTY+320,  20, 40, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA33, "."),
		DLG_EDIT( STARTX+630,  STARTY+280, 170, 80, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, EDT_DATA9, 2,  ""),
		DLG_BUTTON(STARTX+800, STARTY+280, 200, 80, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, TXTFRCOLOR, PDAEDTCTRLBK, CALL_FUNC , "", BID_SCHDL, "▼"),
		//DLG_TEXT ( STARTX+250, STARTY+280, 300, 70, 0,0, 0, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, TXT_DATA21, ""),
		//DLG_BUTTON(STARTX+550, STARTY+280, 150,  70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SCHDL, "▼"),

		DLG_TEXT ( STARTX,		STARTY+360, 250, 80, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA15, "구분"),
		DLG_TEXT ( STARTX+250,	STARTY+360, 750, 80, 0,0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA16, ""),

		DLG_TEXT ( STARTX,     STARTY+440, 250, 80, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA17, "설치위치"),
		DLG_TEXT ( STARTX,     STARTY+520, 250, 80, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA18, "제조번호"),
		DLG_EDIT( STARTX+250,  STARTY+520, 750, 80, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA3, 20,  ""),
		DLG_TEXT ( STARTX,     STARTY+600, 250, 80, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA19, "형식"),
		
		DLG_COMBO (STARTX+250,  STARTY-40, 750, 200, 200, 80, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA2, 30),
		DLG_COMBO (STARTX+250,  STARTY+40, 750, 200, 200, 80, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA3, 30),
		DLG_COMBO (STARTX+550, STARTY+200, 450, 200, 200, 80, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA4, 30),
		DLG_COMBO (STARTX+250, STARTY+440, 750, 200, 200, 80, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA5, 30),
		DLG_COMBO (STARTX+250, STARTY+600, 750, 200, 200, 80, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA6, 30),
	};
	
	//  다이얼로그:연소기 수정
	//---------------------------------------------------------------
	DlgObject	DlgRes_BURNCHG[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),
		DLG_ICON(POPTX, POPTY, ICON_TITLE, ""),
		DLG_TEXT(POPTX, POPTY, POPSTWD, POPSTHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "연소기 수정"),
		DLG_BUTTON(BTNX_7, P_BTNY, BTNWD_2, BTNHT_2, 0, 0, EDITSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_CANCEL2, ""),

		DLG_TEXT ( STARTX,	     STARTY-29, 300, 70, 0,0, 			 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA22, "종류"),
		DLG_TEXT ( STARTX,       STARTY+41, 300, 70, 0,0, 			 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA23, "제조사명"),
		DLG_TEXT ( STARTX,	    STARTY+111, 300, 70, 0,0, 			 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA24, "모델명"),
		DLG_BUTTON(STARTX+300,	STARTY+111, 700, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_WRITE3,  ""),	
		DLG_TEXT ( STARTX+300,	STARTY+111, 700, 70, 0,0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA4,   ""),
		DLG_TEXT ( STARTX,	    STARTY+181, 300, 70, 0,0, 			 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA25, "용량"),
		DLG_EDIT ( STARTX+300,	STARTY+181, 250, 70, 0,0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA5, 10,  ""),
		
		DLG_TEXT ( STARTX,      STARTY+251, 300, 70, 0,0, 			 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA26, "설치일자"),
		//DLG_TEXT ( STARTX+300,  STARTY+280, 525, 70, 0,0, 			 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA27, ""),
		//DLG_BUTTON(STARTX+825,  STARTY+280, 150, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SCHDL2,  "▼"),
		DLG_EDIT( STARTX+300,  STARTY+251, 200, 70, 0, 0, EDITSTY_BOLD, 0, TXTFRCOLOR, EDTCTRLBK, EDT_DATA10, 4,  ""),
		DLG_TEXT(STARTX+500,   STARTY+251,  18, 40, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA34, ""),
		DLG_TEXT(STARTX+500,   STARTY+291,  18, 30, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA35, "."),
		DLG_EDIT( STARTX+518,  STARTY+251, 145, 70, 0, 0, EDITSTY_BOLD, 0, TXTFRCOLOR, EDTCTRLBK, EDT_DATA11, 2,  ""),
		DLG_TEXT(STARTX+663,   STARTY+251,  17, 40, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA36, ""),
		DLG_TEXT(STARTX+663,   STARTY+291,  17, 30, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA37, "."),
		DLG_EDIT( STARTX+680,  STARTY+251, 145, 70, 0, 0, EDITSTY_BOLD, 0, TXTFRCOLOR, EDTCTRLBK, EDT_DATA12, 2,  ""),
		DLG_BUTTON(STARTX+825, STARTY+251, 175, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, TXTFRCOLOR, PDAEDTCTRLBK, CALL_FUNC , "", BID_SCHDL2, "▼"),
		
		DLG_TEXT ( STARTX,      STARTY+321, 300, 70, 0,0, 			 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DETA_LOC, "상세위치"),
		DLG_TEXT ( STARTX+300,  STARTY+321, 700, 70, 0,0, 			 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA29, ""),
		DLG_BUTTON(STARTX+300, STARTY+321, 700, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_DETA_LOC,  ""),	
		DLG_EDIT  (STARTX+300, STARTY+321, 700, 70, 0,0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DETA_LOC, 50,  ""),
		
		// DLG_TEXT  (STARTX,     STARTY+769, 270, 60, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DETA_LOC, "상세위치"),
		// DLG_BUTTON(STARTX+270, STARTY+769, 730, 60, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_DETA_LOC,  ""),	
		// DLG_EDIT  (STARTX+270, STARTY+769, 730, 60, 0,0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DETA_LOC, 50,  ""),

		// DLG_TEXT ( STARTX,      STARTY+321, 300, 70, 0,0, 			 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA28, "구분"),
		// DLG_TEXT ( STARTX+300,  STARTY+321, 700, 70, 0,0, 			 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA29, ""),

		DLG_TEXT ( STARTX,     STARTY+391, 300, 70, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA28, "구분"),
		DLG_TEXT ( STARTX+300, STARTY+391, 750, 70, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA29,  ""),

		// DLG_TEXT ( STARTX,     STARTY+391, 300, 70, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_LOCNM, "연소기위치"),
		// DLG_TEXT ( STARTX+300, STARTY+391, 750, 70, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA41,  ""),
		
				
		DLG_COMBO (STARTX+300,  STARTY-29, 700, 200, 175, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA7, 10),
		DLG_COMBO (STARTX+300,  STARTY+41, 700, 200, 175, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA8, 10),
		DLG_COMBO (STARTX+550,  STARTY+181, 450, 200, 175, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA9, 10),
		
		// DLG_TEXT  (STARTX,     STARTY+769, 270, 60, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DETA_LOC, "상세위치"),
		// DLG_BUTTON(STARTX+270, STARTY+769, 730, 60, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_DETA_LOC,  ""),	
		// DLG_EDIT  (STARTX+270, STARTY+769, 730, 60, 0,0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DETA_LOC, 50,  ""),
		
		DLG_BUTTON(STARTX,      STARTY+829, 500, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CANCEL2,  "닫기"),
		DLG_BUTTON(STARTX+500,  STARTY+829, 500, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SAVE2,  "저장"),	
	};
	
	//  다이얼로그:연소기 수정
	//---------------------------------------------------------------
	DlgObject	DlgRes_BURNCHG_P[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),
		DLG_ICON(P_TTLTX, 0, ICON_TITLE, ""),
		DLG_TEXT(P_TX, P_TY, P_STWD, P_STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "연소기 수정"),
		DLG_BUTTON(P_BTNX, P_BTNY, P_BTNWD, P_BTNHD, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_CANCEL2, ""),

		DLG_BUTTON(STARTX,      STARTY+500, 400, 100, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CANCEL2,  "닫기"),
		DLG_BUTTON(STARTX+600,  STARTY+500, 400, 100, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SAVE2,  "저장"),
		
		DLG_TEXT ( STARTX,	     STARTY-40, 300, 80, 0,0, 			 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA22, "종류"),
		DLG_TEXT ( STARTX,       STARTY+40, 300, 80, 0,0, 			 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA23, "제조사명"),
		DLG_TEXT ( STARTX,	    STARTY+120, 300, 80, 0,0, 			 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA24, "모델명"),
		DLG_EDIT ( STARTX+300,	STARTY+120, 700, 80, 0,0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA4, 20,  ""),
		DLG_TEXT ( STARTX,	    STARTY+200, 300, 80, 0,0, 			 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA25, "용량"),
		DLG_EDIT ( STARTX+300,	STARTY+200, 250, 80, 0,0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA5, 10,  ""),
		
		DLG_TEXT ( STARTX,      STARTY+280, 300, 80, 0,0, 			 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA26, "설치일자"),
		DLG_EDIT( STARTX+300,   STARTY+280, 200, 80, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA10, 4,  ""),
		DLG_TEXT(STARTX+500,    STARTY+280,  20, 40, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA34, ""),
		DLG_TEXT(STARTX+500,    STARTY+320,  20, 40, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA35, "."),
		DLG_EDIT( STARTX+520,   STARTY+280, 145, 80, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA11, 2,  ""),
		DLG_TEXT(STARTX+665,    STARTY+280,  20, 40, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA36, ""),
		DLG_TEXT(STARTX+665,    STARTY+320,  20, 40, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA37, "."),
		DLG_EDIT( STARTX+685,   STARTY+280, 145, 80, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA12, 2,  ""),
		DLG_BUTTON(STARTX+830,  STARTY+280, 170, 80, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, TXTFRCOLOR, PDAEDTCTRLBK, CALL_FUNC , "", BID_SCHDL2, "▼"),
		//DLG_TEXT ( STARTX+300,  STARTY+280, 525, 70, 0,0, 			 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA27, ""),
		//DLG_BUTTON(STARTX+825,  STARTY+280, 150, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SCHDL2,  "▼"),
		
		DLG_TEXT ( STARTX,      STARTY+360, 300, 80, 0,0, 			 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA28, "구분"),
		DLG_TEXT ( STARTX+300,  STARTY+360, 700, 80, 0,0, 			 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA29, ""),
				
		DLG_COMBO (STARTX+300,  STARTY-40, 700, 200, 170, 80, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA7, 10),
		DLG_COMBO (STARTX+300,  STARTY+40, 700, 200, 170, 80, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA8, 10),
		DLG_COMBO (STARTX+550,  STARTY+200, 450, 200, 170, 80, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA9, 10),
	};


	//----------------------------------------------------------------------
	bool	main (quad MsgType, quad wParam, quad lParam)
	{
		EVENT_HANDLER (MsgType, wParam, lParam);
		return TRUE;
	}
	
//┌─────────────────────────────────────┐
//│ 				   『	OnInit Function  』  				              │
//└─────────────────────────────────────┘
	void	OnInit(char bFirst)
	{
		m_bFirst = bFirst;
	
		switch (bFirst)
		{
			case INIT_MAIN:
				switch (theDevInfo.m_nType)
				{
					case FAMILY_PDA:	
						CREATE_DIALOG_OBJECT (DlgRes_P, SIZEOF(DlgRes_P));
						break;
					default:
						CREATE_GLOBAL_BUTTON (SysButRes_MAIN);
						CREATE_DIALOG_OBJECT (DlgRes, SIZEOF(DlgRes));
						break;
				}
				
				SetData();
				SetBurData();
				
				SetBtnImg();
				SetStyle();
				
				REDRAW();
				break;
			case INIT_BURNEW:
				switch (theDevInfo.m_nType)
				{
					case FAMILY_PDA:	
						CREATE_DIALOG_OBJECT (DlgRes_BURNEW_P, SIZEOF(DlgRes_BURNEW_P));
						break;
					default:
						CREATE_DIALOG_OBJECT (DlgRes_BURNEW, SIZEOF(DlgRes_BURNEW));
						break;
				}
				
				SetBtnImg();
				break;
			case INIT_BOILCHG:
				switch (theDevInfo.m_nType)
				{
					case FAMILY_PDA:	
						CREATE_DIALOG_OBJECT (DlgRes_BOILCHG_P, SIZEOF(DlgRes_BOILCHG_P));
						break;
					default:
						CREATE_DIALOG_OBJECT (DlgRes_BOILCHG, SIZEOF(DlgRes_BOILCHG));
						break;
				}
				
				SetBtnImg();
				SetCombo();
				SetStyle();
				BOIL_DRAW();
				break;
			case INIT_BURNCHG:
				switch (theDevInfo.m_nType)
				{
					case FAMILY_PDA:	
						CREATE_DIALOG_OBJECT (DlgRes_BURNCHG_P, SIZEOF(DlgRes_BURNCHG_P));
						break;
					default:
						CREATE_DIALOG_OBJECT (DlgRes_BURNCHG, SIZEOF(DlgRes_BURNCHG));
						break;
				}
				
				SetBtnImg();
				SetCombo();
				SetStyle();
				BURN_DRAW();
				break;
		}
	}

//------------------------------------------------------------------
//------------------------------------------------------------------
	void SetBtnImg(void)
	{
		void* h;
		
		if( m_bFirst == INIT_MAIN )
		{
			IconCtrl_SetImage(Get_hDlgCtrlByID(ICON_TITLE), 0, g_pImgMainTtl );		//타이틀
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_TITLE), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			
			if( theDevInfo.m_nType != FAMILY_PDA )
			{	
				//상단공통메뉴
				h = GetSysButHandle(GID_HOME);
				ButCtrl_SetImage( h,  g_pImgHomeI);
				ButCtrl_SetActiveImage( h,  g_pImgHomeA);
				
				h = GetSysButHandle(GID_KEYBOARD);
				ButCtrl_SetImage( h,  g_pImgKeybrdI);
				ButCtrl_SetActiveImage( h,  g_pImgKeybrdA);
				
				h = GetSysButHandle(GID_SCREEN);
				ButCtrl_SetImage( h,  g_pImgScreenI);
				ButCtrl_SetActiveImage( h,  g_pImgScreenA);
				
				h = GetSysButHandle(GID_CMMNWK);
				ButCtrl_SetImage( h,  g_pImgCmmnwrkI);
				ButCtrl_SetActiveImage( h,  g_pImgCmmnwrkA);
				
				h = GetSysButHandle(GID_VMEXIT);
				ButCtrl_SetImage( h,  g_pImgExitI);
				ButCtrl_SetActiveImage( h,  g_pImgExitA);
			}
		}
		else
		{
			IconCtrl_SetImage(Get_hDlgCtrlByID(ICON_TITLE), 0, g_pImgPopTtlL );		//타이틀
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_TITLE), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		}
	}

//-----------------------------------------------------------------
	void SetCombo(void)
	{
		char szSql[300];
		long i;
		
		if( m_bFirst == INIT_BOILCHG )
		{
			//종류
			// Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
			// SPRINT(szSql, "SELECT BURNER_KIND_NM FROM BURNER_KIND WHERE BURNER_KIND_NUM IN (201, 301) ORDER BY BURNER_KIND_NM",0, 0, 0   );		
			// g_Sql_SetCombo(szSql, CMB_DATA2+2);
			//제조사명
			Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
			//SPRINT(szSql, "SELECT MAKER_NM FROM USE_MAKER WHERE MAKER_FLAG = '50' ORDER BY MAKER_NM  ",0, 0, 0   );
			SPRINT(szSql, "SELECT MAKER_NM FROM USE_MAKER WHERE MAKER_FLAG = '50' ORDER BY BOILER_SEQ",0, 0, 0   );
			g_Sql_SetCombo(szSql, CMB_DATA3+2);
			//용량단위
			// for ( i = 0 ;  SCBOIL_CAPA[i].Str[0] != 0 ; i++)
			// {
			// 	ListCtrl_AddItem (Get_hDlgCtrlByID(CMB_DATA4+2), SCBOIL_CAPA[i].Str, 0, ICON_NONE);
			// }
			//위치
			Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
			SPRINT(szSql, "SELECT ITEM_KNAME FROM COMMONCODE WHERE CODE_ID = 'C30028' ",0, 0, 0   );
			g_Sql_SetCombo(szSql, CMB_DATA5+2);
			//형식
			for ( i = 0 ;  SCBOIL_FORM[i].Str[0] != 0 ; i++)
			{
				ListCtrl_AddItem (Get_hDlgCtrlByID(CMB_DATA6+2), SCBOIL_FORM[i].Str, 0, ICON_NONE);
			}
		}
		else if( m_bFirst == INIT_BURNCHG )
		{
			//종류
			Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
			SPRINT(szSql, "SELECT BURNER_KIND_NM FROM BURNER_KIND WHERE BURNER_KIND_NUM NOT IN ('201', '301') ORDER BY BURNER_KIND_NM",0, 0, 0   );		
			g_Sql_SetCombo(szSql, CMB_DATA7+2);
			//제조사명
			Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
			//SPRINT(szSql, "SELECT MAKER_NM FROM USE_MAKER WHERE MAKER_FLAG = '50' ORDER BY MAKER_NM  ",0, 0, 0   );
			SPRINT(szSql, "SELECT MAKER_NM FROM USE_MAKER WHERE MAKER_FLAG = '50' ORDER BY BURNER_SEQ  ",0, 0, 0   );
			g_Sql_SetCombo(szSql, CMB_DATA8+2);
			//용량단위
			for ( i = 0 ;  SCBOIL_CAPA[i].Str[0] != 0 ; i++)
			{
				ListCtrl_AddItem (Get_hDlgCtrlByID(CMB_DATA9+2), SCBOIL_CAPA[i].Str, 0, ICON_NONE);
			}
		}
	}

//-----------------------------------------------------------------
void	SetStyle(void)
{
	if( m_bFirst == INIT_MAIN )
	{
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_PAGE), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_PAGELST), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_BSOUT), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_GOO), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_RATE), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_MODEL), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_OBJNUM), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_GYE), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_BO), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_OBJECT), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_STATE), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_COMPANY), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_GR), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_RSLT), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA1), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA2), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA3), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA4), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA5), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA6), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA7), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA8), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA9), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA10), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		
		EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_DATA1), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_DATA10), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		
		// 사회복지시설
		if( Str_Cmp(stBsMtr.SOCIAL_WELF_FACI_YN, "Y") == 0 )
		{
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA38), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA10), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA10+1), TRUE);
		}
		else
		{
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA38), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA10), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA10+1), FALSE);
		}
	}
	else if( m_bFirst == INIT_BOILCHG )
	{
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA11), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA12), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA13), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA14), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA15), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA16), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA17), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA18), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA19), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA20), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA30), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA31), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA32), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA33), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA39), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA40), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_WORKFIRM), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_WORKYMD), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		
		EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA1), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA2), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA3), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA7), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA8), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA9), EDITALIGN_MIDDLE);
		
		EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_DATA2), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_DATA3), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_DATA4), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_DATA5), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_DATA6), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DETA_LOC), EDITALIGN_CENTER|EDITALIGN_MIDDLE);

		// DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA2), FALSE);
		// DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA2), FALSE);
	}
	else if( m_bFirst == INIT_BURNCHG )
	{
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA22), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA23), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA24), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA25), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA26), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA28), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA29), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA34), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA35), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA36), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA37), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_LOCNM), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA41), EDITALIGN_MIDDLE);
		
		EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA4), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA5), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA10), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA11), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA12), EDITALIGN_MIDDLE);
		
		EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_DATA7), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_DATA8), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_DATA9), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DETA_LOC), EDITALIGN_CENTER|EDITALIGN_MIDDLE);

		// DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA2), FALSE);
		// DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA2), FALSE);
	}
}

//------------------------------------------------------------------
	void	OnButton(long ID)
	{	
		long d,k;
		char szTmp[10];
		char szDate[20];
		char szYear[5];
		char szMonth[3];
		char szDay[3];
		
		switch(ID)
		{
			case BID_PREVLST:
				m_lLstpage -= ROW;
				if(m_lLstpage < 0)
				{
					m_lLstpage = 0;
					//MessageBoxEx (CONFIRM_OK, "첫번째 페이지 입니다.");
					//SetBurData();
					break;
				}
				m_lSelIndex = 0;
				SetBurData();
				break;
			case BID_NEXTLST:
				m_lLstpage += ROW;
				if( m_lLstpage >= m_ltotLstcnt )
				{
					m_lLstpage -= ROW;
					if(m_lLstpage < 0)
					{
						m_lLstpage = 0;
					}
					//MessageBoxEx (CONFIRM_OK, "마지막 페이지 입니다.");
					//SetBurData();
					break;
				}
				m_lSelIndex = 0;
				SetBurData();
				break;
			case BID_FEE:
				g_lPAYFlag = 0;
				g_lSCMoveFlag = 1;
				g_nPhotoFlag = 3;
				Str_Cpy(g_szMTR_NUM,      stBsMtr.MTR_NUM);	//계량기번호
				Str_Cpy(g_szUSE_CONT_NUM, stBsMtr.USE_CONT_NUM);	// 사용번호
				Card_Move("GM_PAYHSTR");
				break;
			case BID_BS:	//계량기점검
				Str_Cpy(stBsNogood.CHK_EXEC_NUM, g_szCHK_EXEC_NUM);
				Str_Cpy(stBsNogood.MTR_NUM, stBsMtr.MTR_NUM);
				Str_Cpy(stBsNogood.BURNER_NUM, "");
				//Str_Cpy(stBsNogood.BURNER_NUM, stBsBur.BURNER_NUM);
				Card_Move("BS_MTRCHK");
				break;
			case BID_BS2:	//연소기,보일러점검
				if( m_ltotLstcnt > 0 )
				{
					g_lSCMoveFlag = 1;
					Str_Cpy(stBsNogood.CHK_EXEC_NUM, g_szCHK_EXEC_NUM);
					Str_Cpy(stBsNogood.CHK_SEC_CD, "50");
					//Str_Cpy(stBsNogood.MTR_NUM, stBsBur.MTR_NUM);
					Str_Cpy(stBsNogood.MTR_NUM, g_szMTR_NUM);
					Str_Cpy(stBsNogood.BURNER_NUM, stBsBur.BURNER_NUM);
					Str_Cpy(stBsNogood.CHK_SEC_NM, "연소기");
					Card_Move("BS_BNCHK");
				}
				break;
			case BID_COMPLETE:
				if( Save_Chk() )
				{
					Mem_Set( (byte*)g_szCHK_EXCEP_WHY, 0x00, sizeof(g_szCHK_EXCEP_WHY) );
					g_lDataflag = 0;
					
					if( Str_Cmp(stUserinfo.szcenter_cd,"91") == 0 
					|| Str_Cmp(stUserinfo.szcenter_cd,"92") == 0 
					|| Str_Cmp(stUserinfo.szcenter_cd,"93") == 0 
					|| Str_Cmp(stUserinfo.szcenter_cd,"94") == 0 
					|| Str_Cmp(stUserinfo.szcenter_cd,"95") == 0 )
					{
						Card_Move("BS_MTRLST_2");
					}
					else
					{
						Card_Move("BS_MTRLST");
					}
				}
				break;
			case BID_PREVPG:
				PrevPG();
				break;
			case BID_NEXTPG:
				NextPG();
				break;
			case BID_DELCANCEL:
				g_lSCMoveFlag = 1;
				Card_Move("BS_NODEL");
				break;
			case BID_DELETE:
				if( m_ltotLstcnt > 0 )
				{
					if( Str_Cmp( stBsBur.BUR_RSLT, "N") == 0 )
					{
						MessageBoxEx (CONFIRM_OK, "부적합 연소기는 삭제 할수없습니다.");
						break;
					}
					if(  MessageBoxEx (CONFIRM_YESNO, "삭제하시겠습니까?")  == MB_OK )
					{
						Del_Bur();
						SetBurData();
					}
				}
				break;
			case BID_CHANGE:
				if( m_ltotLstcnt > 0 )
				{
					g_lSCMoveFlag = 1;
					Mem_Set( (byte*)szTmp, 0x00, sizeof(szTmp) );
					Mem_Cpy((byte *)szTmp, (byte *)stBsBur.BURNER_NUM, 1);
					if( szTmp[0] == '1' )
					{
						ON_EXIT();
						OnInit(INIT_BOILCHG);
					}
					else
					{
						ON_EXIT();
						OnInit(INIT_BURNCHG);
					}
				}
				break;
			case BID_NEW:
				g_lSCMoveFlag = 1;
				ON_EXIT();
				OnInit(INIT_BURNEW);
				break;
			case BID_MEMO:
				g_nMemoFlag = 5;
				Card_Move("CM_MEMO");
				break;
			case GID_HOME:
				if( MessageBoxEx (CONFIRM_YESNO, "메인 메뉴로 나가시겠습니까?")  == MB_OK)
				{
					g_lDataflag = 0;
					Mem_Set( (byte*)g_szCHK_EXCEP_WHY, 0x00, sizeof(g_szCHK_EXCEP_WHY) );
					
					if( Str_Cmp(stBsMtr.MRT_RSLT, "Y") != 0 && Str_Cmp(stBsMtr.MRT_RSLT, "N") != 0 )
					{
						Del_PipeData();
					}
					
					if( Str_Cmp(stBs.SEND_YN, "N") == 0 || Str_Cmp(stBs.SEND_YN, "") == 0)
					{
						g_Del_BsData();
					}
					g_lDataflag = 0;
					Card_Move("MENU");
				}
				break;
			case GID_MENU:
				if( MessageBoxEx (CONFIRM_YESNO, "특정점검 메뉴로\n나가시겠습니까?")  == MB_OK)
				{
					g_lDataflag = 0;
					Mem_Set( (byte*)g_szCHK_EXCEP_WHY, 0x00, sizeof(g_szCHK_EXCEP_WHY) );
					
					if( Str_Cmp(stBsMtr.MRT_RSLT, "Y") != 0 && Str_Cmp(stBsMtr.MRT_RSLT, "N") != 0 )
					{
						Del_PipeData();
					}
					
					if( Str_Cmp(stBs.SEND_YN, "N") == 0 || Str_Cmp(stBs.SEND_YN, "") == 0)
					{
						g_Del_BsData();
					}
					g_lDataflag = 0;
					Card_Move("BS_MENU");
				}
				break;
			case GID_KEYBOARD:
				g_SHOW_SIP();
				break;
			case GID_SCREEN:
				g_MOVE_DLG(400);
				break;
			case GID_CMMNWK:
				break;				
			case GID_PREV:
				Mem_Set( (byte*)g_szCHK_EXCEP_WHY, 0x00, sizeof(g_szCHK_EXCEP_WHY) );
				
				g_lDataflag = 0;
				g_lSCMoveFlag = 0;
				
				if( Str_Cmp(stBsMtr.MRT_RSLT, "Y") != 0 && Str_Cmp(stBsMtr.MRT_RSLT, "N") != 0 )
				{
					Del_PipeData();
				}
				
				if( Str_Cmp(stUserinfo.szcenter_cd,"91") == 0 
					|| Str_Cmp(stUserinfo.szcenter_cd,"92") == 0 
					|| Str_Cmp(stUserinfo.szcenter_cd,"93") == 0 
					|| Str_Cmp(stUserinfo.szcenter_cd,"94") == 0 
					|| Str_Cmp(stUserinfo.szcenter_cd,"95") == 0 )
				{
					Card_Move("BS_MTRLST_2");
				}
				else
				{
					Card_Move("BS_MTRLST");
				}
				
				break;	
			case GID_VMEXIT:
				if( Str_Cmp(stBsMtr.MRT_RSLT, "Y") != 0 && Str_Cmp(stBsMtr.MRT_RSLT, "N") != 0 )
				{
					Del_PipeData();
				}
				if( Str_Cmp(stBs.SEND_YN, "N") == 0 || Str_Cmp(stBs.SEND_YN, "") == 0)
				{
					g_Exit_DelBsData();
					return;
				}
				g_Exit();
				return;
//신규등록
			case BID_BOIL:
				g_lSCMoveFlag = 1;
				g_lNewBurFlag = 1;
				Card_Move("BS_BURNEW");
				break;
			case BID_BURN:
				g_lSCMoveFlag = 1;
				g_lNewBurFlag = 2;
				Card_Move("BS_BURNEW");
				break;
			case BID_CLOSE:
				ON_EXIT();
				OnInit(INIT_MAIN);
				break;
//보일러 수정
			case BID_WRITE1:
				g_EditCtrl_ShowEditInput( Get_hDlgCtrlByID(EDT_DATA1), EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA1)) );
				break;	
			case BID_WRITE2:
				g_EditCtrl_ShowEditInput( Get_hDlgCtrlByID(EDT_DATA3), EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA3)) );
				break;	
				
			case BID_SAVE:
				if( CHG_Boil() )
				{
					ON_EXIT();
					OnInit(INIT_MAIN);
				}
				break;
			case BID_CANCEL:
				ON_EXIT();
				OnInit(INIT_MAIN);
				break;
			case BID_SCHDL:
				Mem_Set((byte*)szDate, 0x00, sizeof(szDate));		
				Str_Cpy(szDate, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA7)));
				Str_Cat(szDate, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA8)));
				Str_Cat(szDate, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA9)));
//PRINT(">>>>>>>>>>>>>>>>>>>>>>>>>>>>szDate : %s",szDate,0,0);
				k = Str_AtoI(szDate);
						
				Load_Calendar_Card();
				d = CalendarDialog(&k);
				Unload_Calendar_Card();
				if(d == 0)
				{
					break;
				}
				else
				{
					Mem_Set((byte*)szDate, 0x00, sizeof(szDate));
					Str_ItoA ( d, szDate, 10);
					
					Mem_Set((byte*)szYear, 0x00, sizeof(szYear));
					Mem_Set((byte*)szMonth, 0x00, sizeof(szMonth));
					Mem_Set((byte*)szDay, 0x00, sizeof(szDay));
					Mem_Cpy((byte *)szYear, (byte *)szDate, 4);
					Mem_Cpy((byte *)szMonth, (byte *)szDate+4, 2);
					Mem_Cpy((byte *)szDay, (byte *)szDate+6, 2);
					
					EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA7), szYear );
					EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA8), szMonth );
					EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA9), szDay );
				}
				break;
//연소기 수정
			case BID_WRITE3:
				g_EditCtrl_ShowEditInput( Get_hDlgCtrlByID(EDT_DATA4), EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA4)) );
				break;	

			case BID_SAVE2:
				if( CHG_Bur() )
				{
					ON_EXIT();
					OnInit(INIT_MAIN);
				}
				break;
			case BID_CANCEL2:
				ON_EXIT();
				OnInit(INIT_MAIN);
				break;
			case BID_SCHDL2:
				Mem_Set((byte*)szDate, 0x00, sizeof(szDate));		
				Str_Cpy(szDate, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA10)));
				Str_Cat(szDate, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA11)));
				Str_Cat(szDate, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA12)));
//PRINT(">>>>>>>>>>>>>>>>>>>>>>>>>>>>szDate : %s",szDate,0,0);
				k = Str_AtoI(szDate);
			
				Load_Calendar_Card();
				d = CalendarDialog(&k);
				Unload_Calendar_Card();
				if(d == 0)
				{
					break;
				}
				else
				{
					Mem_Set((byte*)szDate, 0x00, sizeof(szDate));
					Str_ItoA ( d, szDate, 10);
					
					Mem_Set((byte*)szYear, 0x00, sizeof(szYear));
					Mem_Set((byte*)szMonth, 0x00, sizeof(szMonth));
					Mem_Set((byte*)szDay, 0x00, sizeof(szDay));
					Mem_Cpy((byte *)szYear, (byte *)szDate, 4);
					Mem_Cpy((byte *)szMonth, (byte *)szDate+4, 2);
					Mem_Cpy((byte *)szDay, (byte *)szDate+6, 2);
					
					EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA10), szYear );
					EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA11), szMonth );
					EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA12), szDay );
				}
				break;
			
			case BID_DETA_LOC:
				g_EditCtrl_ShowEditInput( Get_hDlgCtrlByID(EDT_DETA_LOC), EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DETA_LOC)) );
				break;
		}
	}
	
//-----------------------------------------------------------------------------------------
	void	OnSelect(long Index)
	{
		char sztmp[200];
		char szSql[300];
		long index;
		long lPage;
		long i;
		handle* sql;
		char * sqlstr = "";	
		
		if( INIT_MAIN == m_bFirst )
		{
			//현재 TBL이 선택되었는지를 확인
			if (DlgTbl_IsSelect(ID_TBLLIST))
			{
				// 현재 선택된 인덱스
				index = DlgTbl_GetActiveRow(ID_TBLLIST);

				//Str_Cpy(stBsBur.MTR_NUM , DlgTbl_GetStr( ID_TBLLIST, index-1, 4));
				//Str_Cpy(stBsBur.BURNER_NUM , DlgTbl_GetStr( ID_TBLLIST, index-1, 5));
				Str_Cpy(stBsBur.BURNER_NUM , DlgTbl_GetStr( ID_TBLLIST, index-1, 6));

				m_lSelIndex = index - 1;
				lPage = m_lLstpage + index;
				g_nActRow = lPage - 1;
				SPRINT(m_szLstCnt_page, "%d/%d", lPage, m_ltotLstcnt, 0);

				SetClickData();
			}
			else
			{
				m_lActiveIndex = Dialog_GetActiveCtrlIndex(this->m_hDlg);
			
				if( m_lActiveIndex == Get_iDlgCtrlByID(CMB_DATA10+1) )
				{
					/******  사회복지시설여부  ********/
					Mem_Set((byte*)sztmp, 0x00, sizeof(sztmp));
					Str_Cpy( sztmp ,EditCtrl_GetStr( Get_hDlgCtrlByID(CMB_DATA10) ) );
		
					i = SearchStr( sztmp, SOCIAL_FACI_STS_CD );
		
					if (i > -1)
					{
						Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		
						sql = STRING_Create(sqlstr);
						STRING_Empty(sql);
						STRING_Append(sql,"UPDATE SPECIAL_MTR SET ");
						STRING_Append(sql," FACI_STS_CD = '");
						STRING_Append(sql, SOCIAL_FACI_STS_CD[i].Code);
						STRING_Append(sql,"' WHERE CHK_EXEC_NUM = '");
						STRING_Append(sql, g_szCHK_EXEC_NUM);
						STRING_Append(sql,"' ");
						STRING_Append(sql,"AND MTR_NUM = '");
						STRING_Append(sql, stBsMtr.MTR_NUM);
						STRING_Append(sql,"' ");
						sqlstr = STRING_toString(sql);
						g_Sql_DirectExecute(sqlstr);
						STRING_Finalize(sql);
					}
				}
				else
				{
					//점검제외
					Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
					Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
					Str_Cpy(sztmp , EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA1)) );
					SPRINT(szSql, "SELECT CODE_ITEM FROM COMMONCODE WHERE CODE_ID = 'C30016' AND ITEM_KNAME = '%s' AND CODE_ITEM NOT IN('40','50','60','70','90') ",sztmp, 0, 0 );
					g_Sql_RetStr( szSql, 10, g_szCHK_EXCEP_WHY );
					
				}
			}
		}
	}
	
//-------------------------------------------------------------------
	void	OnChar(long nChar) 
	{
		long nRet = 0;
		long nDate = 0;
		char szTmp[10];

		//숫자만 입력 가능
		if( m_bFirst == INIT_BOILCHG )
		{
			if( (Get_iDlgCtrlByID(EDT_DATA2) == m_lEditCtrlIndex 
			|| Get_iDlgCtrlByID(EDT_DATA7) == m_lEditCtrlIndex
			|| Get_iDlgCtrlByID(EDT_DATA8) == m_lEditCtrlIndex
			|| Get_iDlgCtrlByID(EDT_DATA9) == m_lEditCtrlIndex )
			&& (nChar < 48 ||  nChar > 57) )
			{
				MessageBoxEx (CONFIRM_OK, "숫자만 입력가능합니다.");
				ON_KEY( 5 );
				return;
			}
			
			if( Get_iDlgCtrlByID(EDT_DATA7) == m_lEditCtrlIndex )
			{
				if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA7)) == 4 )
				{
					Dialog_SetActiveCtrl(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA8));
					m_lEditCtrlIndex = Dialog_GetActiveCtrlIndex(this->m_hDlg);
				}
			}
			else if( Get_iDlgCtrlByID(EDT_DATA8) == m_lEditCtrlIndex )
			{
				Mem_Set((byte *)szTmp, 0x00, sizeof(szTmp));
				Mem_Cpy((byte *)szTmp, (byte *)EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA8)), 1);
				if( Str_AtoI(szTmp) > 1 )
				{
					ON_KEY( 5 );
					return;
				}
				
				Mem_Set((byte *)szTmp, 0x00, sizeof(szTmp));
				Mem_Cpy((byte *)szTmp, (byte *)EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA8)), 2);
				if( Str_Len(szTmp) > 1 && (Str_AtoI(szTmp) == 0 || Str_AtoI(szTmp) > 12) )
				{
					ON_KEY( 5 );
					return;
				}
				
				if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA8)) == 2 )
				{
					Dialog_SetActiveCtrl(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA9));
					m_lEditCtrlIndex = Dialog_GetActiveCtrlIndex(this->m_hDlg);
				}
			}
			else if( Get_iDlgCtrlByID(EDT_DATA9) == m_lEditCtrlIndex )
			{
				Mem_Set((byte *)szTmp, 0x00, sizeof(szTmp));
				Mem_Cpy((byte *)szTmp, (byte *)EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA9)), 1);
				if( Str_AtoI(szTmp) > 3 )
				{
					ON_KEY( 5 );
					return;
				}
				
				Mem_Set((byte *)szTmp, 0x00, sizeof(szTmp));
				Mem_Cpy((byte *)szTmp, (byte *)EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA9)), 2);
				if( Str_Len(szTmp) > 1 && (Str_AtoI(szTmp) == 0 || Str_AtoI(szTmp) > 31) )
				{
					ON_KEY( 5 );
					return;
				}
			}
	
			Mem_Set((byte *)szTmp, 0x00, sizeof(szTmp));
			Str_Cpy(szTmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA7)));
			Str_Cat(szTmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA8)));
			Str_Cat(szTmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA9)));
			if( Str_Len(szTmp) == 8 )
			{
				Str_Chg(szTmp, STRCHG_DEL_NONDIGIT);
				nDate = Str_AtoI(szTmp);
				nRet = Time_ValidateDate(nDate);
				//PRINT(">>>>>>>>>>>>>>>>>>>>> nRet : %d , nDate : %d , szTmp : %s",nRet,nDate,szTmp);
				
				if( nRet == 0 )
				{
					MessageBoxEx (CONFIRM_OK, "유효한 날짜가 아닙니다.\n날짜를 확인해주세요.");
					EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA7), "");
					EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA8), "");
					EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA9), "");
					
					Dialog_SetActiveCtrl(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA7));
					m_lEditCtrlIndex = Dialog_GetActiveCtrlIndex(this->m_hDlg);
				}
			}

			ON_DRAW();
			return;
		}
		else if( m_bFirst == INIT_BURNCHG )
		{
			if( (Get_iDlgCtrlByID(EDT_DATA5) == m_lEditCtrlIndex 
			|| Get_iDlgCtrlByID(EDT_DATA10) == m_lEditCtrlIndex
			|| Get_iDlgCtrlByID(EDT_DATA11) == m_lEditCtrlIndex
			|| Get_iDlgCtrlByID(EDT_DATA12) == m_lEditCtrlIndex )
			&& (nChar < 48 ||  nChar > 57) )
			{
				MessageBoxEx (CONFIRM_OK, "숫자만 입력가능합니다.");
				ON_KEY( 5 );
				return;
			}
			
			if( Get_iDlgCtrlByID(EDT_DATA10) == m_lEditCtrlIndex )
			{
				if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA10)) == 4 )
				{
					Dialog_SetActiveCtrl(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA11));
					m_lEditCtrlIndex = Dialog_GetActiveCtrlIndex(this->m_hDlg);
				}
			}
			else if( Get_iDlgCtrlByID(EDT_DATA11) == m_lEditCtrlIndex )
			{
				Mem_Set((byte *)szTmp, 0x00, sizeof(szTmp));
				Mem_Cpy((byte *)szTmp, (byte *)EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA11)), 1);
				if( Str_AtoI(szTmp) > 1 )
				{
					ON_KEY( 5 );
					return;
				}
				
				Mem_Set((byte *)szTmp, 0x00, sizeof(szTmp));
				Mem_Cpy((byte *)szTmp, (byte *)EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA11)), 2);
				if( Str_Len(szTmp) > 1 && (Str_AtoI(szTmp) == 0 || Str_AtoI(szTmp) > 12) )
				{
					ON_KEY( 5 );
					return;
				}
				
				if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA11)) == 2 )
				{
					Dialog_SetActiveCtrl(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA12));
					m_lEditCtrlIndex = Dialog_GetActiveCtrlIndex(this->m_hDlg);
				}
			}
			else if( Get_iDlgCtrlByID(EDT_DATA12) == m_lEditCtrlIndex )
			{
				Mem_Set((byte *)szTmp, 0x00, sizeof(szTmp));
				Mem_Cpy((byte *)szTmp, (byte *)EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA12)), 1);
				if( Str_AtoI(szTmp) > 3 )
				{
					ON_KEY( 5 );
					return;
				}
				
				Mem_Set((byte *)szTmp, 0x00, sizeof(szTmp));
				Mem_Cpy((byte *)szTmp, (byte *)EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA12)), 2);
				if( Str_Len(szTmp) > 1 && (Str_AtoI(szTmp) == 0 || Str_AtoI(szTmp) > 31) )
				{
					ON_KEY( 5 );
					return;
				}
			}
	
			Mem_Set((byte *)szTmp, 0x00, sizeof(szTmp));
			Str_Cpy(szTmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA10)));
			Str_Cat(szTmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA11)));
			Str_Cat(szTmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA12)));
			if( Str_Len(szTmp) == 8 )
			{
				Str_Chg(szTmp, STRCHG_DEL_NONDIGIT);
				nDate = Str_AtoI(szTmp);
				nRet = Time_ValidateDate(nDate);
				//PRINT(">>>>>>>>>>>>>>>>>>>>> nRet : %d , nDate : %d , szTmp : %s",nRet,nDate,szTmp);
				
				if( nRet == 0 )
				{
					MessageBoxEx (CONFIRM_OK, "유효한 날짜가 아닙니다.\n날짜를 확인해주세요.");
					EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA10), "");
					EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA11), "");
					EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA12), "");
					
					Dialog_SetActiveCtrl(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA10));
					m_lEditCtrlIndex = Dialog_GetActiveCtrlIndex(this->m_hDlg);
				}
			}

			ON_DRAW();
			return;
		}
	}
	
	//-------------------------------------------------------------------------
	void	OnPointing(long nAction, long X, long Y)
	{
		long lActiveIndex = -1;

		//EDITCTRL에 ACTIVE시에 CTRLINDEX를 저장
		//키보드 BUTTONCTRL이 ACTIVE시에도 EDITCTRL에 커서를 두기위해서 INDEX를 저장
		lActiveIndex = Dialog_GetActiveCtrlIndex(this->m_hDlg);	
		
		if( m_bFirst == INIT_BOILCHG )
		{
			if( POINTING_UP == nAction )
			{
				m_lEditCtrlIndex = lActiveIndex;
				
				if( theDevInfo.m_nType > FAMILY_PDA )
				{
					if( X > DMS_X(STARTX+250) && X < DMS_X(STARTX+550) && Y > DMS_Y(STARTY+210) && Y < DMS_Y(STARTY+280) ||
						X > DMS_X(STARTX+250) && X < DMS_X(STARTX+450) && Y > DMS_Y(STARTY+280) && Y < DMS_Y(STARTY+350) ||
						X > DMS_X(STARTX+468) && X < DMS_X(STARTX+638) && Y > DMS_Y(STARTY+280) && Y < DMS_Y(STARTY+350) ||
						X > DMS_X(STARTX+655) && X < DMS_X(STARTX+825) && Y > DMS_Y(STARTY+280) && Y < DMS_Y(STARTY+350) )
					{
						if( Get_iDlgCtrlByID(EDT_DATA2) == lActiveIndex ||
							Get_iDlgCtrlByID(EDT_DATA7) == lActiveIndex ||
							Get_iDlgCtrlByID(EDT_DATA8) == lActiveIndex ||
							Get_iDlgCtrlByID(EDT_DATA9) == lActiveIndex )	
						{
							ShowSip(FALSE);
							g_Sipflag = 0;
							
							//SetKeyMode(KEYMODE_NUMBER);
			
							ShowSip(TRUE);
							g_Sipflag = 1;
						}
					}
					else
					{
						ShowSip(FALSE);
						g_Sipflag = 0;
					}
				}
				else if( theDevInfo.m_nType == FAMILY_PDA )
				{
					if( X > DMS_X(STARTX+250) && X < DMS_X(STARTX+975) && Y > DMS_Y(STARTY+140) && Y < DMS_Y(STARTY+210) ||
					    X > DMS_X(STARTX+250) && X < DMS_X(STARTX+975) && Y > DMS_Y(STARTY+420) && Y < DMS_Y(STARTY+490) )
					{
						if( Get_iDlgCtrlByID(EDT_DATA1) == lActiveIndex ||
						    Get_iDlgCtrlByID(EDT_DATA3) == lActiveIndex )	
						{
							ShowSip(FALSE);
							g_Sipflag = 0;
			
							ShowSip(TRUE);
							g_Sipflag = 1;
						}
					}
					else
					{
						ShowSip(FALSE);
						g_Sipflag = 0;
					}
				}
				
				ON_DRAW();
			}
		}
		else if( m_bFirst == INIT_BURNCHG )
		{
			if( POINTING_UP == nAction )
			{
				m_lEditCtrlIndex = lActiveIndex;
			
				if( theDevInfo.m_nType > FAMILY_PDA )
				{
					if( X > DMS_X(STARTX+300) && X < DMS_X(STARTX+550) && Y > DMS_Y(STARTY+181) && Y < DMS_Y(STARTY+251) ||
						X > DMS_X(STARTX+300) && X < DMS_X(STARTX+500) && Y > DMS_Y(STARTY+251) && Y < DMS_Y(STARTY+321) ||
						X > DMS_X(STARTX+518) && X < DMS_X(STARTX+663) && Y > DMS_Y(STARTY+251) && Y < DMS_Y(STARTY+321) ||
						X > DMS_X(STARTX+680) && X < DMS_X(STARTX+825) && Y > DMS_Y(STARTY+251) && Y < DMS_Y(STARTY+321) )
					{
						if( Get_iDlgCtrlByID(EDT_DATA5) == lActiveIndex ||
							Get_iDlgCtrlByID(EDT_DATA10) == lActiveIndex ||
							Get_iDlgCtrlByID(EDT_DATA11) == lActiveIndex ||
							Get_iDlgCtrlByID(EDT_DATA12) == lActiveIndex )	
						{
							ShowSip(FALSE);
							g_Sipflag = 0;
							
							//SetKeyMode(KEYMODE_NUMBER);
			
							ShowSip(TRUE);
							g_Sipflag = 1;
						}
					}
					else
					{
						ShowSip(FALSE);
						g_Sipflag = 0;
					}
				}
				else if( theDevInfo.m_nType == FAMILY_PDA )
				{
					if( X > DMS_X(STARTX+300) && X < DMS_X(STARTX+975) && Y > DMS_Y(STARTY+140) && Y < DMS_Y(STARTY+210) )
					{
						if( Get_iDlgCtrlByID(EDT_DATA4) == lActiveIndex )	
						{
							ShowSip(FALSE);
							g_Sipflag = 0;
			
							ShowSip(TRUE);
							g_Sipflag = 1;
						}
					}
					else
					{
						ShowSip(FALSE);
						g_Sipflag = 0;
					}
				}

				ON_DRAW();
			}
		}
		
		return;
	}
	
	/*=======================================================================================
	함수명 : Prev_SC
	기  능 : 이전 버튼시 이전대상을 찾는다.
	Param  : 
	Return : 아직 아무것도 코딩되지 않음.(검침 코드 그대로)
	========================================================================================*/
	void PrevPG(void)
	{
		if( g_nObjIndex > 0 )
		{
			g_nObjIndex--;
			m_lActIndex = g_SREACHFILE_GetSeq(BSMTRLST_FILE, g_nObjIndex);
		}
		else
		{
			g_nObjIndex = -1;
		}

		if( g_nObjIndex < 2 )
		{	//검색 후, 첫번째 고객 메세지 박스 변수
			m_lPrev--;
		}

		if( m_lActIndex <= 0 || g_nObjIndex < 0 )
		{
			g_nObjIndex = 0;
			m_lActIndex = g_SREACHFILE_GetSeq(BSMTRLST_FILE, g_nObjIndex);

			if( m_lPrev < 0 )
			{
				m_lPrev = 0;

				//MessageBoxEx (CONFIRM_OK, "첫번째 고객입니다.");
				return;
			}
		}
		
		Mem_Set((byte*)g_Pipe_Bury_Yn ,0x00, sizeof(g_Pipe_Bury_Yn) );
		Mem_Set((byte*)g_Pipe_Hide_Yn ,0x00, sizeof(g_Pipe_Hide_Yn) );
		g_lDataflag = 0;
		m_lLstpage = 0;
		m_lSelIndex = -1;

		SetData();
		SetBurData();
		
		SetStyle();
		REDRAW();
		return;
	}
	
	/*=======================================================================================
	함수명 : Next_SC
	기  능 : 다운 버튼시 다음대상을 찾는다.
	Param  : 
	Return : 아직 아무것도 코딩되지 않음.(검침 코드 그대로)
	========================================================================================*/
	void NextPG(void)
	{
		m_lPrev = 0;

		g_nObjIndex++;
		m_lActIndex = g_SREACHFILE_GetSeq(BSMTRLST_FILE, g_nObjIndex);

		if( g_nObjIndex > m_ltotcnt || m_lActIndex < 0 )
		{
		/*
			if( g_SREACHFILE_GetSeq(SREACH_FILE, g_nObjIndex) < g_nObjIndex )
			{
				g_nObjIndex = g_nObjIndex-1;
			}
		*/
			g_nObjIndex = g_nObjIndex-1;
			m_lActIndex = g_SREACHFILE_GetSeq(BSMTRLST_FILE, g_nObjIndex);
			
			//MessageBoxEx (CONFIRM_OK, "마지막 고객입니다.");
			return;
		}
		
		Mem_Set((byte*)g_Pipe_Bury_Yn ,0x00, sizeof(g_Pipe_Bury_Yn) );
		Mem_Set((byte*)g_Pipe_Hide_Yn ,0x00, sizeof(g_Pipe_Hide_Yn) );
		g_lDataflag = 0;
		m_lLstpage = 0;
		m_lSelIndex = -1;
		
		SetData();
		SetBurData();
		
		SetStyle();
		REDRAW();
		return;

	}
	
	/*=======================================================================================
	함수명 : SearchStr
	기  능 : 스트링으로 코드인덱스를 찾는다.
	Param  : 
	Return : 코드인덱스, 없으면 -1
	========================================================================================*/
	long	SearchStr( char *Str, CodeTable *CT)
	{
		long i;

		for ( i = 0 ; GM_CODE[i].Code[0] != 0 ; i++)
		{
			if( Str_Cmp(Str, CT[i].Str) == 0 )
				return i;
		}
		
		return -1;
	}
	
	/*=======================================================================================
	함수명 : SearchCD
	기  능 : 코드값으로 코드인덱스를 찾는다.
	Param  : 
	Return : 코드인덱스, 없으면 -1
	========================================================================================*/
	long	SearchCD( char *CD, CodeTable *CT)
	{
		long i;
		
		for(i = 0; CT[i].Code[0] != 0; i++)
		{	
			if ( Str_Cmp(CD, CT[i].Code) == 0)
				return i;
		}
		
		return -1;
	}
	
//------------------------------------------------------------------
	void SetData(void)
	{
		long i;
		long lindex = 0;
		char szSql[200];
		handle hdb = NULL;
		handle hstmt = NULL;
		SQLITE sql = NewSqLite();

		m_lActIndex = g_SREACHFILE_GetSeq(BSMTRLST_FILE, g_nObjIndex);
		SPRINT(szSql, "SELECT MTR_NUM FROM SPECIAL_MTR WHERE ROWID = '%d'",m_lActIndex, 0, 0   );
		g_Sql_RetStr( szSql, 10, g_szMTR_NUM );
		
		//점검제외
		ListCtrl_ResetAllItems (Get_hDlgCtrlByID(CMB_DATA1+2));
		g_Sql_SetCombo("SELECT ITEM_KNAME FROM COMMONCODE WHERE CODE_ID = 'C30016' AND CODE_ITEM NOT IN('40','50','60','70','90') ORDER BY CODE_ITEM ", CMB_DATA1+2);

		//사회복지시설
		ListCtrl_ResetAllItems (Get_hDlgCtrlByID(CMB_DATA10+2));
		for ( i = 0 ;  SOCIAL_FACI_STS_CD[i].Str[0] != 0 ; i++)
		{
			ListCtrl_AddItem (Get_hDlgCtrlByID(CMB_DATA10+2), SOCIAL_FACI_STS_CD[i].Str, 0, ICON_NONE);
		}

		Mem_Set((byte*)szSql, 0x00, sizeof(szSql));
		SPRINT(szSql, " SELECT COUNT(*) FROM SPECIAL_MTR WHERE CHK_EXEC_NUM = '%s' ", g_szCHK_EXEC_NUM, 0, 0   );
		g_Sql_RetInt( szSql, &m_ltotcnt );
		//현재페이지를 표시
		SPRINT(m_szCnt_page, "%d/%d", g_nObjIndex+1, m_ltotcnt, 0);
	
		Mem_Set((byte*)&stBsMtr, 0x00, sizeof(stBsMtr));
		hdb = sql->Open(sql);
		if( hdb == NULL )
		{
			goto Finally;
		}
		
		hstmt = sql->CreateStatement(sql,
		"SELECT CHK_EXEC_NUM, MTR_NUM, BLD_NUM, INST_PLACE_NUM, REPL_OCCU_FLAG, ADDR1_S \
		, LOT_NUM_SECOND_ADDR, CO_LIVE_NM, HOUSE_CNT, BLD_NM, DETA_FLOOR, CUST_NUM, CUST_NM \
		, FIRM_NM, SOC_NUM, CP_DDD, CP_EXN, CP_NUM, OWNHOUSE_TEL_DDD, OWNHOUSE_TEL_EXN \
		, OWNHOUSE_TEL_NUM, USE_CONT_NUM, PROD_NM, MTR_SUPPLY_STS, MTR_ID_NUM, MTR_MODEL_NM \
		, MTR_GRD, MTR_VALID_YM, COMPENS_YN, COMPENS_NUM, COMPENS_ID_NUM, COMPENS_MODEL_NM \
		, COMPENS_VALID_YM, MTR_INDI, INDI_VA, INDI_VC, MRT_RSLT, Trim(CHK_EXCEP_WHY), CHK_RSLT \
		, SEND_YN, MTR_INDI_CUR, INDI_VA_CUR, INDI_VC_CUR, UPD_EMPID, VISIT_DTM, PDA_IP, CHK_YEAR \
		, CHK_ORDER, SPECIAL_NUM, CHK_TYPE, OBJ_YM, PLAN_YM, MEMO, SOCIAL_WELF_FACI_YN, FACI_STS_CD, MTR_DETA_LOC \
		FROM SPECIAL_MTR WHERE CHK_EXEC_NUM = ? AND MTR_NUM = ?"
		);
		if( hstmt == NULL )
		{
			PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}
		
		i = 0;
		sql->Bind(sql, i++, 'U', (long*)g_szCHK_EXEC_NUM , 12, DECRYPT);
		sql->Bind(sql, i++, 'U', (long*)g_szMTR_NUM  , 9 , DECRYPT);

		if(sql->Execute(sql) == FALSE)
		{
			PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}
		
		if(sql->Next(sql) == TRUE)
		{	
			i = 0;
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.CHK_EXEC_NUM       , 12  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.MTR_NUM            , 9   + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.BLD_NUM            , 9   + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.INST_PLACE_NUM     , 9   + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.REPL_OCCU_FLAG     , 2   + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.ADDR1_S            , 30  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.LOT_NUM_SECOND_ADDR, 100 + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.CO_LIVE_NM         , 60  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.HOUSE_CNT          , 6   + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.BLD_NM             , 150 + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.DETA_FLOOR         , 6   + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.CUST_NUM           , 10  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.CUST_NM            , 30  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.FIRM_NM            , 50  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.SOC_NUM            , 13  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.CP_DDD             , 4   + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.CP_EXN             , 4   + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.CP_NUM             , 4   + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.OWNHOUSE_TEL_DDD   , 4   + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.OWNHOUSE_TEL_EXN   , 4   + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.OWNHOUSE_TEL_NUM   , 4   + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.USE_CONT_NUM       , 10  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.PROD_NM            , 50  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.MTR_SUPPLY_STS     , 10  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.MTR_ID_NUM         , 20  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.MTR_MODEL_NM       , 50  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.MTR_GRD            , 11  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.MTR_VALID_YM       , 6   + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.COMPENS_YN         , 1   + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.COMPENS_NUM        , 8   + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.COMPENS_ID_NUM     , 8   + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.COMPENS_MODEL_NM   , 50  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.COMPENS_VALID_YM   , 6   + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.MTR_INDI           , 9   + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.INDI_VA            , 9   + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.INDI_VC            , 9   + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.MRT_RSLT           , 1   + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.CHK_EXCEP_WHY      , 2   + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.CHK_RSLT           , 1   + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.SEND_YN            , 1   + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.MTR_INDI_CUR       , 9   + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.INDI_VA_CUR        , 9   + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.INDI_VC_CUR        , 9   + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.UPD_EMPID          , 20  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.VISIT_DTM          , 14  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.PDA_IP             , 15  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.CHK_YEAR           , 4   + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.CHK_ORDER          , 2   + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.SPECIAL_NUM        , 7   + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.CHK_TYPE           , 2   + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.OBJ_YM             , 6   + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.PLAN_YM            , 6   + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.MEMO               , 100 + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.SOCIAL_WELF_FACI_YN, 1   + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.FACI_STS_CD        , 1   + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stBsMtr.MTR_DETA_LOC       , 30  + 1, DECRYPT );
		}

		if( Str_Cmp(stBsMtr.MRT_RSLT, "Y") == 0 || Str_Cmp(stBsMtr.MRT_RSLT, "N") == 0 )
		{
			g_lDataflag = 1;
		}
		//else
		//{
		//	g_lDataflag = 0;
		//}
		
Finally:
		//sql->Commit(sql);
		DelSqLite(sql);
		return;
	}

//------------------------------------------------------------------	
	void SetBurData(void)
	{
		long i, idx;
		long k = ROW+1;
		long lstartidx ;
		long lPage;
		char sztmp[800];
		handle hdb = NULL;
		handle hstmt = NULL;
		SQLITE sql = NewSqLite();
		
		Mem_Set( (byte*)&stBsBur, 0x00, sizeof(stBsBur) );
		Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
		SPRINT(sztmp, "SELECT COUNT(*) FROM SPECIAL_BUR  WHERE CHK_EXEC_NUM = '%s' AND MTR_NUM = '%s' AND (CHG_FLAG <> '3' OR CHG_FLAG IS NULL) ",g_szCHK_EXEC_NUM, stBsMtr.MTR_NUM, 0   );
		g_Sql_RetInt( sztmp, &m_ltotLstcnt );

		if( g_lSCMoveFlag > 0 )
		{
			m_lLstpage = (g_nActRow/ROW)*ROW;
			m_lSelIndex = (g_nActRow%ROW);
			
			g_lSCMoveFlag = 0;
		}

		if( m_lSelIndex == -1 )
		{
			m_lSelIndex = 0;
		}
		
		if( m_lDelFlag == 1)
		{
			m_lSelIndex = 0;
			m_lDelFlag = 0;
		}

		if( m_ltotLstcnt > 0 )
		{
			lPage = m_lLstpage+m_lSelIndex;
		}
		else
		{
			lPage = -1;
		}
		
		SPRINT(m_szLstCnt_page, "%d/%d", lPage+1, m_ltotLstcnt, 0);
		
		hdb = sql->Open(sql);
		if( hdb == NULL )
		{
			goto Finally;
		}

		Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
		// , ( SELECT ITEM_KNAME FROM COMMONCODE WHERE CODE_ID = 'C30028' AND CODE_ITEM = A.INST_LOC ) AS INST_LOC_NM 
		
		SPRINT(sztmp, "SELECT ( SELECT COUNT(0) \
								  FROM SPECIAL_BUR B \
								 WHERE B.BURNER_NUM <= A.BURNER_NUM \
								   AND B.CHK_EXEC_NUM = ? AND B.MTR_NUM = ? AND (B.CHG_FLAG <> '3' OR B.CHG_FLAG IS NULL) \
							  ) AS ROWNUM \
							, A.BURNER_KIND_NM \
							, A.BURNER_CAPA \
							, A.INST_LOC_NM \
							, CASE WHEN ( SELECT COUNT(1) FROM SPECIAL_NOGOOD_DETAL WHERE CHK_EXEC_NUM = A.CHK_EXEC_NUM AND MTR_NUM = A.MTR_NUM AND BURNER_NUM = A.BURNER_NUM AND BETTER_YN ='N' ) > 0 THEN 'N' \
							       ELSE A.BUR_RSLT \
							   END AS BUR_RSLT \
							, A.MTR_NUM \
							, A.BURNER_NUM \
					     FROM SPECIAL_BUR A \
					    WHERE A.CHK_EXEC_NUM = ? AND A.MTR_NUM = ? AND (A.CHG_FLAG <> '3' OR A.CHG_FLAG IS NULL) LIMIT ?, ?", 0, 0, 0);
		
		hstmt = sql->CreateStatement(sql, sztmp);

		if( hstmt == NULL )
		{
			PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}
		
		idx = 0;

		sql->Bind(sql, idx++, 'U', (long*)g_szCHK_EXEC_NUM , 12, DECRYPT);
		sql->Bind(sql, idx++, 'U', (long*)g_szMTR_NUM  , 9 , DECRYPT);
		sql->Bind(sql, idx++, 'U', (long*)g_szCHK_EXEC_NUM , 12, DECRYPT);
		sql->Bind(sql, idx++, 'U', (long*)g_szMTR_NUM  , 9 , DECRYPT);
		
		lstartidx = m_lLstpage;
		sql->Bind(sql, idx++, 'X', &lstartidx, 4, DECRYPT);
		i = m_lLstpage+ROW;
		sql->Bind(sql, idx++, 'X', &i, 4, DECRYPT);

		if(sql->Execute(sql) == FALSE)
		{
			PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}
		
		// 등록된 코드 리스트를 페이지에 맞게 보여준다.
		for (i=0 ; i<ROW ; i++)
		{
			//자료가 없을때 화면을 클리어 시킨다.
			if( k == i )
			{
				k++;
				DlgTbl_SetStr ( ID_TBLLIST, i, 0, "" );
				DlgTbl_SetStr ( ID_TBLLIST, i, 1, "" );
				DlgTbl_SetStr ( ID_TBLLIST, i, 2, "" );
				DlgTbl_SetStr ( ID_TBLLIST, i, 3, "" );
				DlgTbl_SetStr ( ID_TBLLIST, i, 4, "" );
				DlgTbl_SetStr ( ID_TBLLIST, i, 5, "" );
				DlgTbl_SetStr ( ID_TBLLIST, i, 6, "" );
			}
			else
			{
				if(sql->Next(sql) == FALSE)
				{
					k = i + 1;
					DlgTbl_SetStr ( ID_TBLLIST, i, 0, "" );
					DlgTbl_SetStr ( ID_TBLLIST, i, 1, "" );
					DlgTbl_SetStr ( ID_TBLLIST, i, 2, "" );
					DlgTbl_SetStr ( ID_TBLLIST, i, 3, "" );
					DlgTbl_SetStr ( ID_TBLLIST, i, 4, "" );
					DlgTbl_SetStr ( ID_TBLLIST, i, 5, "" );
					DlgTbl_SetStr ( ID_TBLLIST, i, 6, "" );
					continue;
				}
				//
				idx = 0;
				//순번
				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				sql->GetValue(sql, idx++, 'U', (long*)sztmp, 10 + 1, DECRYPT);
				DlgTbl_SetStr ( ID_TBLLIST, i, 0, sztmp );
				
				//종류
				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				sql->GetValue(sql, idx++, 'U', (long*)sztmp, 20 + 1, DECRYPT);
				DlgTbl_SetStr ( ID_TBLLIST, i, 1, sztmp );
				
				//용량
				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				sql->GetValue(sql, idx++, 'U', (long*)sztmp, 10 + 1, DECRYPT);
				DlgTbl_SetStr ( ID_TBLLIST, i, 2, sztmp );
				
				//위치
				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				sql->GetValue(sql, idx++, 'U', (long*)sztmp, 20 + 1, DECRYPT);
				DlgTbl_SetStr ( ID_TBLLIST, i, 3, sztmp );	
				
				//결과, decode(BUR_RSLT,'N','부','적')
				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				sql->GetValue(sql, idx++, 'U', (long*)sztmp, 1 + 1, DECRYPT)
				;
				if(sztmp[0] == 'N')
				{
					DlgTbl_SetStr ( ID_TBLLIST, i, 4, "부" );
					EditCtrl_SetForeColorEx( DlgTbl_GetHandle ( ID_TBLLIST, i, 3 ), RED);
				}
				else
				{
					DlgTbl_SetStr ( ID_TBLLIST, i, 4,  "적");	
					EditCtrl_SetForeColorEx( DlgTbl_GetHandle ( ID_TBLLIST, i, 3 ), TXTFRCOLOR);
				}
				
				//계량기번호
				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				sql->GetValue(sql, idx++, 'U', (long*)sztmp, 10 + 1, DECRYPT);
				DlgTbl_SetStr ( ID_TBLLIST, i, 5, sztmp );

				//연소기번호
				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				sql->GetValue(sql, idx++, 'U', (long*)sztmp, 10 + 1, DECRYPT);
				DlgTbl_SetStr ( ID_TBLLIST, i, 6, sztmp );
			}
		}
		
Finally:
		//sql->Commit(sql);
		DelSqLite(sql);

		if( m_ltotLstcnt > 0 )
		{
			DlgTbl_SetActive(ID_TBLLIST , m_lSelIndex+1 );
			DlgTbl_SetRowColor(ID_TBLLIST, m_lSelIndex+1, TABLEACTIVE_COLOR);
				
			//Str_Cpy(stBsBur.MTR_NUM , DlgTbl_GetStr( ID_TBLLIST, m_lSelIndex, 4));
			//Str_Cpy(stBsBur.BURNER_NUM , DlgTbl_GetStr( ID_TBLLIST, m_lSelIndex, 5));
			Str_Cpy(stBsBur.BURNER_NUM , DlgTbl_GetStr( ID_TBLLIST, m_lSelIndex, 6));
			
			g_nActRow = lPage;

			SetClickData();
		}
		ON_DRAW();
		return;
	}

//------------------------------------------------------------------	
	void SetClickData(void)
	{
		long i, idx, j, n;
		long k = ROW+1;
		long lstartidx;
		long lindex = 0;
		char szSql[800];
		handle hdb = NULL;
		handle hstmt = NULL;
		SQLITE sql = NewSqLite();
		
		hdb = sql->Open(sql);
		if( hdb == NULL )
		{
			goto Finally;
		}

		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		SPRINT(szSql, " SELECT A.CHK_EXEC_NUM, A.MTR_NUM, A.BURNER_NUM, A.UPD_IP, A.UPD_EMPID \
						  	 , A.BURNER_CLASS_CD, A.BURNER_CLASS_NM, A.BURNER_KIND_NUM, A.BURNER_KIND_NM, A.BURNER_MODEL_CD \
							 , A.BURNER_CAPA, A.BURNER_CAPA_UNIT, A.BURNER_INST_YMD, A.BURNER_MODEL_NM, A.MAKER_NM \
							 , A.BOILER_FORM, A.BOILER_FORM_NM, A.MAKE_NUM, A.INST_FLAG,A.INST_FLAG_NM, A.INST_LOC \
							 , A.INST_LOC_NM, A.BOILER_INST_FIRM_CD, A.CHG_FLAG, A.MTR_ID_NUM, A.MAKER_NUM \
							 , A.SEND_YN, A.SPECIAL_NUM, A.CHK_TYPE, A.CHK_YEAR, A.CHK_ORDER \
							 , A.OBJ_YM, A.PLAN_YM, A.BUR_RSLT, A.BURNER_REMOV_YMD, A.DETA_LOC ,A.WORK_YMD , A.WORK_FIRM\
						  FROM SPECIAL_BUR A \
					 	 WHERE A.CHK_EXEC_NUM = ? AND A.MTR_NUM = ? AND A.BURNER_NUM = ? AND (A.CHG_FLAG <> '3' OR A.CHG_FLAG IS NULL) "
					, 0, 0, 0);
		
		hstmt = sql->CreateStatement(sql, szSql);
		
		if( hstmt == NULL )
		{
			PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}

		i = 0;
		sql->Bind(sql, i++, 'U', (long*)g_szCHK_EXEC_NUM, 12, DECRYPT);
		sql->Bind(sql, i++, 'U', (long*)g_szMTR_NUM, 9, DECRYPT);
		sql->Bind(sql, i++, 'U', (long*)stBsBur.BURNER_NUM, 9, DECRYPT);

		if(sql->Execute(sql) == FALSE)
		{
			PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}

		if(sql->Next(sql) == TRUE)
		{
			idx = 0;
			sql->GetValue( sql, idx++, 'U', (long*) stBsBur.CHK_EXEC_NUM       , 12+ 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stBsBur.MTR_NUM            , 10+ 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stBsBur.BURNER_NUM         , 10+ 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stBsBur.UPD_IP             , 15+ 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stBsBur.UPD_EMPID          , 20+ 1, DECRYPT );
			
			sql->GetValue( sql, idx++, 'U', (long*) stBsBur.BURNER_CLASS_CD    , 20+ 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stBsBur.BURNER_CLASS_NM    , 20+ 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stBsBur.BURNER_KIND_NUM    , 20+ 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stBsBur.BURNER_KIND_NM     , 20+ 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stBsBur.BURNER_MODEL_CD    , 20+ 1, DECRYPT );
			
			sql->GetValue( sql, idx++, 'U', (long*) stBsBur.BURNER_CAPA        , 10+ 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stBsBur.BURNER_CAPA_UNIT   , 20+ 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stBsBur.BURNER_INST_YMD    , 8 + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stBsBur.BURNER_MODEL_NM    , 20+ 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stBsBur.MAKER_NM           , 20+ 1, DECRYPT );
			
			sql->GetValue( sql, idx++, 'U', (long*) stBsBur.BOILER_FORM        , 20+ 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stBsBur.BOILER_FORM_NM     , 20+ 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stBsBur.MAKE_NUM           , 20+ 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stBsBur.INST_FLAG          , 20+ 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stBsBur.INST_FLAG_NM          , 20+ 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stBsBur.INST_LOC           , 20+ 1, DECRYPT );
			
			sql->GetValue( sql, idx++, 'U', (long*) stBsBur.INST_LOC_NM        , 20+ 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stBsBur.BOILER_INST_FIRM_CD, 20+ 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stBsBur.CHG_FLAG           , 1 + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stBsBur.MTR_ID_NUM         , 15+ 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stBsBur.MAKER_NUM          , 8 + 1, DECRYPT );
			
			sql->GetValue( sql, idx++, 'U', (long*) stBsBur.SEND_YN            , 1 + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stBsBur.SPECIAL_NUM        , 20+ 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stBsBur.CHK_TYPE           , 2 + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stBsBur.CHK_YEAR           , 4 + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stBsBur.CHK_ORDER          , 2 + 1, DECRYPT );
			
			sql->GetValue( sql, idx++, 'U', (long*) stBsBur.OBJ_YM             , 6 + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stBsBur.PLAN_YM            , 6 + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stBsBur.BUR_RSLT           , 1 + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stBsBur.BURNER_REMOV_YMD   , 10+ 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stBsBur.DETA_LOC           , 30+ 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stBsBur.WORK_YMD           , 8+ 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stBsBur.WORK_FIRM          , 50+ 1, DECRYPT );
		}
	
Finally:
		//sql->Commit(sql);
		DelSqLite(sql);
		return;
	}

//------------------------------------------------------------------
	void REDRAW(void)
	{
		char szSql[300];
		char szTmp[100];
		long i;
		
		//점검제외
		if( Str_Len(g_szCHK_EXCEP_WHY) > 0 )
		{
			Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
			Mem_Set( (byte*)szTmp, 0x00, sizeof(szTmp) );
			SPRINT(szSql, "SELECT ITEM_KNAME FROM COMMONCODE WHERE CODE_ID = 'C30016' AND CODE_ITEM = '%s' AND CODE_ITEM NOT IN('40','50','60','70','90') ",g_szCHK_EXCEP_WHY, 0, 0   );
			g_Sql_RetStr( szSql, 30, szTmp );
			EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA1)   , szTmp);
		}
		else
		{
			if( Str_Len(stBsMtr.CHK_EXCEP_WHY) == 0 )
				Str_Cpy(stBsMtr.CHK_EXCEP_WHY, "10");
			
			Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
			Mem_Set( (byte*)szTmp, 0x00, sizeof(szTmp) );
			SPRINT(szSql, "SELECT ITEM_KNAME FROM COMMONCODE WHERE CODE_ID = 'C30016' AND CODE_ITEM = '%s' AND CODE_ITEM NOT IN('40','50','60','70','90') ",stBsMtr.CHK_EXCEP_WHY, 0, 0   );
			g_Sql_RetStr( szSql, 30, szTmp );
			EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA1)   , szTmp);
		}
		
		//사회복지시설
		i = SearchCD( stBsMtr.FACI_STS_CD, SOCIAL_FACI_STS_CD );
		
		if(i == -1)
		{
			EditCtrl_SetStr(Get_hDlgCtrlByID(CMB_DATA10), SOCIAL_FACI_STS_CD[0].Str);	
		}
		else
		{
			EditCtrl_SetStr(Get_hDlgCtrlByID(CMB_DATA10), SOCIAL_FACI_STS_CD[i].Str);
		}

		//계량기 정보
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA1)   , stBsMtr.MTR_GRD);
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA2)   , stBsMtr.MTR_MODEL_NM);
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA3)   , stBsMtr.MTR_ID_NUM);
		
		//보정기정보
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA5)   , stBsMtr.COMPENS_MODEL_NM);
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA6)   , stBsMtr.COMPENS_ID_NUM);
		
		//상품
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA7)   , stBsMtr.PROD_NM);
		
		//상태
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA8)   , stBsMtr.MTR_SUPPLY_STS);
		
		//상호
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA9)   , stBsMtr.FIRM_NM);
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA10)   , stBsMtr.CUST_NM);
		
		//계량기 점검결과
		if( Str_Cmp(stBsMtr.MRT_RSLT, "N") == 0 )
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_RSLT)   , "부적합");
			EditCtrl_SetForeColorEx( Get_hDlgCtrlByID(TXT_RSLT), RED);
		}
		else if ( Str_Cmp(stBsMtr.MRT_RSLT, "Y") == 0 )
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_RSLT)   , "적합");
			EditCtrl_SetForeColorEx( Get_hDlgCtrlByID(TXT_RSLT), TXTFRCOLOR);
		}
		else
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_RSLT)   , "미점검");
			EditCtrl_SetForeColorEx( Get_hDlgCtrlByID(TXT_RSLT), TXTFRCOLOR);
		}

		//메모 버튼
		if( Str_Len(stBsMtr.MEMO) > 0 )
		{
			ButCtrl_SetForeColorEx(Get_hDlgCtrlByID(BID_MEMO), RED);
		}
		else
		{
			ButCtrl_SetForeColorEx(Get_hDlgCtrlByID(BID_MEMO), BTNMENUFRCOLOR);
		}		
	}

//------------------------------------------------------------------		
	void BOIL_DRAW(void)
	{
		char sztmp[50];
		char szSql[300];
		char szYear[5];
		char szMonth[3];
		char szDay[3];
		long i;

		//종류
		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
		SPRINT(szSql, "SELECT BURNER_KIND_NM FROM BURNER_KIND WHERE BURNER_KIND_NUM = '%s'  ",stBsBur.BURNER_KIND_NUM, 0, 0   );
		g_Sql_RetStr( szSql, 20, sztmp );
		EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA2), sztmp);


		//제조사명
		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
		//SPRINT(szSql, "SELECT MAKER_NM FROM USE_MAKER WHERE MAKER_FLAG = '50' AND MAKER_NUM = '%s' ORDER BY MAKER_NM   ",stBsBur.MAKER_NUM, 0, 0   );
		SPRINT(szSql, "SELECT MAKER_NM FROM USE_MAKER WHERE MAKER_FLAG = '50' AND MAKER_NUM = '%s' ",stBsBur.MAKER_NUM, 0, 0 );
		g_Sql_RetStr( szSql, 20, sztmp );
		EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA3)   , sztmp);

		EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA1), stBsBur.BURNER_MODEL_NM);	//모델명
		EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA2), stBsBur.BURNER_CAPA);		//용량

		DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA2), TRUE );
		DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA2), TRUE );
		DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA4), TRUE );
		
		
		//설치일자
		//Mem_Set( (byte*)szDate, 0x00, sizeof(szDate) );
		//g_Str_DateType(szDate, stBsBur.BURNER_INST_YMD);
		//EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA21), szDate);	
//PRINT("sztmp : %s",sztmp,0,0);
		Mem_Set((byte*)szYear, 0x00, sizeof(szYear));
		Mem_Set((byte*)szMonth, 0x00, sizeof(szMonth));
		Mem_Set((byte*)szDay, 0x00, sizeof(szDay));
		Mem_Cpy((byte *)szYear, (byte *)stBsBur.BURNER_INST_YMD, 4);
		Mem_Cpy((byte *)szMonth, (byte *)stBsBur.BURNER_INST_YMD+4, 2);
		Mem_Cpy((byte *)szDay, (byte *)stBsBur.BURNER_INST_YMD+6, 2);
		
		EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA7), szYear );
		EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA8), szMonth );
		EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA9), szDay );
		
		EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA3), stBsBur.MAKE_NUM);			//제조번호

		//단위
		i = SearchCD( stBsBur.BURNER_CAPA_UNIT, SCBOIL_CAPA );
		if( i == -1 )
			EditCtrl_SetStr(Get_hDlgCtrlByID(CMB_DATA4), "");
		else
			EditCtrl_SetStr(Get_hDlgCtrlByID(CMB_DATA4), SCBOIL_CAPA[i].Str);
		
		//구분
		i = SearchCD( stBsBur.CHG_FLAG, SCCHG_FLAG );
		if( i == -1 )
		{
			i = 1;
			EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA16), SCCHG_FLAG[i].Str);
		}
		else
		{
			EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA16), SCCHG_FLAG[i].Str);
		}

		//설치위치
		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
		SPRINT(szSql, "SELECT ITEM_KNAME FROM COMMONCODE WHERE CODE_ID = 'C30028' AND CODE_ITEM = '%s'  ",stBsBur.INST_LOC, 0, 0   );
		g_Sql_RetStr( szSql, 20, sztmp );			
		EditCtrl_SetStr(Get_hDlgCtrlByID(CMB_DATA5), sztmp);
		
		//형식
		i = SearchCD( stBsBur.BOILER_FORM, SCBOIL_FORM );
		if( i == -1 )
			EditCtrl_SetStr(Get_hDlgCtrlByID(CMB_DATA6), "");
		else
			EditCtrl_SetStr(Get_hDlgCtrlByID(CMB_DATA6), SCBOIL_FORM[i].Str);
		
		//시공사
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA39) ,stBsBur.WORK_FIRM);

		//서류접수일
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA40) ,stBsBur.WORK_YMD);

		// 상세위치 보일러수정
		EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DETA_LOC), stBsBur.INST_LOC_NM);
		
		return;
	}
	
	/*=======================================================================================
	함수명 : BURN_DRAW
	기  능 : 연소기 수정 디스플레이
	Param  : 
	Return : 
	========================================================================================*/	
	void BURN_DRAW(void)
	{
		char sztmp[50];
		char szSql[300];
		char szYear[5];
		char szMonth[3];
		char szDay[3];
		long i;
	
		//종류
		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
		SPRINT(szSql, "SELECT BURNER_KIND_NM FROM BURNER_KIND WHERE BURNER_KIND_NUM = '%s'  ",stBsBur.BURNER_KIND_NUM, 0, 0   );
		g_Sql_RetStr( szSql, 20, sztmp );
		EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA7)   , sztmp);
		
		//제조사명
		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
		SPRINT(szSql, "SELECT MAKER_NM FROM USE_MAKER WHERE MAKER_FLAG = '50' AND MAKER_NUM = '%s' ",stBsBur.MAKER_NUM, 0, 0   );
		g_Sql_RetStr( szSql, 20, sztmp );
		EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA8)   , sztmp);
		
		EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA4), stBsBur.BURNER_MODEL_NM);	//모델명
		EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA5), stBsBur.BURNER_CAPA);		//용량
		
		//설치일자
		//Mem_Set( (byte*)szDate, 0x00, sizeof(szDate) );
		//g_Str_DateType(szDate, stBsBur.BURNER_INST_YMD);
		//EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA27), szDate);
		Mem_Set((byte*)szYear, 0x00, sizeof(szYear));
		Mem_Set((byte*)szMonth, 0x00, sizeof(szMonth));
		Mem_Set((byte*)szDay, 0x00, sizeof(szDay));
		Mem_Cpy((byte *)szYear, (byte *)stBsBur.BURNER_INST_YMD, 4);
		Mem_Cpy((byte *)szMonth, (byte *)stBsBur.BURNER_INST_YMD+4, 2);
		Mem_Cpy((byte *)szDay, (byte *)stBsBur.BURNER_INST_YMD+6, 2);
		
		EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA10), szYear );
		EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA11), szMonth );
		EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA12), szDay );	

		//단위
		i = SearchCD( stBsBur.BURNER_CAPA_UNIT, SCBOIL_CAPA );
		if( i == -1 )
			EditCtrl_SetStr(Get_hDlgCtrlByID(CMB_DATA9), "");
		else
			EditCtrl_SetStr(Get_hDlgCtrlByID(CMB_DATA9), SCBOIL_CAPA[i].Str);
		
		//구분
		i = SearchCD( stBsBur.CHG_FLAG, SCCHG_FLAG );
		if( i == -1 )
		{
			i = 1;
			EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA29), SCCHG_FLAG[i].Str);
		}
		else
		{
			EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA29), SCCHG_FLAG[i].Str);
		}

		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA41)   , stBsBur.INST_LOC_NM);
		
		// 상세위치 연소기수정
		EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DETA_LOC), stBsBur.INST_LOC_NM);
		// EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DETA_LOC), stBsBur.DETA_LOC);
		
	}

	
//------------------------------------------------------------------
	void Del_Bur(void)
	{
		char szSql[400];
		long idx;
		handle hdb = NULL;
		handle hstmt = NULL;
		SQLITE sql = NewSqLite();
		
		if( Str_Cmp(stBsBur.BUR_RSLT, "N") == 0 )
		{
			MessageBoxEx (CONFIRM_OK, "부적합 연소기는 삭제 할수없습니다.");
			goto Finally;
		}
		
		Str_ItoA(Time_GetDate(), stBsBur.BURNER_REMOV_YMD, 10);
		

		hdb = sql->Open(sql);
		if( hdb == NULL )
		{
			goto Finally;
		}

		if( Str_Cmp(stBsBur.CHG_FLAG, "1") == 0 )
		{
			Mem_Set((byte*)szSql ,0x00, sizeof(szSql) );
			SPRINT(szSql, " DELETE FROM SPECIAL_BUR WHERE CHK_EXEC_NUM = ? AND BURNER_NUM = ? AND MTR_NUM = ? "
							, 0, 0, 0);
		//	g_Sql_DirectExecute( szSql );
		//	goto Finally;
		}
		else
		{
			//설치구분  > 삭제(3)로 밖아놓기 , decode(CHG_FLAG,'1','신규','2','수정','3','삭제')
			Str_Cpy(stBsBur.CHG_FLAG, "3" );
		
			Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
			SPRINT(szSql, "UPDATE SPECIAL_BUR SET \
						CHG_FLAG = ?, BURNER_REMOV_YMD = ?, SEND_YN = 'S', UPD_EMPID = ?, UPD_IP = ? \
						WHERE CHK_EXEC_NUM = ? AND BURNER_NUM = ? AND MTR_NUM = ? "
						, 0, 0, 0);
		}
		
		hstmt = sql->CreateStatement(sql, szSql);
		if( hstmt == NULL )
		{
			PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}

		idx = 0;
		if( Str_Cmp(stBsBur.CHG_FLAG, "1") == 0 )
		{
			sql->Bind(sql, idx++, 'U', (long *)g_szCHK_EXEC_NUM	        ,12  ,DECRYPT);
			sql->Bind(sql, idx++, 'U', (long *)stBsBur.BURNER_NUM		,10  ,DECRYPT);
			//sql->Bind(sql, idx++, 'U', (long *)stBsBur.MTR_NUM		    ,10 ,DECRYPT);
			sql->Bind(sql, idx++, 'U', (long *)g_szMTR_NUM		    ,10 ,DECRYPT);
		}
		else
		{
			sql->Bind(sql, idx++, 'U', (long *)stBsBur.CHG_FLAG	        ,2	,DECRYPT);
			sql->Bind(sql, idx++, 'U', (long *)stBsBur.BURNER_REMOV_YMD	,10 ,DECRYPT);
			sql->Bind(sql, idx++, 'U', (long *)stUserinfo.szemployee_id ,20 ,DECRYPT);
			sql->Bind(sql, idx++, 'U', (long *)stUserinfo.szpda_ip      ,15 ,DECRYPT);
		
			sql->Bind(sql, idx++, 'U', (long *)g_szCHK_EXEC_NUM	        ,12 ,DECRYPT);
			sql->Bind(sql, idx++, 'U', (long *)stBsBur.BURNER_NUM		,10 ,DECRYPT);
			//sql->Bind(sql, idx++, 'U', (long *)stBsBur.MTR_NUM		    ,10 ,DECRYPT);
			sql->Bind(sql, idx++, 'U', (long *)g_szMTR_NUM		        ,10 ,DECRYPT);
		}

		if(sql->Execute(sql) == FALSE)
		{
			PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}
		else
		{
			MessageBoxEx (CONFIRM_OK, "삭제 되었습니다.");
			m_lLstpage = 0;
			m_lDelFlag = 1;
		}

		
Finally:
		//sql->Commit(sql);
		DelSqLite(sql);
		
		return;
	}
	
//------------------------------------------------------------------------------------------------
	bool CHG_Boil(void)
	{
		char szSql[500];
		char sztmp[150];
		long idx;
		long i;
		long nLen;
		bool ret = TRUE;
		handle hdb = NULL;
		handle hstmt = NULL;
		SQLITE sql = NewSqLite();

		//설치일자
		Mem_Set((byte *)sztmp, 0x00, sizeof(sztmp));
		Str_Cpy(sztmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA7)));
		Str_Cat(sztmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA8)));
		Str_Cat(sztmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA9)));
		if( Str_Len(sztmp) > 0 && Str_Len(sztmp) < 8 )
		{
			MessageBoxEx (CONFIRM_OK, "유효한 날짜 형식이 아닙니다.\n(ex: 2016. 01. 01)");
			ret = FALSE;
			goto Finally;
		}

		nLen = 0;
		nLen = g_GetUtf8Size(EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA1)));
		if( nLen > 20 )
		{
			Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
			SPRINT(sztmp, "저장실패!\n(모델명은 한글 6자,\n영문,숫자 20자 까지만\n입력가능합니다.)\n[%d]", nLen, 0, 0);
			MessageBoxEx(CONFIRM_OK, sztmp);
			ret = FALSE;
			goto Finally;
		}
		
		nLen = 0;
		nLen = g_GetUtf8Size(EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA3)));
		if( nLen > 20 )
		{
			Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
			SPRINT(sztmp, "저장실패!\n(제조번호는 한글 6자,\n영문,숫자 20자 까지만\n입력가능합니다.)\n[%d]", nLen, 0, 0);
			MessageBoxEx(CONFIRM_OK, sztmp);
			ret = FALSE;
			goto Finally;
		}

		nLen = 0;
		nLen = g_GetUtf8Size(EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DETA_LOC)));
		if( nLen > 20 )
		{
			Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
			SPRINT(sztmp, "저장실패!\n(상세위치는 한글 10자,\n영문,숫자 30자 까지만\n입력가능합니다.)\n[%d]", nLen, 0, 0);
			MessageBoxEx(CONFIRM_OK, sztmp);
			ret = FALSE;
			goto Finally;
		}

		Str_Cpy(stBsBur.BURNER_MODEL_NM, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA1)));	//모델명
		Str_Cpy(stBsBur.BURNER_CAPA, 	 EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA2)));	//용량

		//설치일자
		//Str_Chg(EditCtrl_GetStr(Get_hDlgCtrlByID(TXT_DATA21)), STRCHG_DEL_NONDIGIT);
		//Str_Cpy(stBsBur.BURNER_INST_YMD, EditCtrl_GetStr(Get_hDlgCtrlByID(TXT_DATA21)));
		Mem_Set((byte *)sztmp, 0x00, sizeof(sztmp));
		Str_Cpy(sztmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA7)));
		Str_Cat(sztmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA8)));
		Str_Cat(sztmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA9)));
		Str_Chg(sztmp, STRCHG_DEL_NONDIGIT);
		Str_Cpy(stBsBur.BURNER_INST_YMD, sztmp );		

		//제조번호
		Str_Cpy(stBsBur.MAKE_NUM, 		 EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA3)));	

		//종류
		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		Str_Cpy(stBsBur.BURNER_KIND_NM, EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA2)));
		SPRINT(szSql, "SELECT BURNER_KIND_NUM FROM BURNER_KIND WHERE BURNER_KIND_NM = '%s'  ", stBsBur.BURNER_KIND_NM, 0, 0   );
		g_Sql_RetStr( szSql, 20, stBsBur.BURNER_KIND_NUM );

		//보일러 분류
		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		SPRINT(szSql, "SELECT BURNER_CLASS_CD FROM BURNER_KIND WHERE BURNER_KIND_NUM = '%s' AND BURNER_KIND_NUM IN ('201', '301') ", stBsBur.BURNER_KIND_NUM, 0, 0   );
		g_Sql_RetStr( szSql, 20, stBsBur.BURNER_CLASS_CD );

		//제조사명
		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		Str_Cpy(stBsBur.MAKER_NM, EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA3)));
		//SPRINT(szSql, "SELECT MAKER_NUM FROM USE_MAKER WHERE MAKER_FLAG = '50' AND MAKER_NM = '%s' ORDER BY MAKER_NM   ", stBsBur.MAKER_NM, 0, 0   );
		SPRINT(szSql, "SELECT MAKER_NUM FROM USE_MAKER WHERE MAKER_FLAG = '50' AND MAKER_NM = '%s' ", stBsBur.MAKER_NM, 0, 0);
		g_Sql_RetStr( szSql, 20, stBsBur.MAKER_NUM );

		//단위
		i = SearchStr( EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA4)), SCBOIL_CAPA );
		if (i == -1)
			Str_Cpy(stBsBur.BURNER_CAPA_UNIT, "");
		else
			Str_Cpy(stBsBur.BURNER_CAPA_UNIT, SCBOIL_CAPA[i].Code);
			
		//보일러 (설치)위치구분
		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
		Str_Cpy(sztmp, EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA5)));
		SPRINT(szSql, "SELECT CODE_ITEM FROM COMMONCODE WHERE CODE_ID = 'C30028' AND ITEM_KNAME = '%s' ", sztmp, 0, 0   );
		g_Sql_RetStr( szSql, 20, stBsBur.INST_LOC );

		//형식명, 코드
		Str_Cpy( stBsBur.BOILER_FORM_NM, EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA6)) );
		i = SearchStr( EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA6)), SCBOIL_FORM );
		if (i == -1)
			Str_Cpy(stBsBur.BOILER_FORM, "");
		else
			Str_Cpy(stBsBur.BOILER_FORM, SCBOIL_FORM[i].Code);
		
		// 상세위치
		Mem_Set( (byte*)stBsBur.DETA_LOC, 0x00, sizeof(stBsBur.DETA_LOC) );
		Str_Cpy( stBsBur.DETA_LOC, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DETA_LOC)) );
		
		

		//send_yn
		Str_Cpy(stBsBur.SEND_YN, "S");
		
		hdb = sql->Open(sql);
		if( hdb == NULL )
		{
			ret = FALSE;
			goto Finally;
		}
		
		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		SPRINT(szSql, "UPDATE SPECIAL_BUR \
						  SET BURNER_KIND_NM = ?, BURNER_KIND_NUM = ?, BURNER_CLASS_CD = ?, MAKER_NM = ?, MAKER_NUM = ? \
						    , BURNER_MODEL_NM = ?, BURNER_CAPA = ?, BURNER_CAPA_UNIT = ?, BURNER_INST_YMD = ?, INST_LOC = ? \
							, MAKE_NUM = ?, BOILER_FORM = ?, BOILER_FORM_NM = ?, SEND_YN = ?, UPD_IP = ? \
							, UPD_EMPID = ?, DETA_LOC = ?, INST_LOC_NM = ? , CHG_FLAG = '2' \
						WHERE CHK_EXEC_NUM = ? AND MTR_NUM = ? AND BURNER_NUM = ? AND BURNER_KIND_NUM IN (201, 301) "
			  , 0, 0, 0);
		
		hstmt = sql->CreateStatement(sql, szSql);
		
		if( hstmt == NULL )
		{
			PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
			ret = FALSE;
			goto Finally;
		}

		idx = 0;
		sql->Bind(sql, idx++, 'U', (long *)stBsBur.BURNER_KIND_NM	,20	,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stBsBur.BURNER_KIND_NUM	,20	,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stBsBur.BURNER_CLASS_CD  ,20, DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stBsBur.MAKER_NM		    ,20	,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stBsBur.MAKER_NUM		,20	,DECRYPT);
		
		sql->Bind(sql, idx++, 'U', (long *)stBsBur.BURNER_MODEL_NM	,20	,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stBsBur.BURNER_CAPA		,10	,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stBsBur.BURNER_CAPA_UNIT	,20	,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stBsBur.BURNER_INST_YMD	,8	,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stBsBur.INST_LOC			,20	,DECRYPT);
		
		sql->Bind(sql, idx++, 'U', (long *)stBsBur.MAKE_NUM			,20	,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stBsBur.BOILER_FORM		,2	,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stBsBur.BOILER_FORM_NM	,20	,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stBsBur.SEND_YN			,1	,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stUserinfo.szpda_ip      ,15 ,DECRYPT);
		
		sql->Bind(sql, idx++, 'U', (long *)stUserinfo.szemployee_id ,20 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stBsBur.DETA_LOC         ,30 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stBsBur.DETA_LOC         ,30 ,DECRYPT);
		
		sql->Bind(sql, idx++, 'U', (long *)g_szCHK_EXEC_NUM	        ,12 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)g_szMTR_NUM		        ,10 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stBsBur.BURNER_NUM		,10 ,DECRYPT);

		if(sql->Execute(sql) == FALSE)
		{
			PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
			ret = FALSE;
			goto Finally;
		}
		else
		{
			MessageBoxEx (CONFIRM_OK, "수정 되었습니다.");
		}	
		
Finally:
		

		
		DelSqLite(sql);
		return ret;
	}	
	
	/*=======================================================================================
	함수명 : CHG_Bur
	기  능 : 연소기 신규생성/수정 디스플레이
	Param  : 
	Return : 
	========================================================================================*/	
	bool CHG_Bur(void)
	{
		char szSql[500];
		char sztmp[150];
		bool ret = TRUE;
		long idx;
		long i;
		long nLen = 0;
		handle hdb = NULL;
		handle hstmt = NULL;
		SQLITE sql = NewSqLite();

		//설치일자
		Mem_Set((byte *)sztmp, 0x00, sizeof(sztmp));
		Str_Cpy(sztmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA10)));
		Str_Cat(sztmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA11)));
		Str_Cat(sztmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA12)));
		if( Str_Len(sztmp) > 0 && Str_Len(sztmp) < 8 )
		{
			MessageBoxEx (CONFIRM_OK, "유효한 날짜 형식이 아닙니다.\n(ex: 2016. 01. 01)");
			ret = FALSE;
			goto Finally;
		}

		nLen = g_GetUtf8Size(EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA4)));
		if( nLen > 20 )
		{
			Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
			SPRINT(sztmp, "저장실패!\n(모델명은 한글 6자,\n영문,숫자 20자 까지만\n입력가능합니다.)\n[%d]", nLen, 0, 0);
			MessageBoxEx(CONFIRM_OK, sztmp);
			ret = FALSE;
			goto Finally;
		}

		nLen = 0;
		nLen = g_GetUtf8Size(EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DETA_LOC)));
		if( nLen > 20 )
		{
			Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
			SPRINT(sztmp, "저장실패!\n(상세위치는 한글 10자,\n영문,숫자 30자 까지만\n입력가능합니다.)\n[%d]", nLen, 0, 0);
			MessageBoxEx(CONFIRM_OK, sztmp);
			ret = FALSE;
			goto Finally;
		}

		Str_Cpy(stBsBur.BURNER_MODEL_NM, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA4)));	//모델명
		Str_Cpy(stBsBur.BURNER_CAPA, 	 EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA5)));	//용량

		//설치일자
		//Str_Chg(EditCtrl_GetStr(Get_hDlgCtrlByID(TXT_DATA27)), STRCHG_DEL_NONDIGIT);
		//Str_Cpy(stBsBur.BURNER_INST_YMD, EditCtrl_GetStr(Get_hDlgCtrlByID(TXT_DATA27)));
		Mem_Set((byte *)sztmp, 0x00, sizeof(sztmp));
		Str_Cpy(sztmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA10)));
		Str_Cat(sztmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA11)));
		Str_Cat(sztmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA12)));
		Str_Chg(sztmp, STRCHG_DEL_NONDIGIT);
		Str_Cpy(stBsBur.BURNER_INST_YMD, sztmp );	


		//종류
		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		Str_Cpy(stBsBur.BURNER_KIND_NM, EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA7)));
		SPRINT(szSql, "SELECT BURNER_KIND_NM, BURNER_KIND_NUM FROM BURNER_KIND ", 0, 0, 0   );
		g_Sql_Bind(szSql, 30, stBsBur.BURNER_KIND_NM, 3, stBsBur.BURNER_KIND_NUM);

		//보일러 분류
		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		SPRINT(szSql, "SELECT BURNER_CLASS_CD FROM BURNER_KIND WHERE BURNER_KIND_NUM = '%s' AND BURNER_KIND_NUM NOT IN ('201', '301') ", stBsBur.BURNER_KIND_NUM, 0, 0   );
		g_Sql_RetStr( szSql, 20, stBsBur.BURNER_CLASS_CD );

		//제조사명
		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		Str_Cpy(stBsBur.MAKER_NM, EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA8)));
		//SPRINT(szSql, "SELECT MAKER_NUM FROM USE_MAKER WHERE MAKER_FLAG = '50' AND MAKER_NM = '%s' ORDER BY MAKER_NM ", stBsBur.MAKER_NM, 0, 0 );
		SPRINT(szSql, "SELECT MAKER_NUM FROM USE_MAKER WHERE MAKER_FLAG = '50' AND MAKER_NM = '%s' ", stBsBur.MAKER_NM, 0, 0);
		g_Sql_RetStr( szSql, 20, stBsBur.MAKER_NUM );

		//단위
		i = SearchStr( EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA9)), SCBOIL_CAPA );
		if (i == -1)
			Str_Cpy(stBsBur.BURNER_CAPA_UNIT, "");
		else
			Str_Cpy(stBsBur.BURNER_CAPA_UNIT, SCBOIL_CAPA[i].Code);
		
		// 상세위치
		Mem_Set( (byte*)stBsBur.DETA_LOC, 0x00, sizeof(stBsBur.DETA_LOC) );
		Str_Cpy( stBsBur.DETA_LOC, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DETA_LOC)) );
		
		//send_yn
		Str_Cpy(stBsBur.SEND_YN, "S" );

		hdb = sql->Open(sql);
		if( hdb == NULL )
		{
			ret = FALSE;
			goto Finally;
		}
	
		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		SPRINT(szSql, "UPDATE SPECIAL_BUR \
					      SET BURNER_KIND_NM = ?, BURNER_KIND_NUM = ?, BURNER_CLASS_CD = ?, MAKER_NM = ?, MAKER_NUM = ? \
					        , BURNER_MODEL_NM = ?, BURNER_CAPA = ?, BURNER_CAPA_UNIT = ?, BURNER_INST_YMD = ?, SEND_YN = ? \
					        , UPD_IP = ?, UPD_EMPID = ?, DETA_LOC = ?, CHG_FLAG = '2' \
					    WHERE CHK_EXEC_NUM = ? AND MTR_NUM = ? AND BURNER_NUM = ? AND BURNER_KIND_NUM NOT IN (201, 301)"
		      , 0, 0, 0);
		     
		hstmt = sql->CreateStatement(sql, szSql);

		if( hstmt == NULL )
		{
			PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
			ret = FALSE;
			goto Finally;
		}

		idx = 0;
		sql->Bind(sql, idx++, 'U', (long *)stBsBur.BURNER_KIND_NM	,30	,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stBsBur.BURNER_KIND_NUM	,20	,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stBsBur.BURNER_CLASS_CD  ,20,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stBsBur.MAKER_NM  		,20	,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stBsBur.MAKER_NUM		,20	,DECRYPT);
		
		sql->Bind(sql, idx++, 'U', (long *)stBsBur.BURNER_MODEL_NM	,20	,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stBsBur.BURNER_CAPA		,10	,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stBsBur.BURNER_CAPA_UNIT	,20	,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stBsBur.BURNER_INST_YMD	,8	,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stBsBur.SEND_YN			,1	,DECRYPT);
		
		sql->Bind(sql, idx++, 'U', (long *)stUserinfo.szpda_ip      ,15 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stUserinfo.szemployee_id ,20 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stBsBur.DETA_LOC         ,30 ,DECRYPT);
		
		sql->Bind(sql, idx++, 'U', (long *)g_szCHK_EXEC_NUM	        ,12 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)g_szMTR_NUM	            ,10 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stBsBur.BURNER_NUM		,10 ,DECRYPT);

		if(sql->Execute(sql) == FALSE)
		{
			PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
			ret = FALSE;
			goto Finally;
		}
		else
		{
			MessageBoxEx (CONFIRM_OK, "수정 되었습니다.");
		}
		
Finally:
		//sql->Commit(sql);
		DelSqLite(sql);
		return ret;
	}
	
//-------------------------------------------------------------------------------------------------------------
	bool Save_Chk(void)
	{
		char szSql[500];
		char sztmp[300];
		char sztmp2[300];
		char szDate[300];
		
		bool ret = TRUE;
		long lCnt;
		long lNoCnt;

		if( Str_Len(g_szCHK_EXCEP_WHY) > 0 )
		{
			Str_Cpy(stBsMtr.CHK_EXCEP_WHY, g_szCHK_EXCEP_WHY);
		}

		if( Str_Cmp(stBsMtr.CHK_EXCEP_WHY, "10") != 0 )
		{
			Mem_Set((byte*)szSql ,0x00, sizeof(szSql) );
/*
			SPRINT(szSql, " DELETE FROM SPECIAL_NOGOOD_DETAL WHERE CHK_EXEC_NUM ='%s' AND MTR_NUM = '%s' "
							, stBsNogood.CHK_EXEC_NUM, stBsBur.MTR_NUM, 0);
*/
			SPRINT(szSql, " DELETE FROM SPECIAL_NOGOOD_DETAL WHERE CHK_EXEC_NUM ='%s' AND MTR_NUM = '%s' "
							, stBsNogood.CHK_EXEC_NUM, g_szMTR_NUM, 0);
			g_Sql_DirectExecute( szSql );

	    	Str_Cpy(stBsMtr.CHK_RSLT, "E");
	    	Str_Cpy(stBsMtr.MRT_RSLT, "Y");
	    	Str_Cpy(stBsMtr.INDI_VC_CUR, "0");
	    	Str_Cpy(stBsMtr.INDI_VA_CUR, "0");
	    	Str_Cpy(stBsMtr.MTR_INDI_CUR, "0");
	    	
	    	Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );	
	        Str_ItoA(Time_GetDate(), sztmp, 10);	
		    
		    Mem_Set( (byte*)sztmp2, 0x00, sizeof(sztmp2) );	
	        g_Str_TimeType( sztmp2, Time_GetTime() );
	        
	        Mem_Set( (byte*)szDate, 0x00, sizeof(szDate) );
	        Str_Cpy(szDate, sztmp);
	        Str_Cat(szDate, sztmp2);
	        
	    	Str_Cpy(stBsMtr.VISIT_DTM, szDate);
	    	
	    	ret = Save_Result();
	    	
	    	return ret;
		}
		
		if( Str_Cmp(stBsMtr.MRT_RSLT, "N") != 0 && Str_Cmp(stBsMtr.MRT_RSLT, "Y") != 0 )
		{
			MessageBoxEx (CONFIRM_OK, "계량기를 점검하세요.");
			ret = FALSE;
			return ret;
		}

		//연소기 갯수 확인
		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		SPRINT(szSql, " SELECT COUNT(*) FROM SPECIAL_BUR WHERE CHK_EXEC_NUM ='%s' \
						AND MTR_NUM = '%s' AND (CHG_FLAG <> '3' OR CHG_FLAG IS NULL) "
						, g_szCHK_EXEC_NUM, g_szMTR_NUM, 0);
		g_Sql_RetInt(szSql, &lCnt);
		if( lCnt > 0 )
		{
		
			//연소기 부적합 갯수
			Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
			SPRINT(szSql, " SELECT COUNT(*) FROM SPECIAL_NOGOOD_DETAL WHERE CHK_EXEC_NUM ='%s' \
							AND MTR_NUM = '%s' AND CHK_SEC_CD = '50' AND BETTER_YN ='N' "
							, g_szCHK_EXEC_NUM, g_szMTR_NUM, 0);
			g_Sql_RetInt(szSql, &lNoCnt);
		
			if( stBsMtr.MRT_RSLT[0] == 'Y' && (lNoCnt == 0) )
			{
				Str_Cpy(stBsMtr.CHK_RSLT, "Y");
			}
			else
			{
				Str_Cpy(stBsMtr.CHK_RSLT, "N");
			}
		}
		else
		{
			if( stBsMtr.MRT_RSLT[0] == 'Y' )
			{
				Str_Cpy(stBsMtr.CHK_RSLT, "Y");
			}
			else
			{
				Str_Cpy(stBsMtr.CHK_RSLT, "N");
			}
		}
		
    	Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );	
        Str_ItoA(Time_GetDate(), sztmp, 10);	
	    
	    Mem_Set( (byte*)sztmp2, 0x00, sizeof(sztmp2) );	
        g_Str_TimeType( sztmp2, Time_GetTime() );
        
        Mem_Set( (byte*)szDate, 0x00, sizeof(szDate) );
        Str_Cpy(szDate, sztmp);
        Str_Cat(szDate, sztmp2);
        
    	Str_Cpy(stBsMtr.VISIT_DTM, szDate);
	    
    	ret = Save_Result();
    	
    	return ret;
	}
	
//----------------------------------------------------------------------
	bool Save_Result(void)
	{
		char szSql[500];
		long idx;
		bool ret = TRUE;
		handle hdb = NULL;
		handle hstmt = NULL;
		SQLITE sql = NewSqLite();
		
		hdb = sql->Open(sql);
		if( hdb == NULL )
		{
			ret = FALSE;
			goto Finally;
		}

		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		SPRINT(szSql, "UPDATE SPECIAL_MTR SET \
					MTR_INDI_CUR = ?, INDI_VA_CUR = ?, INDI_VC_CUR = ?, CHK_EXCEP_WHY = ?, CHK_RSLT = ? \
					, MRT_RSLT = ?, VISIT_DTM = ?, SEND_YN = 'S', UPD_EMPID = ?, PDA_IP = ? \
					WHERE CHK_EXEC_NUM = ? AND MTR_NUM = ? "
					, 0, 0, 0);
		hstmt = sql->CreateStatement(sql, szSql);
		if( hstmt == NULL )
		{
			PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
			ret = FALSE;
			goto Finally;
		}
		
		idx = 0;
		sql->Bind(sql, idx++, 'U', (long *)stBsMtr.MTR_INDI_CUR		,9	,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stBsMtr.INDI_VA_CUR		,9	,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stBsMtr.INDI_VC_CUR		,9	,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stBsMtr.CHK_EXCEP_WHY    ,2	,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stBsMtr.CHK_RSLT		    ,1	,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stBsMtr.MRT_RSLT 	    ,1	,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stBsMtr.VISIT_DTM		,14 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stUserinfo.szemployee_id	,20 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stUserinfo.szpda_ip	    ,15 ,DECRYPT);

		sql->Bind(sql, idx++, 'U', (long *)g_szCHK_EXEC_NUM	        ,12 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stBsMtr.MTR_NUM	        ,9  ,DECRYPT);

		if(sql->Execute(sql) == FALSE)
		{
			PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
			ret = FALSE;
			goto Finally;
		}
		
Finally:
		//sql->Commit(sql);
		DelSqLite(sql);
		return ret;
	}
	
//----------------------------------------------------------------------------------
	void Del_PipeData(void)
	{
		char szSql[300];
	
		Mem_Set((byte*)szSql ,0x00, sizeof(szSql) );
		SPRINT(szSql, " DELETE FROM SPECIAL_PIPE_CHK_DATA WHERE CHK_EXEC_NUM ='%s' AND MTR_NUM = '%s' AND PIPE_FLAG = '10' "
						, g_szCHK_EXEC_NUM, g_szMTR_NUM, 0);
		g_Sql_DirectExecute( szSql );
		
		Mem_Set((byte*)szSql ,0x00, sizeof(szSql) );
		SPRINT(szSql, " DELETE FROM SPECIAL_PIPE_CHK_DATA WHERE CHK_EXEC_NUM ='%s' AND MTR_NUM = '%s' AND PIPE_FLAG = '20' "
						, g_szCHK_EXEC_NUM, g_szMTR_NUM, 0);
		g_Sql_DirectExecute( szSql );
	}

}


