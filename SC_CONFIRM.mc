/*----------------------------------------------------------------------------------
	Project Name:
	Smart Application : 카드 기본폼
	Smart Version : Smart 1.0
	Copyright(c) 2014  ValueCMD Co., Ltd.
----------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------
	Card Name : SC_CONFIRM
	Card Desc : 안전점검 등록 화면
	Card Hist :
----------------------------------------------------------------------------------*/
card SC_CONFIRM
{
	#include <include.h>
	#include "globalcard.h"
	#include "SQL.lib"
	#include "Calendar.h"
	
//	#define USE_ON_EXIT
	#define USE_ON_CHAR
//	#define USE_ON_KEY
//	#define USE_ON_DRAW
//	#define USE_ON_TIMER
	#define USE_ON_POINTING
	#define USE_ON_SELECT

	#include "DefEvent.h"

	//---------------------------------------------------------------
	// BUTTON ID define
	//---------------------------------------------------------------
	BEGIN_BUTTON_ID()
		//화면 상단 공통 메뉴 모음
		DEF_BUTTON_ID ( BID_HOME )		//홈
		DEF_BUTTON_ID ( BID_MENU )		//메뉴
		DEF_BUTTON_ID ( BID_KEYBOARD )	//키보드
		DEF_BUTTON_ID ( BID_SCREEN )	//화면 상하
		DEF_BUTTON_ID ( BID_CMMNWORK )	//공통업무
		DEF_BUTTON_ID ( BID_PREV )		//이전
		DEF_BUTTON_ID ( BID_EXIT )		//종료
		
		//화면 일반
		DEF_BUTTON_ID ( BID_ILLIGAL )	//불법 
		DEF_BUTTON_ID ( BID_ADDR )		//지번
		DEF_BUTTON_ID ( BID_CHANGE )	//수정
		DEF_BUTTON_ID ( BID_JUNBAN )	//전반기
		DEF_BUTTON_ID ( BID_VISIT )		//방문이력
		DEF_BUTTON_ID ( BID_SCCANCEL )	//점검취소
		DEF_BUTTON_ID ( BID_NOSC )		//미점검	
		DEF_BUTTON_ID ( BID_SCOUT )		//점검제외
		DEF_BUTTON_ID ( BID_SC )		//점검시작
		DEF_BUTTON_ID ( BID_PREVPG )	//▲
		DEF_BUTTON_ID ( BID_NEXTPG )	//▼
		DEF_BUTTON_ID ( BID_RESERVE )	//예약
		DEF_BUTTON_ID ( BID_SENDSMS )	//SMS발송
		DEF_BUTTON_ID ( BID_RQSTSMS )	//SMS신청
		DEF_BUTTON_ID ( BID_MEMO )		//메모
		DEF_BUTTON_ID ( BID_CUSTPTRN )  //고객패턴
		DEF_BUTTON_ID ( BID_PHONETEL)   //핸드폰전화
		DEF_BUTTON_ID ( BID_HOUSETEL)   //자택전화
		DEF_BUTTON_ID ( BID_USEDOC )	//사용계약서
		DEF_BUTTON_ID ( BID_USEDOC_SMS )//사용계약서 문자전송
		DEF_BUTTON_ID ( BID_BIZ )		//사업자등록증
		DEF_BUTTON_ID ( BID_SP )	    //입상관점검 버튼
		DEF_BUTTON_ID ( BID_REQ )	    //이동고객센터
		DEF_BUTTON_ID ( BID_REFUSE )	//거부
		
		//미점검방문
		DEF_BUTTON_ID ( BID_STOP)		//중지
		DEF_BUTTON_ID ( BID_ENTRY2)		//확인
		DEF_BUTTON_ID ( BID_CANCEL4 )	//취소
		DEF_BUTTON_ID ( BID_BACK )		//타이틀 이전버튼
		
		//방문등록
		DEF_BUTTON_ID ( BID_ENTRY)		//등록
		
		//점검예약등록
		DEF_BUTTON_ID ( BID_CANCEL)		//취소
		DEF_BUTTON_ID ( BID_RSRVDEL)	//예약삭제
		DEF_BUTTON_ID ( BID_RSRV)		//예약
		DEF_BUTTON_ID ( BID_RSRVSCHDL)	//예약일시
		DEF_BUTTON_ID ( BID_WRITE )	    //예약메모입력
		DEF_BUTTON_ID ( BID_BACK2 )		//타이틀 이전버튼
		
		//점검제외-사유입력
		DEF_BUTTON_ID ( BID_CANCEL3)	//취소
		DEF_BUTTON_ID ( BID_OK2)		//확인
		DEF_BUTTON_ID ( BID_BACK4 )		//타이틀 이전버튼
		
		//주소확인
		DEF_BUTTON_ID ( BID_OK3)		//확인	
		DEF_BUTTON_ID ( BID_BOX8)		//지번주소_맞음
		DEF_BUTTON_ID ( BID_BOX9)		//지번주소_틀림
		DEF_BUTTON_ID ( BID_BOX10)		//지번주소_주소없음
		DEF_BUTTON_ID ( BID_BOX11)		//새주소_맞음
		DEF_BUTTON_ID ( BID_BOX12)		//새주소_틀림
		DEF_BUTTON_ID ( BID_BOX13)		//새주소_주소없음
		
		//SMS발송
		DEF_BUTTON_ID ( BID_SCHDL)		//▼
		DEF_BUTTON_ID ( BID_CANCEL5)	//취소
		DEF_BUTTON_ID ( BID_SEND)		//전송
		DEF_BUTTON_ID ( BID_BACK5 )		//타이틀 이전버튼	  
		  
	END_BUTTON_ID()
	
	//---------------------------------------------------------------
	// OBJECT ID define
	//---------------------------------------------------------------
	BEGIN_OBJECT_ID()
		//화면 일반
		DEF_OBJECT_ID ( TXT_TITLE )		//타이틀
		DEF_OBJECT_ID ( TXT_PAGE )		//페이지
		DEF_OBJECT_ID ( TXT_SIGN ) 		//서면 체크박스
		DEF_OBJECT_ID ( TXT_AGREE1 ) 	//동의1 체크박스
		DEF_OBJECT_ID ( TXT_AGREE2 ) 	//동의2 체크박스
		DEF_OBJECT_ID ( TXT_NAME ) 		//실명 체크박스
		DEF_OBJECT_ID ( TXT_TRANS ) 	//이체 체크박스
		DEF_OBJECT_ID ( TXT_BOX1 )		//동의1
		DEF_OBJECT_ID ( TXT_BOX2 )		//동의2
		DEF_OBJECT_ID ( TXT_BOX3 )		//서면
		DEF_OBJECT_ID ( TXT_BOX4 )		//실명
		DEF_OBJECT_ID ( TXT_BOX5 )		//이체
		DEF_OBJECT_ID ( TXT_INSPLACE )  //설치장소
		DEF_OBJECT_ID ( TXT_CLIENT ) 	//고객/사업자
		DEF_OBJECT_ID ( TXT_TEL ) 		//TEL/HP
		DEF_OBJECT_ID ( TXT_CONDATE ) 	//계약일자
		DEF_OBJECT_ID ( TXT_STATUS ) 	//상태
		DEF_OBJECT_ID ( TXT_HYUNBAN ) 	//현반기
		DEF_OBJECT_ID ( TXT_DATA1 )		//설치장소번호
		//DEF_OBJECT_ID ( TXT_DATA2 )		//우선점검
		DEF_OBJECT_ID ( TXT_DATA3 )		//고객
		DEF_OBJECT_ID ( TXT_DATA4 )		//사업자
		DEF_OBJECT_ID ( TXT_DATA5 )		//주소
		DEF_OBJECT_ID ( TXT_DATA7 )		//TEL
		DEF_OBJECT_ID ( TXT_DATA8 )		//HP
		DEF_OBJECT_ID ( TXT_DATA9 )		//계약일자
		DEF_OBJECT_ID ( TXT_DATA10 )	//상태
		DEF_OBJECT_ID ( TXT_DATA11 )	//전반기_날짜
		DEF_OBJECT_ID ( TXT_DATA12 )	//전반기_결과
		DEF_OBJECT_ID ( TXT_DATA13 )	//전반기_점검원
		DEF_OBJECT_ID ( TXT_DATA14 )	//현반기_날짜
		DEF_OBJECT_ID ( TXT_DATA15 )	//현반기_결과
		DEF_OBJECT_ID ( TXT_DATA16 )	//현반기_점검원
		DEF_OBJECT_ID ( TXT_DATA17 )	//방문이력_날짜
		DEF_OBJECT_ID ( TXT_DATA18 )	//방문이력_결과
		DEF_OBJECT_ID ( TXT_DATA19 )	//방문이력_점검원
		DEF_OBJECT_ID ( LINE_DATA1 )	//라인1
		DEF_OBJECT_ID ( LINE_DATA2 )	//라인2

		//방문등록
		DEF_OBJECT_ID ( TXT_DATA25 )	//자택번호1
		DEF_OBJECT_ID ( TXT_DATA26 )	//자택번호2
		DEF_OBJECT_ID ( TXT_DATA27 )	//자택번호3
		DEF_OBJECT_ID ( TXT_DATA28 )	//휴대폰1
		DEF_OBJECT_ID ( TXT_DATA33 )	//휴대폰2
		DEF_OBJECT_ID ( TXT_DATA34 )	//휴대폰3
		
		//점검제외 사유입력
		DEF_OBJECT_ID ( TXT_DATA55 )	//점검제외사유
		
		//고객성향/안전여부
		DEF_OBJECT_ID ( TXT_DATA56 )	//고객성향
		DEF_OBJECT_ID ( TXT_DATA57 )	//안전여부
		
		//미점검 방문
		DEF_OBJECT_ID ( TXT_DATA20 )	//방문차수
		DEF_OBJECT_ID ( TXT_DATA21 )	//방문일자
		DEF_OBJECT_ID ( TXT_DATA22 )	//미점검사유
		DEF_OBJECT_ID ( TXT_DATA23 )	//중지일자
		DEF_OBJECT_ID ( TXT_DATA24 )	//중지불가사유
		DEF_OBJECT_ID ( TXT_DATA58 )	//방문차수
		DEF_OBJECT_ID ( TXT_DATA59 )	//방문일자
		DEF_OBJECT_ID ( TXT_DATA60 )	//중지일자
		
		//점검예약등록
		DEF_OBJECT_ID ( TXT_DATA39 )	//자택
		DEF_OBJECT_ID ( TXT_DATA40 )	//HP
		DEF_OBJECT_ID ( TXT_DATA41 )	//예약일자
		DEF_OBJECT_ID ( TXT_DATA42 )	//예약시간
		DEF_OBJECT_ID ( TXT_DATA43 )	//시
		DEF_OBJECT_ID ( TXT_DATA44 )	//분
		DEF_OBJECT_ID ( TXT_DATA45 )	//메모사항
		DEF_OBJECT_ID ( TXT_DATA61 )	//자택1-
		DEF_OBJECT_ID ( TXT_DATA62 )	//자택2-
		DEF_OBJECT_ID ( TXT_DATA63 )	//HP1-
		DEF_OBJECT_ID ( TXT_DATA64 )	//HP2-
		
		//주소확인
		DEF_OBJECT_ID ( TXT_DATA68 )	//건물번호
		DEF_OBJECT_ID ( TXT_DATA69 )	//건물번호
		DEF_OBJECT_ID ( TXT_DATA70 )	//지번주소
		DEF_OBJECT_ID ( TXT_DATA71 )	//지번주소
		DEF_OBJECT_ID ( TXT_DATA72 )	//지번주소-	
		DEF_OBJECT_ID ( TXT_DATA73 )	//맞음
		DEF_OBJECT_ID ( TXT_DATA74 )	//틀림
		DEF_OBJECT_ID ( TXT_DATA75 )	//주소없음
		DEF_OBJECT_ID ( TXT_DATA76 )	//새주소
		DEF_OBJECT_ID ( TXT_DATA77 )	//새주소
		DEF_OBJECT_ID ( TXT_DATA78 )	//새주소-
		DEF_OBJECT_ID ( TXT_DATA79 )	//맞음
		DEF_OBJECT_ID ( TXT_DATA80 )	//틀림
		DEF_OBJECT_ID ( TXT_DATA81 )	//주소없음
		DEF_OBJECT_ID ( TXT_DATA82 )	//지번주소
		DEF_OBJECT_ID ( TXT_DATA83 )	//새주소
		
		//SMS발송
		DEF_OBJECT_ID ( TXT_DATA29 )	//방문일자
		DEF_OBJECT_ID ( TXT_DATA30 )	//방문일자
		DEF_OBJECT_ID ( TXT_DATA31 )	//방문일자
		DEF_OBJECT_ID ( TXT_DATA32 )	//방문일자
		DEF_OBJECT_ID ( TXT_DATA84 )	//방문일자
		DEF_OBJECT_ID ( TXT_DATA86 )	//소속
		DEF_OBJECT_ID ( TXT_DATA87 )	//소속
		DEF_OBJECT_ID ( TXT_DATA88 )	//점검원
		DEF_OBJECT_ID ( TXT_DATA89 )	//점검원
		DEF_OBJECT_ID ( TXT_DATA90 )	//고객HP
		DEF_OBJECT_ID ( TXT_DATA91 )	//고객HP
		DEF_OBJECT_ID ( TXT_DATA95 )	//방문시간
		DEF_OBJECT_ID ( TXT_DATA96 )	//방문시간
		DEF_OBJECT_ID ( TXT_DATA97 )	//방문시간
		
		//방문등록
		DEF_OBJECT_ID ( EDT_DATA31 )	//방문일자
		DEF_OBJECT_ID ( EDT_DATA32 )	//방문일자
		DEF_OBJECT_ID ( EDT_DATA33 )	//방문일자	
		
		//점검예약등록
		DEF_OBJECT_ID ( EDT_DATA7 )		//자택
		DEF_OBJECT_ID ( EDT_DATA8 )		//HP
		DEF_OBJECT_ID ( EDT_DATA10 )	//메모
		DEF_OBJECT_ID ( EDT_DATA16 )	//자택
		DEF_OBJECT_ID ( EDT_DATA17 )	//자택
		DEF_OBJECT_ID ( EDT_DATA18 )	//HP
		DEF_OBJECT_ID ( EDT_DATA19 )	//HP
		DEF_OBJECT_ID ( EDT_DATA28 )	//예약일자
		DEF_OBJECT_ID ( EDT_DATA29 )	//예약일자
		DEF_OBJECT_ID ( EDT_DATA30 )	//예약일자
		DEF_OBJECT_ID ( LINE_DATA3 )	//라인3
		
		//주소확인
		DEF_OBJECT_ID ( EDT_DATA22 )	//지번주소
		DEF_OBJECT_ID ( EDT_DATA23 )	//지번주소
		DEF_OBJECT_ID ( EDT_DATA24 )	//새주소
		DEF_OBJECT_ID ( EDT_DATA25 )	//새주소
		
		//타이틀
		DEF_OBJECT_ID ( ICON_TITLE )		
		
		//미점검 GRID
		DEF_OBJECT_ID ( ID_TBLLIST )
		
		//콤보박스
		DEF_OBJECT_ID ( CMB_NOCHK )					  //미점검 방문
		DEF_OBJECT_ID ( CMB_NOSTP  = CMB_NOCHK + 3 )  //미점검 방문	
		DEF_OBJECT_ID ( CMB_HOUR   = CMB_NOSTP + 3 )  //점검예약등록
		DEF_OBJECT_ID ( CMB_MINUTE = CMB_HOUR + 3 )	  //점검예약등록
		DEF_OBJECT_ID ( CMB_SCOUT  = CMB_MINUTE + 3 ) //점검제외 사유입력
		DEF_OBJECT_ID ( CMB_TIME1  = CMB_SCOUT + 3 )  //SMS발송
		DEF_OBJECT_ID ( CMB_TIME2  = CMB_TIME1 + 3 )  //SMS발송
	END_OBJECT_ID()
	
	//---------------------------------------------------------------
	// Define
	//---------------------------------------------------------------
	#define INIT_MAIN	 1	// 메인
	#define INIT_NOCHK	 2	// 미점검
	#define INIT_SCRSRV	 3	// 예약등록
	#define INIT_SCOUT   4	// 점검제외
	#define INIT_SCADDR	 5	// 주소확인
	#define INIT_SMSSEND 6	// SMS발송
	
	#define REFRESH_Y1   1	
	#define REFRESH_Y2   180
	
	//---------------------------------------------------------------
	// Global Param
	//---------------------------------------------------------------
	char m_szAddr[200];
	char m_szPhone[20];
	char m_szTel[20];
	char m_szCnt_index[11];     //인덱스 문자열(현재 페이지)
	char m_szScOut[20];
	char m_szDate[10];
	char m_szHour[3];
	char m_szMin[3];
	long m_lSelIndex = -1;		//인덱스
	long m_lAddrFlag1 = 0;
	long m_lAddrFlag2 = 0;
	long m_bFirst = 0;
	long m_ltotcnt;
	long m_lSmsNonPay ;
	long m_lContStsCd ;
	long m_lPrev = 0;
	long m_lchk_1 = 0, m_lchk_2 = 0, m_lchk_3 = 0, m_lchk_4 = 0, m_lchk_5 = 0;
	long m_lActiveIndex = -1;
	long m_lSmsReqFlag = 0;						//m_lSmsReqFlag = 1 Y , m_lSmsReqFlag = 2 N
	char m_szSms_Desc[800];
	char m_szReceiver_Tel[50];
	
	//---------------------------------------------------------------
	// Function
	//---------------------------------------------------------------
	void SetBtnImg(void);
	void SetStyle(void);
	void SetData(void);		 					//안전점검 기본정보
	void Set_Index(void);	 					//선택된 인덱스를 저장한다.
	void Set_Popup(void);
	long SetAddr(void);							//주소확인 정보
	void Set_NoChk(void);	 					//미점검방문 정보 
	void SetDataNogoodCha(void);				//개선권고 차수
	void SetTotCnt(void);
	long SetGlobal(void);
	void ReqMsg(void);							// 청구방법 메세지
	
	void Prev_SC(void);		 					//이전대상으로 인덱스 찾기
	void Next_SC(void);		 					//다음대상으로 인덱스 찾기
	
	void REDRAW(void);		 					//화면에 자료 디스플레이한다.
	void ADDR_DRAW(void);						//주소확인 디스플레이
	void NOCHK_DRAW(void);	 					//미점검 자료 디스플레이
	void RESERVE_DRAW(void); 					//점검예약등록 디스플레이
	void SCOUT_DRAW(void);	 					//점검제외 자료 디스플레이
	void SMSSEND_DRAW(void);	 				//SMS전송 디스플레이
	void CUSTPTRN_DRAW(void);	 				//고객패턴수집 디스플레이
	
	void Del_ScData(void);						//점검취소
	bool Save_NoChk(void);	 					//미점검저장
	bool Regtr_Chk(void);						//조정기 체크
	long Sos_Key(void);							
	bool Save_ScOut(void);	 					//점검제외사유저장
	bool Save_Addr(void);						//주소확인
	long FS_GetSrchTotCnt(void);
	
	long Analy_Phone(char*phone, char* num1, char* num2, char* num3 );
	
	bool Save_Reserve(void); 					//예약등록저장
	bool Save_SmsSend(void);					//SMS전송
	void Snd_Sms(void);
	long TR312316(void);
	
	void Call_Tel(long nButtonID);
	
	long Snd_Sms_Absence(void);
	long Snd_Sms_Hist_Absence(void);
	long TR312400(void);
	
	//-------------------------------------------------------------------------------------------------	
	//	Table정의에 관련된 내용들
	//-------------------------------------------------------------------------------------------------
	#define		ROW 	    7						// table의 행개수
	#define		COL 	    1						// table의 열개수
	#define		GRID_H		(CHT+30)				// table 행 높이
	#define		GRID_H_P	(CHT+45)				// table 행 높이
	#define		GRID_CLR	TRANSPARENT   			// table 클리어 color
	#define		GRID_X		STARTX 					// table 시작x좌표
	#define		MAXCHAR		51 			    		// table에 들어갈수 있는 최대  char 길이
	#define		GRID_Y		STARTY-29  	    		// table 시작y좌표
	#define		GRID_Y_P	STARTY-40       		// table 시작y좌표
	#define		GRID_ENDY	(GRID_Y+(ROW+1)*GRID_H) // table마지막 row의 Y값
	
	char		m_szTableBuf [COL*(ROW+1)*MAXCHAR]; // 각 CELL에 들어가 텍스트 내용을 담은 버퍼
		
	Column m_stGridTitle[] = {
		{"점검제외 사유입력",	CWD*39+23, EDITALIGN_CENTER|EDITALIGN_MIDDLE,   TABLE_TEXT, 0}
	};
	
	//---------------------------------------------------------------
	// 공통버튼
	//---------------------------------------------------------------
	SysButCtrl SysButRes_MAIN[] =
	{
		  SYS_BUT_IMG (  BTNX_1, BTNY_1, BTNWD_1, BTNHT_1, 0, 0, BUTSTY_BOLD , 0, 0, 0, OBJ_BUT, GID_HOME,  0),
		  SYS_BUT_IMG (  BTNX_2, BTNY_1, BTNWD_1, BTNHT_1, 0, 0, BUTSTY_BOLD , 0, 0, 0, OBJ_BUT, GID_KEYBOARD,  0),
		  SYS_BUT_IMG (  BTNX_3, BTNY_1, BTNWD_1, BTNHT_1, 0, 0, BUTSTY_BOLD , 0, 0, 0, OBJ_BUT, GID_SCREEN, 0),
		  SYS_BUT_IMG (  BTNX_4, BTNY_1, BTNWD_1, BTNHT_1, 0, 0, BUTSTY_BOLD , 0, 0, 0, OBJ_BUT, GID_CMMNWK,  0),
		  SYS_BUT_IMG (  BTNX_5, BTNY_1, BTNWD_1, BTNHT_1, 0, 0, BUTSTY_BOLD , 0, 0, 0, OBJ_BUT, GID_VMEXIT, 0),
		  SYS_BUT_IMG (  BTNX_6, BTNY_2, BTNWD_2, BTNHT_2, 0, 0, BUTSTY_BOLD|BUTSTY_BORDER , 0, TRANSPARENT, TRANSPARENT, OBJ_BUT, GID_MENU, 0),
		  SYS_BUT_IMG (  BTNX_7, BTNY_2, BTNWD_2, BTNHT_2, 0, 0, BUTSTY_BOLD|BUTSTY_BORDER , 0, TRANSPARENT, TRANSPARENT, OBJ_BUT, GID_PREV, 0),
	};
	
	//---------------------------------------------------------------
	// 메인 다이얼로그
	//---------------------------------------------------------------
	DlgObject	DlgRes[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),	
		DLG_ICON(0, BTNY_2, ICON_TITLE, ""),
		//타이틀
		DLG_TEXT(TX, TY, STWD, STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "안전점검 등록"),
		
		// DLG_BUTTON(STARTX+120, STARTY +5,  210,  50, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC, "", BID_REFUSE, "의향조사"),
		
		DLG_TEXT(  STARTX,     STARTY+65,  290,  60, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_PAGE, m_szCnt_index),   //페이지
		DLG_BUTTON(STARTX+290, STARTY+65,  200,  60, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_USEDOC, "계약서"),
		DLG_BUTTON(STARTX+490, STARTY+65,  200,  60, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_USEDOC_SMS, "발송"),
		DLG_BUTTON(STARTX+690, STARTY+65,  180,  60, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ILLIGAL, "불법"),
		DLG_TEXT(  STARTX+870, STARTY+65,   65,  60, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, GREEN, TXT_DATA56, ""), //고객성향
		DLG_TEXT(  STARTX+935, STARTY+65,   65,  60, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, GREEN, TXT_DATA57, ""), //안전여부
		
		DLG_LINE ( STARTX,     STARTY+129, 1000, STARTY+129, DARKSLATEBLUE, 10, LINE_DATA1),
		
		DLG_TEXT(  STARTX,     STARTY+134,  60,  50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_BOX1, CHKOFF),
		DLG_TEXT(  STARTX+60,  STARTY+134, 140,  50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_AGREE1, "동의1"), 
		DLG_TEXT(  STARTX+200, STARTY+134,  60,  50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_BOX2, CHKOFF),  	
		DLG_TEXT(  STARTX+260, STARTY+134, 140,  50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_AGREE2, "동의2"), 
		DLG_TEXT(  STARTX+400, STARTY+134,  60,  50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_BOX3, CHKOFF),
		DLG_TEXT(  STARTX+460, STARTY+134, 140,  50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_SIGN, "서면"),
		DLG_TEXT(  STARTX+600, STARTY+134,  60,  50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_BOX4, CHKOFF),
		DLG_TEXT(  STARTX+660, STARTY+134, 140,  50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_NAME, "실명"),
		DLG_TEXT(  STARTX+800, STARTY+134,  60,  50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_BOX5, CHKOFF),
		DLG_TEXT(  STARTX+860, STARTY+134, 140,  50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_TRANS, "이체"),
		
		DLG_TEXT(  STARTX,     STARTY+184, 280,  50, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_INSPLACE, "사용계약"),
		DLG_BUTTON(STARTX,     STARTY+184, 320,  50, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SP, "사용계약번호"),
		DLG_TEXT(  STARTX+280, STARTY+184, 335,  50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA1, ""),				
		//DLG_TEXT(  STARTX+675, STARTY+184, 325,  50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA2, ""),
		DLG_BUTTON(STARTX+615, STARTY+184, 385,  50 , 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC , "", BID_REQ, ""),
		
		DLG_TEXT(  STARTX,     STARTY+234, 320,  50, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_CLIENT, "고객/사업자"),
		DLG_TEXT(  STARTX+320, STARTY+234, 355,  50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA3, ""),				
		DLG_TEXT(  STARTX+675, STARTY+234, 325,  50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA4, ""),
		DLG_BUTTON(STARTX+675, STARTY+234, 325,  50, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_BIZ, "사업자등록증"),
		
		DLG_BUTTON(STARTX,     STARTY+284, 245,  67, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ADDR, "지번"),
		DLG_TEXT(  STARTX+246, STARTY+284, 754, 134, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA5, ""),
		
		DLG_BUTTON(STARTX,     STARTY+351, 245,  67, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, RED, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CHANGE, "수정"),
		
		DLG_TEXT(  STARTX,     STARTY+418, 245,  50, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_TEL, "TEL/HP"),
		DLG_BUTTON(STARTX+245, STARTY+418, 375,  50, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_HOUSETEL, ""),
		DLG_BUTTON(STARTX+620, STARTY+418, 380,  50, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_PHONETEL, ""),
		
		DLG_TEXT(  STARTX,     STARTY+468, 245,  50, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_CONDATE, "계약일자"),
		DLG_TEXT(  STARTX+245, STARTY+468, 315,  50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA9, ""),				
		DLG_TEXT(  STARTX+560, STARTY+468, 200,  50, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_STATUS, "상태"),	
		DLG_TEXT(  STARTX+760, STARTY+468, 240,  50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA10, ""),
		
		DLG_BUTTON(STARTX,     STARTY+518, 245,  50, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_JUNBAN, "전반기"),			
		DLG_TEXT(  STARTX+245, STARTY+518, 315,  50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA11, ""),
		DLG_TEXT(  STARTX+560, STARTY+518, 200,  50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA12, ""),			
		DLG_TEXT(  STARTX+760, STARTY+518, 240,  50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA13, ""),			
		
		DLG_TEXT(  STARTX,     STARTY+568, 245,  50, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_HYUNBAN, "현반기"),
		DLG_TEXT(  STARTX+245, STARTY+568, 315,  50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA14, ""),			
		DLG_TEXT(  STARTX+560, STARTY+568, 200,  50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA15, ""),			
		DLG_TEXT(  STARTX+760, STARTY+568, 240,  50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA16, ""),	
		
		DLG_BUTTON(STARTX,     STARTY+618, 245,  50, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_VISIT, "방문이력"),
		DLG_TEXT(  STARTX+245, STARTY+618, 315,  50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA17, ""),			
		DLG_TEXT(  STARTX+560, STARTY+618, 200,  50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA18, ""),			
		DLG_TEXT(  STARTX+760, STARTY+618, 240,  50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA19, ""),	
		
		DLG_LINE ( STARTX,     STARTY+672, 1000, STARTY+672, DARKSLATEBLUE, 10, LINE_DATA2),
		
		DLG_BUTTON(STARTX,     STARTY+676, 245,  75, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CUSTPTRN, "고객패턴"),
		DLG_BUTTON(STARTX+245, STARTY+676, 255,  75, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_MEMO, "메모"),
		DLG_BUTTON(STARTX+500, STARTY+676, 250,  75, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SCCANCEL, "점검\n취소"),
		DLG_BUTTON(STARTX+750, STARTY+676, 250, 112, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_PREVPG, "▲"),
		
		DLG_BUTTON(STARTX,     STARTY+751, 245,  75, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_NOSC, "미점검"),
		DLG_BUTTON(STARTX+245, STARTY+751, 255,  75, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SCOUT, "점검\n제외"),
		DLG_BUTTON(STARTX+500, STARTY+751, 250, 148, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SC, "점검\n시작"),
		DLG_BUTTON(STARTX+750, STARTY+788, 250, 111, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_NEXTPG, "▼"),
		
		DLG_BUTTON(STARTX,     STARTY+825, 245,  74, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_RESERVE, "예약"),
		DLG_BUTTON(STARTX+245, STARTY+825, 255,  74, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SENDSMS, "SMS\n발송"),
	};
	
	//---------------------------------------------------------------
	// PDA 다이얼로그
	//---------------------------------------------------------------
	DlgObject	DlgRes_P[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),	
		DLG_ICON(P_TTLTX, 0, ICON_TITLE, ""),
		//타이틀
		DLG_TEXT(P_TX, P_TY, P_STWD, P_STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, WHITE, TRANSPARENT, TXT_TITLE, "안전점검 등록"),
		DLG_BUTTON(P_BTNX, P_BTNY, P_BTNWD, P_BTNHD, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", GID_PREV, ""),

		DLG_BUTTON(STARTX+630,   STARTY-40, 370, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ILLIGAL, "불법"),
		DLG_BUTTON(STARTX,      STARTY+220, 200, 55, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ADDR, "지번"),
		DLG_BUTTON(STARTX,      STARTY+275, 200, 55, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER,            RED, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CHANGE, "수정"),
		DLG_BUTTON(STARTX,      STARTY+450, 250, 60, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_JUNBAN, "전반기"),
		DLG_BUTTON(STARTX,      STARTY+570, 250, 60, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_VISIT, "방문이력"),		
		
		DLG_BUTTON(STARTX,      STARTY+630, 250, 90, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CUSTPTRN, "고객패턴"),
		DLG_BUTTON(STARTX+250,  STARTY+630, 250, 90, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SCCANCEL, "점검\n취소"),
		DLG_BUTTON(STARTX+500,  STARTY+630, 250, 180, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SC, "점검\n시작"),
		DLG_BUTTON(STARTX+750,  STARTY+630, 250, 90, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_PREVPG, "▲"),
		DLG_BUTTON(STARTX,      STARTY+720, 250, 90, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_NOSC, "미점검"),
		DLG_BUTTON(STARTX+250,  STARTY+720, 250, 90, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SCOUT, "점검\n제외"),
		DLG_BUTTON(STARTX+750,  STARTY+720, 250, 90, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_NEXTPG, "▼"),
		DLG_BUTTON(STARTX,      STARTY+810, 250, 89, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_RESERVE, "예약"),
		DLG_BUTTON(STARTX+250,	STARTY+810, 250, 89, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SENDSMS, "SMS\n발송"),
		//DLG_BUTTON(STARTX+250,  STARTY+780, 230, 100, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_RQSTSMS, "SMS\n신청"),
		DLG_BUTTON(STARTX+750,  STARTY+810, 250, 89, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_MEMO, "메모"),				
		DLG_BUTTON(STARTX, STARTY+100, 345, 60, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SP, "설치장소"),
		
		//체크박스 텍스트
		DLG_TEXT(STARTX,  	  STARTY-40,  60, 70, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_BOX1, CHKOFF),  			//동의1
		DLG_TEXT(STARTX+60,   STARTY-40, 150, 70, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_AGREE1, "동의1"),  		//동의1
		DLG_TEXT(STARTX+210,  STARTY-40,  60, 70, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_BOX2, CHKOFF),  			//동의1
		DLG_TEXT(STARTX+270,  STARTY-40, 150, 70, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_AGREE2, "동의2"),  		//동의2
		DLG_TEXT(STARTX,  	  STARTY+30,  60, 70, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_BOX3, CHKOFF),  			//동의1
		DLG_TEXT(STARTX+60,   STARTY+30, 150, 70, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_SIGN, "서면"),  			//서면
		DLG_TEXT(STARTX+210,  STARTY+30,  60, 70, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_BOX4, CHKOFF),  			//동의1
		DLG_TEXT(STARTX+270,  STARTY+30, 150, 70, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_NAME, "실명"),  			//실명
		DLG_TEXT(STARTX+420,  STARTY+30,  60, 70, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_BOX5, CHKOFF),  			//동의1
		DLG_TEXT(STARTX+480,  STARTY+30, 150, 70, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_TRANS, "이체"),  			//이체

		DLG_TEXT(STARTX+630,  STARTY+30, 370, 70, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_PAGE, m_szCnt_index),   //페이지
		DLG_TEXT(STARTX,     STARTY+100, 345, 60, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_INSPLACE, "설치장소"),	//설치장소
		DLG_TEXT(STARTX+345, STARTY+100, 320, 60, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA1, ""),				//
		//DLG_TEXT(STARTX+665, STARTY+100, 335, 60, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA2, ""),				//
		DLG_TEXT(STARTX,     STARTY+160, 345, 60, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_CLIENT, "고객/사업자"),	//고객/사업자
		DLG_TEXT(STARTX+345, STARTY+160, 320, 60, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA3, ""),				//
		DLG_TEXT(STARTX+665, STARTY+160, 335, 60, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA4, ""),				//
		DLG_TEXT(STARTX+200, STARTY+220, 800,110, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA5, ""),			//
		
		DLG_TEXT(STARTX,     STARTY+330, 210, 60, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_TEL, "TEL/HP"),			//TEL/HP
		//DLG_TEXT(STARTX+245, STARTY+290, 370, 50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA7, ""),	
		//DLG_TEXT(STARTX+615, STARTY+290, 360, 50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA8, ""),			
		DLG_BUTTON(STARTX+210, STARTY+330, 395, 60, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_HOUSETEL, ""),
		DLG_BUTTON(STARTX+605, STARTY+330, 395, 60, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_PHONETEL, ""),

		DLG_TEXT(STARTX,     STARTY+390, 250, 60, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_CONDATE, "계약일자"),		//계약일자
		DLG_TEXT(STARTX+250, STARTY+390, 320, 60, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA9, ""),		
		DLG_TEXT(STARTX+570, STARTY+390, 200, 60, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_STATUS, "상태"),			//상태
		DLG_TEXT(STARTX+770, STARTY+390, 230, 60, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA10, ""),		
		DLG_TEXT(STARTX+250, STARTY+450, 320, 60, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA11, ""),			//전반기
		DLG_TEXT(STARTX+570, STARTY+450, 200, 60, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA12, ""),		
		DLG_TEXT(STARTX+770, STARTY+450, 230, 60, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA13, ""),		
		DLG_TEXT(STARTX,     STARTY+510, 250, 60, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_HYUNBAN, "현반기"),		//현반기
		DLG_TEXT(STARTX+250, STARTY+510, 320, 60, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA14, ""),		
		DLG_TEXT(STARTX+570, STARTY+510, 200, 60, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA15, ""),		
		DLG_TEXT(STARTX+770, STARTY+510, 230, 60, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA16, ""),		
		DLG_TEXT(STARTX+250, STARTY+570, 320, 60, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA17, ""),		
		DLG_TEXT(STARTX+570, STARTY+570, 200, 60, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA18, ""),		
		DLG_TEXT(STARTX+770, STARTY+570, 230, 60, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA19, ""),				
		DLG_TEXT(STARTX+500, STARTY+810, 125, 89, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, GREEN, TXT_DATA56, ""),					//고객성향
		DLG_TEXT(STARTX+625, STARTY+810, 125, 89, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, GREEN, TXT_DATA57, ""),					//안전여부
	};		
	
	//---------------------------------------------------------------
	//  다이얼로그:미점검 방문
	//---------------------------------------------------------------
	DlgObject	DlgRes_NOSC[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),
		DLG_ICON(POPTX, POPTY, ICON_TITLE, ""),
		DLG_TEXT(POPTX, POPTY, POPSTWD, POPSTHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "미점검 방문"),
		DLG_BUTTON(BTNX_7, P_BTNY, BTNWD_2, BTNHT_2, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_CANCEL4, ""),
		
		DLG_TEXT ( STARTX,       STARTY-29, 350, 70, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA20, "방문차수"),
		DLG_TEXT ( STARTX+350,   STARTY-29, 650, 70, 0,0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA58, ""),
		
		DLG_TEXT ( STARTX,       STARTY+41, 350, 70, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA21, "방문일자"),
		DLG_TEXT ( STARTX+350,   STARTY+41, 650, 70, 0,0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA59, ""),
		
		DLG_TEXT ( STARTX,      STARTY+111, 350, 70, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA22, "미점검사유"),
		DLG_COMBO (STARTX+350,  STARTY+111, 650, 200, 150, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_NOCHK, 4),		//미점검사유
		
		DLG_TEXT ( STARTX,      STARTY+181, 350, 70, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA23, "중지일자"),
		DLG_TEXT ( STARTX+350,  STARTY+181, 400, 70, 0,0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA60, ""),
		DLG_BUTTON(STARTX+750,  STARTY+181, 250, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_STOP,  "중지"),
		
		DLG_TEXT ( STARTX,      STARTY+251, 350, 70, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA24, "중지불가사유"),
		DLG_COMBO (STARTX+350,  STARTY+251, 650, 200, 150, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_NOSTP, 4),		//중지불가사유
		
		DLG_BUTTON(STARTX,      STARTY+380, 500, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CANCEL4,  "닫기"),
		DLG_BUTTON(STARTX+500,  STARTY+380, 500, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ENTRY2,  "확인"),
	};
	
	//---------------------------------------------------------------
	//  PDA다이얼로그:미점검 방문
	//---------------------------------------------------------------
	DlgObject	DlgRes_NOSC_P[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),
		DLG_ICON(P_TTLTX, 0, ICON_TITLE, ""),
		DLG_TEXT(P_TX, P_TY, P_STWD, P_STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "미점검 방문"),
		DLG_BUTTON(P_BTNX, P_BTNY, P_BTNWD, P_BTNHD, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_CANCEL4, ""),
		
		DLG_BUTTON(STARTX+750,  STARTY+200, 250, 80, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_STOP,  "중지"),
		DLG_BUTTON(STARTX,      STARTY+400, 400, 80, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CANCEL4,  "닫기"),
		DLG_BUTTON(STARTX+600,  STARTY+400, 400, 80, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ENTRY2,  "확인"),
		
		DLG_TEXT ( STARTX,       STARTY-40, 350, 80, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA20, "방문차수"),
		DLG_TEXT ( STARTX+350,   STARTY-40, 650, 80, 0,0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA58, ""),
		DLG_TEXT ( STARTX,       STARTY+40, 350, 80, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA21, "방문일자"),
		DLG_TEXT ( STARTX+350,   STARTY+40, 650, 80, 0,0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA59, ""),
		DLG_TEXT ( STARTX,      STARTY+120, 350, 80, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA22, "미점검사유"),
		DLG_TEXT ( STARTX,      STARTY+200, 350, 80, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA23, "중지일자"),
		DLG_TEXT ( STARTX+350,  STARTY+200, 400, 80, 0,0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA60, ""),
		DLG_TEXT ( STARTX,      STARTY+280, 350, 80, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA24, "중지불가사유"),
		
		DLG_COMBO (STARTX+350,  STARTY+120, 650, 200, 150, 80, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_NOCHK, 4),		//미점검사유
		DLG_COMBO (STARTX+350,  STARTY+280, 650, 200, 150, 80, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_NOSTP, 4),		//중지불가사유
	};
	
	//---------------------------------------------------------------
	//  다이얼로그:점검예약등록
	//---------------------------------------------------------------
	DlgObject	DlgRes_SCRSRV[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),
		DLG_ICON(POPTX, POPTY, ICON_TITLE, ""),
		DLG_TEXT(POPTX, POPTY, POPSTWD, POPSTHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "점검 예약 등록"),
		DLG_BUTTON( BTNX_7,  BTNY_1, BTNWD_2, BTNHT_2, 0, 0, BUTSTY_BOLD|BUTSTY_BORDER, 0, TRANSPARENT, TRANSPARENT, CALL_FUNC , "", BID_CANCEL,  ""),
		
		DLG_TEXT ( STARTX,     STARTY -29,  300,  70, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA39, "자택"),
		DLG_TEXT ( STARTX+300, STARTY -29,  190,  70, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, EDT_DATA7,    ""),	//자택
		DLG_TEXT ( STARTX+490, STARTY -29,   50,  70, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA61, "-"),
		DLG_TEXT ( STARTX+540, STARTY -29,  190,  70, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, EDT_DATA16,   ""),
		DLG_TEXT ( STARTX+730, STARTY -29,   50,  70, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA62, "-"),
		DLG_TEXT ( STARTX+780, STARTY -29,  220,  70, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, EDT_DATA17,   ""),

		DLG_TEXT ( STARTX,     STARTY +41,  300,  70, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA40, "H.P"),
		DLG_TEXT ( STARTX+300, STARTY +41,  190,  70, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, EDT_DATA8,    ""),	//핸드폰
		DLG_TEXT ( STARTX+490, STARTY +41,   50,  70, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA63, "-"),
		DLG_TEXT ( STARTX+540, STARTY +41,  190,  70, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, EDT_DATA18,   ""),
		DLG_TEXT ( STARTX+730, STARTY +41,   50,  70, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA64, "-"),
		DLG_TEXT ( STARTX+780, STARTY +41,  220,  70, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, EDT_DATA19,   ""),
		
		DLG_TEXT ( STARTX,     STARTY+111,  300,  70, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA41, "예약일자"),
		DLG_EDIT ( STARTX+300, STARTY+111,  180,  70, 0, 0, EDITSTY_BOLD, 0, TXTFRCOLOR, EDTCTRLBK, EDT_DATA28, 4,  ""),
		DLG_TEXT ( STARTX+480, STARTY+111,   18,  40, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA25, ""),
		DLG_EDIT ( STARTX+498, STARTY+111,  155,  70, 0, 0, EDITSTY_BOLD, 0, TXTFRCOLOR, EDTCTRLBK, EDT_DATA29, 2,  ""),
		DLG_TEXT ( STARTX+653, STARTY+111,   17,  40, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA27, ""),
		DLG_EDIT ( STARTX+670, STARTY+111,  155,  70, 0, 0, EDITSTY_BOLD, 0, TXTFRCOLOR, EDTCTRLBK, EDT_DATA30, 2,  ""),
		DLG_BUTTON(STARTX+825, STARTY+111,  175,  70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, TXTFRCOLOR, PDAEDTCTRLBK, CALL_FUNC , "", BID_RSRVSCHDL, "▼"),
		
		DLG_TEXT ( STARTX+480, STARTY+151,   18,  30, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA26, "."),
		DLG_TEXT ( STARTX+653, STARTY+151,   17,  30, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA28, "."),
		
		DLG_TEXT ( STARTX,     STARTY+181,  300,  70, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA42, "예약시간"),
		DLG_COMBO( STARTX+300, STARTY+181,  260, 200, 120, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_HOUR, 4),
		DLG_TEXT ( STARTX+560, STARTY+181,   80,  70, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA43, "시"),
		DLG_COMBO( STARTX+640, STARTY+181,  260, 200, 120, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_MINUTE, 4),
		DLG_TEXT ( STARTX+900, STARTY+181,  100,  70, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA44, "분"),
		
		DLG_LINE ( STARTX,     STARTY+254, 1000, STARTY+254, DARKSLATEBLUE, 10, LINE_DATA3),
		
		DLG_TEXT ( STARTX,     STARTY+259, 1000,  70, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA45, "메모사항"),
		DLG_BUTTON(STARTX,     STARTY+329, 1000, 491, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_WRITE,  ""),	
		DLG_EDIT ( STARTX,     STARTY+329, 1000, 491, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA10, 300,  ""),
		
		DLG_BUTTON(STARTX,	   STARTY+820,  333,  80, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CANCEL,  "취소"),
		DLG_BUTTON(STARTX+333, STARTY+820,  334,  80, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_RSRVDEL,  "예약삭제"),
		DLG_BUTTON(STARTX+667, STARTY+820,  333,  80, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_RSRV,  "예약"),
	};
	
	//---------------------------------------------------------------
	//  PDA다이얼로그:점검예약등록
	//---------------------------------------------------------------
	DlgObject	DlgRes_SCRSRV_P[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),
		DLG_ICON(P_TTLTX, 0, ICON_TITLE, ""),
		DLG_TEXT(P_TX, P_TY, P_STWD, P_STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "점검 예약 등록"),
		DLG_BUTTON(P_BTNX, P_BTNY, P_BTNWD, P_BTNHD, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_CANCEL, ""),
		
		DLG_BUTTON(STARTX,		STARTY+809, 333, 90, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CANCEL,  "취소"),
		DLG_BUTTON(STARTX+333,  STARTY+809, 333, 90, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_RSRVDEL,  "예약삭제"),
		DLG_BUTTON(STARTX+666,  STARTY+809, 334, 90, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_RSRV,  "예약"),
		
		DLG_TEXT( STARTX,    	STARTY-40, 300, 70, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK,   TXT_DATA39, "자택"),
		DLG_TEXT( STARTX+300,   STARTY-40, 200, 70, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, EDT_DATA7,    ""),	//자택
		DLG_TEXT( STARTX+500,   STARTY-40,  50, 70, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA61, "-"),
		DLG_TEXT( STARTX+550,   STARTY-40, 200, 70, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, EDT_DATA16,   ""),
		DLG_TEXT( STARTX+750,   STARTY-40,  50, 70, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA62, "-"),
		DLG_TEXT( STARTX+800,   STARTY-40, 200, 70, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, EDT_DATA17,   ""),
		DLG_TEXT( STARTX,    	STARTY+30, 300, 70, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK,   TXT_DATA40, "H.P"),
		DLG_TEXT( STARTX+300,   STARTY+30, 200, 70, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, EDT_DATA8,    ""),	//핸드폰
		DLG_TEXT( STARTX+500,   STARTY+30,  50, 70, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA63, "-"),
		DLG_TEXT( STARTX+550,   STARTY+30, 200, 70, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, EDT_DATA18,   ""),
		DLG_TEXT( STARTX+750,   STARTY+30,  50, 70, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA64, "-"),
		DLG_TEXT( STARTX+800,   STARTY+30, 200, 70, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, EDT_DATA19,   ""),
		
		DLG_TEXT( STARTX,	   STARTY+100, 300, 70, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA41, "예약일자"),
		DLG_EDIT( STARTX+300,  STARTY+100, 200, 70, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA28, 4,  ""),
		DLG_TEXT(STARTX+500,   STARTY+100, 25, 40, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA25, ""),
		DLG_TEXT(STARTX+500,   STARTY+140, 25, 30, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA26, "."),
		DLG_EDIT( STARTX+525,  STARTY+100, 150, 70, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA29, 2,  ""),
		DLG_TEXT(STARTX+675,   STARTY+100, 25, 40, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA27, ""),
		DLG_TEXT(STARTX+675,   STARTY+140, 25, 30, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA28, "."),
		DLG_EDIT( STARTX+700,  STARTY+100, 150, 70, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA30, 2,  ""),
		DLG_BUTTON(STARTX+850, STARTY+100, 150, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, TXTFRCOLOR, PDAEDTCTRLBK, CALL_FUNC , "", BID_RSRVSCHDL, "▼"),
		//DLG_TEXT ( STARTX+330, STARTY+190, 420, 70, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA65, ""),
		//DLG_BUTTON(STARTX+750, STARTY+190, 150, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_RSRVSCHDL, "▼"),
		
		DLG_TEXT( STARTX,		STARTY+170, 300, 70, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA42, "예약시간"),
		DLG_TEXT( STARTX+570,	STARTY+170,  80, 70, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA43, "시"),
		DLG_TEXT( STARTX+920,	STARTY+170,  80, 70, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA44, "분"),
		DLG_TEXT( STARTX,		STARTY+240, 1000, 70, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA45, "메모사항"),
		DLG_EDIT( STARTX,		STARTY+310, 1000, 500, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA10, 300,  ""), //메모
		
		DLG_COMBO (STARTX+300,  STARTY+170, 270, 200, 100, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_HOUR, 4),
		DLG_COMBO (STARTX+650,  STARTY+170, 270, 200, 100, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_MINUTE, 4),
	};
	
	//---------------------------------------------------------------
	//  다이얼로그:점검제외-사유입력
	//---------------------------------------------------------------
	DlgObject	DlgRes_SCOUT[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),
		DLG_ICON(POPTX, POPTY, ICON_TITLE, ""),
		DLG_TEXT(POPTX, POPTY, POPSTWD, POPSTHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "점검제외 사유입력"),
		DLG_BUTTON(BTNX_7, P_BTNY, BTNWD_2, BTNHT_2, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_CANCEL3, ""),
		
		DLG_TABLE (GRID_X, GRID_Y, ROW, COL, 0, GRID_H, 1, GRID_H, SEL_ROW, MAXCHAR, m_stGridTitle, ID_TBLLIST, m_szTableBuf),
		
		DLG_BUTTON(STARTX,     STARTY+600, 500, 80, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CANCEL3,  "취소"),
		DLG_BUTTON(STARTX+500, STARTY+600, 500, 80, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_OK2, "확인"),	
	};
	
	//---------------------------------------------------------------
	//  PDA다이얼로그:점검제외-사유입력
	//---------------------------------------------------------------
	DlgObject	DlgRes_SCOUT_P[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),
		DLG_ICON(P_TTLTX, 0, ICON_TITLE, ""),
		DLG_TEXT(P_TX, P_TY, P_STWD, P_STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "점검제외 사유입력"),
		DLG_BUTTON(P_BTNX, P_BTNY, P_BTNWD, P_BTNHD, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_CANCEL3, ""),
		
		DLG_BUTTON(STARTX,      STARTY+650, 400, 100, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CANCEL3,  "취소"),
		DLG_BUTTON(STARTX+600,  STARTY+650, 400, 100, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_OK2, "확인"),
		
		//DLG_TEXT ( STARTX,	   STARTY, 970, 70, 0,0, EDITSTY_BORDER, 0, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA55, "◎점검제외 사유"),
		//DLG_COMBO (STARTX,  STARTY+80, 970, 200, 200, 80, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_SCOUT, 4),
		
		DLG_TABLE (GRID_X, GRID_Y_P, ROW, COL, 0, GRID_H_P, 1, GRID_H_P, SEL_ROW, MAXCHAR, m_stGridTitle, ID_TBLLIST, m_szTableBuf),
	};
	
	//---------------------------------------------------------------
	//  다이얼로그:주소확인
	//---------------------------------------------------------------
	DlgObject	DlgRes_SCADDR[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),
		DLG_ICON(POPTX, POPTY, ICON_TITLE, ""),
		DLG_TEXT(POPTX, POPTY, POPSTWD, POPSTHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "주소 확인"),
		DLG_BUTTON(BTNX_7, P_BTNY, BTNWD_2, BTNHT_2, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_OK3, ""),
		
		DLG_TEXT ( STARTX,	   STARTY -29, 300, 60, 0 ,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA68, "건물번호"),
		DLG_TEXT ( STARTX+300, STARTY -29, 700, 60, 0 ,0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA69, ""),
		
		DLG_TEXT ( STARTX,	   STARTY +50, 300, 60, 0 ,0, EDITSTY_BORDER, 0, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA70, "> 지번주소"),
		DLG_TEXT ( STARTX,	   STARTY+110, 550, 60, 0 ,0, 0, 		    EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA71, ""),
		DLG_EDIT ( STARTX+550, STARTY+110, 200, 60, 0 ,0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA22, 10,  ""),
		DLG_TEXT ( STARTX+750, STARTY+110,  50, 60, 0 ,0, 0, 		    EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA72, "-"),
		DLG_EDIT ( STARTX+800, STARTY+110, 200, 60, 0 ,0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA23, 10,  ""),
		DLG_TEXT ( STARTX,	   STARTY+170,1000, 60, 0, 0, 0,            EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA82, ""),
		
		DLG_BUTTON(STARTX,     STARTY+250, 130, 60, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNCHKFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_BOX8,  CHKOFF),
		DLG_TEXT ( STARTX+130, STARTY+250, 180, 60, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA73, "맞음"),
		DLG_BUTTON(STARTX+310, STARTY+250, 130, 60, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNCHKFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_BOX9,  CHKOFF),
		DLG_TEXT ( STARTX+440, STARTY+250, 180, 60, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA74, "틀림"),
		DLG_BUTTON(STARTX+620, STARTY+250, 130, 60, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNCHKFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_BOX10,  CHKOFF),
		DLG_TEXT ( STARTX+750, STARTY+250, 250, 60, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA75, "주소없음"),
		
		DLG_TEXT ( STARTX,	   STARTY+350, 300, 60, 0, 0, EDITSTY_BORDER, 0, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA76, "> 새주소"),
		DLG_TEXT ( STARTX,	   STARTY+410, 550, 60, 0, 0, 0,            EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA77, ""),
		DLG_EDIT ( STARTX+550, STARTY+410, 200, 60, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA24, 20,  ""),
		DLG_TEXT ( STARTX+750, STARTY+410,  50, 60, 0, 0, 0,            EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA78, "-"),
		DLG_EDIT ( STARTX+800, STARTY+410, 200, 60, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA25, 20,  ""),
		DLG_TEXT ( STARTX,	   STARTY+470,1000, 60, 0, 0, 0,            EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA83, ""),
		
		DLG_BUTTON(STARTX,     STARTY+550, 130, 60, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNCHKFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_BOX11,  CHKOFF),
		DLG_TEXT ( STARTX+130, STARTY+550, 180, 60, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA79, "맞음"),
		DLG_BUTTON(STARTX+310, STARTY+550, 130, 60, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNCHKFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_BOX12,  CHKOFF),
		DLG_TEXT ( STARTX+440, STARTY+550, 180, 60, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA80, "틀림"),
		DLG_BUTTON(STARTX+620, STARTY+550, 130, 60, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNCHKFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_BOX13,  CHKOFF),
		DLG_TEXT ( STARTX+750, STARTY+550, 250, 60, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA81, "주소없음"),
		
		DLG_BUTTON(STARTX+600, STARTY+700, 400, 80, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_OK3, "확인"),
	};
	
	//---------------------------------------------------------------
	//  PDA다이얼로그:주소확인
	//---------------------------------------------------------------
	DlgObject	DlgRes_SCADDR_P[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),
		DLG_ICON(P_TTLTX, 0, ICON_TITLE, ""),
		DLG_TEXT(P_TX, P_TY, P_STWD, P_STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "주소 확인"),
		DLG_BUTTON(P_BTNX, P_BTNY, P_BTNWD, P_BTNHD, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_OK3, ""),
		
		DLG_BUTTON(STARTX+600,  STARTY+809, 400, 90, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_OK3, "확인"),
		
		DLG_TEXT ( STARTX,		STARTY-40 , 400, 80, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA68, "건물번호"),
		DLG_TEXT ( STARTX+400,	STARTY-40 , 600, 80, 0,0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA69, ""),
		
		DLG_TEXT ( STARTX,		STARTY+70,  500, 80, 0,0, EDITSTY_BORDER, 		     0, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA70, ">지번주소"),
		DLG_TEXT ( STARTX,		STARTY+150, 560, 80, 0,0, 0, 		    EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA71, ""),
		DLG_EDIT ( STARTX+560,  STARTY+150, 200, 80, 0,0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA22, 10,  ""),
		DLG_TEXT ( STARTX+760,	STARTY+150,  40, 80, 0,0, 0, 		    EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA72, "-"),
		DLG_EDIT ( STARTX+800,  STARTY+150, 200, 80, 0,0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA23, 10,  ""),
		DLG_TEXT ( STARTX,		STARTY+230, 1000, 80, 0, 0, 0,            EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA82, ""),
		
		DLG_BUTTON(STARTX,		STARTY+330, 130, 80, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNCHKFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_BOX8,  CHKOFF),
		DLG_TEXT ( STARTX+130,	STARTY+330, 180, 80, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA73, "맞음"),
		DLG_BUTTON(STARTX+310,  STARTY+330, 130, 80, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNCHKFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_BOX9,  CHKOFF),
		DLG_TEXT ( STARTX+440,	STARTY+330, 180, 80, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA74, "틀림"),
		DLG_BUTTON(STARTX+620,  STARTY+330, 130, 80, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNCHKFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_BOX10,  CHKOFF),
		DLG_TEXT ( STARTX+750,	STARTY+330, 250, 80, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA75, "주소없음"),
		
		DLG_TEXT ( STARTX,		STARTY+450, 500, 80, 0, 0, EDITSTY_BORDER,            0, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA76, ">새주소"),
		DLG_TEXT ( STARTX,		STARTY+530, 560, 80, 0, 0, 0,            EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA77, ""),
		DLG_EDIT ( STARTX+560,  STARTY+530, 200, 80, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA24, 20,  ""),
		DLG_TEXT ( STARTX+760,	STARTY+530, 40,  80, 0, 0, 0,            EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA78, "-"),
		DLG_EDIT ( STARTX+800,  STARTY+530, 200, 80, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA25, 20,  ""),
		DLG_TEXT ( STARTX,		STARTY+610, 1000, 80, 0, 0, 0,            EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA83, ""),
		
		DLG_BUTTON(STARTX,		STARTY+710, 130, 80, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNCHKFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_BOX11,  CHKOFF),
		DLG_TEXT ( STARTX+130,	STARTY+710, 180, 80, 0, 0, 0,            EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA79, "맞음"),
		DLG_BUTTON(STARTX+310,  STARTY+710, 130, 80, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNCHKFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_BOX12,  CHKOFF),
		DLG_TEXT ( STARTX+440,	STARTY+710, 180, 80, 0, 0, 0,            EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA80, "틀림"),
		DLG_BUTTON(STARTX+620,  STARTY+710, 130, 80, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNCHKFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_BOX13,  CHKOFF),
		DLG_TEXT ( STARTX+750,	STARTY+710, 250, 80, 0, 0, 0,            EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA81, "주소없음"),
	};
	
	//---------------------------------------------------------------
	//  SMS발송
	//---------------------------------------------------------------
	DlgObject	DlgRes_SMSSEND[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),
		DLG_ICON(POPTX, POPTY, ICON_TITLE, ""),
		DLG_TEXT(POPTX, POPTY, POPSTWD, POPSTHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "SMS 문자발송"),
		DLG_BUTTON(BTNX_7, P_BTNY, BTNWD_2, BTNHT_2, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_CANCEL5, ""),
		
		DLG_TEXT ( STARTX,	   STARTY -29, 250, 70, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA84, "방문일자"),
		DLG_EDIT ( STARTX+250, STARTY -29, 200, 70, 0, 0, EDITSTY_BOLD, 0, TXTFRCOLOR, EDTCTRLBK, EDT_DATA31, 4,  ""),
		DLG_TEXT ( STARTX+450, STARTY -29,  20, 40, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA29, ""),
		DLG_EDIT ( STARTX+470, STARTY -29, 170, 70, 0, 0, EDITSTY_BOLD, 0, TXTFRCOLOR, EDTCTRLBK, EDT_DATA32, 2,  ""),
		DLG_TEXT ( STARTX+640, STARTY -29,  20, 40, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA31, ""),
		DLG_EDIT ( STARTX+660, STARTY -29, 165, 70, 0, 0, EDITSTY_BOLD, 0, TXTFRCOLOR, EDTCTRLBK, EDT_DATA33, 2,  ""),
		DLG_BUTTON(STARTX+825, STARTY -29, 175, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, TXTFRCOLOR, PDAEDTCTRLBK, CALL_FUNC , "", BID_SCHDL, "▼"),
		
		DLG_TEXT ( STARTX+450, STARTY +11,  20, 30, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA30, "."),
		DLG_TEXT ( STARTX+640, STARTY +11,  20, 30, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA32, "."),
		
		DLG_TEXT ( STARTX,	   STARTY +41, 250, 70, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA95, "방문시간"),
		DLG_COMBO( STARTX+250, STARTY +41, 250, 200, 120, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_TIME1, 4),
		DLG_TEXT ( STARTX+500, STARTY +41, 125, 70, 0,0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA96, "시 ~"),
		DLG_COMBO( STARTX+625, STARTY +41, 250, 200, 120, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_TIME2, 4),
		DLG_TEXT ( STARTX+875, STARTY +41, 125, 70, 0,0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA97, "시"),
			
		DLG_TEXT ( STARTX,	   STARTY+111, 250, 70, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA86, "소속"),
		DLG_TEXT ( STARTX+250, STARTY+111, 750, 70, 0,0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA87, ""),
		DLG_TEXT ( STARTX,	   STARTY+181, 250, 70, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA88, "점검원"),
		DLG_TEXT ( STARTX+250, STARTY+181, 750, 70, 0,0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA89, ""),
		DLG_TEXT ( STARTX,	   STARTY+251, 250, 70, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA90, "고객H.P"),
		DLG_TEXT ( STARTX+250, STARTY+251, 750, 70, 0,0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA91, ""),
		
		DLG_BUTTON(STARTX,     STARTY+390, 400, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CANCEL5,  "취소"),
		DLG_BUTTON(STARTX+600, STARTY+390, 400, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SEND, "전송"),
	};
	
	//---------------------------------------------------------------
	//  PDA SMS발송
	//---------------------------------------------------------------
	DlgObject	DlgRes_SMSSEND_P[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),
		DLG_ICON(P_TTLTX, 0, ICON_TITLE, ""),
		DLG_TEXT(P_TX, P_TY, P_STWD, P_STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "SMS 문자발송"),
		DLG_BUTTON(P_BTNX, P_BTNY, P_BTNWD, P_BTNHD, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_CANCEL5, ""),

		DLG_BUTTON(STARTX,      STARTY+400, 400, 100, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CANCEL5,  "취소"),
		DLG_BUTTON(STARTX+600,  STARTY+400, 400, 100, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SEND, "전송"),
		
		DLG_TEXT ( STARTX,		STARTY-40, 250, 70, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA84, "방문일자"),
		DLG_EDIT( STARTX+250,	STARTY-40, 200, 70, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA31, 4,  ""),
		DLG_TEXT(STARTX+450,	STARTY-40,  20, 40, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA29, ""),
		DLG_TEXT(STARTX+450,	   STARTY,  20, 30, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA30, "."),
		DLG_EDIT( STARTX+470,	STARTY-40, 170, 70, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA32, 2,  ""),
		DLG_TEXT(STARTX+640,	STARTY-40,  20, 40, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA31, ""),
		DLG_TEXT(STARTX+640,	   STARTY,  20, 30, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA32, "."),
		DLG_EDIT( STARTX+660,	STARTY-40, 165, 70, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA33, 2,  ""),
		DLG_BUTTON(STARTX+825,	STARTY-40, 175, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, TXTFRCOLOR, PDAEDTCTRLBK, CALL_FUNC , "", BID_SCHDL, "▼"),
		//DLG_TEXT ( STARTX+250,	STARTY, 575, 70, 0,0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA85, ""),
		//DLG_BUTTON(STARTX+825,  STARTY, 150, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SCHDL, "▼"),
		
		DLG_TEXT ( STARTX,	    STARTY+30, 250, 70, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA95, "방문시간"),
		DLG_COMBO (STARTX+250,  STARTY+30, 250, 200, 120, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_TIME1, 4),
		DLG_TEXT ( STARTX+500,	STARTY+30, 125, 70, 0,0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA96, "시 ~"),
		DLG_COMBO (STARTX+625,  STARTY+30, 250, 200, 120, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_TIME2, 4),
		DLG_TEXT ( STARTX+875,	STARTY+30, 125, 70, 0,0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA97, "시"),
			
		DLG_TEXT ( STARTX,	    STARTY+100 , 250, 70, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA86, "소속"),
		DLG_TEXT ( STARTX+250,	STARTY+100 , 750, 70, 0,0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA87, ""),
		DLG_TEXT ( STARTX,	    STARTY+170 , 250, 70, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA88, "점검원"),
		DLG_TEXT ( STARTX+250,	STARTY+170 , 750, 70, 0,0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA89, ""),
		DLG_TEXT ( STARTX,	    STARTY+240 , 250, 70, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA90, "고객H.P"),
		DLG_TEXT ( STARTX+250,	STARTY+240 , 750, 70, 0,0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA91, ""),
	};
	
	//---------------------------------------------------------------
	//  Main
	//---------------------------------------------------------------
	bool main(quad MsgType, quad wParam, quad lParam)
	{
		EVENT_HANDLER (MsgType, wParam, lParam);
		return TRUE;
	}
	
	//---------------------------------------------------------------
	// OnInit Function
	//---------------------------------------------------------------	
	void OnInit(char bFirst)
	{
		long i = 0;
		long chkcnt = 0;
		char szSql[200];
	
		m_bFirst = bFirst;
		
		switch (bFirst)
		{
			/*******************************/
			/* 안전점검 등록               */
			/*******************************/
			case INIT_MAIN:
				switch (theDevInfo.m_nType)
				{
					case FAMILY_PDA:
						CREATE_DIALOG_OBJECT (DlgRes_P, SIZEOF(DlgRes_P));
						break;
					default:
						CREATE_GLOBAL_BUTTON (SysButRes_MAIN);
						CREATE_DIALOG_OBJECT (DlgRes, SIZEOF(DlgRes));
						break;		
				}
				
				SetBtnImg();
				SetData();
				SetStyle();
				
				// 주소확인
				if( Str_Cmp(stScAddr.SEND_YN, "N") == 0 )
				{
					ON_EXIT();
					OnInit(INIT_SCADDR);
					return;
				}
				
				
				Set_NoChk();
				REDRAW();

				// 바코드 재발행 세대 확인
				if( Str_Cmp(stSc.BAR_YN, "Y") == 0 )
				{
					MessageBoxEx (CONFIRM_OK, "바코드 재발행 세대입니다.");
				}

				if (g_lDataflag == 0)
				{
					Set_Popup();
				}
				
				// if ( Str_Cmp(stSc.BLD_NUM, "400058316") == 0)
				// {
				// 	MessageBoxEx(CONFIRM_OK, "비대면 시범 주택입니다.\n모바일청구서 가입 홍보 안내부탁드립니다.");
				// }
				// else if( Str_Cmp(stSc.MTR_KIND, "80") == 0 && Str_Cmp(stSc.MTR_REMOTE_AMI,"82") ==0 && Str_Cmp(stSc.BILL_SEND_METHOD, "M" ) != 0 )
				// {
				// 	MessageBoxEx(CONFIRM_OK, "모바일청구서 가입 \n홍보 안내부탁드립니다.\n 가입시 매월 200캐시 지급 대상입니다.\n (미가입시 캐시 미지급)");
				// }
				// else if( Str_Cmp(stSc.MTR_KIND, "80") == 0 && (Str_Cmp(stSc.MTR_REMOTE_AMI,"81") ==0 || Str_Cmp(stSc.MTR_REMOTE_AMI,"83") ==0 ) && Str_Cmp(stSc.BILL_SEND_METHOD, "M" ) != 0 )
				// {
				// 	MessageBoxEx(CONFIRM_OK, "모바일청구서 가입\n 홍보 안내부탁드립니다");
				// }
				

				//400058316
				break;

				// if (Str_Cmp(stGm.MTR_LOC_FLAG, "20") == 0 && lEndDate > 0 && (lEndDate >= lToDate))
				// 	{
						

					// }

				
			/*******************************/
			/* 미점검 방문                 */
			/*******************************/
			case INIT_NOCHK:
				switch (theDevInfo.m_nType)
				{
					case FAMILY_PDA:
						CREATE_DIALOG_OBJECT (DlgRes_NOSC_P, SIZEOF(DlgRes_NOSC_P));
						break;
					default:
						CREATE_DIALOG_OBJECT (DlgRes_NOSC, SIZEOF(DlgRes_NOSC));
						break;		
				}

				SetBtnImg();
				NOCHK_DRAW();
				
				break;
			
			/*******************************/
			/* 예약등록                    */
			/*******************************/
			case INIT_SCRSRV:
				switch (theDevInfo.m_nType)
				{
					case FAMILY_PDA:
						CREATE_DIALOG_OBJECT (DlgRes_SCRSRV_P, SIZEOF(DlgRes_SCRSRV_P));
						break;
					default:	
						CREATE_DIALOG_OBJECT (DlgRes_SCRSRV, SIZEOF(DlgRes_SCRSRV));
						break;
				}
				
				SetBtnImg();
				RESERVE_DRAW();
				
				break;
			
			/*******************************/
			/* 점검 제외                   */
			/*******************************/
			case INIT_SCOUT:
				switch (theDevInfo.m_nType)
				{
					case FAMILY_PDA:
						CREATE_DIALOG_OBJECT (DlgRes_SCOUT_P, SIZEOF(DlgRes_SCOUT_P));
						break;
					default:
						CREATE_DIALOG_OBJECT (DlgRes_SCOUT, SIZEOF(DlgRes_SCOUT));
						break;		
				}

				SetBtnImg();
				SCOUT_DRAW();
				
				break;
			
			/*******************************/
			/* 주소확인                    */
			/*******************************/
			case INIT_SCADDR:
				switch (theDevInfo.m_nType)
				{
					case FAMILY_PDA:
						CREATE_DIALOG_OBJECT (DlgRes_SCADDR_P, SIZEOF(DlgRes_SCADDR_P));
						break;
					default:
						CREATE_DIALOG_OBJECT (DlgRes_SCADDR, SIZEOF(DlgRes_SCADDR));
						break;		
				}

				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA22), FALSE );
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA23), FALSE );
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA24), FALSE );
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA25), FALSE );

				SetBtnImg();
				
				if( SetAddr() > 0 )
				{
					ADDR_DRAW();
				}
				
				break;
			
			/*******************************/
			/* SMS발송                     */
			/*******************************/
			case INIT_SMSSEND:
				switch (theDevInfo.m_nType)
				{
					case FAMILY_PDA:
						CREATE_DIALOG_OBJECT (DlgRes_SMSSEND_P, SIZEOF(DlgRes_SMSSEND_P));
						break;
					default:
						CREATE_DIALOG_OBJECT (DlgRes_SMSSEND, SIZEOF(DlgRes_SMSSEND));
						break;		
				}
				
				m_lSmsNonPay = 0 ; 
				m_lContStsCd = 0 ;
				SetBtnImg();
				SMSSEND_DRAW();
				
				break;
		}
	}

	/*=======================================================================================
	함수명 : SetBtnImg
	기  능 : BUTTON IMAGE
	Param  : 
	Return : 
	========================================================================================*/
	void SetBtnImg(void)
	{
		void* h;
		
		if( m_bFirst == INIT_MAIN )
		{
			IconCtrl_SetImage(Get_hDlgCtrlByID(ICON_TITLE), 0, g_pImgMainTtl );
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_TITLE), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			
			if( theDevInfo.m_nType != FAMILY_PDA )
			{	
				//상단공통메뉴
				h = GetSysButHandle(GID_HOME);
				ButCtrl_SetImage( h,  g_pImgHomeI);
				ButCtrl_SetActiveImage( h,  g_pImgHomeA);
				
				h = GetSysButHandle(GID_KEYBOARD);
				ButCtrl_SetImage( h,  g_pImgKeybrdI);
				ButCtrl_SetActiveImage( h,  g_pImgKeybrdA);
				
				h = GetSysButHandle(GID_SCREEN);
				ButCtrl_SetImage( h,  g_pImgScreenI);
				ButCtrl_SetActiveImage( h,  g_pImgScreenA);
				
				h = GetSysButHandle(GID_CMMNWK);
				ButCtrl_SetImage( h,  g_pImgCmmnwrkI);
				ButCtrl_SetActiveImage( h,  g_pImgCmmnwrkA);
				
				h = GetSysButHandle(GID_VMEXIT);
				ButCtrl_SetImage( h,  g_pImgExitI);
				ButCtrl_SetActiveImage( h,  g_pImgExitA);

			}
		}
		else
		{	
			IconCtrl_SetImage(Get_hDlgCtrlByID(ICON_TITLE), 0, g_pImgPopTtlL );
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_TITLE), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		}
	}

	/*=======================================================================================
	함수명 : OnSelect
	기  능 : 테이블 클릭 이벤트
	Param  : 
	Return : 
	========================================================================================*/
	void OnSelect(long Index)
	{
		char sztmp[200];
		char szSql[300];
		long i, index;
	
		if( INIT_SCOUT == m_bFirst )
		{
			//현재 TBL이 선택되었는지를 확인
			if (DlgTbl_IsSelect(ID_TBLLIST))
			{
				// 현재 선택된 인덱스
				index = DlgTbl_GetActiveRow(ID_TBLLIST);
				m_lSelIndex = index - 1;

				Mem_Set( (byte*)m_szScOut, 0x00, sizeof(m_szScOut) );
				Str_Cpy(m_szScOut , DlgTbl_GetStr( ID_TBLLIST, m_lSelIndex, 0));
				
				return;
			}
		}
	}

	/*=======================================================================================
	함수명 : OnChar
	기  능 : 숫자입력 체크
	Param  : 
	Return : 
	========================================================================================*/
	void OnChar(long nChar)
	{
		long nRet = 0;
		long nDate = 0;
		char szTmp[10];
		char szDate[10];
		
		/**************************/
		/* 주소확인               */
		/**************************/
		if( m_bFirst == INIT_SCADDR )
		{
			//숫자만 입력 가능
			if( Get_iDlgCtrlByID(EDT_DATA22) == m_lActiveIndex ||
			    Get_iDlgCtrlByID(EDT_DATA23) == m_lActiveIndex ||
			    Get_iDlgCtrlByID(EDT_DATA24) == m_lActiveIndex ||
			    Get_iDlgCtrlByID(EDT_DATA25) == m_lActiveIndex )
			{
				if( (nChar < 48 ||  nChar > 57) )
				{
					MessageBoxEx (CONFIRM_OK, "숫자만 입력가능합니다.");
					EditCtrl_SetStr(Get_hDlgCtrlByIndex(m_lActiveIndex), "");
					return;
				}
			}
		}
		/**************************/
		/* 예약등록               */
		/**************************/
		else if( m_bFirst == INIT_SCRSRV )
		{
			// 숫자만 입력 가능
			if( Get_iDlgCtrlByID(EDT_DATA28) == m_lActiveIndex ||
			    Get_iDlgCtrlByID(EDT_DATA29) == m_lActiveIndex ||
			    Get_iDlgCtrlByID(EDT_DATA30) == m_lActiveIndex )
			{
				if( (nChar < 48 ||  nChar > 57) )
				{
					MessageBoxEx (CONFIRM_OK, "숫자만 입력가능합니다.");
					EditCtrl_SetStr(Get_hDlgCtrlByIndex(m_lActiveIndex), "");
					return;
				}
			}
			
			if( Get_iDlgCtrlByID(EDT_DATA28) == m_lActiveIndex )
			{
				if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA28)) == 4 )
				{
					Dialog_SetActiveCtrl(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA29));
					m_lActiveIndex = Dialog_GetActiveCtrlIndex(this->m_hDlg);
				}
			}
			else if( Get_iDlgCtrlByID(EDT_DATA29) == m_lActiveIndex )
			{
				Mem_Set((byte *)szTmp, 0x00, sizeof(szTmp));
				Mem_Cpy((byte *)szTmp, (byte *)EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA29)), 1);
				if( Str_AtoI(szTmp) > 1 )
				{
					ON_KEY( 5 );
					return;
				}
				
				Mem_Set((byte *)szTmp, 0x00, sizeof(szTmp));
				Mem_Cpy((byte *)szTmp, (byte *)EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA29)), 2);
				if( Str_Len(szTmp) > 1 && (Str_AtoI(szTmp) == 0 || Str_AtoI(szTmp) > 12) )
				{
					ON_KEY( 5 );
					return;
				}
				
				if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA29)) == 2 )
				{
					Dialog_SetActiveCtrl(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA30));
					m_lActiveIndex = Dialog_GetActiveCtrlIndex(this->m_hDlg);
				}
			}
			else if( Get_iDlgCtrlByID(EDT_DATA30) == m_lActiveIndex )
			{
				Mem_Set((byte *)szTmp, 0x00, sizeof(szTmp));
				Mem_Cpy((byte *)szTmp, (byte *)EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA30)), 1);
				if( Str_AtoI(szTmp) > 3 )
				{
					ON_KEY( 5 );
					return;
				}
				
				Mem_Set((byte *)szTmp, 0x00, sizeof(szTmp));
				Mem_Cpy((byte *)szTmp, (byte *)EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA30)), 2);
				if( Str_Len(szTmp) > 1 && (Str_AtoI(szTmp) == 0 || Str_AtoI(szTmp) > 31) )
				{
					ON_KEY( 5 );
					return;
				}
			}
			
			// 유효날짜
			Mem_Set((byte *)szTmp, 0x00, sizeof(szTmp));
			Str_Cpy(szTmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA28)));
			Str_Cat(szTmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA29)));
			Str_Cat(szTmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA30)));
			
			if( Str_Len(szTmp) == 8 )
			{
				Str_Chg(szTmp, STRCHG_DEL_NONDIGIT);
				nDate = Str_AtoI(szTmp);
				nRet = Time_ValidateDate(nDate);
				
				if( nRet == 0 )
				{
					MessageBoxEx (CONFIRM_OK, "유효한 날짜가 아닙니다.\n날짜를 확인해주세요.");
					EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA28), "");
					EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA29), "");
					EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA30), "");
					
					Dialog_SetActiveCtrl(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA28));
					m_lActiveIndex = Dialog_GetActiveCtrlIndex(this->m_hDlg);
				}
				else
				{
					Mem_Set((byte *)szDate, 0x00, sizeof(szDate));
					Str_ItoA(Time_GetDate(), szDate, 10);
					if( Str_AtoI(szDate) <= Str_AtoI(szTmp) )
					{
						Str_Cpy(m_szDate, szTmp);
					}
					else
					{
						MessageBoxEx (CONFIRM_OK, "예약 날짜가 잘못 설정되었습니다.\n 다시 설정해주세요.");
						EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA28), "");
						EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA29), "");
						EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA30), "");
						
						Dialog_SetActiveCtrl(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA28));
						m_lActiveIndex = Dialog_GetActiveCtrlIndex(this->m_hDlg);
					}
				}
			}
			
			ON_DRAW();
			
			return;
		}
		/**************************/
		/* SMS발송                */
		/**************************/
		else if( m_bFirst == INIT_SMSSEND )
		{
			// 숫자만 입력 가능
			if( Get_iDlgCtrlByID(EDT_DATA31) == m_lActiveIndex ||
			    Get_iDlgCtrlByID(EDT_DATA32) == m_lActiveIndex ||
			    Get_iDlgCtrlByID(EDT_DATA33) == m_lActiveIndex )
			{
				if( (nChar < 48 ||  nChar > 57) )
				{
					MessageBoxEx (CONFIRM_OK, "숫자만 입력가능합니다.");
					EditCtrl_SetStr(Get_hDlgCtrlByIndex(m_lActiveIndex), "");
					return;
				}
			}
			
			
			if( Get_iDlgCtrlByID(EDT_DATA31) == m_lActiveIndex )
			{
				if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA31)) == 4 )
				{
					Dialog_SetActiveCtrl(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA32));
					m_lActiveIndex = Dialog_GetActiveCtrlIndex(this->m_hDlg);
				}
			}
			else if( Get_iDlgCtrlByID(EDT_DATA32) == m_lActiveIndex )
			{
				Mem_Set((byte *)szTmp, 0x00, sizeof(szTmp));
				Mem_Cpy((byte *)szTmp, (byte *)EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA32)), 1);
				if( Str_AtoI(szTmp) > 1 )
				{
					ON_KEY( 5 );
					return;
				}
				
				Mem_Set((byte *)szTmp, 0x00, sizeof(szTmp));
				Mem_Cpy((byte *)szTmp, (byte *)EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA32)), 2);
				if( Str_Len(szTmp) > 1 && (Str_AtoI(szTmp) == 0 || Str_AtoI(szTmp) > 12) )
				{
					ON_KEY( 5 );
					return;
				}
				
				if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA32)) == 2 )
				{
					Dialog_SetActiveCtrl(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA33));
					m_lActiveIndex = Dialog_GetActiveCtrlIndex(this->m_hDlg);
				}
			}
			else if( Get_iDlgCtrlByID(EDT_DATA33) == m_lActiveIndex )
			{
				Mem_Set((byte *)szTmp, 0x00, sizeof(szTmp));
				Mem_Cpy((byte *)szTmp, (byte *)EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA33)), 1);
				if( Str_AtoI(szTmp) > 3 )
				{
					ON_KEY( 5 );
					return;
				}
				
				Mem_Set((byte *)szTmp, 0x00, sizeof(szTmp));
				Mem_Cpy((byte *)szTmp, (byte *)EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA33)), 2);
				if( Str_Len(szTmp) > 1 && (Str_AtoI(szTmp) == 0 || Str_AtoI(szTmp) > 31) )
				{
					ON_KEY( 5 );
					return;
				}
			}
			
			// 유효날짜
			Mem_Set((byte *)szTmp, 0x00, sizeof(szTmp));
			Str_Cpy(szTmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA31)));
			Str_Cat(szTmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA32)));
			Str_Cat(szTmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA33)));
			
			if( Str_Len(szTmp) == 8 )
			{
				Str_Chg(szTmp, STRCHG_DEL_NONDIGIT);
				nDate = Str_AtoI(szTmp);
				nRet = Time_ValidateDate(nDate);
				
				if( nRet == 0 )
				{
					MessageBoxEx (CONFIRM_OK, "유효한 날짜가 아닙니다.\n날짜를 확인해주세요.");
					EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA31), "");
					EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA32), "");
					EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA33), "");
					
					Dialog_SetActiveCtrl(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA31));
					m_lActiveIndex = Dialog_GetActiveCtrlIndex(this->m_hDlg);
				}
				else
				{
					
					Mem_Set((byte *)szDate, 0x00, sizeof(szDate));
					Str_ItoA(Time_GetDate(), szDate, 10);
					if( Str_AtoI(szDate) <= Str_AtoI(szTmp) )
					{
						Str_Cpy(stSc.ARG_DATE, szTmp);
					}
					else
					{
						MessageBoxEx (CONFIRM_OK, "방문 일자가 잘못 설정되었습니다.\n 다시 설정해주세요.");
						EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA31), "");
						EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA32), "");
						EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA33), "");
						
						Dialog_SetActiveCtrl(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA31));
						m_lActiveIndex = Dialog_GetActiveCtrlIndex(this->m_hDlg);
					}
				}
			}
			
			ON_DRAW();
			
			return;
		}
	}

	/*=======================================================================================
	함수명 : OnPointing
	기  능 : 화면 포인팅 이벤트
	Param  : 
	Return : 
	========================================================================================*/
	void OnPointing(long nAction, long X, long Y)
	{
		long lActiveIndex = -1;
		long lret;
		
		lActiveIndex = Dialog_GetActiveCtrlIndex(this->m_hDlg);	

		if( m_bFirst == INIT_SCRSRV )
		{
			if( POINTING_UP == nAction )
			{
				m_lActiveIndex = lActiveIndex;
				
				if( theDevInfo.m_nType > FAMILY_PDA )
				{
					if( X > DMS_X(STARTX+300) && X < DMS_X(STARTX+480) && Y > DMS_Y(STARTY+111) && Y < DMS_Y(STARTY+181) ||
						X > DMS_X(STARTX+498) && X < DMS_X(STARTX+653) && Y > DMS_Y(STARTY+111) && Y < DMS_Y(STARTY+181) ||
						X > DMS_X(STARTX+670) && X < DMS_X(STARTX+825) && Y > DMS_Y(STARTY+111) && Y < DMS_Y(STARTY+181) )
					{
						if( Get_iDlgCtrlByID(EDT_DATA28) == lActiveIndex ||
							Get_iDlgCtrlByID(EDT_DATA29) == lActiveIndex ||
							Get_iDlgCtrlByID(EDT_DATA30) == lActiveIndex )
						{
							ShowSip(FALSE);
							g_Sipflag = 0;
							
							ShowSip(TRUE);
							g_Sipflag = 1;
						}
					}
					else
					{
						ShowSip(FALSE);
						g_Sipflag = 0;
					}
					
					ON_DRAW();
				}
				else //PDA
				{
					if( X > DMS_X(STARTX+50) && X < DMS_X(STARTX+900) && Y > DMS_Y(STARTY+400) && Y < DMS_Y(STARTY+650) )
					{
						if( Get_iDlgCtrlByID(EDT_DATA10) == lActiveIndex )
						{
							ShowSip(FALSE);
							g_Sipflag = 0;
							
							ShowSip(TRUE);
							g_Sipflag = 1;
						}
					}
					else
					{
						ShowSip(FALSE);
						g_Sipflag = 0;
					}
				}
			}
		}
		else if( m_bFirst == INIT_SCADDR )
		{
			if( POINTING_UP == nAction )
			{
				m_lActiveIndex = lActiveIndex;
			
				if( theDevInfo.m_nType > FAMILY_PDA )
				{
					if( X > DMS_X(STARTX+550) && X < DMS_X(STARTX+750) && Y > DMS_Y(STARTY+110) && Y < DMS_Y(STARTY+170) ||
					    X > DMS_X(STARTX+800) && X < DMS_X(STARTX+1000) && Y > DMS_Y(STARTY+110) && Y < DMS_Y(STARTY+170) )
					{
						if( Get_iDlgCtrlByID(EDT_DATA22) == lActiveIndex ||
						    Get_iDlgCtrlByID(EDT_DATA23) == lActiveIndex )	
						{
							g_Dlgflag = 1;
							g_MOVE_DLG(1);
						
							ShowSip(FALSE);
							g_Sipflag = 0;
							
							ShowSip(TRUE);
							g_Sipflag = 1;
	
						}
					}
					else if( X > DMS_X(STARTX+550) && X < DMS_X(STARTX+750) && Y > DMS_Y(STARTY+410-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+470-(g_Dlgflag*400)) ||
					         X > DMS_X(STARTX+800) && X < DMS_X(STARTX+1000) && Y > DMS_Y(STARTY+410-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+470-(g_Dlgflag*400)) )
					{
						if( Get_iDlgCtrlByID(EDT_DATA24) == lActiveIndex ||
						    Get_iDlgCtrlByID(EDT_DATA25) == lActiveIndex )	
						{
							g_Dlgflag = 0;
							g_MOVE_DLG(400);
						
							ShowSip(FALSE);
							g_Sipflag = 0;
							
							ShowSip(TRUE);
							g_Sipflag = 1;
						}
					}
					else
					{
						g_Dlgflag = 1;
						g_MOVE_DLG(1);
					
						ShowSip(FALSE);
						g_Sipflag = 0;
					}
					
					ON_DRAW();
				}
			}
		}
		else if( m_bFirst == INIT_SMSSEND )
		{
			if( POINTING_UP == nAction )
			{
				m_lActiveIndex = lActiveIndex;
				
				if( theDevInfo.m_nType > FAMILY_PDA )
				{
					if( X > DMS_X(STARTX+250) && X < DMS_X(STARTX+450) && Y > DMS_Y(STARTY-29) && Y < DMS_Y(STARTY+41) ||
						X > DMS_X(STARTX+470) && X < DMS_X(STARTX+640) && Y > DMS_Y(STARTY-29) && Y < DMS_Y(STARTY+41) ||
						X > DMS_X(STARTX+660) && X < DMS_X(STARTX+825) && Y > DMS_Y(STARTY-29) && Y < DMS_Y(STARTY+41) )
					{
						if( Get_iDlgCtrlByID(EDT_DATA31) == lActiveIndex ||
							Get_iDlgCtrlByID(EDT_DATA32) == lActiveIndex ||
							Get_iDlgCtrlByID(EDT_DATA33) == lActiveIndex )
						{
							ShowSip(FALSE);
							g_Sipflag = 0;
							
							ShowSip(TRUE);
							g_Sipflag = 1;
						}
					}
					else
					{
						ShowSip(FALSE);
						g_Sipflag = 0;
					}
					
					ON_DRAW();
				}
			}
		}
	}
	
	/*=======================================================================================
	함수명 : OnButton
	기  능 : 버튼 이벤트 정의
	Param  : 
	Return : 
	========================================================================================*/
	void OnButton(long ID)
	{	
		long d, k, chktime;
		long nLen = 0;
		char szToday[15];
		char szYear[5];
		char szMonth[3];
		char szDay[3];
		char sztmp[20];
		char szMsg[150];
		long chkcnt = 0;
		char szSql[300];
		long lRet = 0;
		long lDegree = 0;
		
		switch(ID)
		{
			/****************************/
			/* 공통                     */
			/****************************/
			case GID_HOME:
				if( MessageBoxEx (CONFIRM_YESNO, "메인 메뉴로 나가시겠습니까?")  == MB_OK)
				{
					g_lDataflag = 0;
					g_lMoveFlag = 0;
					
					Mem_Set( (byte*)stGm.SUBMONITOR_FLAG, 0x00, sizeof(stGm.SUBMONITOR_FLAG) );
					Str_Cpy(stGm.SUBMONITOR_FLAG, "0");
	
					Set_Index();
					Card_Move("MENU");	
				}
				break;
				
			case GID_MENU:
				if( MessageBoxEx (CONFIRM_YESNO, "안전점검 메뉴로\n나가시겠습니까?")  == MB_OK)
				{
					g_lDataflag = 0;
					g_lMoveFlag = 0;
					
					Mem_Set( (byte*)m_szScOut, 0x00, sizeof(m_szScOut) );
					
					Mem_Set( (byte*)stGm.SUBMONITOR_FLAG, 0x00, sizeof(stGm.SUBMONITOR_FLAG) );
					Str_Cpy(stGm.SUBMONITOR_FLAG, "0");
	
					Set_Index();
					Card_Move("SC_MENU");
				}
				break;
				
			case GID_KEYBOARD:
				g_SHOW_SIP();
				break;
				
			case GID_SCREEN:
				g_MOVE_DLG(400);
				break;
				
			case GID_CMMNWK:
				//Sos_Key();
				
				if( MessageBoxEx (CONFIRM_YESNO, "SOS 긴급호출을 하시겠습니까?") == MB_OK )
				{
					g_Send_SOS(1);
				}
				
				break;
							
			case GID_PREV:
				if( 200 > g_nWorkFlag )
				{
					Card_Move("GM_ENTRY");
				}
				else if( 204 == g_nWorkFlag )
				{
					Set_Index();
					Card_Move("SC_RSRVLST");
				}
				else if( 209 == g_nWorkFlag )
				{
					Set_Index();
					Card_Move("SC_PTRNLST");
				}
				else if( 208 == g_nWorkFlag )
				{
					Set_Index();
					Card_Move("SC_FRSTLST");
				}
				else
				{
					Set_Index();
					Card_Move("SC_LST");
				}
				break;
					
			case GID_VMEXIT:
				Set_Index();
				g_Exit();
				break;
				
			/****************************/
			/* MAIN                     */
			/****************************/
			case BID_ILLIGAL:
				Set_Index();
				Card_Move("CM_ILLEGAL");
				break;	
							
			case BID_USEDOC:
				// Card_Move("CM_USEDOC");
				g_lMobile_Inflow_Path = 2;
				Card_Move("CM_MOBILE_USE_DOC_MENU");
				
				break;
				
			case BID_USEDOC_SMS:
				g_lCmContDocMoveFlag = 1;
				
				Mem_Set((byte*)g_szInstPlaceNum, 0x00, sizeof(g_szInstPlaceNum));
				Str_Cpy( g_szInstPlaceNum, stSc.INST_PLACE_NUM );
				
				Card_Move("CM_USEDOC_SEND");
				break;
				
			case BID_BIZ:
				Card_Move("CM_BIZ");
				break;
				
			case BID_ADDR:
				if( 0 == g_nAddrFlag )
				{
					g_nAddrFlag = 1;
					ButCtrl_SetText(Get_hDlgCtrlByID(BID_ADDR), "도로명");
				}
				else
				{
					g_nAddrFlag = 0;
					ButCtrl_SetText(Get_hDlgCtrlByID(BID_ADDR), "지번");
				}
				
				REDRAW();
				break;
				
			case BID_HOUSETEL:
			case BID_PHONETEL:
				Mem_Set( (byte*) szMsg, 0x00, sizeof( szMsg) );
				if( ID == BID_PHONETEL )
				{
					SPRINT(szMsg, "%s 고객님께\n전화하시겠습니까?\n(HP : %s)", stSc.CUST_NM,m_szPhone,0);	
				}
				else
				{
					SPRINT(szMsg, "%s 고객님께\n전화하시겠습니까?\n(TEL : %s)", stSc.CUST_NM,m_szTel,0);
				}
				
				if( MessageBoxEx(CONFIRM_YESNO, szMsg) == MB_OK)
				{
					Call_Tel(ID);
				}
				break;
				
			case BID_CHANGE:
				ON_EXIT();
				OnInit(INIT_SCADDR);
				break;
				
			case BID_JUNBAN:
				Set_Index();
				Card_Move("BS_PRVRSKCHK");
				break;
				
			case BID_VISIT:
				Set_Index();
				Card_Move("SC_VSTHSTR");
				break;
				
			case BID_SCCANCEL:
				if(MessageBoxEx (CONFIRM_YESNO, "취소하시겠습니까?") == MB_OK )
				{
					Del_ScData();
					SetData();
					Set_NoChk();
					REDRAW();
				}
				break;
				
			case BID_NOSC:
				if( Str_Cmp(stSc.SEND_YN, "Y") == 0 )
				{
					MessageBoxEx (CONFIRM_OK, "이미 송신 완료한 자료입니다.");
				}
				else if( Str_Cmp(stSc.CHK_RSLT, "40") == 0 )
				{
					MessageBoxEx (CONFIRM_OK, "이미 제외한 자료입니다.");
				}
				else if( Str_Cmp(stSc.SEND_YN, "S") == 0 )
				{
					MessageBoxEx (CONFIRM_OK, "이미 작업한 자료입니다.");
				}
				else
				{
					ON_EXIT();
					OnInit(INIT_NOCHK);
				}
				break;
				
			case BID_SCOUT:
				if( Str_Cmp(stSc.SEND_YN, "Y") == 0 )
				{
					MessageBoxEx (CONFIRM_OK, "이미 송신 완료한 자료입니다.");
				}
				else if( Str_Cmp(stSc.CHK_RSLT, "40") == 0 )
				{
					MessageBoxEx (CONFIRM_OK, "이미 제외한 자료입니다.");
				}
				else if( Str_Cmp(stSc.SEND_YN, "S") == 0 )
				{
					MessageBoxEx (CONFIRM_OK, "이미 작업한 자료입니다.");
				}
				else
				{
					g_Str_TimeType( stSc.CHK_TIME_FROM , Time_GetTime());

					ON_EXIT();
					OnInit(INIT_SCOUT);
				}
				
				break;
				
			case BID_SC:
				if( Str_Cmp(stSc.SEND_YN, "Y") == 0 )
				{
					MessageBoxEx (CONFIRM_OK, "이미 송신 완료한 자료입니다.");
				}
				else if( Str_Cmp(stSc.CHK_RSLT, "40") == 0 )
				{
					MessageBoxEx (CONFIRM_OK, "이미 제외한 자료입니다.");
				}
				else if( Str_Cmp(stSc.SEND_YN, "S") == 0 )
				{
					MessageBoxEx (CONFIRM_OK, "이미 작업한 자료입니다.");
				}
				else
				{
					// 20190125 입상관 점검 이후 조정기 점검 진행
					// 입상관점검
					chkcnt = 0;
					Mem_Set((byte*)szSql, 0x00, sizeof(szSql));
					SPRINT(szSql, " SELECT COUNT(*) FROM NORMAL_STANDPIPE_CHK_RSLT WHERE BLD_NUM = '%s' ", stSc.BLD_NUM, 0, 0 );
					g_Sql_RetInt( szSql, &chkcnt );
		
					if(chkcnt == 0 && Str_Len(stSc.PIPE_NUM) > 0)
					{							
						MessageBoxEx (CONFIRM_OK, "입상관점검이 존재합니다.\n입상관점검을 진행해주세요.");
						Card_Move("SC_STANDPIPECHK");
					}
					else
					{
						//조정기점검
						if( !Regtr_Chk() )
						{
							g_Str_TimeType( stSc.CHK_TIME_FROM , Time_GetTime());
							Set_Index();
							SetDataNogoodCha();
							g_nNogoodDelCnt = 0;
							Card_Move("SC_START");
						}	
					}
				}
				break;
				
			case BID_PREVPG:
				Prev_SC();
				break;
				
			case BID_NEXTPG:
				Next_SC();
				break;
				
			case BID_RESERVE:
				ON_EXIT();
				OnInit(INIT_SCRSRV);
				break;
				
			case BID_SENDSMS:
				ON_EXIT();
				OnInit(INIT_SMSSEND);
				break;	
			
			case BID_MEMO:
				Set_Index();
				g_nMemoFlag = 2;
				Card_Move("CM_MRGMEMO");
				break;
				
			case BID_CUSTPTRN:
				Set_Index();
				g_lPtrnFlag = 1;
				Card_Move("SC_CUSTPTRN");
				break;
		
			case BID_REQ:
				ReqMsg();
				
				break;
				
			case BID_REFUSE:
				Card_Move("SC_REFUSE");
				break;
			
			/****************************/
			/* 미점검                   */
			/****************************/
			case BID_STOP:
				if( MessageBoxEx (CONFIRM_YESNO, "공급중지 하시겠습니까?") == MB_OK)
				{
					Mem_Set((byte*)szToday, 0x00, sizeof(szToday));
					Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
					
					Str_ItoA(Time_GetDate(), szToday, 10);
					g_Str_DateType(sztmp, szToday);
					
					EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA60), sztmp );
					EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_NOSTP), "" );
					
					DlgCtrl_SetEnable( this->m_hDlg, Get_iDlgCtrlByID(CMB_NOSTP+1), FALSE );
					DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(CMB_NOSTP+1), TRUE );
				}
				break;
				
			case BID_ENTRY2:
				
				// 부재 문자 조건 : (장기)부재 && 계약상태가 해지가 아닌 경우
				if( Str_Cmp( EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_NOCHK)), "(장기)부재" ) == 0 && Str_Cmp(stSc.CONT_STS_CD, "30") != 0 )
				{
					if( MessageBoxEx (CONFIRM_YESNO, "부재 문자를 보내시겠습니까?") == MB_OK)
					{
						if( Save_NoChk() )
						{
							if(Str_Cmp(stScVisit.VISIT_FLAG,"99") == 0)
							{		
								ON_EXIT();
								OnInit(INIT_MAIN);
							}												
							else
							{
								// lRet = Snd_Sms_Absence();
								// lDegree = Str_AtoI(stScVisit.VISIT_DEGREE) + 1;
								
								if( Str_Cmp( EditCtrl_GetStr(Get_hDlgCtrlByID(TXT_DATA58)), "03" ) == 0)
								{
									Card_Move("SC_ABSENCE");
								}
								else
								{	
									lRet = Snd_Sms_Absence();
								}

								
							}
							
							
						}
					}
					else
					{
						break;
					}
					
					if( lRet > 0 )
					{
						Snd_Sms_Hist_Absence();
						break;
					}
				}				
				else
				{
					if( Save_NoChk() )
					{
						ON_EXIT();
						OnInit(INIT_MAIN);
						OnButton(BID_NEXTPG);
					}
				}
				
				break;
				
			case BID_CANCEL4:
				ON_EXIT();
				OnInit(INIT_MAIN);
				break;
			
			/****************************/
			/* 점검예약                 */
			/****************************/
			case BID_RSRV:
				Mem_Set((byte *)sztmp, 0x00, sizeof(sztmp));
				Str_Cpy(sztmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA28)));
				Str_Cat(sztmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA29)));
				Str_Cat(sztmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA30)));
				Str_Chg(sztmp, STRCHG_DEL_NONDIGIT);
				
				if(  Str_AtoI(sztmp) < Time_GetDate() )
				{
					MessageBoxEx (CONFIRM_OK, "예약일자를 확인해주세요.");
					return;
				}
				else if(  Str_AtoI(sztmp) == Time_GetDate()   )
				{
					Mem_Set((byte *)sztmp, 0x00, sizeof(sztmp));
					Str_Cpy(sztmp, EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_HOUR)) );
					Str_Cat(sztmp, EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_MINUTE)) );
					
					chktime = Time_GetTime()/100;
					
					if( Str_AtoI(sztmp) < chktime  )
					{
						MessageBoxEx (CONFIRM_OK, "예약시간을 확인해주세요.");
						return;
					}
				}
				//메모
				nLen = g_GetUtf8Size(EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA10)));
				
				if( nLen > 100 )
				{
					Mem_Set( (byte*)szMsg, 0x00, sizeof(szMsg) );
					SPRINT(szMsg, "저장실패!\n(메모는 한글 33자,\n영문.숫자 100자 까지만\n입력가능합니다.)\n[%d]", nLen, 0, 0);
					MessageBoxEx(CONFIRM_OK, szMsg);
					break;
				}
				
				Mem_Set( (byte*)stSc.BEFO_HALF_MEMO, 0x00, sizeof(stSc.BEFO_HALF_MEMO) );
				Str_Cpy(stSc.BEFO_HALF_MEMO, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA10)) );
				
				//점검예약일자
				Mem_Set((byte *)sztmp, 0x00, sizeof(sztmp));
				Str_Cpy(sztmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA28)));
				Str_Cat(sztmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA29)));
				Str_Cat(sztmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA30)));
				Str_Chg(sztmp, STRCHG_DEL_NONDIGIT);
				
				Mem_Set( (byte*)stSc.ARG_DATE, 0x00, sizeof(stSc.ARG_DATE) );
				Str_Cpy(stSc.ARG_DATE, sztmp);
				
				Mem_Set( (byte*)stSc.ARG_HOUR, 0x00, sizeof(stSc.ARG_HOUR) );
				Str_Cpy(stSc.ARG_HOUR, EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_HOUR)) );
				
				Mem_Set( (byte*)stSc.ARG_MIN, 0x00, sizeof(stSc.ARG_MIN) );
				Str_Cpy(stSc.ARG_MIN, EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_MINUTE)) );
			
				Snd_Sms();
				
				break;
			case BID_CANCEL:
				ON_EXIT();
				OnInit(INIT_MAIN);
				break;
				
			case BID_WRITE:
				g_EditCtrl_ShowEditInput( Get_hDlgCtrlByID(EDT_DATA10), EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA10)) );
				break;	
				
			case BID_RSRVSCHDL:
				Mem_Set((byte*)sztmp, 0x00, sizeof(sztmp));		
				Str_Cpy(sztmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA28)));
				Str_Cat(sztmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA29)));
				Str_Cat(sztmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA30)));
				
				k = Str_AtoI(sztmp);

				Load_Calendar_Card();
				d = CalendarDialog(&k);
				Unload_Calendar_Card();
				
				if(d == 0)
				{
					break;
				}
				else
				{
					Mem_Set((byte*)m_szDate, 0x00, sizeof(m_szDate));
					Mem_Set((byte*)szToday, 0x00, sizeof(szToday));
					Str_ItoA(Time_GetDate(), szToday, 10);
					Str_ItoA( d, m_szDate, 10);
					
					if( Str_AtoI(szToday) <= Str_AtoI(m_szDate) )
					{
						Mem_Set((byte*)szYear, 0x00, sizeof(szYear));
						Mem_Set((byte*)szMonth, 0x00, sizeof(szMonth));
						Mem_Set((byte*)szDay, 0x00, sizeof(szDay));
						Mem_Cpy((byte *)szYear, (byte *)m_szDate, 4);
						Mem_Cpy((byte *)szMonth, (byte *)m_szDate+4, 2);
						Mem_Cpy((byte *)szDay, (byte *)m_szDate+6, 2);
						
						EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA28), szYear );
						EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA29), szMonth );
						EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA30), szDay );
					}
					else
					{
						MessageBoxEx (CONFIRM_OK, "예약 날짜가 잘못 설정되었습니다.\n 다시 설정해주세요.");
					}
				}
				break;

			/****************************/
			/* 점검제외                 */
			/****************************/
			case BID_OK2:
				if( Save_ScOut() )
				{
					if(Str_Cmp(stSc.CHK_RSLT,"99") == 0)
					{
						ON_EXIT();
						OnInit(INIT_MAIN);
					}
					else if( Str_Cmp(stSc.CHK_EXCEP_WHY, "14") == 0 )						
					{
						ON_EXIT();
						OnInit(INIT_MAIN);
					}
					else
					{
						ON_EXIT();
						OnInit(INIT_MAIN);
						OnButton(BID_NEXTPG);
					}
				}
				break;
				
			case BID_CANCEL3:
				ON_EXIT();
				OnInit(INIT_MAIN);
				break;

			/****************************/
			/* 주소확인                 */
			/****************************/
			case BID_OK3:
				ShowSip(FALSE);
				g_Sipflag = 0;
				
				if( Save_Addr() )
				{
					ON_EXIT();
					OnInit(INIT_MAIN);
				}
				break;
				
			case BID_BOX8:
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX8), CHKON);
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX9), CHKOFF);
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX10), CHKOFF);
				EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(EDT_DATA22), TXTFRCOLOR);
				EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(EDT_DATA23), TXTFRCOLOR);
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA22), FALSE );
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA23), FALSE );
				
				Mem_Set( (byte*)stScAddr.CURR_ADDR_RSLT, 0x00, sizeof(stScAddr.CURR_ADDR_RSLT) );
				Str_Cpy(stScAddr.CURR_ADDR_RSLT, "10");
				m_lAddrFlag1 = 1;
				break;
				
			case BID_BOX9:
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX8), CHKOFF);
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX9), CHKON);
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX10), CHKOFF);
				EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(EDT_DATA22), RED);
				EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(EDT_DATA23), RED);
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA22), TRUE );
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA23), TRUE );
				
				Mem_Set( (byte*)stScAddr.CURR_ADDR_RSLT, 0x00, sizeof(stScAddr.CURR_ADDR_RSLT) );
				Str_Cpy(stScAddr.CURR_ADDR_RSLT, "20");
				m_lAddrFlag1 = 1;
				break;
				
			case BID_BOX10:
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX8), CHKOFF);
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX9), CHKOFF);
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX10), CHKON);
				EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(EDT_DATA22), TXTFRCOLOR);
				EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(EDT_DATA23), TXTFRCOLOR);
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA22), FALSE );
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA23), FALSE );
				
				Mem_Set( (byte*)stScAddr.CURR_ADDR_RSLT, 0x00, sizeof(stScAddr.CURR_ADDR_RSLT) );
				Str_Cpy(stScAddr.CURR_ADDR_RSLT, "30");
				m_lAddrFlag1 = 1;
				break;
				
			case BID_BOX11:
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX11), CHKON);
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX12), CHKOFF);
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX13), CHKOFF);
				EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(EDT_DATA24), TXTFRCOLOR);
				EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(EDT_DATA25), TXTFRCOLOR);
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA24), FALSE );
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA25), FALSE );
				
				Mem_Set( (byte*)stScAddr.NEW_ADDR_RSLT, 0x00, sizeof(stScAddr.NEW_ADDR_RSLT) );
				Str_Cpy(stScAddr.NEW_ADDR_RSLT , "10");
				m_lAddrFlag2 = 1;
				break;
				
			case BID_BOX12:
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX11), CHKOFF);
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX12), CHKON);
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX13), CHKOFF);
				EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(EDT_DATA24), RED);
				EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(EDT_DATA25), RED);
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA24), TRUE );
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA25), TRUE );
				
				Mem_Set( (byte*)stScAddr.NEW_ADDR_RSLT, 0x00, sizeof(stScAddr.NEW_ADDR_RSLT) );
				Str_Cpy(stScAddr.NEW_ADDR_RSLT , "20");
				m_lAddrFlag2 = 1;
				break;
				
			case BID_BOX13:
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX11), CHKOFF);
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX12), CHKOFF);
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX13), CHKON);
				EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(EDT_DATA24), TXTFRCOLOR);
				EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(EDT_DATA25), TXTFRCOLOR);
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA24), FALSE );
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA25), FALSE );
				
				Mem_Set( (byte*)stScAddr.NEW_ADDR_RSLT, 0x00, sizeof(stScAddr.NEW_ADDR_RSLT) );
				Str_Cpy(stScAddr.NEW_ADDR_RSLT , "30");
				m_lAddrFlag2 = 1;
				break;
				
			case BID_RSRVDEL:
				if( MessageBoxEx (CONFIRM_YESNO, "예약 내역을 삭제하시겠습니까?") == MB_OK)
				{
					Mem_Set( (byte*)stSc.ARG_DATE, 0x00, sizeof(stSc.ARG_DATE) );
					Mem_Set( (byte*)stSc.ARG_HOUR, 0x00, sizeof(stSc.ARG_HOUR) );
					Mem_Set( (byte*)stSc.ARG_MIN, 0x00, sizeof(stSc.ARG_MIN) );
					
					Snd_Sms();
				}
				break;

			/****************************/
			/* SMS발송                   */
			/****************************/
			case BID_CANCEL5:
				ON_EXIT();
				OnInit(INIT_MAIN);
				break;
				
			case BID_SEND:
				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				Str_Cpy(sztmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA31)));
				Str_Cat(sztmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA32)));
				Str_Cat(sztmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA33)));
				
				if( Str_Len(sztmp) < 8 )
				{
					MessageBoxEx (CONFIRM_OK, "방문일자를 선택해주세요.");
				}
				else
				{
					if( m_lSmsNonPay == 1 && m_lContStsCd == 1)
					{
						if( MessageBoxEx (CONFIRM_YESNO, "체납 중지세대입니다.\n 계속 진행하시겠습니까?")  == MB_OK)
						{
							if( Save_SmsSend() )
							{
								ON_EXIT();
								OnInit(INIT_MAIN);
							}

						}
					}
					else
					{
						if( Save_SmsSend() )
						{
							ON_EXIT();
							OnInit(INIT_MAIN);
						}
					//Snd_Sms();
					}
					
				
				}
				break;
				
			case BID_SCHDL:
				Mem_Set((byte*)sztmp, 0x00, sizeof(sztmp));		
				Str_Cpy(sztmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA31)));
				Str_Cat(sztmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA32)));
				Str_Cat(sztmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA33)));
				
				k = Str_AtoI(sztmp);

				Load_Calendar_Card();
				d = CalendarDialog(&k);
				Unload_Calendar_Card();
				
				if(d == 0)
				{
					break;
				}
				else
				{
					Mem_Set((byte*)szDay, 0x00, sizeof(szDay));
					Mem_Set((byte*)szToday, 0x00, sizeof(szToday));
					Str_ItoA(Time_GetDate(), szToday, 10);
					Str_ItoA( d, stSc.ARG_DATE, 10);
					
					if( Str_AtoI(szToday) <= Str_AtoI(stSc.ARG_DATE) )
					{
						Mem_Set((byte*)szYear, 0x00, sizeof(szYear));
						Mem_Set((byte*)szMonth, 0x00, sizeof(szMonth));
						Mem_Set((byte*)szDay, 0x00, sizeof(szDay));
						Mem_Cpy((byte *)szYear, (byte *)stSc.ARG_DATE, 4);
						Mem_Cpy((byte *)szMonth, (byte *)stSc.ARG_DATE+4, 2);
						Mem_Cpy((byte *)szDay, (byte *)stSc.ARG_DATE+6, 2);
						
						EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA31), szYear );
						EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA32), szMonth );
						EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA33), szDay );
					}
					else
					{
						MessageBoxEx (CONFIRM_OK, "방문 일자가 잘못 설정되었습니다.\n 다시 설정해주세요.");
					}
				}
				break;
				
			case BID_SP:
				Card_Move("SC_STANDPIPECHK");
				break;
		}
	}
	
	/*=======================================================================================
	함수명 : SetStyle
	기  능 : Main Style Setting
	Param  : 
	Return : 
	========================================================================================*/
	void SetStyle(void)
	{
		if( m_bFirst == INIT_MAIN )
		{
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_PAGE)     , EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_SIGN)	  , EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_AGREE1)   , EDITALIGN_LEFT  |EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_AGREE2)   , EDITALIGN_LEFT  |EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_NAME)	  , EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_TRANS)    , EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_INSPLACE) , EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_CLIENT)	  , EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_TEL)      , EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_CONDATE)  , EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_STATUS)   , EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_HYUNBAN)  , EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_BOX1)	  , EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_BOX2)	  , EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_BOX3)	  , EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_BOX4)	  , EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_BOX5)	  , EDITALIGN_MIDDLE);
			
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA1)	  , EDITALIGN_MIDDLE);
			//EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA2)	  , EDITALIGN_RIGHT |EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA3)	  , EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA4)	  , EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA9)	  , EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA10)	  , EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA11)	  , EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA12)	  , EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA13)	  , EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA14)	  , EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA15)	  , EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA16)	  , EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA17)	  , EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA18)	  , EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA19)	  , EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			
			EditCtrl_SetMultiLine(Get_hDlgCtrlByID(TXT_DATA5), TRUE, 2, EDITSEP_NONE);
			
			// 2018.05.24 CS팀 김미영 과장님 SMS 발송 버튼 막기 요청
			// DlgCtrl_SetVisible( this->m_hDlg, Get_iDlgCtrlByID(BID_USEDOC_SMS), FALSE );
			// 2018.12.03 CS팀 김미영 과장님 SMS 발송 버튼 다시 살림
			DlgCtrl_SetVisible( this->m_hDlg, Get_iDlgCtrlByID(BID_USEDOC_SMS), TRUE );
		}
	}
	
	/*=======================================================================================
	함수명 : Set_Index
	기  능 : 최종 인덱스 저장한다.
	Param  : 
	Return : TRUE :성공
			 FALSE:파일이 없을시에 실패
	========================================================================================*/
	void Set_Index(void)
	{
		char sztmp[150];
		
		Mem_Set((byte*)sztmp, 0x00, sizeof(sztmp));
		SPRINT(sztmp, " UPDATE RCV_LOG SET PARAM8 = %d WHERE GUBUN = '2' ", g_lindex, 0, 0);		
		g_Sql_DirectExecute(sztmp);
	}
	
	/*=======================================================================================
	함수명 : SetData
	기  능 : Data Setting
	Param  : 
	Return : 
	========================================================================================*/
	void SetData(void)
	{
		long i;
		long lindex = 0;
		char szSql[200];
		handle hdb = NULL;
		handle hstmt = NULL;
		SQLITE sql = NewSqLite();

		if( g_nWorkFlag < 200 )
		{
			Mem_Set((byte*)szSql, 0x00, sizeof(szSql));
			SPRINT(szSql, "SELECT CHK_EXEC_NUM FROM NORMAL_DATA WHERE INST_PLACE_NUM = '%s'", stGm.USAGE_TITLE, 0, 0   );
			g_Sql_RetStr( szSql, 12, g_szCHK_EXEC_NUM );
			
			Mem_Set((byte *)m_szCnt_index, 0x00, sizeof(m_szCnt_index));
			SPRINT(m_szCnt_index, "1/1", 0, 0, 0);
		}
		else
		{
			SetTotCnt();

			lindex = g_SREACHFILE_GetSeq(SREACH_FILE, g_nActIndex);
			
			Mem_Set((byte*)szSql, 0x00, sizeof(szSql));
			SPRINT(szSql, "SELECT CHK_EXEC_NUM FROM NORMAL_DATA WHERE ROWID = '%d'",lindex, 0, 0   );
			g_Sql_RetStr( szSql, 12, g_szCHK_EXEC_NUM );
			
			Mem_Set((byte *)m_szCnt_index, 0x00, sizeof(m_szCnt_index));
			SPRINT(m_szCnt_index, "%d/%d", g_nActIndex+1, m_ltotcnt, 0);
		}

		Mem_Set((byte*)&stSc, 0x00, sizeof(stSc));
		
		hdb = sql->Open(sql);
		
		if( hdb == NULL )
		{
			goto Finally;
		}
		
		hstmt = sql->CreateStatement(sql, " SELECT CHK_EXEC_NUM, ZIP_NO1, ZIP_NO2, CITY, COUNTY \
												 , TOWN, VILLAGE, ADDR1_M, TRIM(ADDR1_S), LOT_NUM_SECOND_ADDR \
												 , CO_LIVE_NM, HOUSE_CNT, BLD_NM, DETA_FLOOR, SINGLE_COLIVE_FLAG \
												 , BUILT_IN_YN, TRIM(SQUARE_METER), BLD_NUM, TRIM(INST_PLACE_NUM), TRIM(REGTR_NUM) \
												 , ADD_CHK_WHY, PREUSE_CHK_WHY, CHK_TYPE, CHK_YEAR, CHK_ORDER \
												 , OBJ_YM, PLAN_YM, BEFO_HALF_CHK_RSLT, BEFO_HALF_CHK_YMD, BEFO_HALF_CHKER_NM \
												 , TRIM(BEFO_HALF_MEMO), BEFO_HALF_MEMO_WHY, BAR, CUST_NUM, CUST_NM \
												 , TRIM(CUST_TYPE_CD), TRIM(CUST_TRND_CD), USE_CONT_NUM, USE_CONT_NM, USE_CONT_YMD \
											     , CONT_STS_CD, TRIM(OWNHOUSE_TEL_DDD), TRIM(OWNHOUSE_TEL_EXN), TRIM(OWNHOUSE_TEL_NUM), TRIM(CP_DDD) \
											     , TRIM(CP_EXN), TRIM(CP_NUM), FAMILY_CNT, TRIM(FIRM_NM), BIZ_REGI_NUM \
											     , EMAIL, TRIM(FIRM_TEL_DDD), TRIM(FIRM_TEL_EXN), TRIM(FIRM_TEL_NUM), TRIM(FAX_DDD) \
											     , TRIM(FAX_EXN), TRIM(FAX_NUM), SOC_NUM, TRIM(SCG_RELAT_CD), CENTER_CD \
												 , ZONE_MANAGE_NUM, PDA_NUM, HOUSE_NUM_ORD, DONG_ORD, CHK_EMPID \
											     , CHKER_NM, CHK_YMD, CHK_TIME_FROM, CHK_TIME_TO, CHK_RSLT \
											     , CHK_EXCEP_WHY, ADV_DIST_YN, SELF_CHK_YN, LK_BREAKER, CO_SENSOR \
											     , PIPE_COLOR_STS, SIGN_RELAT, TRIM(CURR_BAR), BAR_WHY, SUBSTR(ARG_DATE, 0, 9) \
											     , SUBSTR(ARG_DATE, 9, 2), SUBSTR(ARG_DATE, 11,2), PIPE_RSLT, REG_RSLT, LOC_RSLT \
												 , MTR_RSLT, BO_RSLT, BUR_FLAG, CUST_FLAG, SEND_YN \
												 , NOGOOD_RSLT, CUST_YN, PDA_IP, UPD_EMPID, MEMO \
												 , MEMO_WHY, CONT_YN, INFO_USE_AGREE_YN, INFO_USE_YN, REAL_NM_CONF_YN \
											     , CUST_TRND_YN, SAFE_YN, SMS_SEND_AGREE_YN, LAW_TOWN, NEW_ROAD_NM \
											     , NEW_ADDR_M, NEW_ADDR_S, COMP_CHK_OBJ_YN, PIPE_BURY_YN, PIPE_HIDE_YN \
											     , TOT_BURNER_CAPA, USE_PLAN_QTY, TRIM(CHK_MEMO), TRIM(GUM_MEMO), PROTE_FACI_GRD \
											     , PARCEL_OUT_YN , BAR_YN, PROD_CD, PIPE_NUM, BILL_SEND_METHOD \
											     , BILL_SEND_CP_DDD, BILL_SEND_CP_EXN, BILL_SEND_CP_NUM, BILL_SEND_EMAIL, INDUCTION_INST_YN \
											     , SOCIAL_WELF_FACI_YN, DEADLINE_FLAG, PHOTO_BUR_YN, PHOTO_BOIL_YN1, PHOTO_BOIL_YN2 \
											     , OLD_BOILER_YN, PHOTO_BAR_YN, CO_ALARM_INST_YN, KIT_AUTO_EXTINGU_INST_YN,CHK_VISIBLE_YN,SUBSTR(CHK_REJECT,1,1),CASE WHEN SUBSTR(CHK_REJECT,3,3) < '2' THEN 'N' ELSE 'Y' END \
												 , NON_PAY_YN , SUBSTR(MTR_REMOTE_AMI,1,2) , SUBSTR(MTR_REMOTE_AMI,4,5) , BILL_YN\
											  FROM NORMAL_DATA WHERE CHK_EXEC_NUM = ? ORDER BY HOUSE_NUM_ORD, DONG_ORD "
		);
		
		if( hstmt == NULL )
		{
			PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}
		
		i = 0;
		sql->Bind(sql, i++, 'U', (long*)&g_szCHK_EXEC_NUM , 12, DECRYPT);

		if(sql->Execute(sql) == FALSE)
		{
			PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}
		
		if(sql->Next(sql) == TRUE)
		{
			i = 0;
			sql->GetValue( sql, i++, 'U', (long*) stSc.CHK_EXEC_NUM			, 12 + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.ZIP_NO1				, 3  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.ZIP_NO2				, 3  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.CITY					, 30 + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.COUNTY				, 30 + 1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stSc.TOWN					, 30 + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.VILLAGE				, 30 + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.ADDR1_M				, 30 + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.ADDR1_S				, 30 + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.LOT_NUM_SECOND_ADDR	, 100+ 1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stSc.CO_LIVE_NM			, 60 + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.HOUSE_CNT			, 6  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.BLD_NM				, 150+ 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.DETA_FLOOR			, 6  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.SINGLE_COLIVE_FLAG	, 2  + 1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stSc.BUILT_IN_YN			, 1  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.SQUARE_METER			, 2  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.BLD_NUM				, 9  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.INST_PLACE_NUM		, 9  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.REGTR_NUM			, 8  + 1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stSc.ADD_CHK_WHY			, 2  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.PREUSE_CHK_WHY		, 2  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.CHK_TYPE				, 2  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.CHK_YEAR				, 4  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.CHK_ORDER			, 2  + 1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stSc.OBJ_YM				, 6  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.PLAN_YM				, 6  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.BEFO_HALF_CHK_RSLT	, 2  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.BEFO_HALF_CHK_YMD	, 8  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.BEFO_HALF_CHKER_NM	, 12 + 1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stSc.BEFO_HALF_MEMO		, 100+ 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.BEFO_HALF_MEMO_WHY	, 2  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.BAR					, 20 + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.CUST_NUM				, 10 + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.CUST_NM				, 30 + 1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stSc.CUST_TYPE_CD			, 2  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.CUST_TRND_CD			, 2  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.USE_CONT_NUM			, 10 + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.USE_CONT_NM			, 50 + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.USE_CONT_YMD			, 8  + 1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stSc.CONT_STS_CD			, 2  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.OWNHOUSE_TEL_DDD		, 4  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.OWNHOUSE_TEL_EXN		, 4  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.OWNHOUSE_TEL_NUM		, 4  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.CP_DDD				, 4  + 1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stSc.CP_EXN				, 4  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.CP_NUM				, 4  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.FAMILY_CNT			, 3  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.FIRM_NM				, 50 + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.BIZ_REGI_NUM			, 10 + 1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stSc.EMAIL				, 50 + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.FIRM_TEL_DDD			, 4  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.FIRM_TEL_EXN			, 4  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.FIRM_TEL_NUM			, 4  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.FAX_DDD				, 4  + 1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stSc.FAX_EXN				, 4  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.FAX_NUM				, 4  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.SOC_NUM				, 13 + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.SCG_RELAT_CD			, 2  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.CENTER_CD			, 2  + 1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stSc.ZONE_MANAGE_NUM		, 5  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.PDA_NUM				, 15 + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.HOUSE_NUM_ORD		, 5  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.DONG_ORD				, 5  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.CHK_EMPID			, 9  + 1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stSc.CHKER_NM				, 12 + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.CHK_YMD				, 8  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.CHK_TIME_FROM		, 6  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.CHK_TIME_TO			, 6  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.CHK_RSLT				, 2  + 1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stSc.CHK_EXCEP_WHY		, 2  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.ADV_DIST_YN			, 1  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.SELF_CHK_YN			, 1  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.LK_BREAKER			, 1  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.CO_SENSOR			, 1  + 1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stSc.PIPE_COLOR_STS		, 1  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.SIGN_RELAT			, 20 + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.CURR_BAR				, 20 + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.BAR_WHY				, 2  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.ARG_DATE				, 14 + 1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stSc.ARG_HOUR				, 2  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.ARG_MIN				, 2  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.PIPE_RSLT			, 1  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.REG_RSLT				, 1  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.LOC_RSLT				, 1  + 1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stSc.MTR_RSLT				, 1  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.BO_RSLT				, 1  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.BUR_FLAG				, 1  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.CUST_FLAG			, 1  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.SEND_YN				, 1  + 1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stSc.NOGOOD_RSLT			, 1  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.CUST_YN				, 1  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.PDA_IP				, 32 + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.UPD_EMPID			, 20 + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.MEMO					, 100+ 1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stSc.MEMO_WHY				, 2  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.CONT_YN				, 1  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.INFO_USE_AGREE_YN	, 1  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.INFO_USE_YN			, 1  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.REAL_NM_CONF_YN		, 2  + 1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stSc.CUST_TRND_YN			, 1  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.SAFE_YN				, 1  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.SMS_SEND_AGREE_YN	, 2  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.LAW_TOWN				, 30 + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.NEW_ROAD_NM			, 100+ 1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stSc.NEW_ADDR_M			, 10 + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.NEW_ADDR_S			, 10 + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.COMP_CHK_OBJ_YN		, 2  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.PIPE_BURY_YN			, 2  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.PIPE_HIDE_YN			, 2  + 1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stSc.TOT_BURNER_CAPA		, 20 + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.USE_PLAN_QTY			, 20 + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.CHK_MEMO			    , 100+ 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.GUM_MEMO			    , 100+ 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.PROTE_FACI_GRD	    , 20 + 1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stSc.PARCEL_OUT_YN		, 20 + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.BAR_YN			    , 2  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.PROD_CD			    , 2  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.PIPE_NUM			    , 12 + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.BILL_SEND_METHOD		, 2  + 1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stSc.BILL_SEND_CP_DDD		, 4  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.BILL_SEND_CP_EXN		, 4  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.BILL_SEND_CP_NUM		, 4  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.BILL_SEND_EMAIL		, 50 + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.INDUCTION_INST_YN	, 1  + 1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stSc.SOCIAL_WELF_FACI_YN	, 1  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.DEADLINE_FLAG		, 2  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.PHOTO_BUR_YN		    , 1  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.PHOTO_BOIL_YN1	    , 1  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.PHOTO_BOIL_YN2	    , 1  + 1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stSc.OLD_BOILER_YN	    , 1  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.PHOTO_BAR_YN	        , 1  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.CO_ALARM_INST_YN	    , 1  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.KIT_AUTO_EXTINGU_INST_YN, 1  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.CHK_VISIBLE_YN, 1  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.CHK_REJECT, 5  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.CHK_MISS, 5  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.NON_PAY_YN, 2  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.MTR_KIND, 10  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.MTR_REMOTE_AMI, 10  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stSc.BILL_YN, 2  + 1, DECRYPT );

			

			
			
			
		}
		
Finally:
		DelSqLite(sql);
		
		if( Str_Len(stSc.SELF_CHK_YN) == 0)
		{
			Str_Cpy( stSc.SELF_CHK_YN   , "N" );
			Str_Cpy( stSc.ADV_DIST_YN   , "Y" );
			Str_Cpy( stSc.LK_BREAKER    , "N" );
			Str_Cpy( stSc.CO_SENSOR     , "N" );
			Str_Cpy( stSc.PIPE_COLOR_STS, "Y" );
		}
		
		// 계약상태 해지면 고객명, 전화번호, 생년월일 안보이도록 수정
		if( Str_Cmp(stSc.CONT_STS_CD, "30") == 0 )
		{
			Mem_Set((byte *)stSc.CUST_NM, 0x00, sizeof(stSc.CUST_NM));
			Str_Cpy( stGm.CUST_NM, "" );
			
			Mem_Set((byte *)stSc.CP_DDD, 0x00, sizeof(stSc.CP_DDD));
			Str_Cpy( stSc.CP_DDD, "" );
			
			Mem_Set((byte *)stSc.CP_EXN, 0x00, sizeof(stSc.CP_EXN));
			Str_Cpy( stSc.CP_EXN, "" );
			
			Mem_Set((byte *)stSc.CP_NUM, 0x00, sizeof(stSc.CP_NUM));
			Str_Cpy( stSc.CP_NUM, "" );
			
			Mem_Set((byte *)stSc.OWNHOUSE_TEL_DDD, 0x00, sizeof(stSc.OWNHOUSE_TEL_DDD));
			Str_Cpy( stSc.OWNHOUSE_TEL_DDD, "" );
			
			Mem_Set((byte *)stSc.OWNHOUSE_TEL_EXN, 0x00, sizeof(stSc.OWNHOUSE_TEL_EXN));
			Str_Cpy( stSc.OWNHOUSE_TEL_EXN, "" );
			
			Mem_Set((byte *)stSc.OWNHOUSE_TEL_NUM, 0x00, sizeof(stSc.OWNHOUSE_TEL_NUM));
			Str_Cpy( stSc.OWNHOUSE_TEL_NUM, "" );
			
			Mem_Set((byte *)stSc.SOC_NUM, 0x00, sizeof(stSc.SOC_NUM));
			Str_Cpy( stSc.SOC_NUM, "" );
		}
		
		return;
	}


	void Set_Popup(void)
	{
		if( m_bFirst == INIT_MAIN )
		{
			if ( Str_Cmp(stSc.BLD_NUM, "400058316") == 0)
			{
				MessageBoxEx(CONFIRM_OK, "비대면 시범 주택입니다.\n모바일청구서 가입 홍보 안내부탁드립니다.");
			}
			else if( Str_Cmp(stSc.MTR_KIND, "80") == 0 && Str_Cmp(stSc.MTR_REMOTE_AMI,"82") ==0 && Str_Cmp(stSc.BILL_SEND_METHOD, "M" ) != 0 )
			{
				MessageBoxEx(CONFIRM_OK, "모바일청구서 가입 \n홍보 안내부탁드립니다.\n 가입시 매월 200캐시 지급 대상입니다.\n (미가입시 캐시 미지급)");
			}
			else if( Str_Cmp(stSc.MTR_KIND, "80") == 0 && (Str_Cmp(stSc.MTR_REMOTE_AMI,"81") ==0 || Str_Cmp(stSc.MTR_REMOTE_AMI,"83") ==0 ) && Str_Cmp(stSc.BILL_SEND_METHOD, "M" ) != 0 )
			{
				MessageBoxEx(CONFIRM_OK, "모바일청구서 가입\n 홍보 안내부탁드립니다");
			}

			REDRAW();

		}
		
	}
	
	/*=======================================================================================
	함수명 : REDRAW
	기  능 : 안전점검 등록화면 Redraw
	Param  : 
	Return : 
	========================================================================================*/
	void REDRAW(void)
	{
		long i;
		long lCnt = 0;
		char sztmp[300];
		char sztmp2[300];
		char szbillMethod[10];
		char szSql[300];
		char szUseContnum[100];
		char szScrPht[258];
		char szDirPath[258];
		long ret = 0;
		
		/*********************/	
		/* 동의1             */
		/*********************/	
		if( Str_Cmp(stSc.INFO_USE_AGREE_YN, "Y") == 0 )
		{
			EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_BOX1), CHKON);
		}
		else
		{
			EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_BOX1), CHKOFF);
		}
		
		/*********************/	
		/* 동의2             */
		/*********************/	
		if( Str_Cmp(stSc.INFO_USE_YN, "Y") == 0 )
		{
			EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_BOX2), CHKON);
		}
		else
		{
			EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_BOX2), CHKOFF);
		}
		
		/*********************/	
		/* 서면              */
		/*********************/	
		if( Str_Cmp(stSc.CONT_YN, "Y") == 0 )
		{
			EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_BOX3), CHKON);
		}
		else
		{
			EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_BOX3), CHKOFF);
		}
		
		/*********************/	
		/* 실명              */
		/*********************/	
		if( stSc.REAL_NM_CONF_YN[0] == 'Y' )
		{
			EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_BOX4), CHKON);
		}
		else
		{
			EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_BOX4), CHKOFF);
		}
		
		/*******************/
		/* 이체	           */
		/*******************/
		if( stSc.REAL_NM_CONF_YN[1] == 'Y' )
		{
			EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_BOX5), CHKON);
		}
		else
		{
			EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_BOX5), CHKOFF);
		}
		
		/*********************/		
		/* 설치장소/우선점검 */
		/*********************/
		Mem_Set( (byte*)szUseContnum, 0x00, sizeof(szUseContnum) );
		Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
		
		Mem_Cpy((byte *)szUseContnum, (byte *)stSc.USE_CONT_NUM, 5);
		Mem_Cpy((byte *)sztmp, (byte *)stSc.USE_CONT_NUM+5, 5);
		Str_Cat(szUseContnum, "-");
		Str_Cat(szUseContnum, sztmp);
		EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA1), szUseContnum);
		
		Mem_Set((byte *)sztmp2, 0x00, sizeof(sztmp2));
		if( Str_Len(stSc.PREUSE_CHK_WHY) > 0 )
		{
			Str_Cpy( sztmp2, "우선" );
		}
		else
		{
			Str_Cpy( sztmp2, "" );
		}
		
		if( Str_Cmp(stSc.OLD_BOILER_YN, "Y" ) == 0 )
		{
			if( Str_Len(stSc.PREUSE_CHK_WHY) > 0 )
			{
				Str_Cat( sztmp2, "/보");
			}
			else
			{
				Str_Cat( sztmp2, "보일러");
			}
		}
		else
		{
			Str_Cat( sztmp2, "");
		}
		
		// 우선 ,보일러인경우 빨간색으로 표기하기위하여 해당 로직 위치 변경 금지
		if( Str_Len(sztmp2) > 0 )
		{
			ButCtrl_SetForeColorEx(Get_hDlgCtrlByID(BID_REQ), RED);
		}
		else
		{
			ButCtrl_SetForeColorEx(Get_hDlgCtrlByID(BID_REQ), TXTFRCOLOR);
		}
		Mem_Set((byte *)szbillMethod	, 0x00, sizeof(szbillMethod	));
		
		if( Str_Cmp(stSc.BILL_SEND_METHOD, "S" ) == 0 )
		{
			Str_Cpy( szbillMethod, "송달" );
		}
		else if( Str_Cmp(stSc.BILL_SEND_METHOD, "E" ) == 0 )
		{
			Str_Cpy( szbillMethod, "이메일" );
		}
		else if( Str_Cmp(stSc.BILL_SEND_METHOD, "L" ) == 0 )
		{
			Str_Cpy( szbillMethod, "LMS" );
		}
		else if( Str_Cmp(stSc.BILL_SEND_METHOD, "M" ) == 0 )
		{
			Str_Cpy( szbillMethod, "모바일" );
		}
		else if( Str_Cmp(stSc.BILL_SEND_METHOD, "A" ) == 0 )
		{
			Str_Cpy( szbillMethod, "EM+송" );
		}
		else if( Str_Cmp(stSc.BILL_SEND_METHOD, "B" ) == 0 )
		{
			Str_Cpy( szbillMethod, "LM+송" );
		}
		else if( Str_Cmp(stSc.BILL_SEND_METHOD, "C" ) == 0 )
		{
			Str_Cpy( szbillMethod, "모+송" );
		}
		else if( Str_Cmp(stSc.BILL_SEND_METHOD, "D" ) == 0 )
		{
			Str_Cpy( szbillMethod, "E+LM" );
		}
		else if( Str_Cmp(stSc.BILL_SEND_METHOD, "F" ) == 0 )
		{
			Str_Cpy( szbillMethod, "모+EM" );
		}
		else if( Str_Cmp(stSc.BILL_SEND_METHOD, "G" ) == 0 )
		{
			Str_Cpy( szbillMethod, "모+LM" );
		}
		
		// 청구방법 보이게 함
		Str_Cat( sztmp2, " [ ");
		Str_Cat( sztmp2, szbillMethod);
		Str_Cat( sztmp2, " ]");
		
		ButCtrl_SetText(Get_hDlgCtrlByID(BID_REQ), sztmp2);
		
		/*********************/	
		/* 고객명              */
		/*********************/
		EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA3), stSc.CUST_NM);
		
		/*********************/	
		/* 사업자            */
		/*********************/
		Mem_Set((byte *)sztmp, 0x00, sizeof(sztmp));
		Str_Cpy(sztmp, stSc.FIRM_NM);
		Str_Chg(sztmp, STRCHG_DEL_ALL_SPACE);
			
		if( Str_Len(sztmp) > 0 )
		{
			EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA4), stSc.FIRM_NM);
			EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(TXT_DATA4), RED);
			
			if( theDevInfo.m_nType > FAMILY_PDA )
			{
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(BID_BIZ), FALSE );
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA4), TRUE );
			}
		}
		else
		{
			EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA4), "");
			EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(TXT_DATA4), TXTFRCOLOR);
	
			if( theDevInfo.m_nType > FAMILY_PDA )
			{
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(BID_BIZ), TRUE );
				DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA4), FALSE );
			}
		}
		
		/*********************/	
		/* 설치장소          */
		/*********************/	
		if( Str_Len(stSc.PIPE_NUM) > 0 )
		{
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(BID_SP), TRUE );
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_INSPLACE), FALSE );
		}
		else
		{
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(BID_SP), FALSE );
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_INSPLACE), TRUE );
		}
		
		/*********************/	
		/* 주소              */
		/*********************/	
		Mem_Set((byte *)m_szAddr, 0x00, sizeof(m_szAddr));
		
		// 지번
		if( g_nAddrFlag == 0)
		{
			ButCtrl_SetText(Get_hDlgCtrlByID(BID_ADDR), "지번");
			
			// 시군구
			if(Str_Len(stSc.COUNTY) > 0)		
			{
				Str_Cpy(m_szAddr,  stSc.COUNTY );
			}
			
			// 읍면동	
			if(Str_Len(stSc.TOWN) > 0)			
			{
				Str_Cat(m_szAddr,  " " );
				Str_Cat(m_szAddr,  stSc.TOWN );
			}
			
			// 읍면동
			if(Str_Len(stSc.VILLAGE) > 0)			
			{
				Str_Cat(m_szAddr,  " " );
				Str_Cat(m_szAddr,  stSc.VILLAGE );
			}
			
			// 본번
			if(Str_Len(stSc.ADDR1_M) > 0)		
			{
				Str_Cat(m_szAddr,  " " );
				Str_Cat(m_szAddr,  stSc.ADDR1_M);
			}
			
			// 부번
			if(Str_Len(stSc.ADDR1_S) > 0)		
			{
				Str_Cat(m_szAddr,  "-" );
				Str_Cat(m_szAddr,  stSc.ADDR1_S);
			}
			
			Str_Cat(m_szAddr,  "\n" );
			
			// 단독인 경우
			if( Str_Cmp(stSc.SINGLE_COLIVE_FLAG, "10") == 0 )
			{
				if(Str_Len(stSc.HOUSE_CNT) > 0)
				{
					Str_Cat(m_szAddr,  stSc.HOUSE_CNT);
				}
				if(Str_Len(stSc.BLD_NM) > 0)
				{
					Str_Cat(m_szAddr,  " " );
					Str_Cat(m_szAddr,  stSc.BLD_NM);
				}
				if(Str_Len(stSc.LOT_NUM_SECOND_ADDR) > 0)
				{
					Str_Cat(m_szAddr,  " " );
					Str_Cat(m_szAddr,  stSc.LOT_NUM_SECOND_ADDR);
				}
			}
			// 공동인 경우
			else if( Str_Cmp(stSc.SINGLE_COLIVE_FLAG, "20") == 0 )
			{
				if(Str_Len(stSc.CO_LIVE_NM) > 0)
				{
					Str_Cat(m_szAddr,  stSc.CO_LIVE_NM );
				}
				if(Str_Len(stSc.BLD_NM) > 0)
				{
					Str_Cat(m_szAddr,  " " );
					Str_Cat(m_szAddr,  stSc.BLD_NM);
				}
				if(Str_Len(stSc.HOUSE_CNT) > 0)
				{
					Str_Cat(m_szAddr,  "-" );
					Str_Cat(m_szAddr,  stSc.HOUSE_CNT);
				}
			}

			EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA5), m_szAddr);
		}
		// 도로명
		else
		{
			ButCtrl_SetText(Get_hDlgCtrlByID(BID_ADDR), "도로명");
			
			// 시군구
			if(Str_Len(stSc.COUNTY) > 0)		
			{
				Str_Cpy(m_szAddr,  stSc.COUNTY );
			}
			
			// 도로명 
			if(Str_Len(stSc.NEW_ROAD_NM) > 0)
			{
				Str_Cat(m_szAddr,  " " );
				Str_Cat(m_szAddr,  stSc.NEW_ROAD_NM );
			}
			
			// 도로명_본번 
			if(Str_Len(stSc.NEW_ADDR_M) > 0)
			{
				Str_Cat(m_szAddr,  " " );
				Str_Cat(m_szAddr,  stSc.NEW_ADDR_M);
			}
			
			// 도로명_부번 
			if(Str_Len(stSc.NEW_ADDR_S) > 0)
			{
				Str_Cat(m_szAddr,  "-" );
				Str_Cat(m_szAddr,  stSc.NEW_ADDR_S);
				Str_Cat(m_szAddr,  "\n" );
			}
			
			// 단독인 경우
			if( Str_Cmp(stSc.SINGLE_COLIVE_FLAG, "10") == 0 )
			{
				if(Str_Len(stSc.HOUSE_CNT) > 0)
				{
					Str_Cat(m_szAddr,  stSc.HOUSE_CNT);
				}
				if(Str_Len(stSc.LOT_NUM_SECOND_ADDR) > 0)
				{
					Str_Cat(m_szAddr,  " " );
					Str_Cat(m_szAddr,  stSc.LOT_NUM_SECOND_ADDR);
				}
			}
			// 공동인 경우
			else if( Str_Cmp(stSc.SINGLE_COLIVE_FLAG, "20") == 0 )
			{
				if(Str_Len(stSc.CO_LIVE_NM) > 0)
				{
					Str_Cat(m_szAddr,  stSc.CO_LIVE_NM );
				}
				if(Str_Len(stSc.BLD_NM) > 0)
				{
					Str_Cat(m_szAddr,  " " );
					Str_Cat(m_szAddr,  stSc.BLD_NM);
				}
				if(Str_Len(stSc.HOUSE_CNT) > 0)
				{
					Str_Cat(m_szAddr,  "-" );
					Str_Cat(m_szAddr,  stSc.HOUSE_CNT);
				}
			}
			
			EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA5), m_szAddr);
		}
		
		/*********************/	
		/* 자택전화          */
		/*********************/
		Mem_Set((byte *)m_szTel, 0x00, sizeof(m_szTel));
		
		Str_Cpy(m_szTel,  stSc.OWNHOUSE_TEL_DDD );
		Str_Cat(m_szTel,  "-" );
		
		if(Str_Len(stSc.OWNHOUSE_TEL_EXN) == 0)
		{
			Str_Cat(m_szTel,  " " );	
		}
		else
		{
			Str_Cat(m_szTel,  stSc.OWNHOUSE_TEL_EXN);
		}
		
		Str_Cat(m_szTel,  "-" );
		
		if(Str_Len(stSc.OWNHOUSE_TEL_NUM) == 0)
		{
			Str_Cat(m_szTel,  " " );	
		}
		else
		{
			Str_Cat(m_szTel,  stSc.OWNHOUSE_TEL_NUM);
		}
		
		ButCtrl_SetText(Get_hDlgCtrlByID(BID_HOUSETEL), m_szTel);
		
		if( Str_Len(m_szTel) > 10)
		{
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_HOUSETEL), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_HOUSETEL), FALSE );
		}
		else
		{
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_HOUSETEL), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_HOUSETEL), TRUE );
		}
		
		
		/*********************/	
		/* 휴대전화          */
		/*********************/
		Mem_Set((byte *)m_szPhone, 0x00, sizeof(m_szPhone));
		
		Str_Cpy(m_szPhone,  stSc.CP_DDD );
		Str_Cat(m_szPhone,  "-" );
		
		if(Str_Len(stSc.CP_EXN) == 0)
		{
			Str_Cat(m_szPhone,  " " );	
		}
		else
		{
			Str_Cat(m_szPhone,  stSc.CP_EXN);
		}
		
		Str_Cat(m_szPhone,  "-" );
		
		if(Str_Len(stSc.CP_NUM) == 0)
		{
			Str_Cat(m_szPhone,  " " );	
		}
		else
		{
			Str_Cat(m_szPhone,  stSc.CP_NUM);

		}
		
		ButCtrl_SetText(Get_hDlgCtrlByID(BID_PHONETEL), m_szPhone);
	
		if( Str_Len(m_szPhone) > 10)
		{
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_PHONETEL), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_PHONETEL), FALSE );
		}
		else
		{
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_PHONETEL), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_PHONETEL), TRUE );
		}
		
		/*********************/	
		/* 계약일자          */
		/*********************/	
		Mem_Set((byte *)sztmp, 0x00, sizeof(sztmp));
		g_Str_DateType( sztmp, stSc.USE_CONT_YMD);
		EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA9), sztmp);
		
		/*********************/	
		/* 상태              */
		/*********************/	
		if( Str_Cmp(stSc.CONT_STS_CD, "10") == 0 )
		{
			EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA10), "정상");
			EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(TXT_DATA10), TXTFRCOLOR);
		}
		else if( Str_Cmp(stSc.CONT_STS_CD, "20") == 0 )
		{
			EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA10), "중지");
			EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(TXT_DATA10), TXTFRCOLOR);
		}
		else if( Str_Cmp(stSc.CONT_STS_CD, "30") == 0 )
		{
			EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA10), "해지");
			EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(TXT_DATA10), RED);
		}
		
		/*********************/	
		/* 전반기            */
		/*********************/
		Mem_Set((byte *)sztmp, 0x00, sizeof(sztmp));
		g_Str_DateType( sztmp, stSc.BEFO_HALF_CHK_YMD);
		
		EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA11), sztmp);
		
		if( Str_Cmp(stSc.BEFO_HALF_CHK_RSLT, "20") == 0 )
		{
			EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA12), "적합");
			EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(TXT_DATA12), TXTFRCOLOR);
			ButCtrl_SetForeColorEx(Get_hDlgCtrlByID(BID_JUNBAN), BTNMENUFRCOLOR);
			
			DlgCtrl_SetEnable( this->m_hDlg, Get_iDlgCtrlByID(BID_JUNBAN), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_JUNBAN), TRUE );
		}
		else if( Str_Cmp(stSc.BEFO_HALF_CHK_RSLT, "21") == 0 )
		{
			EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA12), "부적합");
			EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(TXT_DATA12), RED);
			ButCtrl_SetForeColorEx(Get_hDlgCtrlByID(BID_JUNBAN), RED);
			
			DlgCtrl_SetEnable( this->m_hDlg, Get_iDlgCtrlByID(BID_JUNBAN), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_JUNBAN), FALSE );
		}
		else if( Str_Cmp(stSc.BEFO_HALF_CHK_RSLT, "40") == 0 )
		{
			EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA12), "제외");
			EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(TXT_DATA12), TXTFRCOLOR);
			ButCtrl_SetForeColorEx(Get_hDlgCtrlByID(BID_JUNBAN), BTNMENUFRCOLOR);
			
			DlgCtrl_SetEnable( this->m_hDlg, Get_iDlgCtrlByID(BID_JUNBAN), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_JUNBAN), TRUE );
		}
		else if( Str_Cmp(stSc.BEFO_HALF_CHK_RSLT, "50") == 0 )
		{
			EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA12), "미실시");
			EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(TXT_DATA12), TXTFRCOLOR);
			ButCtrl_SetForeColorEx(Get_hDlgCtrlByID(BID_JUNBAN), BTNMENUFRCOLOR);
			
			DlgCtrl_SetEnable( this->m_hDlg, Get_iDlgCtrlByID(BID_JUNBAN), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_JUNBAN), TRUE );
		}
		else
		{
			EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA12), "");
			EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(TXT_DATA12), TXTFRCOLOR);
			ButCtrl_SetForeColorEx(Get_hDlgCtrlByID(BID_JUNBAN), BTNMENUFRCOLOR);
			
			DlgCtrl_SetEnable( this->m_hDlg, Get_iDlgCtrlByID(BID_JUNBAN), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_JUNBAN), TRUE );
		}
		
		EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA13), stSc.BEFO_HALF_CHKER_NM);
		
		/*********************/	
		/* 현반기            */
		/*********************/	
		Mem_Set((byte *)sztmp, 0x00, sizeof(sztmp));
		g_Str_DateType( sztmp, stSc.CHK_YMD);
		
		EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA14), sztmp);

		i = g_SearchCD( stSc.CHK_RSLT, SCCHK_RSLT );
		
		if( i == -1 )
		{
			EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA15), "");
		}
		else
		{
			EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA15), SCCHK_RSLT[i].Str);
		}
		if( Str_Cmp(EditCtrl_GetStr(Get_hDlgCtrlByID(TXT_DATA15)), "부적합") == 0 )
		{
			EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(TXT_DATA15), RED);
		}
		else
		{
			EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(TXT_DATA15), TXTFRCOLOR);
		}

		EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA16), stSc.CHKER_NM);
		
		/*********************/	
		/* 방문이력          */
		/*********************/	
		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		SPRINT(szSql, "SELECT COUNT(*) FROM NORMAL_VISIT  WHERE CHK_EXEC_NUM = '%s' AND VISIT_FLAG !='99' ",g_szCHK_EXEC_NUM, 0, 0   );
		g_Sql_RetInt( szSql, &lCnt );
		
		if( lCnt == 0)
		{
			DlgCtrl_SetEnable( this->m_hDlg, Get_iDlgCtrlByID(BID_VISIT), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_VISIT), TRUE );
		}
		else
		{
			DlgCtrl_SetEnable( this->m_hDlg, Get_iDlgCtrlByID(BID_VISIT), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_VISIT), FALSE );
		}

		Mem_Set((byte *)sztmp, 0x00, sizeof(sztmp));
		g_Str_DateType( sztmp, stScVisit.VISIT_YMD);
		EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA17), sztmp);
		
		i = g_SearchCD( stScVisit.NO_CHK_WHY, VISIT_RSLT );
		
		if( i == -1 )
		{
			EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA18), "");
			ButCtrl_SetForeColorEx(Get_hDlgCtrlByID(BID_VISIT), BTNMENUFRCOLOR);
		}
		else
		{
			EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA18), VISIT_RSLT[i].Str);
			ButCtrl_SetForeColorEx(Get_hDlgCtrlByID(BID_VISIT), RED);
		}
		
		EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA19), stScVisit.VISITOR_NM);		
		
		/*********************/	
		/* 예약 버튼         */
		/*********************/	
		if( Str_Len(stSc.ARG_DATE) > 0 )
		{
			ButCtrl_SetBkColorEx(Get_hDlgCtrlByID(BID_RESERVE), RED);
			ButCtrl_SetForeColorEx(Get_hDlgCtrlByID(BID_RESERVE), BTNMENUFRCOLOR);
		}
		else
		{
			ButCtrl_SetBkColorEx(Get_hDlgCtrlByID(BID_RESERVE), BTNCTRLBKCOLOR);
			ButCtrl_SetForeColorEx(Get_hDlgCtrlByID(BID_RESERVE), BTNMENUFRCOLOR);
		}
		
		/*********************/	
		/* SMS 발송          */
		/*********************/	
		if( Str_Cmp(stSc.SMS_SEND_AGREE_YN, "Y") == 0 )
		{
			ButCtrl_SetForeColorEx(Get_hDlgCtrlByID(BID_SENDSMS), RED);
			ButCtrl_SetBkColorEx(Get_hDlgCtrlByID(BID_SENDSMS), PDAEDTCTRLBK);
			DlgCtrl_SetEnable( this->m_hDlg, Get_iDlgCtrlByID(BID_SENDSMS), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_SENDSMS), FALSE );
		}
		else
		{
			ButCtrl_SetForeColorEx(Get_hDlgCtrlByID(BID_SENDSMS), BTNMENUFRCOLOR);
			ButCtrl_SetBkColorEx(Get_hDlgCtrlByID(BID_SENDSMS), BTNCTRLBKCOLOR);
			DlgCtrl_SetEnable( this->m_hDlg, Get_iDlgCtrlByID(BID_SENDSMS), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_SENDSMS), TRUE );
		}
		
		/*********************/	
		/* 고객성향          */
		/*********************/	
		if( Str_Cmp(stSc.CUST_TRND_YN , "Y") == 0 )
		{
			EditCtrl_SetBkColorEx(Get_hDlgCtrlByID(TXT_DATA56), RED);
		}
        else
        {
        	EditCtrl_SetBkColorEx(Get_hDlgCtrlByID(TXT_DATA56), GREEN);
        }
		
		/*********************/	
		/* 안전여부          */
		/*********************/
		if( Str_Cmp(stSc.SAFE_YN  , "Y") == 0 )
		{
			EditCtrl_SetBkColorEx(Get_hDlgCtrlByID(TXT_DATA57), RED);
		}
        else
        {
        	EditCtrl_SetBkColorEx(Get_hDlgCtrlByID(TXT_DATA57), GREEN);
        }		

		if( Str_Cmp(stSc.BILL_YN  , "Y") == 0 )
		{
			ButCtrl_SetBkColorEx(Get_hDlgCtrlByID(BID_USEDOC), GREEN);
		}
		else
		{
			ButCtrl_SetBkColorEx(Get_hDlgCtrlByID(BID_USEDOC), BTNCTRLBKCOLOR);
		}
		
		/*********************/	
		/* 메모 버튼         */
		/*********************/
		if( Str_Len(stSc.CHK_MEMO) > 0  || Str_Len(stSc.GUM_MEMO) > 0)
		{
			ButCtrl_SetBkColorEx(Get_hDlgCtrlByID(BID_MEMO), RED);
			ButCtrl_SetForeColorEx(Get_hDlgCtrlByID(BID_MEMO), BTNMENUFRCOLOR);
		}
		else
		{
			ButCtrl_SetBkColorEx(Get_hDlgCtrlByID(BID_MEMO), BTNCTRLBKCOLOR);
			ButCtrl_SetForeColorEx(Get_hDlgCtrlByID(BID_MEMO), BTNMENUFRCOLOR);
		}
		
		/**********************************************/	
		/* 점검 시작, 점검제외, 미점검, 점검취소 버튼 */
		/**********************************************/	
		// 점검 완료
		if( Str_Cmp(stSc.CHK_RSLT, "20") == 0 || Str_Cmp(stSc.CHK_RSLT, "21") == 0 )
		{
			// 점검시작
			DlgCtrl_SetEnable( this->m_hDlg, Get_iDlgCtrlByID(BID_SC), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_SC), FALSE );
			
			//DlgCtrl_SetEnable( this->m_hDlg, Get_iDlgCtrlByID(BID_SC), FALSE );
			//DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_SC), TRUE );

			ButCtrl_SetBkColorEx(Get_hDlgCtrlByID(BID_SC), RED);
			ButCtrl_SetForeColorEx(Get_hDlgCtrlByID(BID_SC), BTNMENUFRCOLOR);
			ButCtrl_SetText(Get_hDlgCtrlByID(BID_SC), "점검\n완료");
			
			// 점검제외
			DlgCtrl_SetEnable( this->m_hDlg, Get_iDlgCtrlByID(BID_SCOUT), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_SCOUT), TRUE );
			ButCtrl_SetBkColorEx(Get_hDlgCtrlByID(BID_SCOUT), BTNCTRLBKCOLOR);
			ButCtrl_SetForeColorEx(Get_hDlgCtrlByID(BID_SCOUT), BTNMENUFRCOLOR);
			
			// 미점검
			DlgCtrl_SetEnable( this->m_hDlg, Get_iDlgCtrlByID(BID_NOSC), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_NOSC), TRUE );
			
			// 점검취소
			DlgCtrl_SetEnable( this->m_hDlg, Get_iDlgCtrlByID(BID_SCCANCEL), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_SCCANCEL), FALSE );
		}
		// 점검 제외
		else if( Str_Cmp(stSc.CHK_RSLT, "40") == 0 )
		{
			// 점검시작
			DlgCtrl_SetEnable( this->m_hDlg, Get_iDlgCtrlByID(BID_SC), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_SC), TRUE );
			ButCtrl_SetBkColorEx(Get_hDlgCtrlByID(BID_SC), BTNCTRLBKCOLOR);
			ButCtrl_SetForeColorEx(Get_hDlgCtrlByID(BID_SC), BTNMENUFRCOLOR);
			ButCtrl_SetText(Get_hDlgCtrlByID(BID_SC), "점검\n시작");
			
			// 점검제외
			DlgCtrl_SetEnable( this->m_hDlg, Get_iDlgCtrlByID(BID_SCOUT), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_SCOUT), FALSE );
			ButCtrl_SetBkColorEx(Get_hDlgCtrlByID(BID_SCOUT), RED);
			ButCtrl_SetForeColorEx(Get_hDlgCtrlByID(BID_SCOUT), BTNMENUFRCOLOR);
			
			// 미점검
			//DlgCtrl_SetEnable( this->m_hDlg, Get_iDlgCtrlByID(BID_NOSC), FALSE );
			//DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_NOSC), TRUE );
			DlgCtrl_SetEnable( this->m_hDlg, Get_iDlgCtrlByID(BID_NOSC), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_NOSC), FALSE );
			
			// 점검취소
			DlgCtrl_SetEnable( this->m_hDlg, Get_iDlgCtrlByID(BID_SCCANCEL), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_SCCANCEL), FALSE );
		}
		else if( Str_Cmp(stSc.CHK_RSLT, "99") == 0 )
		{
			// 점검시작
			DlgCtrl_SetEnable( this->m_hDlg, Get_iDlgCtrlByID(BID_SC), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_SC), FALSE );

			// 점검제외
			DlgCtrl_SetEnable( this->m_hDlg, Get_iDlgCtrlByID(BID_SCOUT), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_SCOUT), TRUE );
			ButCtrl_SetBkColorEx(Get_hDlgCtrlByID(BID_SCOUT), BTNCTRLBKCOLOR);
			ButCtrl_SetForeColorEx(Get_hDlgCtrlByID(BID_SCOUT), BTNMENUFRCOLOR);

			DlgCtrl_SetEnable( this->m_hDlg, Get_iDlgCtrlByID(BID_NOSC), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_NOSC), FALSE );

			Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
			SPRINT(szSql, "SELECT COUNT(*) FROM NORMAL_VISIT  WHERE CHK_EXEC_NUM = '%s' AND VISIT_FLAG ='99' ",g_szCHK_EXEC_NUM, 0, 0 );
			g_Sql_RetInt( szSql, &lCnt );

			if( lCnt > 0)
			{
			// 미점검
			DlgCtrl_SetEnable( this->m_hDlg, Get_iDlgCtrlByID(BID_NOSC), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_NOSC), TRUE );
			}

			// 점검취소
			DlgCtrl_SetEnable( this->m_hDlg, Get_iDlgCtrlByID(BID_SCCANCEL), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_SCCANCEL), TRUE );

		}
		// 초기
		else
		{
			// 점검시작
			DlgCtrl_SetEnable( this->m_hDlg, Get_iDlgCtrlByID(BID_SC), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_SC), FALSE );
			//DlgCtrl_SetEnable( this->m_hDlg, Get_iDlgCtrlByID(BID_SC), FALSE );
			//DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_SC), TRUE );
			
			ButCtrl_SetBkColorEx(Get_hDlgCtrlByID(BID_SC), BTNCTRLBKCOLOR);
			ButCtrl_SetForeColorEx(Get_hDlgCtrlByID(BID_SC), BTNMENUFRCOLOR);
			ButCtrl_SetText(Get_hDlgCtrlByID(BID_SC), "점검\n시작");
			
			// 점검제외
			DlgCtrl_SetEnable( this->m_hDlg, Get_iDlgCtrlByID(BID_SCOUT), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_SCOUT), FALSE );
			ButCtrl_SetBkColorEx(Get_hDlgCtrlByID(BID_SCOUT), BTNCTRLBKCOLOR);
			ButCtrl_SetForeColorEx(Get_hDlgCtrlByID(BID_SCOUT), BTNMENUFRCOLOR);
			
			Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
			SPRINT(szSql, "SELECT COUNT(*) FROM NORMAL_VISIT  WHERE CHK_EXEC_NUM = '%s' AND VISIT_FLAG ='99' ",g_szCHK_EXEC_NUM, 0, 0 );
			g_Sql_RetInt( szSql, &lCnt );

			if( lCnt > 0)
			{
			// 미점검
			DlgCtrl_SetEnable( this->m_hDlg, Get_iDlgCtrlByID(BID_NOSC), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_NOSC), TRUE );
			}
			else
			{
			DlgCtrl_SetEnable( this->m_hDlg, Get_iDlgCtrlByID(BID_NOSC), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_NOSC), FALSE );
			}
			
			// 점검취소
			DlgCtrl_SetEnable( this->m_hDlg, Get_iDlgCtrlByID(BID_SCCANCEL), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_SCCANCEL), TRUE );
		}
		
		/**********************************************/	
		/* 거부 문자 버튼                             */
		/**********************************************/	
		Mem_Set((byte*)szScrPht, 0x00, sizeof(szScrPht));
		Mem_Set((byte*)szDirPath, 0x00, sizeof(szDirPath));
		Mem_Set((byte*)sztmp, 0x00, sizeof(sztmp));
		
		Str_Cpy( szDirPath, PHOTO_SCREFUSE );
		Str_Cpy( sztmp, g_szCHK_EXEC_NUM );
		Str_Cat( sztmp, "_" );
		Str_Cat( sztmp, "*" );
		
		ret = g_FindFiles( szDirPath, sztmp , szScrPht);

		if( ret > 0 )
		{
			if( Str_Cmp(stSc.CHK_EXCEP_WHY, "82") == 0 )
			{
				ButCtrl_SetBkColorEx(Get_hDlgCtrlByID(BID_REFUSE), RED);
				ButCtrl_SetForeColorEx(Get_hDlgCtrlByID(BID_REFUSE), BTNMENUFRCOLOR);
			}
			else
			{
				ButCtrl_SetBkColorEx(Get_hDlgCtrlByID(BID_REFUSE), BTNCTRLBKCOLOR);
				ButCtrl_SetForeColorEx(Get_hDlgCtrlByID(BID_REFUSE), BTNMENUFRCOLOR);
			}				
		}
		else
		{
			ButCtrl_SetBkColorEx(Get_hDlgCtrlByID(BID_REFUSE), BTNCTRLBKCOLOR);
			ButCtrl_SetForeColorEx(Get_hDlgCtrlByID(BID_REFUSE), BTNMENUFRCOLOR);
		}
		
		if( Str_Cmp(stSc.BAR_YN, "Y") == 0 )
		{
			MessageBoxEx (CONFIRM_OK, "바코드 재발행 세대입니다.");
		}

		// if ( Str_Cmp(stSc.BLD_NUM, "400058316") == 0)
		// {
		// 	MessageBoxEx(CONFIRM_OK, "비대면 시범 주택입니다.\n모바일청구서 가입 홍보 안내부탁드립니다.11111");
		// }
		// else if( Str_Cmp(stSc.MTR_KIND, "80") == 0 && Str_Cmp(stSc.MTR_REMOTE_AMI,"82") ==0 && Str_Cmp(stSc.BILL_SEND_METHOD, "M" ) != 0 )
		// {
		// 	MessageBoxEx(CONFIRM_OK, "모바일청구서 가입 \n홍보 안내부탁드립니다.\n 가입시 매월 200캐시 지급 대상입니다.\n (미가입시 캐시 미지급)");
		// }
		// else if( Str_Cmp(stSc.MTR_KIND, "80") == 0 && (Str_Cmp(stSc.MTR_REMOTE_AMI,"81") ==0 || Str_Cmp(stSc.MTR_REMOTE_AMI,"83") ==0 ) && Str_Cmp(stSc.BILL_SEND_METHOD, "M" ) != 0 )
		// {
		// 	MessageBoxEx(CONFIRM_OK, "모바일청구서 가입 홍보안내부탁드립니다");
		// }
		
		
		ON_DRAW();
	}	

	/*=======================================================================================
	함수명 : ADDR_DRAW
	기  능 : 주소 DRAW
	Param  : 
 	Return :
	========================================================================================*/	
	void ADDR_DRAW(void)
	{
		char szAddr[100];
			
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA68), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA69), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA70), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA71), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA72), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA73), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA74), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA75), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA76), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA77), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA78), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA79), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA80), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA81), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA82), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA83), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA22), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA23), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA24), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA25), EDITALIGN_MIDDLE);
			
		EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA69), stSc.BLD_NUM);
		
		// 지번
		Mem_Set((byte*)szAddr, 0x00, sizeof(szAddr));
		Str_Cpy(szAddr, stScAddr.TOWN);
		
		if(Str_Len(stScAddr.VILLAGE) > 0)
		{
			Str_Cat(szAddr, "  ");
			Str_Cat(szAddr, stScAddr.VILLAGE);
		}
		if(Str_Len(stScAddr.HILL) > 0)
		{
			Str_Cat(szAddr, "  ");
			Str_Cat(szAddr, stScAddr.HILL);
		}
		
		EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA71), szAddr);
		
		Str_Cpy(szAddr, stScAddr.CO_LIVE_NM);
		
		if(Str_Len(stScAddr.BLD_NM) > 0)
		{
			Str_Cat(szAddr, "  ");
			Str_Cat(szAddr, stScAddr.BLD_NM);
		}
		
		EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA82), szAddr);
		EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA22), stScAddr.ADDR1_M);
		EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA23), stScAddr.ADDR1_S);
		
		// 신주소
		EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA77), stScAddr.NEW_ROAD_NM);
		EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA24), stScAddr.NEW_ADDR_M);
		EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA25), stScAddr.NEW_ADDR_S);
		EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA83), stScAddr.NEW_BLD_NM);
		
		if( Str_Cmp(stScAddr.CURR_ADDR_RSLT, "10") == 0  )
		{
			m_lAddrFlag1 = 1;
			ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX8), CHKON);
		}
		else if( Str_Cmp(stScAddr.CURR_ADDR_RSLT, "20") == 0  )
		{
			m_lAddrFlag1 = 1;
			ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX9), CHKON);
		}
		else if( Str_Cmp(stScAddr.CURR_ADDR_RSLT, "30") == 0  )
		{
			m_lAddrFlag1 = 1;
			ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX10), CHKON);
		}
		if( Str_Cmp(stScAddr.NEW_ADDR_RSLT, "10") == 0  )
		{
			m_lAddrFlag2 = 1;
			ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX11), CHKON);
		}
		else if( Str_Cmp(stScAddr.NEW_ADDR_RSLT, "20") == 0  )
		{
			m_lAddrFlag2 = 1;
			ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX12), CHKON);
		}
		else if( Str_Cmp(stScAddr.NEW_ADDR_RSLT, "30") == 0  )
		{
			m_lAddrFlag2 = 1;
			ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX13), CHKON);
		}
		
		ButCtrl_SetRoundBoarderColor(Get_hDlgCtrlByID(BID_BOX8) , BTNCHKFRCOLOR, BTNCHKFRCOLOR);
		ButCtrl_SetRoundBoarderColor(Get_hDlgCtrlByID(BID_BOX9) , BTNCHKFRCOLOR, BTNCHKFRCOLOR);
		ButCtrl_SetRoundBoarderColor(Get_hDlgCtrlByID(BID_BOX10), BTNCHKFRCOLOR, BTNCHKFRCOLOR);
		ButCtrl_SetRoundBoarderColor(Get_hDlgCtrlByID(BID_BOX11), BTNCHKFRCOLOR, BTNCHKFRCOLOR);
		ButCtrl_SetRoundBoarderColor(Get_hDlgCtrlByID(BID_BOX12), BTNCHKFRCOLOR, BTNCHKFRCOLOR);
		ButCtrl_SetRoundBoarderColor(Get_hDlgCtrlByID(BID_BOX13), BTNCHKFRCOLOR, BTNCHKFRCOLOR);
	}
	
	/*=======================================================================================
	함수명 : FS_GetSrchTotCnt
	기  능 : 검색인덱스파일의 레코드 수를 리턴한다.
	Param  : nPos:검색 인덱스 파일의 순번
 	Return : 레코드수
	========================================================================================*/
	long FS_GetSrchTotCnt(void)
	{
		long size = 0;
		
		size = FFS_GetSize( SREACH_FILE );
		size = size/SRCH_FS_SIZE;
		return size;
	}

	/*=======================================================================================
	함수명 : Prev_SC
	기  능 : 이전 버튼시 이전대상을 찾는다.
	Param  : 
	Return : 아직 아무것도 코딩되지 않음.(검침 코드 그대로)
	========================================================================================*/
	void Prev_SC(void)
	{
		if( g_nActIndex > 0 )
		{
			g_nActIndex--;
			g_lindex = g_SREACHFILE_GetSeq(SREACH_FILE, g_nActIndex);
		}
		else
		{
			g_nActIndex = -1;
		}
		
		if( g_nActIndex < 2 )
		{	//검색 후, 첫번째 고객 메세지 박스 변수
			m_lPrev--;
		}

		if( g_lindex <= 0 || g_nActIndex < 0 )
		{
			g_nActIndex = 0;
			g_lindex = g_SREACHFILE_GetSeq(SREACH_FILE, g_nActIndex);

			if( m_lPrev < 0 )
			{
				m_lPrev = 0;
			}
			return;
		}
		
		Mem_Set( (byte*)g_szCurrBar, 0x00, sizeof(g_szCurrBar) );
		
		m_lAddrFlag1 = 0;
		m_lAddrFlag2 = 0;
		
		SetData();
		Set_NoChk();
		Set_Index();
		REDRAW();
		
		Set_Popup();
		
		
		
		return;
	}
	
	/*=======================================================================================
	함수명 : Next_SC
	기  능 : 다운 버튼시 다음대상을 찾는다.
	Param  : 
	Return : 아직 아무것도 코딩되지 않음.(검침 코드 그대로)
	========================================================================================*/
	void Next_SC(void)
	{
		m_lPrev = 0;

		g_nActIndex++;
		g_lindex = g_SREACHFILE_GetSeq(SREACH_FILE, g_nActIndex);

		if( g_nActIndex > m_ltotcnt || g_lindex < 0 )
		{
			if( g_SREACHFILE_GetSeq(SREACH_FILE, g_nActIndex) < g_nActIndex )
			{
				g_nActIndex = g_nActIndex-1;
			}
			g_lindex = g_SREACHFILE_GetSeq(SREACH_FILE, g_nActIndex);
			//MessageBoxEx (CONFIRM_OK, "마지막 고객입니다.");
			return;
		}
		
		Mem_Set( (byte*)g_szCurrBar, 0x00, sizeof(g_szCurrBar) );
		
		m_lAddrFlag1 = 0;
		m_lAddrFlag2 = 0;
		
		SetData();
		Set_NoChk();
		Set_Index();
		REDRAW();
		Set_Popup();

		return;
	}

	/*=======================================================================================
	함수명 : SetAddr
	기  능 : 주소 Setting
	Param  : 
	Return : 
	========================================================================================*/
	long SetAddr(void)
	{
		long i, idx = 0, ret = -1;
		char szSql[500];
		handle hdb = NULL;
		handle hstmt = NULL;
		SQLITE sql = NewSqLite();
		
		Mem_Set((byte*)&stScAddr, 0x00, sizeof(stScAddr));
		
		hdb = sql->Open(sql);
		
		if( hdb == NULL )
		{
			ret = -1;
			goto Finally;
		}
	
		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		
		SPRINT(szSql, " SELECT BLD_NUM, NEW_ADDR_BLD_SEQ, ZIP_SEQ, TOWN, VILLAGE \
							 , HILL, ADDR1_M, ADDR1_S, CO_LIVE_NM, BLD_NM \
							 , NEW_ROAD_NM, NEW_ADDR_M, NEW_ADDR_S, NEW_BLD_NM, BEFO_ADDR1_M \
							 , BEFO_ADDR1_S, BEFO_NEW_ADDR_M, BEFO_NEW_ADDR_S, CURR_ADDR_RSLT, NEW_ADDR_RSLT \
							 , SEND_YN \
						  FROM NORMAL_ADDR WHERE BLD_NUM = ? "
		, 0, 0, 0);

		hstmt = sql->CreateStatement(sql, szSql);
		
		if( hstmt == NULL )
		{
			ret = -1;
			PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}
		
		i = 0;
		sql->Bind(sql, i++, 'U', (long*)stSc.BLD_NUM , 9, DECRYPT);

		if(sql->Execute(sql) == FALSE)
		{
			PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
			ret = -1;
			goto Finally;
		}
		
		if(sql->Next(sql) == TRUE)
		{	
			idx = 0;
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.BLD_NUM         , 9  + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.NEW_ADDR_BLD_SEQ, 10 + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.ZIP_SEQ         , 10 + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.TOWN            , 30 + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.VILLAGE         , 30 + 1, DECRYPT );
			
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.HILL            , 3  + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.ADDR1_M         , 4  + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.ADDR1_S         , 4  + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.CO_LIVE_NM      , 60 + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.BLD_NM          , 150+ 1, DECRYPT );
			
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.NEW_ROAD_NM     , 50 + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.NEW_ADDR_M      , 4  + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.NEW_ADDR_S      , 4  + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.NEW_BLD_NM      , 150+ 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.BEFO_ADDR1_M    , 4  + 1, DECRYPT );
			
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.BEFO_ADDR1_S    , 4  + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.BEFO_NEW_ADDR_M , 4  + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.BEFO_NEW_ADDR_S , 4  + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.CURR_ADDR_RSLT  , 2  + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.NEW_ADDR_RSLT   , 2  + 1, DECRYPT );
			
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.SEND_YN         , 1  + 1, DECRYPT );
		}
		
Finally:
		DelSqLite(sql);
		
		ret = 1;
		
		if(idx == 0)
		{
			ret = -1;
			MessageBoxEx (CONFIRM_OK, "검색된 주소 정보가 없습니다.");
			ON_EXIT();
			OnInit(INIT_MAIN);
		}
		
		return ret;	
	}

	/*=======================================================================================
	함수명 : Set_NoChk
	기  능 : 미점검 방문 Setting
	Param  : 
	Return : 
	========================================================================================*/
	void Set_NoChk(void)
	{
		long i, idx;
		char szSql[500];
		handle hdb = NULL;
		handle hstmt = NULL;
		SQLITE sql = NewSqLite();
		
		Mem_Set((byte*)&stScVisit, 0x00, sizeof(stScVisit));
		
		hdb = sql->Open(sql);
		
		if( hdb == NULL )
		{
			goto Finally;
		}
		
		//미점검방문 VISIT_FLAG => 20 고정 
		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		
		SPRINT(szSql, " SELECT VISIT_DEGREE, CHK_EXEC_NUM, VISIT_FLAG, VISITOR_ID, SEND_YN \
						  	 , PDA_IP, UPD_EMPID, BLD_NUM, INST_PLACE_NUM, CHK_TYPE \
							 , CHK_YEAR, CHK_ORDER, OBJ_YM, PLAN_YM, VISIT_YMD \
							 , NO_CHK_WHY, VISITOR_NM, SUPPLY_STOP_YMD, NOT_PERMIT_WHY \
		                  FROM NORMAL_VISIT WHERE CHK_EXEC_NUM = ? AND VISIT_FLAG = '20' AND VISIT_DEGREE = (SELECT MAX(VISIT_DEGREE) FROM NORMAL_VISIT \
		                 WHERE CHK_EXEC_NUM = ? AND VISIT_FLAG ='20' ) "
		, 0, 0, 0);

		hstmt = sql->CreateStatement(sql, szSql);
		
		if( hstmt == NULL )
		{
			PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}
		
		i = 0;
		sql->Bind(sql, i++, 'U', (long*)g_szCHK_EXEC_NUM , 12, DECRYPT);
		sql->Bind(sql, i++, 'U', (long*)g_szCHK_EXEC_NUM , 12, DECRYPT);

		if(sql->Execute(sql) == FALSE)
		{
			PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}
		
		if(sql->Next(sql) == TRUE)
		{	
			idx = 0;
			sql->GetValue( sql, idx++, 'U', (long*) stScVisit.VISIT_DEGREE   , 2 + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScVisit.CHK_EXEC_NUM   , 12+ 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScVisit.VISIT_FLAG     , 2 + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScVisit.VISITOR_ID     , 9 + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScVisit.SEND_YN        , 1 + 1, DECRYPT );
			
			sql->GetValue( sql, idx++, 'U', (long*) stScVisit.PDA_IP         , 32+ 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScVisit.UPD_EMPID      , 20+ 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScVisit.BLD_NUM        , 9 + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScVisit.INST_PLACE_NUM , 9 + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScVisit.CHK_TYPE       , 2 + 1, DECRYPT );
			
			sql->GetValue( sql, idx++, 'U', (long*) stScVisit.CHK_YEAR       , 4 + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScVisit.CHK_ORDER      , 2 + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScVisit.OBJ_YM         , 6 + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScVisit.PLAN_YM        , 6 + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScVisit.VISIT_YMD      , 8 + 1, DECRYPT );
			
			sql->GetValue( sql, idx++, 'U', (long*) stScVisit.NO_CHK_WHY     , 30+ 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScVisit.VISITOR_NM     , 30+ 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScVisit.SUPPLY_STOP_YMD, 8 + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScVisit.NOT_PERMIT_WHY , 2 + 1, DECRYPT );
		}
		
Finally:
		DelSqLite(sql);
		return;
	}

	/*=======================================================================================
	함수명 : SetDataNogoodCha
	기  능 : 부적합 차수 Setting
	Param  : 
	Return : 
	========================================================================================*/
	void SetDataNogoodCha(void)
	{
		long i, idx;
		long lCnt;
		char sztmp[600];
		char szSql[200];
		long lstartidx ;
		handle hdb = NULL;
		handle hstmt = NULL;
		SQLITE sql = NewSqLite();
		
		Mem_Set( (byte*)&stScNogoodCha, 0x00, sizeof(stScNogoodCha) );
		
		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		SPRINT(szSql, "SELECT COUNT(*) FROM NORMAL_NOGOOD_CHA WHERE CHK_EXEC_NUM = '%s'", g_szCHK_EXEC_NUM, 0, 0   );
		g_Sql_RetInt( szSql, &lCnt );
		
		if( lCnt > 0 )
		{
			Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
			SPRINT(szSql, "SELECT MAX(BETTER_ADVICE_DEGREE) FROM NORMAL_NOGOOD_CHA WHERE CHK_EXEC_NUM = '%s'", g_szCHK_EXEC_NUM, 0, 0   );
			g_Sql_RetStr( szSql, 5, stScNogoodCha.BETTER_ADVICE_DEGREE );
		}
		
		hdb = sql->Open(sql);
		
		if( hdb == NULL )
		{
			goto Finally;
		}
		
		if( lCnt > 0 )
		{
			Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
			SPRINT(sztmp, " SELECT CHK_EXEC_NUM, BETTER_ADVICE_DEGREE, BETTER_ADVICE_YMD, BETTER_ADVICE_EXPIRE, BETTER_YN \
								 , BETTER_END_YMD, UPD_EMPID, INST_PLACE_NUM, OBJ_YM, CHK_TYPE \
								 , SUPPLY_STOP_YMD, NOT_PERMIT_WHY, PRE_CHK_OBJ_YN, SEND_YN, PDA_IP \
								 , BLD_NUM, CHK_YEAR, CHK_ORDER, PLAN_YM \
							  FROM NORMAL_NOGOOD_CHA WHERE CHK_EXEC_NUM = ? AND BETTER_ADVICE_DEGREE = '%s' "
			, stScNogoodCha.BETTER_ADVICE_DEGREE, 0, 0);
		}
		else
		{
			goto Finally;
		}
		
		hstmt = sql->CreateStatement(sql, sztmp);
		
		if( hstmt == NULL )
		{
			PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}

		i = 0; 
		sql->Bind(sql, i++, 'U', (long*)&g_szCHK_EXEC_NUM , 12, DECRYPT);

		if(sql->Execute(sql) == FALSE)
		{
			PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}		

		if(sql->Next(sql) == FALSE)
		{
			PRINT("::sql->Next fail [%s]",sql->GetLastError(sql),0,0);
			goto Finally;
		}
		
		idx = 0;
		sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.CHK_EXEC_NUM		  , 12+1, DECRYPT);
		sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.BETTER_ADVICE_DEGREE  , 2 +1, DECRYPT);
		sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.BETTER_ADVICE_YMD	  , 8 +1, DECRYPT);
		sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.BETTER_ADVICE_EXPIRE  , 8 +1, DECRYPT);
		sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.BETTER_YN	   		  , 1 +1, DECRYPT);
		
		sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.BETTER_END_YMD 		  , 8 +1, DECRYPT);
		sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.UPD_EMPID	   		  , 20+1, DECRYPT);
		sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.INST_PLACE_NUM 		  , 9 +1, DECRYPT);
		sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.OBJ_YM         		  , 6 +1, DECRYPT);
		sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.CHK_TYPE       		  , 2 +1, DECRYPT);
		
		sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.SUPPLY_STOP_YMD		  , 8 +1, DECRYPT);
		sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.NOT_PERMIT_WHY 		  , 2 +1, DECRYPT);
		sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.PRE_CHK_OBJ_YN		  , 1 +1, DECRYPT);
		sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.SEND_YN        		  , 1 +1, DECRYPT);
		sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.PDA_IP         		  , 32+1, DECRYPT);
		
		sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.BLD_NUM        		  , 9 +1, DECRYPT);
		sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.CHK_YEAR       		  , 4 +1, DECRYPT);
		sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.CHK_ORDER      		  , 2 +1, DECRYPT);
		sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.PLAN_YM        		  , 6 +1, DECRYPT);
		
Finally:
		DelSqLite(sql);
		
		return;
	}
	
	/*=======================================================================================
	함수명 : NOCHK_DRAW
	기  능 : 미점검 자료 디스플레이
	Param  : 
	Return :
	========================================================================================*/	
	void NOCHK_DRAW(void)
	{
		long i = 0;
		long lDegree = 0;
		char szZero[10];
		char szVisitDegree[5];
		char szVisitYmd[10];
		char szDp[11];
		char szChk[200];
		char szMiss[200];
	
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA20), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA21), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA22), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA23), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA24), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA58), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA59), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA60), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_NOCHK), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_NOSTP), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		
		// 미점검 사유
		for ( i = 0 ;  SCNOCHK_WHY[i].Str[0] != 0 ; i++)
		{
			ListCtrl_AddItem (Get_hDlgCtrlByID(CMB_NOCHK+2), SCNOCHK_WHY[i].Str, 0, ICON_NONE);
		}

		// 차수 셋팅
		Mem_Set( (byte*)szVisitDegree, 0x00, sizeof(szVisitDegree) );
		Mem_Set( (byte*)szZero, 0x00, sizeof(szZero) );
		
		Str_Chg( stScVisit.VISIT_DEGREE, STRCHG_CONV_ZERO_TO_SPACE);

		PRINT("stScVisit.VISIT_DEGREE : %s",stScVisit.VISIT_DEGREE,0,0);

		Str_Chg( stScVisit.VISIT_DEGREE, STRCHG_DEL_NONDIGIT);
		
		PRINT("stScVisit.VISIT_DEGREE222 : %s",stScVisit.VISIT_DEGREE,0,0);

		lDegree = Str_AtoI(stScVisit.VISIT_DEGREE)+1;	

		PRINT("stScVisit.VISIT_DEGREE333 : %d",lDegree,0,0);
			
		Str_ItoA(lDegree, szVisitDegree, 10);

		PRINT("szVisitDegree444 : %s",szVisitDegree,0,0);
		
		if( Str_AtoI(szVisitDegree) < 10 )
		{
			Str_Cpy(szZero, "0");
			Str_Cat(szZero, szVisitDegree);
			Str_Cpy(szVisitDegree, szZero);
			EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA58), szVisitDegree);
		}
		else
		{
			EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA58), szVisitDegree);
		}
		
		// 방문일자
		Mem_Set( (byte*)szVisitYmd, 0x00, sizeof(szVisitYmd) );
		Mem_Set( (byte*)szDp, 0x00, sizeof(szDp) );
		Str_ItoA(Time_GetDate(), szVisitYmd, 10);
		g_Str_DateType( szDp, szVisitYmd);
		
		EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA59), szDp );
		
		// 코드값 셋팅, 미점검사유
		i = g_SearchCD( stScVisit.NO_CHK_WHY, SCNOCHK_WHY );
		if( i == -1 )
		{
			EditCtrl_SetStr(Get_hDlgCtrlByID(CMB_NOCHK), "");
		}
		else
		{
			EditCtrl_SetStr(Get_hDlgCtrlByID(CMB_NOCHK), SCNOCHK_WHY[i].Str);
		}

		// 중지불가사유, 미점검사유, 중지일자 셋팅
		lDegree = Str_AtoI(stScVisit.VISIT_DEGREE) + 1;
		
		if( lDegree == 3 )
		{
			for ( i = 0 ;  SCNOSTOP_WHY[i].Str[0] != 0 ; i++)
			{
				ListCtrl_AddItem (Get_hDlgCtrlByID(CMB_NOSTP+2), SCNOSTOP_WHY[i].Str, 0, ICON_NONE);
			}
		
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_STOP), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_STOP), FALSE );
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(CMB_NOSTP+1), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(CMB_NOSTP+1), FALSE );
			
			// 중지일자
			if( Str_Len(stScVisit.SUPPLY_STOP_YMD) > 5 )
			{
				g_Str_DateType( szDp, stScVisit.SUPPLY_STOP_YMD);
				EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA60), szDp);	
			}
			
			// 코드값 셋팅(중지불가사유)
			i = g_SearchCD( stScVisit.NOT_PERMIT_WHY, SCNOSTOP_WHY );
			if( i == -1 )
			{
				EditCtrl_SetStr(Get_hDlgCtrlByID(CMB_NOSTP), "");
			}
			else
			{
				EditCtrl_SetStr(Get_hDlgCtrlByID(CMB_NOSTP), SCNOSTOP_WHY[i].Str);
			}
		}
		else
		{
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(BID_STOP), FALSE );
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_NOSTP), FALSE );
			
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_NOSTP+1), FALSE );
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA23), FALSE );
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA60), FALSE );
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA24), FALSE );	
		}
		
		ON_DRAW();
	}

	/*=======================================================================================
	함수명 : RESERVE_DRAW
	기  능 : 점검예약등록 디스플레이
	Param  : 
	Return :
	========================================================================================*/		
	void RESERVE_DRAW(void)
	{
		long lHour = 24;
		long lMin = 6;
		long i = 0;
		char szDate[11];
		char sztmp[11];
		char szYear[5];
		char szMonth[3];
		char szDay[3];
		char szZero[3];
		char szHour[3];
		char szMin[3];
	
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA39), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA40), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA41), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA42), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA43), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA44), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA45), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA61), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA62), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA63), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA64), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA7) , EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA8) , EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA16), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA17), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA18), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA19), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA28), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA29), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA30), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_HOUR)  , EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_MINUTE), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		
		EditCtrl_SetMultiLine(Get_hDlgCtrlByID(EDT_DATA10), TRUE, 2, EDITSEP_NONE );

		// 시 셋팅
		for(i=0 ; i<lHour ; i++)
		{
			Mem_Set( (byte*)szHour, 0x00, sizeof(szHour) );
			
			if( i < 10 )
			{
				Str_ItoA(i, szHour, 10);
				Str_Cpy(szZero, "0");
				Str_Cat(szZero, szHour);
				Str_Cpy(szHour, szZero);
				ListCtrl_AddItem (Get_hDlgCtrlByID(CMB_HOUR+2), szHour, 0, ICON_NONE);
			}
			else
			{
				Str_ItoA(i, szHour, 10);
				ListCtrl_AddItem (Get_hDlgCtrlByID(CMB_HOUR+2), szHour, 0, ICON_NONE);
			}
		}
		
		// 분 셋팅
		ListCtrl_AddItem (Get_hDlgCtrlByID(CMB_MINUTE+2), "00", 0, ICON_NONE);
		ListCtrl_AddItem (Get_hDlgCtrlByID(CMB_MINUTE+2), "10", 0, ICON_NONE);
		ListCtrl_AddItem (Get_hDlgCtrlByID(CMB_MINUTE+2), "20", 0, ICON_NONE);
		ListCtrl_AddItem (Get_hDlgCtrlByID(CMB_MINUTE+2), "30", 0, ICON_NONE);
		ListCtrl_AddItem (Get_hDlgCtrlByID(CMB_MINUTE+2), "40", 0, ICON_NONE);
		ListCtrl_AddItem (Get_hDlgCtrlByID(CMB_MINUTE+2), "50", 0, ICON_NONE);
		
		// 자택전화
		EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA7) , stSc.OWNHOUSE_TEL_DDD);
		EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA16), stSc.OWNHOUSE_TEL_EXN);
		EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA17), stSc.OWNHOUSE_TEL_NUM);
		
		// 휴대전화
		EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA8) , stSc.CP_DDD);
		EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA18), stSc.CP_EXN);
		EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA19), stSc.CP_NUM);
		
		// 예약일자
		if( Str_Len(stSc.ARG_DATE) > 0 )
		{
			Mem_Set((byte*)szYear, 0x00, sizeof(szYear));
			Mem_Set((byte*)szMonth, 0x00, sizeof(szMonth));
			Mem_Set((byte*)szDay, 0x00, sizeof(szDay));
			Mem_Cpy((byte *)szYear, (byte *)stSc.ARG_DATE, 4);
			Mem_Cpy((byte *)szMonth, (byte *)stSc.ARG_DATE+4, 2);
			Mem_Cpy((byte *)szDay, (byte *)stSc.ARG_DATE+6, 2);
			
			EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA28), szYear );
			EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA29), szMonth );
			EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA30), szDay );

			EditCtrl_SetStr(Get_hDlgCtrlByID(CMB_HOUR),   stSc.ARG_HOUR );
			EditCtrl_SetStr(Get_hDlgCtrlByID(CMB_MINUTE), stSc.ARG_MIN );
			DlgCtrl_SetEnable( this->m_hDlg, Get_iDlgCtrlByID(BID_RSRVDEL), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_RSRVDEL), FALSE );
		}
		else
		{
			Str_ItoA(Time_GetDate(), sztmp, 10);
			
			Mem_Set((byte*)szYear, 0x00, sizeof(szYear));
			Mem_Set((byte*)szMonth, 0x00, sizeof(szMonth));
			Mem_Set((byte*)szDay, 0x00, sizeof(szDay));
			Mem_Cpy((byte *)szYear, (byte *)sztmp, 4);
			Mem_Cpy((byte *)szMonth, (byte *)sztmp+4, 2);
			Mem_Cpy((byte *)szDay, (byte *)sztmp+6, 2);
			
			EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA28), szYear );
			EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA29), szMonth );
			EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA30), szDay );
			
			DlgCtrl_SetEnable( this->m_hDlg, Get_iDlgCtrlByID(BID_RSRVDEL), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_RSRVDEL), TRUE );
		}
		
		// 메모
		EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA10), stSc.BEFO_HALF_MEMO);
		
		ON_DRAW();
	}

	/*=======================================================================================
	함수명 : SCOUT_DRAW
	기  능 : 점검제외 디스플레이
	Param  : 
	Return :
	========================================================================================*/		
	void SCOUT_DRAW(void)
	{
		long ret = -1;
		long i = 0;
		long cnt  = 0;
		char szBuf[101];
		handle hdb = NULL;
		handle hstmt = NULL;
		SQLITE sql = NewSqLite();

		hdb = sql->Open(sql);
		
		if( hdb == NULL )
		{
			goto Finally;
		}

		hstmt = sql->CreateStatement(sql, "SELECT ITEM_KNAME FROM COMMONCODE WHERE CODE_ID = 'C30015' AND CODE_ITEM > '13' AND CODE_ITEM <> '82' AND ITEM_KNAME IS NOT NULL ORDER BY CODE_ITEM");
	
		if( hstmt == NULL )
		{
			PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}

		sql->Begin(sql);

		if(sql->Execute(sql) == FALSE)
		{
			PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}		

		i = 0;
		cnt = 0;
		while(sql->Next(sql) == TRUE)
		{
			Mem_Set((byte*)szBuf, 0x00, sizeof(szBuf) );
			sql->GetValue( sql, i, 'U', (long*)szBuf, sizeof(szBuf), DECRYPT );
			DlgTbl_SetStr ( ID_TBLLIST, cnt, i, szBuf );
			cnt++;
			if(cnt == 20)
			{
				break;
			}
		}
		
		if( m_lSelIndex == -1 )
		{
			m_lSelIndex = 0;
		}
		
		DlgTbl_SetActive(ID_TBLLIST , m_lSelIndex+1 );
		DlgTbl_SetRowColor(ID_TBLLIST, m_lSelIndex+1, TABLEACTIVE_COLOR);
		
		Mem_Set( (byte*)m_szScOut, 0x00, sizeof(m_szScOut) );
		Str_Cpy(m_szScOut , DlgTbl_GetStr( ID_TBLLIST, m_lSelIndex, 0));

Finally:
		DelSqLite(sql);
		
		ON_DRAW();
	}
	
	/*=======================================================================================
	함수명 : SMSSEND_DRAW
	기  능 : SMS발송 DRAW
	Param  : 
	Return :
	========================================================================================*/		
	void SMSSEND_DRAW(void)
	{
		char szPhone[30];
		char szYear[5];
		char szMonth[3];
		char szDay[3];
		char szToday[30];
		char szZero[3];
		char szHour[3];
		long lHour = 24;
		long lTime;
		long i;
		
		Mem_Set( (byte*)szPhone, 0x00, sizeof(szPhone) );
	
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA84), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA86), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA87), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA88), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA89), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA90), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA91), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA95), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA96), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA97), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA31), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA32), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA33), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_TIME1) , EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_TIME2) , EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(BID_SCHDL) , EDITALIGN_MIDDLE|EDITALIGN_CENTER);
	
		// 시 셋팅
		for(i=0 ; i<lHour ; i++)
		{
			Mem_Set( (byte*)szHour, 0x00, sizeof(szHour) );
			if( i < 10 )
			{
				Str_ItoA(i, szHour, 10);
				Str_Cpy(szZero, "0");
				Str_Cat(szZero, szHour);
				Str_Cpy(szHour, szZero);
				ListCtrl_AddItem (Get_hDlgCtrlByID(CMB_TIME1+2), szHour, 0, ICON_NONE);
				ListCtrl_AddItem (Get_hDlgCtrlByID(CMB_TIME2+2), szHour, 0, ICON_NONE);
			}
			else
			{
				Str_ItoA(i, szHour, 10);
				ListCtrl_AddItem (Get_hDlgCtrlByID(CMB_TIME1+2), szHour, 0, ICON_NONE);
				ListCtrl_AddItem (Get_hDlgCtrlByID(CMB_TIME2+2), szHour, 0, ICON_NONE);
			}
		}
	
		Mem_Set( (byte*)szHour, 0x00, sizeof(szHour) );
		Mem_Set( (byte*)szZero, 0x00, sizeof(szZero) );
		
		lTime = Time_GetHour();
		
		if( lTime < 10 )
		{
			Str_ItoA(lTime, szHour, 10);
			Str_Cpy(szZero, "0");
			Str_Cat(szZero, szHour);
			Str_Cpy(szHour, szZero);
		}
		else
		{
			Str_ItoA(lTime, szHour, 10);
		}
		
		EditCtrl_SetStr(Get_hDlgCtrlByID(CMB_TIME1), szHour);
		
		Mem_Set( (byte*)szHour, 0x00, sizeof(szHour) );
		Mem_Set( (byte*)szZero, 0x00, sizeof(szZero) );
		
		lTime += 1;
		
		if( lTime < 10 )
		{
			Str_ItoA(lTime, szHour, 10);
			Str_Cpy(szZero, "0");
			Str_Cat(szZero, szHour);
			Str_Cpy(szHour, szZero);
		}
		else
		{
			Str_ItoA(lTime, szHour, 10);
		}
		
		EditCtrl_SetStr(Get_hDlgCtrlByID(CMB_TIME2), szHour);	
	
		Mem_Set((byte*)szToday, 0x00, sizeof(szToday));
		Str_ItoA(Time_GetDate(), szToday, 10);
		
		Mem_Set((byte*)szYear, 0x00, sizeof(szYear));
		Mem_Set((byte*)szMonth, 0x00, sizeof(szMonth));
		Mem_Set((byte*)szDay, 0x00, sizeof(szDay));
		Mem_Cpy((byte *)szYear, (byte *)szToday, 4);
		Mem_Cpy((byte *)szMonth, (byte *)szToday+4, 2);
		Mem_Cpy((byte *)szDay, (byte *)szToday+6, 2);
		
		EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA31), szYear );
		EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA32), szMonth );
		EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA33), szDay );
		
		// 소속
		EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA87), stUserinfo.szcenter_nm);
		
		// 점검원
		EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA89), stUserinfo.sznm_kor);
		
		if(Str_Len(stSc.CP_DDD) == 0 || Str_Len(stSc.CP_EXN) == 0 || Str_Len(stSc.CP_NUM) == 0)
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA91),  "H.P 정보 없음" );
			EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(TXT_DATA91), RED);
		}
		else if(Str_Len(stSc.CP_DDD) < 3 || Str_Len(stSc.CP_EXN) < 3 || Str_Len(stSc.CP_NUM) < 4)
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA91),  "H.P 정보 오류" );
			EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(TXT_DATA91), RED);
		}
		else
		{
			// 고객H.P
			Str_Cpy(szPhone, stSc.CP_DDD );
			Str_Cat(szPhone, "-" );
			Str_Cat(szPhone, stSc.CP_EXN );
			Str_Cat(szPhone, "-" );
			Str_Cat(szPhone, stSc.CP_NUM );
			EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA91), szPhone);
			
			EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(TXT_DATA91), TXTFRCOLOR);
		}

		if( Str_Cmp(stSc.NON_PAY_YN, "Y") == 0 )
		{
			m_lSmsNonPay = 1 ;
		}
		if( Str_Cmp(stSc.CONT_STS_CD, "20") == 0 )
		{
			m_lContStsCd = 1 ;
		}
		
		ON_DRAW();
	}
	
	/*=======================================================================================
	함수명 : Save_NoChk
	기  능 : 미점검 방문 저장
	Param  : 
	Return :
	========================================================================================*/	
	bool Save_NoChk(void)
	{
		char szDate[20];
		char szTime[10];
		char szMsg[150];
		long idx; 
		long i;
		long lDegree;
		bool ret = TRUE;
		handle hdb = NULL;
		handle hstmt = NULL;
		SQLITE sql = NewSqLite();
		
		//중지일자
		Mem_Set( (byte*)szDate, 0x00, sizeof(szDate) );
		Str_Cpy(szDate, EditCtrl_GetStr(Get_hDlgCtrlByID(TXT_DATA60)) );
		Str_Chg(szDate, STRCHG_DEL_NONDIGIT);
		
		Mem_Set( (byte*)stScVisit.SUPPLY_STOP_YMD, 0x00, sizeof(stScVisit.SUPPLY_STOP_YMD) );
		Str_Cpy(stScVisit.SUPPLY_STOP_YMD, szDate);
		
		lDegree = Str_AtoI(stScVisit.VISIT_DEGREE) + 1;
		if( Str_Len(EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_NOCHK))) == 0  )
		{
			MessageBoxEx (CONFIRM_OK, "미점검 사유를 선택해 주세요.");
			ret = FALSE;
			goto Finally;
		}
		else if( lDegree == 3 && Str_Len(EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_NOSTP))) == 0 && Str_Len(stScVisit.SUPPLY_STOP_YMD) == 0 )
		{
			MessageBoxEx (CONFIRM_OK, "중지 불가 사유를 선택해 주세요.");
			ret = FALSE;
			goto Finally;
		}
		
		//미점검사유, 스트링으로된 값을 코드로 변경
		Mem_Set( (byte*)stScVisit.NO_CHK_WHY, 0x00, sizeof(stScVisit.NO_CHK_WHY) );
		
		i = g_SearchStr( EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_NOCHK)), SCNOCHK_WHY );
		if( i == -1 )
		{
			Str_Cpy(stScVisit.NO_CHK_WHY, "");
		}
		else
		{
			Str_Cpy(stScVisit.NO_CHK_WHY, SCNOCHK_WHY[i].Code);
		}
		
		// if(Str_Cmp(stSc.CHK_REJECT,"Y") == 0 && Str_Cmp(stSc.CHK_MISS,"2") == 0 && Str_Cmp(stScVisit.NO_CHK_WHY,"10") == 0)
		// {
		// 	MessageBoxEx (CONFIRM_OK, "2회 연속 부재 세대, 반드시 현장점검을 실시하시기 바랍니다.");
		// 	Mem_Set( (byte*)stScVisit.VISIT_FLAG, 0x00, sizeof(stScVisit.VISIT_FLAG) );
		// 	Mem_Set( (byte*)stScVisit.SEND_YN, 0x00, sizeof(stScVisit.SEND_YN) );
		// 	Str_Cpy(stScVisit.VISIT_FLAG, "99");
		// 	Str_Cpy(stScVisit.SEND_YN, "");
		// }
		// else
		// {
			
		// }

		// if(Str_Cmp(stSc.CHK_REJECT,"Y") == 0 && Str_Cmp(stSc.CHK_MISS,"Y") == 0 && Str_Cmp(stScVisit.NO_CHK_WHY,"10") == 0)
		// {
		// 	MessageBoxEx (CONFIRM_OK, "2회 연속 부재 세대, 반드시 현장점검을 실시하시기 바랍니다.");
		// 	Mem_Set( (byte*)stScVisit.VISIT_FLAG, 0x00, sizeof(stScVisit.VISIT_FLAG) );
		// 	Mem_Set( (byte*)stScVisit.SEND_YN, 0x00, sizeof(stScVisit.SEND_YN) );
		// 	Str_Cpy(stScVisit.VISIT_FLAG, "99");
		// 	Str_Cpy(stScVisit.SEND_YN, "");
		// }
		// else
		// {
		// 	//미점검방문 VISIT_FLAG => 20 고정 
		// 	Mem_Set( (byte*)stScVisit.VISIT_FLAG, 0x00, sizeof(stScVisit.VISIT_FLAG) );
		// 	Mem_Set( (byte*)stScVisit.SEND_YN, 0x00, sizeof(stScVisit.SEND_YN) );
		// 	Str_Cpy(stScVisit.VISIT_FLAG, "20");
		// 	Str_Cpy(stScVisit.SEND_YN, "S");
		// }

		Mem_Set( (byte*)stScVisit.CHK_EXEC_NUM, 0x00, sizeof(stScVisit.CHK_EXEC_NUM) );
		Str_Cpy(stScVisit.CHK_EXEC_NUM, g_szCHK_EXEC_NUM);
		
		
		//방문차수
		Str_Cpy(stScVisit.VISIT_DEGREE, EditCtrl_GetStr(Get_hDlgCtrlByID(TXT_DATA58)) );

		//방문일
		Mem_Set( (byte*)szDate, 0x00, sizeof(szDate) );
		Str_Cpy(szDate, EditCtrl_GetStr(Get_hDlgCtrlByID(TXT_DATA59)) );
		Str_Chg(szDate, STRCHG_DEL_NONDIGIT);
		
		Mem_Set( (byte*)stScVisit.VISIT_YMD, 0x00, sizeof(stScVisit.VISIT_YMD) );
		Str_Cpy(stScVisit.VISIT_YMD, szDate );
		
		//중지불가사유 , 스트링으로된 값을 코드로 변경
		Mem_Set( (byte*)stScVisit.NOT_PERMIT_WHY, 0x00, sizeof(stScVisit.NOT_PERMIT_WHY) );
		
		i = g_SearchStr( EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_NOSTP)), SCNOSTOP_WHY );
		if( i == -1 )
		{
			Str_Cpy(stScVisit.NOT_PERMIT_WHY, "");
		}
		else
		{
			Str_Cpy(stScVisit.NOT_PERMIT_WHY, SCNOSTOP_WHY[i].Code);
		}

		// //미점검방문 VISIT_FLAG => 20 고정 
		Mem_Set( (byte*)stScVisit.VISIT_FLAG, 0x00, sizeof(stScVisit.VISIT_FLAG) );
		Mem_Set( (byte*)stScVisit.SEND_YN, 0x00, sizeof(stScVisit.SEND_YN) );
		Str_Cpy(stScVisit.VISIT_FLAG, "20");
		Str_Cpy(stScVisit.SEND_YN, "S");
		
		
		//미점검 시간
		Mem_Set( (byte*)szTime, 0x00, sizeof(szTime) );
		g_Str_TimeType( szTime , Time_GetTime());
        Str_Chg(szTime, STRCHG_DEL_NONDIGIT);
		
		hdb = sql->Open(sql);
		
		if( hdb == NULL )
		{
			ret = FALSE;
			goto Finally;
		}

		hstmt = sql->CreateStatement(sql, " INSERT INTO NORMAL_VISIT \
											( CHK_EXEC_NUM, VISIT_FLAG, VISIT_DEGREE, VISIT_YMD, NO_CHK_WHY \
											, SUPPLY_STOP_YMD, NOT_PERMIT_WHY, VISITOR_ID, VISITOR_NM, SEND_YN \
											, BLD_NUM, INST_PLACE_NUM, CHK_TYPE, CHK_YEAR, CHK_ORDER \
											, OBJ_YM, PLAN_YM, PDA_IP, UPD_EMPID, VISIT_TIME ) \
											VALUES \
											( ?, ?, ?, ?, ? \
											, ?, ?, ?, ?, ? \
											, ?, ?, ?, ?, ? \
											, ?, ?, ?, ?, ? )" 
		);
		
		if( hstmt == NULL )
		{
			PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
			ret = FALSE;
			goto Finally;
		}

		idx = 0;
		sql->Bind(sql, idx++, 'U', (long *)stScVisit.CHK_EXEC_NUM   ,12,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScVisit.VISIT_FLAG     ,2 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScVisit.VISIT_DEGREE   ,2 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScVisit.VISIT_YMD      ,8 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScVisit.NO_CHK_WHY     ,30,DECRYPT);
		
		sql->Bind(sql, idx++, 'U', (long *)stScVisit.SUPPLY_STOP_YMD,8 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScVisit.NOT_PERMIT_WHY ,2 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stUserinfo.szemployee_id ,9 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stUserinfo.sznm_kor      ,30,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScVisit.SEND_YN        ,1 ,DECRYPT);
		
		sql->Bind(sql, idx++, 'U', (long *)stSc.BLD_NUM				,9 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stSc.INST_PLACE_NUM		,9 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stSc.CHK_TYPE			,2 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stSc.CHK_YEAR			,4 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stSc.CHK_ORDER			,2 ,DECRYPT);
		
		sql->Bind(sql, idx++, 'U', (long *)stSc.OBJ_YM				,6 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stSc.PLAN_YM				,6 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long*)stUserinfo.szpda_ip		,32,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long*)stUserinfo.szemployee_id  ,20,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long*)szTime                    ,20,DECRYPT);
		
		if(sql->Execute(sql) == FALSE)
		{
			PRINT("::SQL_Execute fail [%s] ", sql->GetLastError(sql), 0, 0);
			ret = FALSE;
			goto Finally;
		}

		
		
Finally:
		DelSqLite(sql);
		
		return ret;
	}
	
	/*=======================================================================================
	함수명 : Save_ScOut
	기  능 : 점검제외사유 저장
	Param  : 
	Return :
	========================================================================================*/		
	bool Save_ScOut(void)
	{
		char szSql[300];
		char szMemo[300];
		char szToday[15];
		long idx;
		bool ret = TRUE;
		handle hdb = NULL;
		handle hstmt = NULL;
		SQLITE sql = NewSqLite();

		//점검제외사유 코드
		if( m_szScOut[0] == '' )
		{
			MessageBoxEx (CONFIRM_OK, "점검제외사유를 선택해주세요.");
			ret = FALSE;
			goto Finally;
		}
		
		if(MessageBoxEx (CONFIRM_YESNO, "점검제외가 확실합니까?") == MB_OK )
		{
			Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
			SPRINT(szSql, "SELECT CODE_ITEM FROM COMMONCODE WHERE CODE_ID = 'C30015' AND ITEM_KNAME = '%s' ",m_szScOut, 0, 0   );
			g_Sql_RetStr( szSql, 10, stSc.CHK_EXCEP_WHY );
			
			// 점검일
			Mem_Set( (byte*)szToday, 0x00, sizeof(szToday) );
			Str_ItoA(Time_GetDate(), szToday, 10);
			
			Mem_Set( (byte*)stSc.CHK_YMD, 0x00, sizeof(stSc.CHK_YMD) );
			Str_Cpy(stSc.CHK_YMD, szToday);
			g_Str_TimeType( stSc.CHK_TIME_TO, Time_GetTime() );
			
			if(Str_Cmp(stSc.CHK_REJECT,"Y") == 0 && Str_Cmp(stSc.CHK_EXCEP_WHY,"14") == 0)
			{
				MessageBoxEx (CONFIRM_OK, "3회 연속 거부 세대, 반드시 현장점검을 실시하시기 바랍니다.");
				Mem_Set( (byte*)stSc.CHK_RSLT, 0x00, sizeof(stSc.CHK_RSLT) );
				Mem_Set( (byte*)stSc.SEND_YN, 0x00, sizeof(stSc.SEND_YN) );
				Str_Cpy(stSc.CHK_RSLT,"99");
				Str_Cpy(stSc.SEND_YN,"C");

				hdb = sql->Open(sql);

				if( hdb == NULL )
				{
					ret = FALSE;
					goto Finally;
				}
					
				hstmt = sql->CreateStatement(sql, " UPDATE NORMAL_DATA \
													SET CHK_RSLT = ?, SEND_YN = ?\
													WHERE CHK_EXEC_NUM = ? ");
				
				if( hstmt == NULL )
				{
					PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
					ret = FALSE;
					goto Finally;
				}
				
				idx = 0;				
				sql->Bind(sql, idx++, 'U', (long *)stSc.CHK_RSLT		     ,2 ,DECRYPT);
				sql->Bind(sql, idx++, 'U', (long *)stSc.SEND_YN			     ,1 ,DECRYPT);
				
				sql->Bind(sql, idx++, 'U', (long *)g_szCHK_EXEC_NUM		     ,12,DECRYPT);
				
				if(sql->Execute(sql) == FALSE)
				{
					PRINT("::SQL_Execute fail [%s] ", sql->GetLastError(sql), 0, 0);
					ret = FALSE;
					goto Finally;
				}

				goto Finally;
				
			}
			else
			{
				if(Str_Cmp(stSc.CHK_EXCEP_WHY,"14") == 0)
				{
					g_lDataflag = 1;
					Card_Move("SC_REFUSE");
					goto Finally;
				}
				else
				{
					// 점검제외 입력시, CHK_RSLT 40 입력
					Mem_Set( (byte*)stSc.CHK_RSLT, 0x00, sizeof(stSc.CHK_RSLT) );
					Mem_Set( (byte*)stSc.SEND_YN, 0x00, sizeof(stSc.SEND_YN) );
					Str_Cpy(stSc.CHK_RSLT,"40");
					Str_Cpy(stSc.SEND_YN,"S");
				
					hdb = sql->Open(sql);
						
					if( hdb == NULL )
					{
						ret = FALSE;
						goto Finally;
					}
						
					hstmt = sql->CreateStatement(sql, " UPDATE NORMAL_DATA \
														SET CHK_EXCEP_WHY = ?, CHK_EMPID = ?, CHKER_NM = ?, CHK_YMD = ?, CHK_TIME_FROM = ? \
															, CHK_TIME_TO = ?, CHK_RSLT = ?, SEND_YN = ?, PDA_IP = ?, UPD_EMPID = ? \
														WHERE CHK_EXEC_NUM = ? ");
					
					if( hstmt == NULL )
					{
						PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
						ret = FALSE;
						goto Finally;
					}
					
					idx = 0;
					sql->Bind(sql, idx++, 'U', (long *)stSc.CHK_EXCEP_WHY	     ,2	,DECRYPT);
					sql->Bind(sql, idx++, 'U', (long *)stUserinfo.szemployee_id  ,9	,DECRYPT);
					sql->Bind(sql, idx++, 'U', (long *)stUserinfo.sznm_kor	     ,12,DECRYPT);
					sql->Bind(sql, idx++, 'U', (long *)stSc.CHK_YMD			     ,8	,DECRYPT);
					sql->Bind(sql, idx++, 'U', (long *)stSc.CHK_TIME_FROM	     ,6	,DECRYPT);
					
					sql->Bind(sql, idx++, 'U', (long *)stSc.CHK_TIME_TO		     ,6 ,DECRYPT);
					sql->Bind(sql, idx++, 'U', (long *)stSc.CHK_RSLT		     ,2 ,DECRYPT);
					sql->Bind(sql, idx++, 'U', (long *)stSc.SEND_YN			     ,1 ,DECRYPT);
					sql->Bind(sql, idx++, 'U', (long*)stUserinfo.szpda_ip		 ,32,DECRYPT);
					sql->Bind(sql, idx++, 'U', (long*)stUserinfo.szemployee_id   ,20,DECRYPT);
					
					sql->Bind(sql, idx++, 'U', (long *)g_szCHK_EXEC_NUM		     ,12,DECRYPT);
					
					if(sql->Execute(sql) == FALSE)
					{
						PRINT("::SQL_Execute fail [%s] ", sql->GetLastError(sql), 0, 0);
						ret = FALSE;
						goto Finally;
					}
				}
			}
		}
		else
		{
			ret = FALSE;
			goto Finally;
		}
		
Finally:
		DelSqLite(sql);
		
		return ret;
	}
	
	/*=======================================================================================
	함수명 : Save_SmsSend
	기  능 : 
	Param  : 
	Return : 전송문자 1 : 도시가스 안전점검 예정일:2XXXXXXX
	                      방문예정시간:XX시~XX시
             전송문자 2 : 안전점검원:XXX(010XXXXXXXX) 방문
                          서울도시가스 XXX 고객센터:02XXXXXXX
	========================================================================================*/
	bool Save_SmsSend(void)
	{
		char szSql[1000];
		char szCustTel[50];
		char szUserTel[50];
		char szUserTel2[50];
		char szMsg[2000];
		char szMsg2[1000];
		char szARG_DATE[15];
		char szTime[4];
		char szTime2[4];
		char szDay[30];
		char szTmp[500];
		long idx;
		bool ret = TRUE;
		long lTime = 100;
		handle hdb = NULL;
		handle hstmt = NULL;
		SQLITE sql = NewSqLite();
		
		/*************************************/
		/* 핸드폰 번호 형식 체크             */
		/*************************************/
		if( !g_CheckPhoneNumberFormat( stSc.CP_EXN, stSc.CP_NUM) )
		{
			MessageBoxEx (CONFIRM_OK, "고객님의 핸드폰번호\n형식이 맞지않습니다.");
			return FALSE;
		}
		
		/*************************************/
		/* 전송문자 1                        */
		/*************************************/
		Mem_Set( (byte*)szMsg, 0x00, sizeof(szMsg) );
		Mem_Set( (byte*)szMsg2, 0x00, sizeof(szMsg2) );
		Mem_Set( (byte*)szTime, 0x00, sizeof(szTime) );
		Mem_Set( (byte*)szTime2, 0x00, sizeof(szTime2) );
		Mem_Set( (byte*)szCustTel, 0x00, sizeof(szCustTel) );
		Mem_Set( (byte*)szUserTel, 0x00, sizeof(szUserTel) );
		
		Tapi_GetPhoneNum( (byte*)szUserTel, 0);
		Str_Chg( szUserTel, STRCHG_DEL_NONDIGIT);

		Str_Cpy(szCustTel, EditCtrl_GetStr(Get_hDlgCtrlByID(TXT_DATA91)));
		Str_Chg( szCustTel, STRCHG_DEL_NONDIGIT);
		
		Mem_Set((byte *)szTmp, 0x00, sizeof(szTmp));
		Str_Cpy(szTmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA31)));
		Str_Cat(szTmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA32)));
		Str_Cat(szTmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA33)));
		g_Str_DateType( szDay, szTmp);
		
		Str_Cpy( szTime, EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_TIME1)));
		Str_Cpy( szTime2, EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_TIME2)));
		
		Str_Cpy(szMsg, "서울도시가스입니다.");
		Str_Cat( szMsg, "\n방문주소 : " );
		
		SPRINT( szSql, " SELECT CASE WHEN SINGLE_COLIVE_FLAG = '20' THEN ( IFNULL( CO_LIVE_NM,'' ) || \
							                                               IFNULL( ( CASE WHEN INSTR(BLD_NM,'동') = LENGTH(BLD_NM) AND LENGTH(BLD_NM) > 0 \
																		                  THEN ' ' || SUBSTR(BLD_NM, 1, LENGTH(BLD_NM)-1) || '동' \
																						  WHEN LENGTH(BLD_NM) = 0 \
																						  THEN '' \
																		                  ELSE ' ' || BLD_NM || '동' END ), '' ) ||' '|| \
																		   IFNULL( ( CASE WHEN HOUSE_CNT <> '' THEN HOUSE_CNT || '호' END ),'' ) ) \
									 ELSE ( IFNULL( NEW_ROAD_NM, '' ) ||' '|| \
									        IFNULL( ( CASE WHEN NEW_ADDR_S <> '0' THEN NEW_ADDR_M || '-' || NEW_ADDR_S ELSE NEW_ADDR_M END ), '' ) || \
											IFNULL( ( CASE WHEN HOUSE_CNT <> '' THEN ', '|| HOUSE_CNT || '호' END ),'' ) ||' '|| \
											IFNULL( LOT_NUM_SECOND_ADDR, '' ) ) \
							     END AS ADDR \
						   FROM NORMAL_DATA WHERE CHK_EXEC_NUM = %s ", g_szCHK_EXEC_NUM, 0, 0 );
		g_Sql_RetStr( szSql, 50, szMsg2 );
		
		Str_Cat( szMsg, szMsg2 );
		Str_Cat(szMsg, "\n도시가스 안전관리규정(가스사용자는 회사(공급자)가 수행하는 사용시설의 안전점검에 적극 협조하여야 합니다)에 의하여,");
		Str_Cat(szMsg, "\n상기와 같이 안전점검을 위해 방문 예정입니다.");

		
		SPRINT( szSql, "\n도시가스 안전점검 예정일 : %s\n방문예정시간 : %s시 ~ %s시", szDay, szTime, szTime2 );

		Str_Cat( szMsg, szSql );
		/*************************************/
		/* 전송문자 2                        */
		/*************************************/
		Mem_Set( (byte*)szTmp, 0x00, sizeof(szTmp) );
		Mem_Set( (byte*)szUserTel2, 0x00, sizeof(szUserTel2) );

		Str_Cat(szMsg, "\n<<안전점검은 고객의 생명과 재산을 지키는 첫걸음 입니다>>");			

		g_FormatPhoneNumber(szUserTel, szUserTel2);	
		
		SPRINT(szTmp, "\n서울도시가스 %s 고객센터", stUserinfo.szcenter_nm, 0, 0);	
		Str_Cat(szMsg, szTmp);
		// SPRINT(szTmp, "\n안전점검원 : %s(%s)\n*업무시간만 통화가능합니다.\n(09시~18시)", stUserinfo.sznm_kor, szUserTel2, 0);
		SPRINT(szTmp, "\n안전점검원 : %s(%s)\n*문의전화는 업무시간(09시~18시)에 해주시면 감사하겠습니다.", stUserinfo.sznm_kor, szUserTel2, 0);
		Str_Cat(szMsg, szTmp);
		SPRINT(szTmp, "\n안전사고 예방을 위해 반려동물은 점검장소와 분리된 공간에 머물도록 부탁드립니다.",0,0,0);
		Str_Cat(szMsg, szTmp);
		
		ret = Tapi_SendSmsEx(szCustTel, szUserTel, szMsg, Str_Len(szMsg) );
		
		if(ret != 0)
		{
			switch(ret)
			{
				case -1:
					MessageBoxEx (WARNING_OK, "메시지 받을 전화 번호가 잘못되었습니다.");
					return FALSE;
				case -2:
					MessageBoxEx (WARNING_OK, "응답을 받을 전화번호가 잘못되었습니다.");
					return FALSE;
				case -3:
					MessageBoxEx (WARNING_OK, "내용이 비었습니다.");
					return FALSE;
				case -4:
					MessageBoxEx (WARNING_OK, "내용이 너무 깁니다.");
					return FALSE;
				default:
					MessageBoxEx (WARNING_OK, "메세지 전송에 실패했습니다.");
					return FALSE;
			}
		}

		VmSleep(lTime);
		
		/*************************************/
		/* 전송문자 2                        */
		/*************************************/
		/*
		Mem_Set( (byte*)szMsg, 0x00, sizeof(szMsg) );
		Mem_Set( (byte*)szMsg2, 0x00, sizeof(szMsg2) );
		
		SPRINT(szMsg, "서울도시가스 %s 고객센터\n", stUserinfo.szcenter_nm, 0, 0);
		SPRINT(szMsg2, "안전점검원 : %s(%s) 방문", stUserinfo.sznm_kor, szUserTel, 0);
		
		Str_Cat(szMsg, szMsg2);
		
		ret = Tapi_SendSmsEx(szCustTel, szUserTel, szMsg, Str_Len(szMsg) );
		
		if(ret != 0)
		{
			switch(ret)
			{
				case -1:
					MessageBoxEx (WARNING_OK, "메시지 받을 전화 번호가 잘못되었습니다.");
					return FALSE;
				case -2:
					MessageBoxEx (WARNING_OK, "응답을 받을 전화번호가 잘못되었습니다.");
					return FALSE;
				case -3:
					MessageBoxEx (WARNING_OK, "내용이 비었습니다.");
					return FALSE;
				case -4:
					MessageBoxEx (WARNING_OK, "내용이 너무 깁니다.");
					return FALSE;
				default:
					MessageBoxEx (WARNING_OK, "메세지 전송에 실패했습니다.");
					return FALSE;
			}
		}
		*/
		
		MessageBoxEx (CONFIRM_OK, "SMS 전송이 완료되었습니다.");
		
		ret = TRUE;
		
		return ret;
	}
	
	/*=======================================================================================
	함수명 : Save_Reserve
	기  능 : 예약등록 방문 저장
	Param  : 
	Return :
	========================================================================================*/		
	bool Save_Reserve(void)
	{
		char szSql[100];
		char sztmp[20];
		long idx;
		bool ret = TRUE;
		handle hdb = NULL;
		handle hstmt = NULL;
		SQLITE sql = NewSqLite();
		
		hdb = sql->Open(sql);
		
		if( hdb == NULL )
		{
			ret = FALSE;
			goto Finally;
		}
	
		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		SPRINT(szSql, "UPDATE NORMAL_DATA SET ARG_DATE = ?, BEFO_HALF_MEMO = ?, PDA_IP = ?, UPD_EMPID = ? WHERE CHK_EXEC_NUM = '%s' "
					, g_szCHK_EXEC_NUM, 0, 0);
		
		hstmt = sql->CreateStatement(sql, szSql);
		if( hstmt == NULL )
		{
			PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
			ret = FALSE;
			goto Finally;
		}

		idx = 0;
		sql->Bind(sql, idx++, 'U', (long *)stSc.ARG_DATE			,14 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stSc.BEFO_HALF_MEMO		,100,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long*)stUserinfo.szpda_ip		 ,32,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long*)stUserinfo.szemployee_id   ,20,DECRYPT);

		if(sql->Execute(sql) == FALSE)
		{
			PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
			ret = FALSE;
			goto Finally;
		}
		
Finally:
		DelSqLite(sql);
		
		ON_DRAW();
		
		return ret;
	}

	/*=======================================================================================
	함수명 : Snd_Sms
	기  능 : 예약
	Param  : 
	Return :
	========================================================================================*/
	void Snd_Sms(void)
	{
		char szUrl[200];
		char szbuf[128];
		char szMemo[601];
		char szDay[11];
		char szARG_DATE[20];
		char* sndbuf;
		long ret = 0;
	
		Mem_Set((byte*)szARG_DATE, 0x00, sizeof(szARG_DATE));	
		Str_Cpy( szARG_DATE, stSc.ARG_DATE);

		// SMS 문자전송시에는 예약시간이 있는경우에는 넣어준다.
		if( Str_Len(stSc.ARG_HOUR) != 0 )
		{
			Str_Cat( szARG_DATE, stSc.ARG_HOUR);
			Str_Cat( szARG_DATE, stSc.ARG_MIN);
			Str_Cat( szARG_DATE, "00");
		}
		else 
		{
			// 예약과 예약취소를 구분할수 없는 경우.
			// 예약취소인경우에는 있음.
			if(Str_Len(stSc.ARG_DATE) > 0 )
			{
				Str_Cat( szARG_DATE, "100000");
				Str_Cat( stSc.ARG_HOUR, "10");
				Str_Cat( stSc.ARG_MIN, "00");
			}
		}
		
		Mem_Set((byte*)stSc.ARG_DATE, 0x00, sizeof(stSc.ARG_DATE));
		Str_Cpy( stSc.ARG_DATE, szARG_DATE );
		
		Mem_Set((byte*)szUrl, 0x00, sizeof(szUrl));	
		
		if( g_pjcomm != NULL)
		{
			JSON_Finalize( g_pjcomm );
			g_pjcomm = NULL;
		}		

		g_pjcomm = g_CreateJsonHead(g_pjcomm, szUrl, 312316, FALSE);

		JSON_SetValue( g_pjcomm, 'C', "chk_exec_num",   g_szCHK_EXEC_NUM );
		
		if( Str_Len(szARG_DATE) > 0  )
		{
			JSON_SetValue( g_pjcomm, 'C', "gubun",          "1" );
		}
		else
		{
			JSON_SetValue( g_pjcomm, 'C', "gubun",          "2" );
		}
		
		Mem_Set( (byte*) szMemo, 0x00, sizeof( szMemo) );
		SQL_ConvUcStr( szMemo, stSc.BEFO_HALF_MEMO );
		JSON_SetValue( g_pjcomm, 'C', "befo_half_memo", szMemo );
		
		JSON_SetValue( g_pjcomm, 'C', "reserved_date",  szARG_DATE );
		
		sndbuf = JSON_toString(g_pjcomm);
		
		g_SeverConnection();

		Mem_Set((byte*)szbuf, 0x00, sizeof(szbuf));	
		GET_FILENM(szbuf, SQLITE_DB);

		callBackfunc = TR312316;

		ret = HTTP_DownloadData(szUrl, "FR312316_IN",  "FR312316" , sndbuf, szbuf );

		return;
	}

	/*=======================================================================================
	함수명 : Snd_Sms
	기  능 : 예약
	Param  : 
	Return :
	========================================================================================*/
	long TR312316(void)
	{
		g_Sock_Close();
		CloseMessageBox();
		
		if(g_Chk_Json(312316) >= 0)
		{
			if(m_bFirst  == INIT_SMSSEND)
			{
				if( Save_SmsSend() )
				{
					MessageBoxEx (CONFIRM_OK, "SMS 전송 및 예약등록이 완료되었습니다.");
					ON_EXIT();
					OnInit(INIT_MAIN);
					ON_DRAW();
				}
			}
			else if (m_bFirst  == INIT_SCRSRV )
			{
				if(Str_Len(stSc.ARG_DATE) > 0 )
				{
					MessageBoxEx (CONFIRM_OK, "예약등록을 완료 했습니다.");
				}
				else
				{
					MessageBoxEx (CONFIRM_OK, "예약삭제 완료 했습니다.");
				}

				if( Save_Reserve() )
				{
					ON_EXIT();
					OnInit(INIT_MAIN);
					ON_DRAW();
				}
			}
			return 1;
		}
		else
		{
			ON_DRAW();
			return -1;
		}
	}
	
	/*=======================================================================================
	함수명 : Save_Addr
	기  능 : 주소확인
	Param  : 
	Return :
	========================================================================================*/	
	bool Save_Addr(void)
	{
		char szSql[200];
		long idx;
		bool ret = TRUE;
		handle hdb = NULL;
		handle hstmt = NULL;
		SQLITE sql = NewSqLite();
		
		if(m_lAddrFlag1 == 0)
		{
			MessageBoxEx (CONFIRM_OK, "지번주소 확인결과가 입력되지 않았습니다.");
			return FALSE;
		}
		else if(m_lAddrFlag2 == 0)
		{
			MessageBoxEx (CONFIRM_OK, "새주소 확인결과가 입력되지 않았습니다.");
			return FALSE;
		}
		
		Mem_Set((byte*)stScAddr.ADDR1_M, 0x00, sizeof(stScAddr.ADDR1_M));	
		Str_Cpy(stScAddr.ADDR1_M, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA22)) );
		
		Mem_Set((byte*)stScAddr.ADDR1_S, 0x00, sizeof(stScAddr.ADDR1_S));	
		Str_Cpy(stScAddr.ADDR1_S, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA23)) );
		
		Mem_Set((byte*)stScAddr.NEW_ADDR_M, 0x00, sizeof(stScAddr.NEW_ADDR_M));	
		Str_Cpy(stScAddr.NEW_ADDR_M, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA24)) );
		
		Mem_Set((byte*)stScAddr.NEW_ADDR_S, 0x00, sizeof(stScAddr.NEW_ADDR_S));	
		Str_Cpy(stScAddr.NEW_ADDR_S, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA25)) );
		
		Mem_Set((byte*)stScAddr.SEND_YN, 0x00, sizeof(stScAddr.SEND_YN));	
		Str_Cpy(stScAddr.SEND_YN, "S");
		
		hdb = sql->Open(sql);
		
		if( hdb == NULL )
		{
			ret = FALSE;
			goto Finally;
		}

		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		SPRINT(szSql, " UPDATE NORMAL_ADDR \
		                   SET ADDR1_M = ?, ADDR1_S = ?, NEW_ADDR_M = ?, NEW_ADDR_S = ?, CURR_ADDR_RSLT = ? \
		                     , NEW_ADDR_RSLT = ?, SEND_YN = ? WHERE BLD_NUM = '%s' "
		, stSc.BLD_NUM, 0, 0);
					
		hstmt = sql->CreateStatement(sql, szSql);
		
		if( hstmt == NULL )
		{
			PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
			ret = FALSE;
			goto Finally;
		}
		
		idx = 0;
		sql->Bind(sql, idx++, 'U', (long *)stScAddr.ADDR1_M        	,4 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScAddr.ADDR1_S        	,4 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScAddr.NEW_ADDR_M     	,4 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScAddr.NEW_ADDR_S     	,4 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScAddr.CURR_ADDR_RSLT 	,2 ,DECRYPT);
		
		sql->Bind(sql, idx++, 'U', (long *)stScAddr.NEW_ADDR_RSLT  	,2 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScAddr.SEND_YN        	,1 ,DECRYPT);

		if(sql->Execute(sql) == FALSE)
		{
			PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
			ret = FALSE;
			goto Finally;
		}
		
Finally:
		DelSqLite(sql);
		return ret;
	}
	
	/*=======================================================================================
	함수명 : Sos_Key
	기  능 : SOS 기능 / 지정된 3명에게 문자 발송 후, 112로 전화걸기모드 활성화
	Param  : 
	Return : 전송문자 1,2,3 : [안전매니저]
	                          위급상황. 도와주세요!
	                          ~~~~ 주소가 나옴 ~~~~~
	========================================================================================*/	
	long Sos_Key(void)
	{
		long lLen = 0;
		long lTime = 100;
		long ret = 0;
		char szMsg[100];
		
		/***********************************/
		/* SOS기능 사용 유무               */
		/***********************************/
		if( MessageBoxEx (CONFIRM_YESNO, "SOS기능 활성화") != MB_OK )
		{
			return FALSE;
		}
		
		/***********************************/
		/* 1번째 전송 문자                 */
		/***********************************/
		Mem_Set( (byte*)szMsg, 0x00, sizeof(szMsg) );
		
		if( Str_Cmp(stSc.SINGLE_COLIVE_FLAG, "20") == 0 )
		{
			Str_Cpy(szMsg, "[안전매니저]\n위급상황. 도와주세요!\n");
			
			if( Str_Len(stSc.TOWN) > 0 )
			{
				Str_Cat(szMsg, stSc.TOWN);
			}
			if( Str_Len(stSc.CO_LIVE_NM) > 0 )
			{
				Str_Cat(szMsg, " ");
				Str_Cat(szMsg, stSc.CO_LIVE_NM);
			}
			if( Str_Len(stSc.BLD_NM) > 0 )
			{
				Str_Cat(szMsg, " ");
				Str_Cat(szMsg, stSc.BLD_NM);
			}
			if( Str_Len(stSc.HOUSE_CNT) > 0 )
			{
				Str_Cat(szMsg, " ");
				Str_Cat(szMsg, stSc.HOUSE_CNT);
			}
		}
		else
		{
			Str_Cpy(szMsg, "[안전매니저]\n위급상황. 도와주세요!\n");
			
			if( Str_Len(stSc.TOWN) > 0 )
			{
				Str_Cat(szMsg, stSc.TOWN);
			}
			if( Str_Len(stSc.ADDR1_M) > 0 )
			{
				Str_Cat(szMsg, " ");
				Str_Cat(szMsg, stSc.ADDR1_M);
			}
			if( Str_Len(stSc.ADDR1_S) > 0 )
			{
				Str_Cat(szMsg, "-");
				Str_Cat(szMsg, stSc.ADDR1_S);
			}
			if( Str_Len(stSc.HOUSE_CNT) > 0 )
			{
				Str_Cat(szMsg, " ");
				Str_Cat(szMsg, stSc.HOUSE_CNT);
			}
			if( Str_Len(stSc.LOT_NUM_SECOND_ADDR) > 0 )
			{
				Str_Cat(szMsg, " ");
				Str_Cat(szMsg, stSc.LOT_NUM_SECOND_ADDR);
			}
		}
		
		Str_Chg(stUserinfo.szSos_SmsNum1, STRCHG_DEL_NONDIGIT );
		Str_Chg(stUserinfo.szpda_ip, STRCHG_DEL_NONDIGIT );
		
		ret = Tapi_SendSmsEx(stUserinfo.szSos_SmsNum1, stUserinfo.szpda_ip, szMsg, Str_Len(szMsg) );
		
		if(ret != 0)
		{
			switch(ret)
			{
				case -1:
					MessageBoxEx (WARNING_OK, "메시지 받을 전화 번호가 잘못되었습니다.");
					return ret;
				case -2:
					MessageBoxEx (WARNING_OK, "응답을 받을 전화번호가 잘못되었습니다.");
					return ret;
				case -3:
					MessageBoxEx (WARNING_OK, "내용이 비었습니다.");
					return ret;
				case -4:
					MessageBoxEx (WARNING_OK, "내용이 너무 깁니다.");
					return ret;
				default:
					MessageBoxEx (WARNING_OK, "메세지 전송에 실패했습니다.");
					return ret;
			}
		}
		
		VmSleep(lTime);
		
		/***********************************/
		/* 2번째 전송 문자                 */
		/***********************************/
		Str_Chg(stUserinfo.szSos_SmsNum2, STRCHG_DEL_NONDIGIT );
		Str_Chg(stUserinfo.szpda_ip, STRCHG_DEL_NONDIGIT );
		
		ret = Tapi_SendSmsEx(stUserinfo.szSos_SmsNum2, stUserinfo.szpda_ip, szMsg, Str_Len(szMsg) );
		
		if(ret != 0)
		{
			switch(ret)
			{
				case -1:
					MessageBoxEx (WARNING_OK, "메시지 받을 전화 번호가 잘못되었습니다.");
					return ret;
				case -2:
					MessageBoxEx (WARNING_OK, "응답을 받을 전화번호가 잘못되었습니다.");
					return ret;
				case -3:
					MessageBoxEx (WARNING_OK, "내용이 비었습니다.");
					return ret;
				case -4:
					MessageBoxEx (WARNING_OK, "내용이 너무 깁니다.");
					return ret;
				default:
					MessageBoxEx (WARNING_OK, "메세지 전송에 실패했습니다.");
					return ret;
			}
		}
		
		VmSleep(lTime);
		
		/***********************************/
		/* 3번째 전송 문자                 */
		/***********************************/
		Str_Chg(stUserinfo.szSos_SmsNum3, STRCHG_DEL_NONDIGIT );
		Str_Chg(stUserinfo.szpda_ip, STRCHG_DEL_NONDIGIT );
		
		ret = Tapi_SendSmsEx(stUserinfo.szSos_SmsNum3, stUserinfo.szpda_ip, szMsg, Str_Len(szMsg) );
		
		if(ret != 0)
		{
			switch(ret)
			{
				case -1:
					MessageBoxEx (WARNING_OK, "메시지 받을 전화 번호가 잘못되었습니다.");
					return ret;
				case -2:
					MessageBoxEx (WARNING_OK, "응답을 받을 전화번호가 잘못되었습니다.");
					return ret;
				case -3:
					MessageBoxEx (WARNING_OK, "내용이 비었습니다.");
					return ret;
				case -4:
					MessageBoxEx (WARNING_OK, "내용이 너무 깁니다.");
					return ret;
				default:
					MessageBoxEx (WARNING_OK, "메세지 전송에 실패했습니다.");
					return ret;
			}
		}
		
		VmSleep(lTime);
		
		/***********************************/
		/* 4번째 전화 연결                 */
		/***********************************/
		Str_Chg(stUserinfo.szSos_TelNum, STRCHG_DEL_NONDIGIT );
		Tapi_MakeCall((byte*)stUserinfo.szSos_TelNum);
		
		return ret;
	}
	
	/*=======================================================================================
	함수명 : Del_ScData
	기  능 : 점검 취소
	Param  : 
	Return : 
	========================================================================================*/	
	void Del_ScData(void)
	{
		char szSql[400];
		char szDay[50];
		long idx;
		
		// 계량기 수정사항
		Mem_Set((byte*)szSql ,0x00, sizeof(szSql) );
		SPRINT(szSql, " UPDATE NORMAL_MTR SET MTR_RSLT='', PIPE_RSLT = '', CHK_RSLT='' WHERE CHK_EXEC_NUM ='%s' ", g_szCHK_EXEC_NUM, 0, 0);
		g_Sql_DirectExecute( szSql );
		
		// 보일러,연소기 ,SEQ값 초기화
		Mem_Set((byte*)szSql ,0x00, sizeof(szSql) );
		SPRINT(szSql, " UPDATE NORMAL_BUR SET CHK_RSLT='', SEQ = null  WHERE CHK_EXEC_NUM ='%s' ", g_szCHK_EXEC_NUM, 0, 0);
		g_Sql_DirectExecute( szSql );
		
		// 부적합 항목 삭제(단, 부적합 우선점검의 대상의 경우 삭제하지 않도록)
		if ( Str_Cmp(stSc.PREUSE_CHK_WHY, "10") != 0 && Str_Cmp(stSc.PREUSE_CHK_WHY, "30") != 0 )
		{
			Mem_Set((byte*)szSql ,0x00, sizeof(szSql) );
			SPRINT(szSql, " DELETE FROM NORMAL_NOGOOD WHERE CHK_EXEC_NUM = '%s' AND (PRE_CHK_OBJ_YN IS NULL OR PRE_CHK_OBJ_YN <> 'Y') ", g_szCHK_EXEC_NUM, 0, 0);
			g_Sql_DirectExecute( szSql );
			
			Mem_Set((byte*)szSql ,0x00, sizeof(szSql) );
			SPRINT(szSql, " DELETE FROM NORMAL_NOGOOD_CHA WHERE CHK_EXEC_NUM = '%s' AND (PRE_CHK_OBJ_YN IS NULL OR PRE_CHK_OBJ_YN <> 'Y') ", g_szCHK_EXEC_NUM, 0, 0);
			g_Sql_DirectExecute( szSql );
			
			Mem_Set((byte*)szSql ,0x00, sizeof(szSql) );
			SPRINT(szSql, " DELETE FROM NORMAL_NOGOOD_DETAL WHERE CHK_EXEC_NUM = '%s' AND (PRE_CHK_OBJ_YN IS NULL OR PRE_CHK_OBJ_YN <> 'Y')", g_szCHK_EXEC_NUM, 0, 0);
			g_Sql_DirectExecute( szSql );
		}

		// 대상 정보
		Mem_Set((byte*)szSql ,0x00, sizeof(szSql) );
		SPRINT(szSql, " UPDATE NORMAL_DATA \
		                   SET PIPE_RSLT = '', LOC_RSLT = '', MTR_RSLT = '', BO_RSLT = '', BUR_FLAG = '' \
		                     , CUST_FLAG = '', NOGOOD_RSLT = '', CHK_EXCEP_WHY = '', CURR_BAR ='', BAR_WHY ='' \
		                     , CHKER_NM = '', CHK_YMD ='', CHK_RSLT = '', SIGN = '', SEND_YN = 'N' \
		                 WHERE CHK_EXEC_NUM = '%s' "
		, g_szCHK_EXEC_NUM, 0, 0);

		g_Sql_DirectExecute( szSql );
		
		return;
	}
	
	/*=======================================================================================
	함수명 : Regtr_Chk
	기  능 : 조정기 점검 대상 체크
	Param  : 
	Return : 
	========================================================================================*/
	bool Regtr_Chk(void)
	{
		long nRet = 0;
		long chkcnt = 0;
		char szSql[300];
		char szMsg[30];

		if( Str_Len(stSc.REGTR_NUM) > 0 )
		{
			Graphic_RefreshRegion(REFRESH_Y1, REFRESH_Y2);
		
			chkcnt = 0;
			Mem_Set((byte*)szSql, 0x00, sizeof(szSql));
			SPRINT(szSql, " SELECT COUNT(*) FROM REGTR_DATA WHERE REGTR_NUM = (SELECT REGTR_NUM FROM NORMAL_DATA WHERE CHK_EXEC_NUM = '%s' ) AND (CHK_END_YN = 'N' OR CHK_END_YN IS NULL) ", g_szCHK_EXEC_NUM, 0, 0   );
			g_Sql_RetInt( szSql, &chkcnt );
			
			if(chkcnt > 0)
			{							
				MessageBoxEx (CONFIRM_OK, "조정기가 존재합니다.\n조정기점검을 진행해주세요.");
				
				nRet = SetGlobal();
				if( nRet > 0 )
				{
					Card_Move("SC_JOJUNGCHK");
				}
				else
				{
					MessageBoxEx (WARNING_OK, "조정기 데이터에 문제가 있습니다.");
				}
				
				return TRUE;
			}
		}
		
		return FALSE;
	}
	
	/*=======================================================================================
	함수명 : SetTotCnt
	기  능 : 데이터 COUNT
	Param  : 
	Return : 
	========================================================================================*/
	void SetTotCnt(void)
	{
		char szSql[500];
		
		/***************************/
		/* 예약점검 목록(리스트)   */
		/***************************/
		if( g_nWorkFlag == 204 )
		{
			Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
			SPRINT(szSql, "SELECT COUNT(*) FROM NORMAL_DATA WHERE ARG_DATE IS NOT NULL AND (SEND_YN = 'N' OR SEND_YN IS NULL OR SEND_YN = '') ORDER BY HOUSE_NUM_ORD, DONG_ORD", 0, 0, 0);
			g_Sql_RetInt( szSql , &m_ltotcnt );
		}
		/***************************/
		/* 우선점검 목록(리스트)   */
		/***************************/
		else if( g_nWorkFlag == 208 )
		{
			Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
			SPRINT(szSql, "SELECT COUNT(*) FROM NORMAL_DATA WHERE LENGTH(PREUSE_CHK_WHY) > 0 ORDER BY HOUSE_NUM_ORD, DONG_ORD", 0, 0, 0);
			g_Sql_RetInt( szSql , &m_ltotcnt );
		}
		/***************************/
		/* 선택점검 목록(리스트)   */
		/***************************/
		else if( g_nWorkFlag == 209 )
		{
			if( Str_Len(g_szPtrn_Week) > 0 && Str_Len(g_szPtrn_Time) > 0 )
			{
				Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
				SPRINT(szSql, "SELECT COUNT(*) FROM NORMAL_DATA A INNER JOIN CUST_PATT_COLL_INFO B WHERE A.BLD_NUM = B.BLD_NUM AND A.INST_PLACE_NUM = B.INST_PLACE_NUM AND Trim(B.CHK_WISH_TIME) = '%s' AND Trim(B.CHK_WISH_WEEK) = '%s' ORDER BY A.HOUSE_NUM_ORD, A.DONG_ORD ", g_szPtrn_Time, g_szPtrn_Week, 0);
				g_Sql_RetInt( szSql , &m_ltotcnt );
			}
			else if( Str_Len(g_szPtrn_Week) > 0 )
			{
				Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
				SPRINT(szSql, "SELECT COUNT(*) FROM NORMAL_DATA A INNER JOIN CUST_PATT_COLL_INFO B WHERE A.BLD_NUM = B.BLD_NUM AND A.INST_PLACE_NUM = B.INST_PLACE_NUM AND Trim(B.CHK_WISH_WEEK) = '%s' ORDER BY A.HOUSE_NUM_ORD, A.DONG_ORD ", g_szPtrn_Week, 0, 0);
				g_Sql_RetInt( szSql , &m_ltotcnt );
			}
			else if( Str_Len(g_szPtrn_Time) > 0 )
			{
				Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
				SPRINT(szSql, "SELECT COUNT(*) FROM NORMAL_DATA A INNER JOIN CUST_PATT_COLL_INFO B WHERE A.BLD_NUM = B.BLD_NUM AND A.INST_PLACE_NUM = B.INST_PLACE_NUM AND Trim(B.CHK_WISH_TIME) = '%s' ORDER BY A.HOUSE_NUM_ORD, A.DONG_ORD ", g_szPtrn_Time, 0, 0);
				g_Sql_RetInt( szSql , &m_ltotcnt );
			}
			else
			{
				Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
				SPRINT(szSql, "SELECT COUNT(*) FROM NORMAL_DATA A INNER JOIN CUST_PATT_COLL_INFO B WHERE A.BLD_NUM = B.BLD_NUM AND A.INST_PLACE_NUM = B.INST_PLACE_NUM ORDER BY A.HOUSE_NUM_ORD, A.DONG_ORD", 0, 0, 0);
				g_Sql_RetInt( szSql , &m_ltotcnt );
			}
		}
		/***************************/
		/* 점검완료 목록(리스트)   */
		/***************************/
		else if( g_nWorkFlag == 206 )
		{
			Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
			SPRINT(szSql, "SELECT COUNT(*) FROM NORMAL_DATA WHERE SEND_YN = 'Y' or SEND_YN = 'S' ORDER BY HOUSE_NUM_ORD, DONG_ORD", 0, 0, 0);
			g_Sql_RetInt( szSql , &m_ltotcnt );
		}
		/***************************/
		/* 순수미점검 목록(리스트) */
		/***************************/
		else if( g_nWorkFlag == 207 )
		{
			Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
			SPRINT(szSql, "SELECT COUNT(*) FROM NORMAL_DATA A WHERE (A.SEND_YN = 'N' OR A.SEND_YN IS NULL) AND (SELECT COUNT(*) FROM NORMAL_VISIT B WHERE A.CHK_EXEC_NUM = B.CHK_EXEC_NUM) = 0 ORDER BY A.HOUSE_NUM_ORD, A.DONG_ORD", 0, 0, 0);
			g_Sql_RetInt( szSql , &m_ltotcnt );
		}
		/***************************/
		/* 부재미점검 목록(리스트) */
		/***************************/
		else if( g_nWorkFlag == 210 )
		{
			Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
			SPRINT(szSql, "SELECT COUNT(*) FROM NORMAL_DATA A WHERE (A.SEND_YN = 'N' OR A.SEND_YN IS NULL) AND (SELECT COUNT(*) FROM NORMAL_VISIT B WHERE A.CHK_EXEC_NUM = B.CHK_EXEC_NUM) > 0 ORDER BY A.HOUSE_NUM_ORD, A.DONG_ORD", 0, 0, 0);
			g_Sql_RetInt( szSql , &m_ltotcnt );
		}
		/***************************/
		/* 나머지                  */
		/***************************/
		else
		{
			Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
			SPRINT(szSql, "SELECT COUNT(*) FROM NORMAL_DATA ORDER BY HOUSE_NUM_ORD, DONG_ORD", 0, 0, 0);
			g_Sql_RetInt( szSql , &m_ltotcnt );
		}
	}
	
	/*=======================================================================================
	함수명 : Call_Tel
	기  능 : 전화걸기모드
	Param  : 
	Return : 
	========================================================================================*/
	void Call_Tel(long nButtonID)
	{
		char szNum[15];
		Mem_Set( (byte*)szNum, 0x00, sizeof(szNum) );

		if( BID_HOUSETEL == nButtonID )
		{
			Str_Cpy(szNum, m_szTel);
			Str_Chg(szNum, STRCHG_DEL_NONDIGIT );
		}
		else if( BID_PHONETEL == nButtonID )
		{
			Str_Cpy(szNum, m_szPhone);
			Str_Chg(szNum, STRCHG_DEL_NONDIGIT );
		}

		if( Str_Len(szNum) > 8 )
		{
			Tapi_MakeCall((byte*)szNum);
		}
	}
	
	/*=======================================================================================
	함수명 : Analy_Phone
	기  능 : 전화번호 형식 체크
	Param  : 
	Return : 
	========================================================================================*/
	long Analy_Phone(char*phone, char* num1, char* num2, char* num3 )
	{
		long len;
	
		Str_Chg(phone, STRCHG_DEL_NONDIGIT );
		len = Str_Len(phone);
		
		if( len == 9 )
		{
			Mem_Cpy( (byte*)num1, (byte*)phone, 2);
			Mem_Cpy( (byte*)num2, (byte*)phone+2, 3);
			Mem_Cpy( (byte*)num3, (byte*)phone+5, 4);
		}
		else if( len == 10 )
		{
			if( Mem_Cmp((byte*)phone, (byte*)"01", 2) == 0  )
			{
				Mem_Cpy( (byte*)num1, (byte*)phone, 3);
				Mem_Cpy( (byte*)num2, (byte*)phone+3, 3);
				Mem_Cpy( (byte*)num3, (byte*)phone+6, 4);
			}
			else if(  Mem_Cmp((byte*)phone, (byte*)"02", 2) == 0 )
			{
				Mem_Cpy( (byte*)num1, (byte*)phone, 2);
				Mem_Cpy( (byte*)num2, (byte*)phone+2, 4);
				Mem_Cpy( (byte*)num3, (byte*)phone+6, 4);
			}
			else
			{
				Mem_Cpy( (byte*)num1, (byte*)phone, 3);
				Mem_Cpy( (byte*)num2, (byte*)phone+3, 3);
				Mem_Cpy( (byte*)num3, (byte*)phone+6, 4);
			}
		}
		else if( len == 11 )
		{
				Mem_Cpy( (byte*)num1, (byte*)phone, 3);
				Mem_Cpy( (byte*)num2, (byte*)phone+3, 4);
				Mem_Cpy( (byte*)num3, (byte*)phone+7, 4);
		}
		else if( len == 12 )
		{
				Mem_Cpy( (byte*)num1, (byte*)phone, 4);
				Mem_Cpy( (byte*)num2, (byte*)phone+4, 4);
				Mem_Cpy( (byte*)num3, (byte*)phone+8, 4);
		}
		else
		{
			return -1;
		}
		
		return 1;
	}

	/*=======================================================================================
	함수명 : SetGlobal
	기  능 : global 데이터(g_szREGTR_NUM, g_szCHK_PLAN_YM, g_szSAFE_CHK_TYPE) 세팅을 한다
	Param  : 
	Return : 
	========================================================================================*/
	long SetGlobal(void)
	{
		long i;
		long nRet = 1;
		char szSql[200];
		handle hdb = NULL;
		handle hstmt = NULL;
		SQLITE sql = NewSqLite();
		
		Mem_Set( (byte*)g_szREGTR_NUM, 0x00, sizeof(g_szREGTR_NUM) );
		Str_Cpy(g_szREGTR_NUM, stSc.REGTR_NUM);
		
		hdb = sql->Open(sql);
		
		if( hdb == NULL )
		{
			nRet = -1;
			goto Finally;
		}

		hstmt = sql->CreateStatement(sql, "SELECT CHK_PLAN_YM, SAFE_CHK_TYPE \
										     FROM REGTR_DATA WHERE REGTR_NUM = ?" 
		);
		
		if( hstmt == NULL )
		{
			PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
			nRet = -1;
			goto Finally;
		} 
		 
		i = 0;
		sql->Bind(sql, i++, 'U', (long*)&g_szREGTR_NUM , 8, DECRYPT);

		if(sql->Execute(sql) == FALSE)
		{
			PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
			nRet = -1;
			goto Finally;
		}
		
		if(sql->Next(sql) == TRUE )
		{	
			i = 0;
			Mem_Set( (byte*)g_szCHK_PLAN_YM, 0x00, sizeof(g_szCHK_PLAN_YM) );
			Mem_Set( (byte*)g_szSAFE_CHK_TYPE, 0x00, sizeof(g_szSAFE_CHK_TYPE) );
			sql->GetValue( sql, i++, 'U', (long*) g_szCHK_PLAN_YM				, 5  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) g_szSAFE_CHK_TYPE				, 1  + 1, DECRYPT );	
		}
		else
		{
			PRINT("::sql->Next fail [%s]",sql->GetLastError(sql),0,0);
			nRet = -1;
			goto Finally;
		}

Finally:
		DelSqLite(sql);
		return nRet;
	}

    /*=======================================================================================
	함수명 : Snd_Sms_Absence
	기  능 : 부재문자 발송
	Param  : 
	Return : 방문 주소 : xxxx.................
			 			안전점검을 시행하기 위해 방문하였으나 고객님 부재로 실시하지 못하였습니다.
			            연락주시면 방문하여 점검토록 하겠습니다.
			            서울도시가스 xxx 고객센터
		                안전점검원 : xxx(xxx-xxxx-xxxx)
		                *업무시간만 통화가능합니다.
						업무시간(09시~18시)에 해주시면 감사하겠습니다.
	========================================================================================*/
	long Snd_Sms_Absence(void)
	{
		char szSql[1000];
		char szMsg[2000];
		char szMsg2[1000];
		char szCustTel[50];
		char szUserTel[50];
		char szUserTel2[50];
		char szRecvTelDdd[6];
		char szRecvTelExn[6];
		char szRecvTelNum[6];	
		char szTmp[500];
		long idx;
		long lTime = 100; // VmSleep 시간Setting
		bool ret = TRUE;
		handle hdb = NULL;
		handle hstmt = NULL;
		SQLITE sql = NewSqLite();
		
		/*******************************************************************/
		/* 전화번호 세팅                                                   */
		/*******************************************************************/
		Mem_Set( (byte*)szUserTel, 0x00, sizeof(szUserTel) );
		Mem_Set( (byte*)szTmp, 0x00, sizeof(szTmp) );
		
		Tapi_GetPhoneNum( (byte*)szTmp, 0);
		
		if( Str_Cmp(szTmp, "01099991111") == 0 || Str_Cmp(szTmp, "00000000000") == 0 )
		{
			MessageBoxEx (WARNING_OK, "메세지 전송에 실패했습니다.");
			return -1;
		}
		else
		{
			Str_Cpy(szUserTel, szTmp);
		}
		
		Str_Chg( szUserTel, STRCHG_DEL_NONDIGIT);

		//테스트 문자 수신 번호 입력 
		//Mem_Set( (byte*)m_szReceiver_Tel, 0x00, sizeof(m_szReceiver_Tel) );
		//Str_Cpy(m_szReceiver_Tel, "01023100247");

		//운영적용 문자 수신 번호
		Mem_Set( (byte*)m_szReceiver_Tel, 0x00, sizeof(m_szReceiver_Tel) );
		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		SPRINT(szSql, "SELECT ifnull(CP_DDD, '') ||''|| ifnull(CP_EXN, '') ||''|| ifnull(CP_NUM, '') FROM NORMAL_DATA WHERE CHK_EXEC_NUM = '%s'",g_szCHK_EXEC_NUM, 0, 0   );
		g_Sql_RetStr( szSql, 30, m_szReceiver_Tel );
		Str_Chg( m_szReceiver_Tel, STRCHG_DEL_NONDIGIT);
		
		Mem_Set((byte*)szRecvTelDdd, 0x00, sizeof(szRecvTelDdd));	
		Mem_Set((byte*)szRecvTelExn, 0x00, sizeof(szRecvTelExn));	
		Mem_Set((byte*)szRecvTelNum, 0x00, sizeof(szRecvTelNum));
		
		Analy_Phone(m_szReceiver_Tel, szRecvTelDdd, szRecvTelExn, szRecvTelNum);
		
		if( !g_CheckPhoneNumberFormat( szRecvTelExn, szRecvTelNum) )
		{
			MessageBoxEx (CONFIRM_OK, "고객님의 핸드폰번호\n형식이 맞지않습니다.");
			return -1;
		}
		
		Mem_Set( (byte*)m_szSms_Desc, 0x00, sizeof(m_szSms_Desc) );
		
		/*******************************************************************/
		/* 1.주소 문자 내용( 도로명 주소 )                                 */
		/*******************************************************************/
		Mem_Set( (byte*)szMsg, 0x00, sizeof(szMsg) );	
		Mem_Set( (byte*)szMsg2, 0x00, sizeof(szMsg2) );	
		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );

		
		Str_Cpy(szMsg, "서울도시가스입니다.");
		Str_Cat( szMsg, "\n방문주소 : " );
		
		SPRINT( szSql, " SELECT CASE WHEN SINGLE_COLIVE_FLAG = '20' THEN ( IFNULL( CO_LIVE_NM,'' ) || \
							                                               IFNULL( ( CASE WHEN INSTR(BLD_NM,'동') = LENGTH(BLD_NM) AND LENGTH(BLD_NM) > 0 \
																		                  THEN ' ' || SUBSTR(BLD_NM, 1, LENGTH(BLD_NM)-1) || '동' \
																						  WHEN LENGTH(BLD_NM) = 0 \
																						  THEN '' \
																		                  ELSE ' ' || BLD_NM || '동' END ), '' ) ||' '|| \
																		   IFNULL( ( CASE WHEN HOUSE_CNT <> '' THEN HOUSE_CNT || '호' END ),'' ) ) \
									 ELSE ( IFNULL( NEW_ROAD_NM, '' ) ||' '|| \
									        IFNULL( ( CASE WHEN NEW_ADDR_S <> '0' THEN NEW_ADDR_M || '-' || NEW_ADDR_S ELSE NEW_ADDR_M END ), '' ) || \
											IFNULL( ( CASE WHEN HOUSE_CNT <> '' THEN ', '|| HOUSE_CNT || '호' END ),'' ) ||' '|| \
											IFNULL( LOT_NUM_SECOND_ADDR, '' ) ) \
							     END AS ADDR \
						   FROM NORMAL_DATA WHERE CHK_EXEC_NUM = %s ", g_szCHK_EXEC_NUM, 0, 0 );
		g_Sql_RetStr( szSql, 50, szMsg2 );
		
		Str_Cat( szMsg, szMsg2 );
		
		
		Str_Cat(szMsg, "\n도시가스 안전관리규정(가스사용자는 회사(공급자)가 수행하는 사용시설의 안전점검에 적극 협조하여야 합니다)에 의하여,");
		Str_Cat(szMsg, "\n안전점검을 시행하기 위해 방문하였으나 고객님 부재로 실시하지 못하였습니다.\n 아래 연락처로 연락주시면 방문하여 점검토록 하겠습니다.");
		
		/*******************************************************************/
		/* 2.부재 문자 내용                                                */
		/*******************************************************************/
		Str_Cat(szMsg, "\n<<안전점검은 고객의 생명과 재산을 지키는 첫걸음 입니다>>");
		
		/*******************************************************************/
		/* 3.점검원 소속                                                   */
		/*******************************************************************/
		Mem_Set( (byte*)szTmp, 0x00, sizeof(szTmp) );
		Mem_Set( (byte*)szUserTel2, 0x00, sizeof(szUserTel2) );

		g_FormatPhoneNumber(szUserTel, szUserTel2);	
			
		SPRINT(szTmp, "\n서울도시가스 %s 고객센터", stUserinfo.szcenter_nm, 0, 0);	
		Str_Cat(szMsg, szTmp);
		// SPRINT(szTmp, "\n안전점검원 : %s(%s)\n*업무시간만 통화가능합니다.\n(09시~18시)", stUserinfo.sznm_kor, szUserTel2, 0);
		SPRINT(szTmp, "\n안전점검원 : %s(%s)\n*문의전화는 업무시간(09시~18시)에 해주시면 감사하겠습니다.", stUserinfo.sznm_kor, szUserTel2, 0);
		Str_Cat(szMsg, szTmp);
		
		// Hist Msg Setting
		Str_Cpy(m_szSms_Desc, szMsg);
		
		// 전송
		ret = Tapi_SendSmsEx(m_szReceiver_Tel, szUserTel, szMsg, Str_Len(szMsg) );
		
		if(ret != 0)
		{
			switch(ret)
			{
				case -1:
					MessageBoxEx (WARNING_OK, "메시지 받을 전화 번호가 잘못되었습니다.");
					return ret;
				case -2:
					MessageBoxEx (WARNING_OK, "응답을 받을 전화번호가 잘못되었습니다.");
					return ret;
				case -3:
					MessageBoxEx (WARNING_OK, "내용이 비었습니다.");
					return ret;
				case -4:
					MessageBoxEx (WARNING_OK, "내용이 너무 깁니다.");
					return ret;
				default:
					MessageBoxEx (WARNING_OK, "메세지 전송에 실패했습니다.");
					return ret;
			}
		}
		
		VmSleep(lTime);
		
		ret = 1;
		
		return ret;
	}
	
	/*=======================================================================================
	함수명 : Snd_Sms_Hist_Absence
	기  능 : 부재문자 Hist / FR312400
	Param  : 
	Return : 
	========================================================================================*/
	long Snd_Sms_Hist_Absence(void)
	{
		char szUrl[200];
		char szbuf[128];
		char szTmp[800];
		char szSendYmd[20];
		char szSendTime[10];
		char szSendDtm[50];
		char szSendTelDdd[6];
		char szSendTelExn[6];
		char szSendTelNum[6];
		char szRecvTelDdd[6];
		char szRecvTelExn[6];
		char szRecvTelNum[6];
		char* sndbuf;
		long i = 0;
		long ntotcnt = 0;
		long nLen = 0;
		long ret = 0;
	
		Mem_Set((byte*)szSendYmd, 0x00, sizeof(szSendYmd));	
		Mem_Set((byte*)szSendTime, 0x00, sizeof(szSendTime));	
		Mem_Set((byte*)szSendDtm, 0x00, sizeof(szSendDtm));	
		Mem_Set((byte*)szSendTelDdd, 0x00, sizeof(szSendTelDdd));	
		Mem_Set((byte*)szSendTelExn, 0x00, sizeof(szSendTelExn));	
		Mem_Set((byte*)szSendTelNum, 0x00, sizeof(szSendTelNum));	
		Mem_Set((byte*)szRecvTelDdd, 0x00, sizeof(szRecvTelDdd));	
		Mem_Set((byte*)szRecvTelExn, 0x00, sizeof(szRecvTelExn));	
		Mem_Set((byte*)szRecvTelNum, 0x00, sizeof(szRecvTelNum));	
		
		Str_ItoA(Time_GetDate(), szSendYmd, 10);
		
		Mem_Set((byte*)szTmp, 0x00, sizeof(szTmp));	
		//Str_ItoA(Time_GetTime(), szTmp, 10);
		g_Str_TimeType( szTmp , Time_GetTime());
		Str_Chg(szTmp, STRCHG_DEL_NONDIGIT);
		Mem_Cpy((byte*)szSendTime, (byte*)szTmp, 4);
		
		Str_Cpy(szSendDtm, szSendYmd);
		Str_Cat(szSendDtm, szTmp);

		Mem_Set( (byte*)szTmp, 0x00, sizeof(szTmp) );
		Tapi_GetPhoneNum( (byte*)szTmp, 0);
		ret = Analy_Phone(szTmp, szSendTelDdd, szSendTelExn, szSendTelNum);
		if( ret < 0 )
		{
			MessageBoxEx (WARNING_OK, "사용자번호를 확인해주세요.");
			return -1;
		}

		Analy_Phone(m_szReceiver_Tel, szRecvTelDdd, szRecvTelExn, szRecvTelNum);
		if( ret < 0 )
		{
			MessageBoxEx (WARNING_OK, "고객번호를 확인해주세요.");
			return -1;
		}
		
		if( g_pjcomm != NULL)
		{
			JSON_Finalize( g_pjcomm );
			g_pjcomm = NULL;
		}		
		g_pjcomm = g_CreateJsonHead(g_pjcomm, szUrl, 312400, FALSE);

		JSON_SetValue( g_pjcomm, 'C', "center_cd",          stUserinfo.szcenter_cd);
		JSON_SetValue( g_pjcomm, 'C', "use_cont_num",       stSc.USE_CONT_NUM);
		JSON_SetValue( g_pjcomm, 'C', "cust_num",        	stSc.CUST_NUM);
		JSON_SetValue( g_pjcomm, 'C', "send_ymd",           szSendYmd);
		JSON_SetValue( g_pjcomm, 'C', "send_time",          szSendTime);
		JSON_SetValue( g_pjcomm, 'C', "send_dtm",           szSendDtm);
		JSON_SetValue( g_pjcomm, 'C', "send_tel_ddd",       szSendTelDdd);
		JSON_SetValue( g_pjcomm, 'C', "send_tel_exn",       szSendTelExn);
		JSON_SetValue( g_pjcomm, 'C', "send_tel_num",       szSendTelNum);
		JSON_SetValue( g_pjcomm, 'C', "receiver_tel_ddd",   szRecvTelDdd);
		JSON_SetValue( g_pjcomm, 'C', "receiver_tel_exn",   szRecvTelExn);
		JSON_SetValue( g_pjcomm, 'C', "receiver_tel_num",   szRecvTelNum);
		
		Mem_Set((byte*)szTmp, 0x00, sizeof(szTmp));
		SQL_ConvUcStr( szTmp, m_szSms_Desc );
		JSON_SetValue( g_pjcomm, 'C', "sms_desc",           szTmp );
		
		JSON_SetValue( g_pjcomm, 'C', "sms_type",          "12");

		sndbuf = JSON_toString(g_pjcomm);
		
		Mem_Set((byte*)szbuf, 0x00, sizeof(szbuf));	
		GET_FILENM(szbuf, SQLITE_DB);

		callBackfunc = TR312400;
		HTTP_DownloadData( szUrl, "FR312400_IN",  "FR312400" , sndbuf, szbuf );

		return 1;
	}
	
	/*=======================================================================================
	함수명 : TR312400
	기  능 : FR312400 Callback
	Param  : 
	Return : 
	========================================================================================*/
	long TR312400(void)
	{
		char szSql[250];
		char szTmp[100];
		long ntotcnt = 0, i = 0;
		
		g_Sock_Close();
		CloseMessageBox();
			
		if(g_Chk_Json(312400) >= 0)
		{
			ON_EXIT();
			OnInit(INIT_MAIN);
			OnButton(BID_NEXTPG);
			
			return 1;
		}
		else
		{	
			ON_EXIT();
			OnInit(INIT_MAIN);
			OnButton(BID_NEXTPG);

			return -1;
		}	
	}

	/*=======================================================================================
	함수명 : ReqMsg
	기  능 : 청구방법 메세지
	Param  : 
	Return :
	========================================================================================*/
	void ReqMsg(void)
	{
		char strMsg[200];
		
		Mem_Set( (byte *)strMsg, 0x00, sizeof(strMsg) );
		
		if( Str_Cmp(stSc.CONT_STS_CD, "30") != 0 )
		{
			if( Str_Cmp(stSc.BILL_SEND_METHOD, "M") == 0 )
			{
				Str_Cat(strMsg, "고객님의 청구방법은\n[ 모바일 ] 입니다.\n \n");
				Str_Cat(strMsg, "전화번호 : ");
				Str_Cat(strMsg, stSc.BILL_SEND_CP_DDD);
				Str_Cat(strMsg, "-");
				Str_Cat(strMsg, stSc.BILL_SEND_CP_EXN);
				Str_Cat(strMsg, "-");
				Str_Cat(strMsg, stSc.BILL_SEND_CP_NUM);
				MessageBoxEx (CONFIRM_OK, strMsg);
			}
			else if( Str_Cmp(stSc.BILL_SEND_METHOD, "L") == 0 )
			{
				Str_Cat(strMsg, "고객님의 청구방법은\n[ LMS ] 입니다.\n \n");
				Str_Cat(strMsg, "전화번호 : \n");
				Str_Cat(strMsg, stSc.BILL_SEND_CP_DDD);
				Str_Cat(strMsg, "-");
				Str_Cat(strMsg, stSc.BILL_SEND_CP_EXN);
				Str_Cat(strMsg, "-");
				Str_Cat(strMsg, stSc.BILL_SEND_CP_NUM);
				MessageBoxEx (CONFIRM_OK, strMsg);
			}
			else if( Str_Cmp(stSc.BILL_SEND_METHOD, "E") == 0 )
			{
				Str_Cat(strMsg, "고객님의 청구방법은\n[ 이메일 ] 입니다.\n \n");
				Str_Cat(strMsg, "이메일주소 : \n");
				Str_Cat(strMsg, stSc.BILL_SEND_EMAIL);
				MessageBoxEx (CONFIRM_OK, strMsg);
			}
			else if( Str_Cmp(stSc.BILL_SEND_METHOD, "A") == 0 )
			{
				Str_Cat(strMsg, "고객님의 청구방법은\n[ 이메일 ] 입니다.\n \n");
				Str_Cat(strMsg, "이메일주소 : \n");
				Str_Cat(strMsg, stSc.BILL_SEND_EMAIL);
				MessageBoxEx (CONFIRM_OK, strMsg);
			}
			else if( Str_Cmp(stSc.BILL_SEND_METHOD, "B") == 0 )
			{
				Str_Cat(strMsg, "고객님의 청구방법은\n[ LMS ] 입니다.\n \n");
				Str_Cat(strMsg, "전화번호 : \n");
				Str_Cat(strMsg, stSc.BILL_SEND_CP_DDD);
				Str_Cat(strMsg, "-");
				Str_Cat(strMsg, stSc.BILL_SEND_CP_EXN);
				Str_Cat(strMsg, "-");
				Str_Cat(strMsg, stSc.BILL_SEND_CP_NUM);
				MessageBoxEx (CONFIRM_OK, strMsg);
			}
			else if( Str_Cmp(stSc.BILL_SEND_METHOD, "C") == 0 )
			{
				Str_Cat(strMsg, "고객님의 청구방법은\n[ 모바일 ] 입니다.\n \n");
				Str_Cat(strMsg, "전화번호 : ");
				Str_Cat(strMsg, stSc.BILL_SEND_CP_DDD);
				Str_Cat(strMsg, "-");
				Str_Cat(strMsg, stSc.BILL_SEND_CP_EXN);
				Str_Cat(strMsg, "-");
				Str_Cat(strMsg, stSc.BILL_SEND_CP_NUM);
				MessageBoxEx (CONFIRM_OK, strMsg);
			}
			else if( Str_Cmp(stSc.BILL_SEND_METHOD, "D") == 0 )
			{
				Str_Cat(strMsg, "고객님의 청구방법은\n[ 모바일,EMAIL ] 입니다.\n \n");
				Str_Cat(strMsg, "전화번호 : ");
				Str_Cat(strMsg, stSc.BILL_SEND_CP_DDD);
				Str_Cat(strMsg, "-");
				Str_Cat(strMsg, stSc.BILL_SEND_CP_EXN);
				Str_Cat(strMsg, "-");
				Str_Cat(strMsg, stSc.BILL_SEND_CP_NUM);
				Str_Cat(strMsg, "이메일주소 : \n");
				Str_Cat(strMsg, stSc.BILL_SEND_EMAIL);
				MessageBoxEx (CONFIRM_OK, strMsg);
			}
			else if( Str_Cmp(stSc.BILL_SEND_METHOD, "F") == 0 )
			{
				Str_Cat(strMsg, "고객님의 청구방법은\n[ LMS,EMAIL ] 입니다.\n \n");
				Str_Cat(strMsg, "전화번호 : ");
				Str_Cat(strMsg, stSc.BILL_SEND_CP_DDD);
				Str_Cat(strMsg, "-");
				Str_Cat(strMsg, stSc.BILL_SEND_CP_EXN);
				Str_Cat(strMsg, "-");
				Str_Cat(strMsg, stSc.BILL_SEND_CP_NUM);
				Str_Cat(strMsg, "이메일주소 : \n");
				Str_Cat(strMsg, stSc.BILL_SEND_EMAIL);
				MessageBoxEx (CONFIRM_OK, strMsg);
			}
			else if( Str_Cmp(stSc.BILL_SEND_METHOD, "G") == 0 )
			{
				Str_Cat(strMsg, "고객님의 청구방법은\n[ LMS,모바일 ] 입니다.\n \n");
				Str_Cat(strMsg, "전화번호 : \n");
				Str_Cat(strMsg, stSc.BILL_SEND_CP_DDD);
				Str_Cat(strMsg, "-");
				Str_Cat(strMsg, stSc.BILL_SEND_CP_EXN);
				Str_Cat(strMsg, "-");
				Str_Cat(strMsg, stSc.BILL_SEND_CP_NUM);
				MessageBoxEx (CONFIRM_OK, strMsg);
			}
			else 
			{
				if( MessageBoxEx (CONFIRM_YESNO, "이동고객센터 화면으로\n이동하겠습니까?") == MB_OK)
				{
					Mem_Set( (byte*)g_szMC_InstPlaceNum, 0x00, sizeof(g_szMC_InstPlaceNum) );
					Str_Cpy( g_szMC_InstPlaceNum, stSc.INST_PLACE_NUM );
					
					g_lMC_MoveCard_Flag = 4;
					
					Card_Move("CM_MOVING_CENT");
				}
			}
		}	

		REDRAW();
	}
}
