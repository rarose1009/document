/*----------------------------------------------------------------------------------
	Project Name:
	Smart Application : 카드 기본폼
	Smart Version : Smart 1.0
	Copyright(c) 2014  ValueCMD Co., Ltd.
----------------------------------------------------------------------------------*/
card C6101_WRKREPORT
{
	#include <include.h>
	#include "globalcard.h"
	#include "SQL.lib"
	#include "Calendar.h"
	
//	#define USE_ON_EXIT
	#define USE_ON_CHAR
//	#define USE_ON_KEY
//	#define USE_ON_DRAW
//	#define USE_ON_TIMER
	#define USE_ON_POINTING
	#define USE_ON_SELECT
	#define USE_ON_UART
	#define USE_ON_TASK

	#include "DefEvent.h"

	//BUTTON ID define
	BEGIN_BUTTON_ID()
//업무보고 메인 리스트
		DEF_BUTTON_ID ( BID_TAB1 )
		DEF_BUTTON_ID ( BID_TAB2 )
		DEF_BUTTON_ID ( BID_ADDR )
		DEF_BUTTON_ID ( BID_QUICK_ADDR )	//스크롤 호출

//업무보고 조회&입력
		DEF_BUTTON_ID ( BID_WRK_ADDR )
		DEF_BUTTON_ID ( BID_WRK_PREV )
		DEF_BUTTON_ID ( BID_WRK_CHANGE )
		DEF_BUTTON_ID ( BID_WRK_OK )
		DEF_BUTTON_ID ( BID_WRK_PHOTO )
		DEF_BUTTON_ID ( BID_WRK_SAVE )
		DEF_BUTTON_ID ( BID_WRK_SEARCH )
		DEF_BUTTON_ID ( BID_WRK_GUBUN )
		DEF_BUTTON_ID ( BID_WRK_CALENDAR )
		DEF_BUTTON_ID ( BID_TITLE )
		DEF_BUTTON_ID ( BID_WRITE1 )
		DEF_BUTTON_ID ( BID_WRITE2 )
		DEF_BUTTON_ID ( BID_PHOTOVIEW ) 
		
//기물번호검색
		DEF_BUTTON_ID ( BID_MTR_TAB1 )
		DEF_BUTTON_ID ( BID_MTR_TAB2 )
		DEF_BUTTON_ID ( BID_MTR_ADDR )
		DEF_BUTTON_ID ( BID_MTR_SEARCH )
		DEF_BUTTON_ID ( BID_MTR_BARCODE )
		DEF_BUTTON_ID ( BID_MTR_CANCEL )
		DEF_BUTTON_ID ( BID_MTR_OK )

//사진보기
		DEF_BUTTON_ID ( BID_LARGEPHOTO )	
		DEF_BUTTON_ID ( BID_OK )
		DEF_BUTTON_ID ( BID_OK2 )

//주소검색
		DEF_BUTTON_ID ( BID_ADDRSEARCH )
		DEF_BUTTON_ID ( BID_JIBUN )
		DEF_BUTTON_ID ( BID_ROADNM )
		DEF_BUTTON_ID ( BID_TOGETHER )
		DEF_BUTTON_ID ( BID_CANCEL )
		DEF_BUTTON_ID ( BID_ADDRPREV )
		DEF_BUTTON_ID ( BID_ADDRNEXT )

//화면 상단 공통 메뉴 모음
		DEF_BUTTON_ID ( BID_HOME )		//홈
		DEF_BUTTON_ID ( BID_MENU )		//메뉴
		DEF_BUTTON_ID ( BID_KEYBOARD )	//키보드
		DEF_BUTTON_ID ( BID_SCREEN )	//화면 상하
		DEF_BUTTON_ID ( BID_CMMNWORK )	//공통업무
		DEF_BUTTON_ID ( BID_PREV )		//이전
		DEF_BUTTON_ID ( BID_EXIT )		//종료
	END_BUTTON_ID()
	
	BEGIN_OBJECT_ID()
		DEF_OBJECT_ID ( TXT_TITLE )		//타이틀
		DEF_OBJECT_ID ( TXT_BORDER )
//업무보고
		DEF_OBJECT_ID ( TXT_DATA1 )
		DEF_OBJECT_ID ( TXT_DATA2 )
		DEF_OBJECT_ID ( TXT_DATA3 )
		DEF_OBJECT_ID ( TXT_DATA4 )
		DEF_OBJECT_ID ( TXT_DATA5 )
		DEF_OBJECT_ID ( TXT_DATA6 )
		DEF_OBJECT_ID ( TXT_DATA7 )
		DEF_OBJECT_ID ( TXT_DATA8 )
		DEF_OBJECT_ID ( TXT_DATA9 )
		DEF_OBJECT_ID ( TXT_DATA10 )
		DEF_OBJECT_ID ( TXT_DATA11 )
		DEF_OBJECT_ID ( TXT_DATA12 )
		DEF_OBJECT_ID ( TXT_DATA13 )
		DEF_OBJECT_ID ( TXT_DATA47 )
		DEF_OBJECT_ID ( TXT_DATA48 )

//기물번호 조회		
		DEF_OBJECT_ID ( TXT_DATA14 )
		DEF_OBJECT_ID ( TXT_DATA15 )
		DEF_OBJECT_ID ( TXT_DATA16 )
		DEF_OBJECT_ID ( TXT_DATA17 )
		DEF_OBJECT_ID ( TXT_DATA18 )
		DEF_OBJECT_ID ( TXT_DATA19 )
		DEF_OBJECT_ID ( TXT_DATA20 )
		DEF_OBJECT_ID ( TXT_DATA21 )
		DEF_OBJECT_ID ( TXT_DATA22 )
		DEF_OBJECT_ID ( TXT_DATA23 )
		DEF_OBJECT_ID ( TXT_DATA24 )
		DEF_OBJECT_ID ( TXT_DATA25 )
		DEF_OBJECT_ID ( TXT_DATA26 )
		DEF_OBJECT_ID ( TXT_DATA27 )
		DEF_OBJECT_ID ( TXT_DATA28 )
		DEF_OBJECT_ID ( TXT_DATA29 )
		DEF_OBJECT_ID ( TXT_DATA30 )
		DEF_OBJECT_ID ( TXT_DATA31 )
		DEF_OBJECT_ID ( TXT_DATA32 )
		DEF_OBJECT_ID ( TXT_DATA33 )
		DEF_OBJECT_ID ( TXT_DATA34 )
		DEF_OBJECT_ID ( TXT_DATA35 )
		DEF_OBJECT_ID ( TXT_DATA36 )
		DEF_OBJECT_ID ( TXT_DATA37 )
		DEF_OBJECT_ID ( TXT_DATA38 )
		DEF_OBJECT_ID ( TXT_DATA39 )
		DEF_OBJECT_ID ( TXT_DATA40 )
		DEF_OBJECT_ID ( TXT_DATA41 )
		DEF_OBJECT_ID ( TXT_DATA42 )		
		DEF_OBJECT_ID ( TXT_DATA43 )
		DEF_OBJECT_ID ( TXT_DATA44 )
		DEF_OBJECT_ID ( TXT_DATA45 )
		DEF_OBJECT_ID ( TXT_DATA46 )
		
//주소검색-단독
		DEF_OBJECT_ID ( TXT_DATA49 )	//페이지
		DEF_OBJECT_ID ( TXT_DATA50 )
		DEF_OBJECT_ID ( TXT_DATA51 )
		DEF_OBJECT_ID ( TXT_DATA52 )
		DEF_OBJECT_ID ( TXT_DATA53 )
//주소검색-공동
		DEF_OBJECT_ID ( TXT_DATA54 )
		DEF_OBJECT_ID ( TXT_DATA55 )
		DEF_OBJECT_ID ( TXT_DATA56 )
//주소검색-도로명
		DEF_OBJECT_ID ( TXT_DATA57 )
		DEF_OBJECT_ID ( TXT_DATA58 )
		DEF_OBJECT_ID ( TXT_DATA59 )
		DEF_OBJECT_ID ( TXT_DATA60 )
		
//계약번호
		DEF_OBJECT_ID ( EDT_DATA1 )
//기물번호 조회
		DEF_OBJECT_ID ( EDT_DATA2 )
//주소검색
		DEF_OBJECT_ID ( EDT_DATA3 )
		DEF_OBJECT_ID ( EDT_DATA4 )
		DEF_OBJECT_ID ( EDT_DATA5 )
		DEF_OBJECT_ID ( EDT_DATA6 )
		DEF_OBJECT_ID ( EDT_DATA7 )

		DEF_OBJECT_ID ( ICON_TITLE )		//타이틀
		
//업무보고 목록 - 조회 리스트
		DEF_OBJECT_ID ( ID_MAINLIST )	// 테이블 리스트
//업무보고 목록 - 입력 리스트
		DEF_OBJECT_ID ( ID_INPUTLIST )	// 테이블 리스트
//주소검색
		DEF_OBJECT_ID ( ID_ADDRLIST )	// 테이블 리스트

//업무보고 -> 검색 조건 콤보박스
		DEF_OBJECT_ID ( CMB_DATA1 )
		DEF_OBJECT_ID ( CMB_GUBUN = CMB_DATA1 + 3 )
//주소검색
		DEF_OBJECT_ID ( CMB_DATA2 = CMB_GUBUN + 3 )
		DEF_OBJECT_ID ( CMB_DATA3 = CMB_DATA2 + 3 )
		DEF_OBJECT_ID ( CMB_DATA4 = CMB_DATA3 + 3 )
		DEF_OBJECT_ID ( CMB_DATA5 = CMB_DATA4 + 3 )
		DEF_OBJECT_ID ( CMB_DATA6 = CMB_DATA5 + 3 )
		DEF_OBJECT_ID ( CMB_DATA7 = CMB_DATA6 + 3 )
	END_OBJECT_ID()
	
//	#define INIT_MAIN	      1		//조회
//	#define INIT_INPUT        2	

	#define INIT_INPUT        1	
	#define INIT_MAIN	      2		//조회
	#define INIT_WORK         3
	#define INIT_MTRSEARCH    4
	#define INIT_PHOTOVIEW    5
	#define INIT_JIBUNSEARCH  6
	#define INIT_TGTSEARCH    7
	#define INIT_NEWSEARCH    8
		
	SysButCtrl SysButRes_MAIN[] =
	 {
		  SYS_BUT_IMG (  BTNX_1, BTNY_1, BTNWD_1, BTNHT_1, 0, 0, BUTSTY_BOLD , 0, 0, 0, OBJ_BUT, GID_HOME,  0),
		  SYS_BUT_IMG (  BTNX_2, BTNY_1, BTNWD_1, BTNHT_1, 0, 0, BUTSTY_BOLD , 0, 0, 0, OBJ_BUT, GID_KEYBOARD,  0),
		  SYS_BUT_IMG (  BTNX_3, BTNY_1, BTNWD_1, BTNHT_1, 0, 0, BUTSTY_BOLD , 0, 0, 0, OBJ_BUT, GID_SCREEN, 0),
		  SYS_BUT_IMG (  BTNX_4, BTNY_1, BTNWD_1, BTNHT_1, 0, 0, BUTSTY_BOLD , 0, 0, 0, OBJ_BUT, GID_CMMNWK,  0),
		  SYS_BUT_IMG (  BTNX_5, BTNY_1, BTNWD_1, BTNHT_1, 0, 0, BUTSTY_BOLD , 0, 0, 0, OBJ_BUT, GID_VMEXIT, 0),
		  SYS_BUT_IMG (  BTNX_6, BTNY_2, BTNWD_2, BTNHT_2, 0, 0, BUTSTY_BOLD|BUTSTY_BORDER , 0, TRANSPARENT, TRANSPARENT, OBJ_BUT, GID_MENU, 0),
		  SYS_BUT_IMG (  BTNX_7, BTNY_2, BTNWD_2, BTNHT_2, 0, 0, BUTSTY_BOLD|BUTSTY_BORDER , 0, TRANSPARENT, TRANSPARENT, OBJ_BUT, GID_PREV, 0),
//		  SYS_BUT_IMG (       0, STARTY+199, 998, 996, 0, 0, BUTSTY_BOLD , 0, WHITE, WHITE, OBJ_BUT, BID_VISIBLE, 0),
	 };
	
	//-------------------------------------------------------------------------------------------------	
	//	Table정의에 관련된 내용들(업무보고 목록 - 조회)
	//-------------------------------------------------------------------------------------------------
	//#define		ROW_M	    7					// table의 행개수
	#define		ROW_M 	    50					// grid 행갯수
	#define		COL_M	    4					// table의 열개수
	#define		GRID_H_M	(CHT+55)			// table 행 높이
	#define		GRID_CLR_M	TRANSPARENT   		// table 클리어 color
	#define		GRID_X_M	STARTX 			    // table 시작x좌표
	#define		MAXCHAR_M	201 			    // table에 들어갈수 있는 최대  char 길이
	#define		GRID_Y_M	STARTY+190	 	    // table 시작y좌표
	#define		GRID_Y_M_P  STARTY+40  		    // table 시작y좌표
	#define		GRID_ENDY_M	(GRID_Y_M+(ROW_M+1)*GRID_H_M) //table마지막 row의 Y값
	
	char	m_szTableBuf_M [COL_M*(ROW_M+1)*MAXCHAR_M]; // 각 CELL에 들어가 텍스트 내용을 담은 버퍼
		
	//백업
	/*
	Column m_stGridTitle_M[] = {
		{"등록일자"      , CWD*9  		, EDITALIGN_CENTER|EDITALIGN_MIDDLE	,  GCTYPE_TEXTCTRL, 32},
		{"주소"          , CWD*17     	, EDITALIGN_CENTER|EDITALIGN_MIDDLE	,  GCTYPE_TEXTCTRL, 32},
		{"처리상태"      , CWD*12+40   	, EDITALIGN_LEFT|EDITALIGN_MIDDLE	,  GCTYPE_TEXTCTRL, 32},
		{"USE_CONT_NUM"  , CWD*0      	, EDITALIGN_CENTER|EDITALIGN_MIDDLE	,  GCTYPE_TEXTCTRL, 1}
	};
	*/
	
	Column m_stGridTitle_M[] = {
		{"등록일자"      , CWD*12  		, EDITALIGN_CENTER|EDITALIGN_MIDDLE	,  GCTYPE_TEXTCTRL, 32},
		{"주소"          , CWD*22+33    , EDITALIGN_CENTER|EDITALIGN_MIDDLE	,  GCTYPE_TEXTCTRL, 32},
		{"USE_CONT_NUM"  , CWD*0       	, EDITALIGN_CENTER|EDITALIGN_MIDDLE	,  GCTYPE_TEXTCTRL, 1},
		{""              , CWD*4+19    	, EDITALIGN_CENTER|EDITALIGN_MIDDLE	,  GCTYPE_TEXTCTRL, 1}
	};

	//-------------------------------------------------------------------------------------------------	
	//	Table정의에 관련된 내용들(업무보고 목록 - 입력)
	//-------------------------------------------------------------------------------------------------
	#define		ROW_I	    7					// table의 행개수
	#define		COL_I	    4					// table의 열개수
	#define		GRID_H_I	(CHT+55)			// table 행 높이
	#define		GRID_CLR_I	TRANSPARENT   		// table 클리어 color
	#define		GRID_X_I	STARTX 			    // table 시작x좌표
	#define		MAXCHAR_I	201 			    // table에 들어갈수 있는 최대  char 길이
	#define		GRID_Y_I	STARTY+125	 	    // table 시작y좌표
	#define		GRID_Y_I_P  STARTY+40  		    // table 시작y좌표
	#define		GRID_ENDY_I	(GRID_Y_I+(ROW_I+1)*GRID_H_I) //table마지막 row의 Y값
	
	char	m_szTableBuf_I [COL_I*(ROW_I+1)*MAXCHAR_I]; // 각 CELL에 들어가 텍스트 내용을 담은 버퍼
		
	Column m_stGridTitle_I[] = {
		{"등록일자"      , CWD*9  		, EDITALIGN_CENTER|EDITALIGN_MIDDLE	,  GCTYPE_TEXTCTRL, 32},
		{"주소"          , CWD*26+40    , EDITALIGN_CENTER|EDITALIGN_MIDDLE	,  GCTYPE_TEXTCTRL, 32},
		{"USE_CONT_NUM"  , CWD*3      	, EDITALIGN_CENTER|EDITALIGN_MIDDLE	,  GCTYPE_TEXTCTRL, 1}
	};

	//-------------------------------------------------------------------------------------------------	
	//	Table정의에 관련된 내용들(주소검색)
	//-------------------------------------------------------------------------------------------------
	#define		ROW_A	    6					// table의 행개수
	#define		COL_A	    3					// table의 열개수
	#define		GRID_H_A	(CHT+35)			// table 행 높이
	#define		GRID_CLR_A	TRANSPARENT   		// table 클리어 color
	#define		GRID_X_A	STARTX 			    // table 시작x좌표
	#define		MAXCHAR_A	201 			    // table에 들어갈수 있는 최대  char 길이
	#define		GRID_Y_A	STARTY+305	 	    // table 시작y좌표
	#define		GRID_Y_A_P  STARTY+40  		    // table 시작y좌표
	#define		GRID_ENDY_A	(GRID_Y_A+(ROW_A+1)*GRID_H_A) //table마지막 row의 Y값
	
	char	m_szTableBuf_A [COL_A*(ROW_A+1)*MAXCHAR_A]; // 각 CELL에 들어가 텍스트 내용을 담은 버퍼
		
	Column m_stGridTitle_A[] = {
		{"동명"        , CWD*9     , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0},
		{"주소"        , CWD*30+23 , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0},
		{"USE_CONT_NUM", CWD*0     , EDITALIGN_CENTER|EDITALIGN_MIDDLE,  TABLE_TEXT, 0},
	};

	typedef struct _WRKDATA
	{
		char REQ_DOC_NUM				[20]; 
		char USE_CONT_NUM				[20];
		char MTR_NUM					[20];
		char REG_YMD					[20];
		char DUTY_FLAG					[10]; 
		char TAKER_EMPID				[20];
		char CUST_NUM					[20];
		char CUST_NM					[50]; 
		char TREAT_STS					[20];
		char CURR_ADDR_UNION			[300];
		char NEW_ADDR_UNION				[300]; 
		char FIRM_NM					[100];
		char TREAT_YMD					[20];
		char CENTER_CD					[10]; 
		char TITLE						[200];
		char REQ_DESC					[800];
		char FILE_SEQ					[20]; 
		char FILE_ID					[100];
		char ORG_FILE_NAME				[200];
		char FILE_PATH					[200]; 		//서버 저장 경로
		char PHOTO_LENGTH				[50];
		char PHOTO_SAVE_JPG_PATH		[256];		//단말기에 저장된 사진 경로 - JPG
		char PHOTO_SAVE_JPG_SIZE_PATH	[256];		//단말기에 저장된 사진 경로 - 사이즈 변경 JPG
		char PHOTO_SAVE_PNG_PATH		[256];		//단말기에 저장된 사진 경로 - PNG
	}	WRKDATA;
	
	WRKDATA m_stWrkData;

	long m_bFirst;
	long m_lLarge_View_Flag = 0;//m_lLarge_View_Flag = 1 INIT_WORK , m_lLarge_View_Flag = 2 INIT_INPUT
	char m_szBarcode_Num[20];

//업무보고 - 조회 메인
	long m_lIdxFlag = 0;		// index 관련 flag
	long m_lpage_M = 0;			// 현재 페이지
	long m_lTotpage_M = 0;		// 총 페이지
	long m_nActIndex_M = -1;	//선택된 row index
	char m_szCnt_page_M[20];	// 페이지 표시 변수
	char m_szUse_cont_num[20];
	void* m_pImgBiz;
	
//업무보고 - 입력 메인
	long m_lActiveIndex = -1;
	long m_lpage_I = 0;			// 현재 페이지
	long m_lTotpage_I = 0;		// 총 페이지
	long m_nActIndex_I = -1;	//선택된 row index
	long m_lSearchFlag = 0;	//업무보고 입력 : 대상 검색 여부 , 업무보고 수정(조회) : 대상 선택 여부 , = 0 default ,= 1 검색실행
	char m_szCnt_page_I[20];	// 페이지 표시 변수
	char m_szfilenm[256];
	char m_szLarge_Jpg_Path[256];
	char m_szLarge_Png_Path[256];

	//주소검색
	long m_lAddrFlag = 0;		//주소검색 실행 Flag , = 0 주소검색 안함, =1 주소검색 실행.
	long m_lpage_A = 0;			// 현재 페이지
	long m_lTotpage_A = 0;		// 총 페이지
	long m_nActIndex_A = -1;	//선택된 row index
	char m_szCnt_page_A[20];	// 페이지 표시 변수
	char m_szSql[2][800];
	char m_szQuickSql[500];
	char m_szAddr[500];
	
	long m_lWrkFlag = 0;			//업무보고 목록 -> = 0 조회 , = 1 입력
	long m_lMtrSearchFlag = 0;		//업무보고 조회&입력 -> = 0 기물번호 입력 , = 1 바코드인식
	
	handle m_hGrid = NULL;
	long m_nSelectedIndex = -1;

	void SetBtnImg	(void);
	void SetStyle	(void);
	void SetCombo	(void);
	void AddrDraw   (void);			//주소 draw

//업무보고 목록 - 조회
	void Recv_List	(void);
	long TR68802	(void);
	void ListDraw	(void);
	void SetData    (void);
	void JpgToPng   (void);

//업무보고 조회
	void ViewDraw   (void);
	void PhotoDraw  (void);
	long Validate(long BtnId);
	long Snd_Change(void);
	long TR68807(void);

//업무보고 입력
	void SaveInput  (void);
	void InputDraw	(void);	        
	void Shoto_Photo(void);
	void Photo_View(void);
	
//계약번호, 기물번호 찾기
	void MtrDraw	(void);
	long Rcv_Info   (void);
	long TR68805    (void);
	void Set_InputData(long nservicenum);
	void Barcode(void);
	void OnBarcodeRead(void);
	void PDA_OnBarcodeRead(void);

//주소 검색
	void AddrSrchDraw(void);		//주소검색
	void Search_Addr(void);
	
	void OnList(quad lParam);
	void Grid_QuickList(void);

	// 메인 다이얼로그
	//---------------------------------------------------------------
	DlgObject	DlgRes[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_TEXT(0, 0, 998, BTNHT_1, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, WHITE, TRANSPARENT, TXT_BORDER, ""),
		DLG_ICON(0, BTNY_2, ICON_TITLE, ""),
				
		//타이틀
		DLG_TEXT(TX, TY, STWD, STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "업무보고"),

		DLG_BUTTON(STARTX,       STARTY+65, 500, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB2, "입 력"),
		DLG_BUTTON(STARTX+500,   STARTY+65, 499, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB1, "조 회"),
		DLG_BUTTON(STARTX,  	STARTY+125, 300, 65, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ADDR, "도로명 주소"),
		DLG_BUTTON(STARTX+600,  STARTY+125, 400, 65, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_QUICK_ADDR, "도로명 스크롤"),
		
		// 리스트
		//DLG_TABLE(GRID_X_M, GRID_Y_M, ROW_M, COL_M, 0, GRID_H_M, 1, GRID_H_M, SEL_ROW, MAXCHAR_M, m_stGridTitle_M, ID_MAINLIST, m_szTableBuf_M),

//#define DLG_GRID(x, y, width, height, Rem, Add, Id, rownum, head_height, body_height, scroll_delta, scroll_thick, selected_color, grid_title)\
		{0, Id, 0, OBJ_GRD, 0, 0, 0,\
		{{x, y, width, height, rownum, ARR_SIZE(grid_title)}, Rem, Add, head_height, body_height, scroll_delta, {(void*)scroll_thick, (void*)selected_color, grid_title}}}

		//타이틀 개수를 고려해야 함(총 ROW 개수는 ROW + 1개 임). 
		DLG_GRID(GRID_X_M, GRID_Y_M, 0, 710, 0, FRMSTY_BORDER|FRMSTY_ALWAYSSHOWSB, ID_MAINLIST, ROW_M, 100, 120, 800, 80, TABLEACTIVE_COLOR, m_stGridTitle_M),
	};	
	
	// PDA 다이얼로그
	//---------------------------------------------------------------
	DlgObject	DlgRes_P[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_ICON(P_TTLTX, 0, ICON_TITLE, ""),
			
		//타이틀
		DLG_TEXT(P_TX, P_TY, P_STWD, P_STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, WHITE, TRANSPARENT, TXT_TITLE, "업무보고"),
		DLG_BUTTON(P_BTNX, P_BTNY, P_BTNWD, P_BTNHD, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", GID_PREV, ""),

		DLG_BUTTON(0,            STARTY+65, 500, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB2, "입 력"),
		DLG_BUTTON(STARTX+495,   STARTY+65, 499, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB1, "조 회"),

		// 리스트
		//DLG_TABLE(GRID_X_M, GRID_Y_M, ROW_M, COL_M, 0, GRID_H_M, 1, GRID_H_M, SEL_ROW, MAXCHAR_M, m_stGridTitle_M, ID_MAINLIST, m_szTableBuf_M),
		DLG_GRID(GRID_X_M, GRID_Y_M, 0, 773, 0, FRMSTY_BORDER|FRMSTY_ALWAYSSHOWSB, ID_MAINLIST, ROW_M, 70, 120, 800, 80, TABLEACTIVE_COLOR, m_stGridTitle_M),
	};		
	
	//  다이얼로그
	//---------------------------------------------------------------
	DlgObject	DlgRes_Input[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_TEXT(0, 0, 998, BTNHT_1, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, WHITE, TRANSPARENT, TXT_BORDER, ""),
		DLG_ICON(0, BTNY_2, ICON_TITLE, ""),		

		//타이틀
		DLG_TEXT(TX, TY, STWD, STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "업무보고 입력"),

		DLG_BUTTON(0,            STARTY+65, 500, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB2, "입 력"),
		DLG_BUTTON(STARTX+500,   STARTY+65, 500, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB1, "조 회"),

		DLG_BUTTON(STARTX+750, STARTY+125, 249, 55, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_WRK_SEARCH, "검 색"),
		DLG_BUTTON(0,          STARTY+845, 333, 54, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_WRK_PREV, "이전화면"),		
		DLG_BUTTON(STARTX+333, STARTY+845, 333, 54, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_WRK_PHOTO, "사진촬영"),
		DLG_BUTTON(STARTX+666, STARTY+845, 334, 54, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_WRK_SAVE, "등 록"),
		
		DLG_EDIT(STARTX+350,   STARTY+125, 400, 55, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA1, 20,  ""),
		DLG_BUTTON(0,          STARTY+180, 250, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_WRK_ADDR, ""),
		DLG_TEXT(STARTX+250,   STARTY+180, 750, 80, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA1, ""),
		DLG_TEXT(0,     	   STARTY+260, 250, 50, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK,   TXT_DATA2, "성명"),
		DLG_TEXT(STARTX+250,   STARTY+260, 750, 50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA3, ""),
		DLG_TEXT(0,     	   STARTY+310, 250, 50, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK,   TXT_DATA4, "상호"),
		DLG_TEXT(STARTX+250,   STARTY+310, 750, 50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA5, ""),
		
		DLG_TEXT(0,     	   STARTY+360, 1000, 40, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, GRIDTTLBK       , TXT_DATA6, "의뢰내용"),
		DLG_TEXT(0,            STARTY+400, 150, 50, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK,   TXT_DATA7, "일자"),
		DLG_TEXT(STARTX+150,   STARTY+400, 850, 50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA8, ""),
		//DLG_BUTTON(STARTX+795, STARTY+400, 198, 50, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_WRK_CALENDAR, "▼"),

		//C20447 공통코드 조회
		DLG_TEXT(0,            STARTY+450, 150, 50, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK,   TXT_DATA9, "구분"),
		DLG_COMBO(STARTX+150,  STARTY+450, 850, 250, 198, 50, TXTFRCOLOR, EDTCTRLBK, CALL_FUNC, "", CMB_GUBUN, 30),

		DLG_TEXT(0,     	   STARTY+500, 150, 50, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK,   TXT_DATA11, "제목"),
		DLG_BUTTON(STARTX+150, STARTY+500, 850, 50, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_WRITE1,  ""),	
		DLG_TEXT (STARTX+150,  STARTY+500, 850, 50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, TXT_DATA12,  ""),	//입력 창 부분

		DLG_TEXT(0,            STARTY+550, 150, 100, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA13, "내용"),
		DLG_BUTTON(STARTX+150, STARTY+550, 850, 100, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_WRITE2,  ""),	
		DLG_TEXT (STARTX+150,  STARTY+550, 850, 100, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, TXT_DATA14,  ""),	//입력 창 부분

		DLG_TEXT(0,     	   STARTY+650, 1000, 40, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, GRIDTTLBK, TXT_DATA15, "사진"),
		DLG_BUTTON(0,          STARTY+690, 1000, 155, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_PHOTOVIEW,  ""),	
		
		DLG_COMBO(0,           STARTY+125, 350, 250, 120, 55, TXTFRCOLOR, EDTCTRLBK, CALL_FUNC, "", CMB_DATA1, 32),
	};	
	
	// PDA 다이얼로그
	//---------------------------------------------------------------
	DlgObject	DlgRes_Input_P[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_ICON(P_TTLTX, 0, ICON_TITLE, ""),
				
		//타이틀
		DLG_TEXT(P_TX, P_TY, P_STWD, P_STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, WHITE, TRANSPARENT, TXT_TITLE, "업무보고"),
		DLG_BUTTON(P_BTNX, P_BTNY, P_BTNWD, P_BTNHD, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", GID_PREV, ""),

		DLG_BUTTON(0,            STARTY+65, 500, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB2, "입 력"),
		DLG_BUTTON(STARTX+495,   STARTY+65, 499, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TAB1, "조 회"),

		// 리스트
		//DLG_TABLE(GRID_X_M, GRID_Y_M, ROW_M, COL_M, 0, GRID_H_M, 1, GRID_H_M, SEL_ROW, MAXCHAR_M, m_stGridTitle_M, ID_MAINLIST, m_szTableBuf_M),
		DLG_GRID(GRID_X_M, GRID_Y_M, 0, 773, 0, FRMSTY_BORDER|FRMSTY_ALWAYSSHOWSB, ID_MAINLIST, ROW_M, 70, 120, 800, 80, TABLEACTIVE_COLOR, m_stGridTitle_M),
	};		

	
	// 메인 다이얼로그(업무보고 조회&입력)
	//---------------------------------------------------------------
	DlgObject	DlgRes_Work[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_TEXT(0, 0, 998, BTNHT_1, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, WHITE, TRANSPARENT, TXT_BORDER, ""),
		DLG_ICON(0, BTNY_2, ICON_TITLE, ""),
				
		//타이틀
		DLG_TEXT(TX, TY, STWD, STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "업무보고 조회"),
		
		//조회
		DLG_BUTTON(0,          STARTY+845, 333, 54, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_WRK_PREV, "이전화면"),
		DLG_BUTTON(STARTX+333, STARTY+845, 333, 54, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_WRK_PHOTO, "사진촬영"),
		DLG_BUTTON(STARTX+666, STARTY+845, 334, 54, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_WRK_CHANGE, "수 정"),
		
		DLG_TEXT(0,             STARTY+65, 250, 55, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTINCTRLBK, TXT_DATA47, "계약번호"),
		DLG_TEXT(STARTX+250,    STARTY+65, 750, 55, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA48, ""),
		DLG_BUTTON(0,          STARTY+120, 250,100, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_WRK_ADDR, "지번\n주소"),
		DLG_TEXT(STARTX+250,   STARTY+120, 750,100, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA1, ""),
		DLG_TEXT(0,     	   STARTY+220, 250, 50, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK,   TXT_DATA2, "성명"),
		DLG_TEXT(STARTX+250,   STARTY+220, 750, 50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA3, ""),
		DLG_TEXT(0,     	   STARTY+270, 250, 50, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK,   TXT_DATA4, "상호"),
		DLG_TEXT(STARTX+250,   STARTY+270, 750, 50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA5, ""),
		
		DLG_TEXT(0,     	   STARTY+320, 1000, 40, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, GRIDTTLBK,  TXT_DATA6, "의뢰내용"),
		DLG_TEXT(0,            STARTY+360, 150, 50, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK,   TXT_DATA7, "일자"),
		DLG_TEXT(STARTX+150,   STARTY+360, 850, 50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA8, ""),
		//DLG_BUTTON(STARTX+795, STARTY+360, 198, 50, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_WRK_CALENDAR, "▼"),

		//C20447 공통코드 조회
		DLG_TEXT(0,            STARTY+410, 150, 50, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK,   TXT_DATA9, "구분"),
		//DLG_TEXT(STARTX+145,   STARTY+410, 650, 50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA10, ""),
		//DLG_BUTTON(STARTX+795, STARTY+410, 198, 50, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_WRK_GUBUN, "▼"),
		DLG_COMBO(STARTX+150,  STARTY+410, 850, 250, 198, 50, TXTFRCOLOR, EDTCTRLBK, CALL_FUNC, "", CMB_GUBUN, 30),

		DLG_TEXT(0,     	   STARTY+460, 150, 50, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK,   TXT_DATA11, "제목"),
		DLG_BUTTON(STARTX+150, STARTY+460, 850, 50, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_WRITE1,  ""),	
		DLG_TEXT (STARTX+150,  STARTY+460, 850, 50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, TXT_DATA12,  ""),	//입력 창 부분

		DLG_TEXT(0,            STARTY+510, 150, 100, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA13, "내용"),
		DLG_BUTTON(STARTX+150, STARTY+510, 850, 100, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_WRITE2,  ""),	
		DLG_TEXT (STARTX+150,  STARTY+510, 850, 100, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, TXT_DATA14,  ""),	//입력 창 부분

		DLG_TEXT(0,     	   STARTY+610, 1000, 40, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, GRIDTTLBK, TXT_DATA15, "사진"),
		DLG_BUTTON(0,          STARTY+650, 1000, 195, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_PHOTOVIEW,  ""),	
		
		//DLG_COMBO(0,           STARTY+70, 350, 250, 120, 50, TXTFRCOLOR, EDTCTRLBK, CALL_FUNC, "", CMB_DATA1, 32),
	};	
	
	// PDA 다이얼로그(업무보고 조회&입력)
	//---------------------------------------------------------------
	DlgObject	DlgRes_Work_P[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_ICON(P_TTLTX, 0, ICON_TITLE, ""),
				
		//타이틀
		DLG_TEXT(P_TX, P_TY, P_STWD, P_STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, WHITE, TRANSPARENT, TXT_TITLE, ""),
		DLG_BUTTON(P_BTNX, P_BTNY, P_BTNWD, P_BTNHD, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", GID_PREV, ""),
	};		

	// 메인 다이얼로그(기물번호)
	//---------------------------------------------------------------
	DlgObject	DlgRes_Mtr[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_TEXT(0, 0, 998, BTNHT_1, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, WHITE, TRANSPARENT, TXT_BORDER, ""),
		DLG_ICON(0, BTNY_2, ICON_TITLE, ""),
			
		//타이틀
		DLG_TEXT(TX, TY, STWD, STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "기물번호로 찾기"),

		//DLG_BUTTON(0,           STARTY+70, 500, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_MTR_TAB1, "기물번호 입력"),
		//DLG_BUTTON(STARTX+495,  STARTY+70, 498, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_MTR_TAB2, "바코드 인식"),
		
		DLG_BUTTON(STARTX+750, STARTY+65, 250, 65, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_MTR_SEARCH, "조 회"),
		DLG_BUTTON(STARTX+750, STARTY+65, 250, 65, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_MTR_BARCODE, "바코드"),
		DLG_BUTTON(0,          STARTY+350, 500, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_MTR_CANCEL, "취 소"),
		DLG_BUTTON(STARTX+500, STARTY+350, 500, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_MTR_OK, "확 인"),

		DLG_TEXT(0,     	   STARTY+65, 250, 65, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA14, "기물번호"),
		DLG_EDIT(STARTX+250,   STARTY+65, 500, 65, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA2, 20,  ""),
		
		//DLG_TEXT(0,            STARTY+190, 250, 200, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTCTRLBK, TXT_DATA15, "주소"),
		DLG_BUTTON(0,          STARTY+130, 250, 200, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_MTR_ADDR, "도로명\n주소"),
		DLG_TEXT(STARTX+250,   STARTY+130, 750, 200, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA16, ""),
	};	
	
	// PDA 다이얼로그(기물번호)
	//---------------------------------------------------------------
	DlgObject	DlgRes_Mtr_P[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_ICON(P_TTLTX, 0, ICON_TITLE, ""),
				
		//타이틀
		DLG_TEXT(P_TX, P_TY, P_STWD, P_STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, WHITE, TRANSPARENT, TXT_TITLE, "기물번호로 찾기"),
		DLG_BUTTON(P_BTNX, P_BTNY, P_BTNWD, P_BTNHD, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", GID_PREV, ""),
	};		

	// 메인 다이얼로그
	//---------------------------------------------------------------
	DlgObject	DlgRes_View[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_ICON(POPTX, POPTY, ICON_TITLE, ""),
		DLG_TEXT(POPTX, POPTY, POPSTWD, POPSTHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "사진 보기"),
		DLG_BUTTON(BTNX_7, P_BTNY, BTNWD_2, BTNHT_2, 0, 0, EDITSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_OK, ""),
		
		DLG_BUTTON( STARTX+45,   STARTY, 900, 500, 0, 0, BUTSTY_BOLD|BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_LARGEPHOTO,  ""),
		
		DLG_BUTTON( STARTX+645,   STARTY+520, 300, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_OK2,  "닫기"),
	};	


	// PDA 메인 다이얼로그
	//---------------------------------------------------------------
	DlgObject	DlgRes_View_P[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, ""),
		DLG_ICON(P_TTLTX, 0, ICON_TITLE, ""),
		DLG_TEXT(POPTX, POPTY, POPSTWD, POPSTHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "사진 보기"),
		DLG_BUTTON(P_BTNX, P_BTNY, P_BTNWD, P_BTNHD, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_OK, ""),

		DLG_BUTTON( STARTX+45,   STARTY, 900, 500, 0, 0, BUTSTY_BOLD|BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_LARGEPHOTO,  ""),
		
		DLG_BUTTON( STARTX+645,   STARTY+520, 300, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_OK2,  "닫기"),
	};	

	// 메인 다이얼로그(주소검색-단독)
	//---------------------------------------------------------------
	DlgObject	DlgRes_JibunSearch[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_TEXT(0, 0, 998, BTNHT_1, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, WHITE, TRANSPARENT, TXT_BORDER, ""),
		DLG_ICON(0, BTNY_2, ICON_TITLE, ""),		
		//타이틀
		DLG_TEXT(TX, TY, STWD, STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "주소로 찾기"),

		DLG_BUTTON(0,           STARTY+65, 333, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_JIBUN, "지 번"),
		DLG_BUTTON(STARTX+333,  STARTY+65, 333, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ROADNM, "도로명"),
		DLG_BUTTON(STARTX+666,  STARTY+65, 334, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TOGETHER, "공 동"),
		DLG_BUTTON(0,          STARTY+245, 500, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CANCEL, "취 소"),
		DLG_BUTTON(STARTX+500, STARTY+245, 500, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ADDRSEARCH, "검 색"),
		DLG_BUTTON(STARTX+500, STARTY+832, 250, 67, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ADDRPREV, "▲"),
		DLG_BUTTON(STARTX+750, STARTY+832, 250, 67, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ADDRNEXT, "▼"),

		DLG_TEXT(0, 	     STARTY+125, 200, 60, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA50, "구"),
		DLG_TEXT(STARTX+520, STARTY+125, 130, 60, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA51, "동"),
		DLG_TEXT(0, 	     STARTY+185, 200, 60, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA52, "번지"),
		DLG_EDIT(STARTX+200, STARTY+185, 320, 60, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA3, 10,  ""),
		DLG_TEXT(STARTX+520, STARTY+185, 130, 60, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA53, "호수"),
		DLG_EDIT(STARTX+650, STARTY+185, 350, 60, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA4, 10,  ""),

		DLG_TEXT(0,          STARTY+832, 300, 67, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA49, m_szCnt_page_A),
	
		DLG_COMBO (STARTX+200, STARTY+125, 320, 200, 120, 60, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA2, 30),
		DLG_COMBO (STARTX+650, STARTY+125, 350, 200, 120, 60, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA3, 30),

		// 리스트
		DLG_TABLE(GRID_X_A, GRID_Y_A, ROW_A, COL_A, 0, GRID_H_A, 1, GRID_H_A, SEL_ROW, MAXCHAR_A, m_stGridTitle_A, ID_ADDRLIST, m_szTableBuf_A),
	};	
	
	// PDA 다이얼로그(주소검색-단독)
	//---------------------------------------------------------------
	DlgObject	DlgRes_JibunSearch_P[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_ICON(P_TTLTX, 0, ICON_TITLE, ""),		
		//타이틀
		DLG_TEXT(P_TX, P_TY, P_STWD, P_STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, WHITE, TRANSPARENT, TXT_TITLE, "주소로 찾기"),
		DLG_BUTTON(P_BTNX, P_BTNY, P_BTNWD, P_BTNHD, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", GID_PREV, ""),
	};		

	// 메인 다이얼로그(주소검색-공동)
	//---------------------------------------------------------------
	DlgObject	DlgRes_TgtSearch[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_TEXT(0, 0, 998, BTNHT_1, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, WHITE, TRANSPARENT, TXT_BORDER, ""),
		DLG_ICON(0, BTNY_2, ICON_TITLE, ""),		
		//타이틀
		DLG_TEXT(TX, TY, STWD, STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "주소로 찾기"),

		DLG_BUTTON(0,           STARTY+65, 333, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_JIBUN, "지 번"),
		DLG_BUTTON(STARTX+333,  STARTY+65, 333, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ROADNM, "도로명"),
		DLG_BUTTON(STARTX+666,  STARTY+65, 333, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TOGETHER, "공 동"),
		DLG_BUTTON(0,          STARTY+245, 500, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CANCEL, "취 소"),
		DLG_BUTTON(STARTX+500, STARTY+245, 500, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ADDRSEARCH, "검 색"),
		DLG_BUTTON(STARTX+500, STARTY+832, 250, 67, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ADDRPREV, "▲"),
		DLG_BUTTON(STARTX+750, STARTY+832, 250, 67, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ADDRNEXT, "▼"),

		DLG_TEXT(0,          STARTY+125, 300, 60, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA54, "공동주택명"),
		DLG_TEXT(0, 	     STARTY+185, 200, 60, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA55, "건물명"),
		DLG_TEXT(STARTX+670, STARTY+185, 130, 60, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA56, "호"),
		DLG_EDIT(STARTX+800, STARTY+185, 200, 60, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA5, 10,  ""),

		DLG_TEXT(0,          STARTY+832, 300, 67, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA49, m_szCnt_page_A),
	
		DLG_COMBO (STARTX+300, STARTY+125, 700, 200, 120, 60, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA4, 30),
		DLG_COMBO (STARTX+200, STARTY+185, 470, 200, 120, 60, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA5, 30),

		// 리스트
		DLG_TABLE(GRID_X_A, GRID_Y_A, ROW_A, COL_A, 0, GRID_H_A, 1, GRID_H_A, SEL_ROW, MAXCHAR_A, m_stGridTitle_A, ID_ADDRLIST, m_szTableBuf_A),
	};	
	
	// PDA 다이얼로그(주소검색-공동)
	//---------------------------------------------------------------
	DlgObject	DlgRes_TgtSearch_P[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_ICON(P_TTLTX, 0, ICON_TITLE, ""),		
		//타이틀
		DLG_TEXT(P_TX, P_TY, P_STWD, P_STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, WHITE, TRANSPARENT, TXT_TITLE, "주소로 찾기"),
		DLG_BUTTON(P_BTNX, P_BTNY, P_BTNWD, P_BTNHD, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", GID_PREV, ""),
	};		

	// 메인 다이얼로그(주소검색-도로명)
	//---------------------------------------------------------------
	DlgObject	DlgRes_NewSearch[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_TEXT(0, 0, 998, BTNHT_1, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, WHITE, TRANSPARENT, TXT_BORDER, ""),
		DLG_ICON(0, BTNY_2, ICON_TITLE, ""),		
		//타이틀
		DLG_TEXT(TX, TY, STWD, STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "주소로 찾기"),

		DLG_BUTTON(0,           STARTY+65, 333, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_JIBUN, "지 번"),
		DLG_BUTTON(STARTX+333,  STARTY+65, 333, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ROADNM, "도로명"),
		DLG_BUTTON(STARTX+666,  STARTY+65, 333, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_TOGETHER, "공 동"),
		DLG_BUTTON(0,          STARTY+245, 500, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CANCEL, "취 소"),
		DLG_BUTTON(STARTX+500, STARTY+245, 500, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ADDRSEARCH, "검 색"),
		DLG_BUTTON(STARTX+500, STARTY+832, 250, 67, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ADDRPREV, "▲"),
		DLG_BUTTON(STARTX+750, STARTY+832, 250, 67, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ADDRNEXT, "▼"),

		DLG_TEXT(0, 	     STARTY+125, 130, 60, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA57, "구"),
		DLG_TEXT(STARTX+450, STARTY+125, 200, 60, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA58, "도로명"),
		DLG_TEXT(0, 	     STARTY+185, 200, 60, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA59, "본번"),
		DLG_EDIT(STARTX+200, STARTY+185, 300, 60, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA6, 10,  ""),
		DLG_TEXT(STARTX+500, STARTY+185, 200, 60, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA60, "부번"),
		DLG_EDIT(STARTX+700, STARTY+185, 300, 60, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA7, 10,  ""),

		DLG_TEXT(0,          STARTY+832, 300, 67, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA49, m_szCnt_page_A),
	
		DLG_COMBO (STARTX+130, STARTY+125, 320, 200, 120, 60, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA6, 10),
		DLG_COMBO (STARTX+650, STARTY+125, 350, 200, 120, 60, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA7, 10),

		// 리스트
		DLG_TABLE(GRID_X_A, GRID_Y_A, ROW_A, COL_A, 0, GRID_H_A, 1, GRID_H_A, SEL_ROW, MAXCHAR_A, m_stGridTitle_A, ID_ADDRLIST, m_szTableBuf_A),
	};	
	
	// PDA 다이얼로그(주소검색-도로명)
	//---------------------------------------------------------------
	DlgObject	DlgRes_NewSearch_P[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_ICON(P_TTLTX, 0, ICON_TITLE, ""),		
		//타이틀
		DLG_TEXT(P_TX, P_TY, P_STWD, P_STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, WHITE, TRANSPARENT, TXT_TITLE, "주소로 찾기"),
		DLG_BUTTON(P_BTNX, P_BTNY, P_BTNWD, P_BTNHD, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", GID_PREV, ""),
	};		


	//----------------------------------------------------------------------
	bool	main (quad MsgType, quad wParam, quad lParam)
	{
		EVENT_HANDLER (MsgType, wParam, lParam);

		if (MsgType == MSG_EXTCTRL && wParam == EXTCTRL_LIST)
		{
			OnList(lParam);
		}

		return TRUE;
	}
	
//--------------------------------------------------------------------------------------------------------
	void OnList(quad lParam)
	{
		long i;
		char szTmp[200];
		
		i = lParam;
//PRINT(">>>>>> lParam : %d , i : %d",lParam,i,0);
		if( i > -1 )
		{
			g_Sql_SaveSeq( "SELECT ROWID FROM C6101_WORK_REPORT", SREACH_FILE);

			g_nActIndex = lParam;
			g_lindex = g_SREACHFILE_GetSeq(SREACH_FILE, g_nActIndex);
			
			Mem_Set((byte*)m_szUse_cont_num, 0x00, sizeof(m_szUse_cont_num));
			SPRINT(szTmp, "SELECT USE_CONT_NUM FROM C6101_WORK_REPORT A WHERE ROWID = '%d'", g_lindex, 0, 0);
			g_Sql_RetStr(szTmp, 20, m_szUse_cont_num);
			
			m_nSelectedIndex = -1;
			SetData();
			ON_EXIT();
			OnInit(INIT_WORK);
		}
		
		return;
	}
	
//┌─────────────────────────────────────┐
//│ 				   『	OnInit Function  』  				              │
//└─────────────────────────────────────┘
	void	OnInit(char bFirst)
	{
		m_bFirst = bFirst;

		switch (bFirst)
		{
			case INIT_MAIN:
				switch (theDevInfo.m_nType)
				{
					case FAMILY_PDA:
						CREATE_DIALOG_OBJECT (DlgRes_P, SIZEOF(DlgRes_P));
						break;
					default:
						
						CREATE_DIALOG_OBJECT (DlgRes, SIZEOF(DlgRes));
						CREATE_GLOBAL_BUTTON (SysButRes_MAIN);
						break;		
				}

				SetBtnImg();	
				SetStyle();
				
				Recv_List();
				//ListDraw();
				break;
			case INIT_INPUT:
				switch (theDevInfo.m_nType)
				{
					case FAMILY_PDA:
						CREATE_DIALOG_OBJECT (DlgRes_Input_P, SIZEOF(DlgRes_Input_P));
						break;
						
					default:
						CREATE_DIALOG_OBJECT (DlgRes_Input, SIZEOF(DlgRes_Input));
						CREATE_GLOBAL_BUTTON (SysButRes_MAIN);
						break;		
				}
				//m_lLarge_View_Flag = 1 INIT_WORK , m_lLarge_View_Flag = 2 INIT_INPUT
				m_lLarge_View_Flag = 2;

				SetBtnImg();	
				SetStyle();
				SetCombo();
				InputDraw();
				break;

			case INIT_WORK:
				switch (theDevInfo.m_nType)
				{
					case FAMILY_PDA:
						CREATE_DIALOG_OBJECT (DlgRes_Work_P, SIZEOF(DlgRes_Work_P));
						break;
						
					default:
						CREATE_DIALOG_OBJECT (DlgRes_Work, SIZEOF(DlgRes_Work));
						CREATE_GLOBAL_BUTTON (SysButRes_MAIN);
						break;		
				}
				//m_lLarge_View_Flag = 1 INIT_WORK , m_lLarge_View_Flag = 2 INIT_INPUT
				m_lLarge_View_Flag = 1;

				SetBtnImg();	
				SetStyle();
				SetCombo();
				ViewDraw();
				break;
				
			case INIT_MTRSEARCH:
				switch (theDevInfo.m_nType)
				{
					case FAMILY_PDA:
						CREATE_DIALOG_OBJECT (DlgRes_Mtr_P, SIZEOF(DlgRes_Mtr_P));
						break;
						
					default:
						CREATE_GLOBAL_BUTTON (SysButRes_MAIN);
						CREATE_DIALOG_OBJECT (DlgRes_Mtr, SIZEOF(DlgRes_Mtr));
						break;		
				}

				SetBtnImg();	
				SetStyle();
				MtrDraw();
				break;
			case INIT_PHOTOVIEW:
				
				switch (theDevInfo.m_nType)
				{
					case FAMILY_PDA:
						CREATE_DIALOG_OBJECT (DlgRes_View_P, SIZEOF(DlgRes_View_P));
						break;
					default:
						CREATE_DIALOG_OBJECT (DlgRes_View, SIZEOF(DlgRes_View));
						break;		
				}
				SetBtnImg();
				ON_DRAW();
				
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_LARGEPHOTO), FALSE );
				MessageBoxEx(MESSAGE, "사진을 확대중입니다.");

				JpgToPng();
				ON_DRAW();
				break;
			case INIT_JIBUNSEARCH:
				switch (theDevInfo.m_nType)
				{
					case FAMILY_PDA:
						CREATE_DIALOG_OBJECT (DlgRes_JibunSearch_P, SIZEOF(DlgRes_JibunSearch_P));
						break;
					default:
						CREATE_GLOBAL_BUTTON (SysButRes_MAIN);
						CREATE_DIALOG_OBJECT (DlgRes_JibunSearch, SIZEOF(DlgRes_JibunSearch));
						break;		
				}
				//테이블 클리어
				Mem_Set( (byte*)m_szCnt_page_A, 0x00, sizeof(m_szCnt_page_A) );
				Mem_Set((byte*)m_szTableBuf_A+(COL_A*MAXCHAR_A), 0x00, sizeof(m_szTableBuf_A)-(COL_A*MAXCHAR_A));
				
				SetBtnImg();	
				SetStyle();
				SetCombo();
				AddrSrchDraw();
				break;
			case INIT_TGTSEARCH:
				switch (theDevInfo.m_nType)
				{
					case FAMILY_PDA:
						CREATE_DIALOG_OBJECT (DlgRes_TgtSearch_P, SIZEOF(DlgRes_TgtSearch_P));
						break;
					default:
						CREATE_GLOBAL_BUTTON (SysButRes_MAIN);
						CREATE_DIALOG_OBJECT (DlgRes_TgtSearch, SIZEOF(DlgRes_TgtSearch));
						break;		
				}

				SetBtnImg();	
				SetStyle();
				SetCombo();
				AddrSrchDraw();
				break;
			case INIT_NEWSEARCH:
				switch (theDevInfo.m_nType)
				{
					case FAMILY_PDA:
						CREATE_DIALOG_OBJECT (DlgRes_NewSearch_P, SIZEOF(DlgRes_NewSearch_P));
						break;
					default:
						CREATE_GLOBAL_BUTTON (SysButRes_MAIN);
						CREATE_DIALOG_OBJECT (DlgRes_NewSearch, SIZEOF(DlgRes_NewSearch));
						break;		
				}

				SetBtnImg();	
				SetStyle();
				SetCombo();
				AddrSrchDraw();
				break;
		}
	}
	
	//------------------------------------------------------------------
	void	OnButton(long ID)
	{	
		long d = 0, k = 0;
		char szTmp[50];
		char szDate[50];
	
		switch(ID)
		{
			case BID_QUICK_ADDR:
				Grid_QuickList();
				break;
			case BID_TAB1:
				if( m_bFirst == INIT_INPUT )
				{
					m_lWrkFlag = 0;
					Mem_Set((byte*)&m_stWrkData, 0x00, sizeof(m_stWrkData));
					ON_EXIT();
					OnInit(INIT_MAIN);
				}
				break;
			case BID_TAB2:				
				if( m_bFirst == INIT_MAIN )
				{
					m_lWrkFlag = 1;
					Mem_Set((byte*)&m_stWrkData, 0x00, sizeof(m_stWrkData));
					ON_EXIT();
					OnInit(INIT_INPUT);
				}
				break;
			case BID_ADDR:
				if( g_nAddrFlag == 1 )
				{
					g_nAddrFlag = 0;
				}
				else
				{
					g_nAddrFlag = 1;
				}
				ListDraw();
				break;
			case GID_HOME:
				if( MessageBoxEx (CONFIRM_YESNO, "메인 메뉴로 나가시겠습니까?")  == MB_OK)
				{
					g_Sql_DirectExecute("DELETE FROM C6101_WORK_REPORT");
					g_DirFS_Clear(PHOTO_WORK, "*");
					Card_Move("MENU");
				}
				break;
			case GID_MENU:
				if( MessageBoxEx (CONFIRM_YESNO, "업무 메뉴로 나가시겠습니까?")  == MB_OK)
				{
					g_Sql_DirectExecute("DELETE FROM C6101_WORK_REPORT");
					g_DirFS_Clear(PHOTO_WORK, "*");
					Card_Move("C6101_MENU");
				}
				break;
			case GID_KEYBOARD:
				g_SHOW_SIP();
				break;
			case GID_SCREEN:
				g_MOVE_DLG(400);
				break;
			case GID_CMMNWK:
				break;				
			case GID_PREV:
				if( m_bFirst == INIT_MAIN || m_bFirst == INIT_INPUT )
				{
					g_Sql_DirectExecute("DELETE FROM C6101_WORK_REPORT");
					g_DirFS_Clear(PHOTO_WORK, "*");
					Card_Move("C6101_MENU");
				}
				else if( m_bFirst == INIT_MTRSEARCH || m_bFirst == INIT_JIBUNSEARCH || m_bFirst == INIT_TGTSEARCH || m_bFirst == INIT_NEWSEARCH )
				{
					Mem_Set((byte*)&m_stWrkData, 0x00, sizeof(m_stWrkData));
					ON_EXIT();
					OnInit(INIT_INPUT);
				}
				else if( m_bFirst == INIT_WORK && m_lWrkFlag == 1 )
				{
					ON_EXIT();
					OnInit(INIT_INPUT);
				}
				else 
				{
					ON_EXIT();
					OnInit(INIT_MAIN);
				}
				break;	
			case GID_VMEXIT:
				g_Exit();
				break;
//업무보고 조회&입력
			case BID_WRK_SEARCH:
				Rcv_Info();
				break;
			case BID_WRK_ADDR:
				if( g_nAddrFlag == 1 )
				{
					g_nAddrFlag = 0;
				}
				else
				{
					g_nAddrFlag = 1;
				}
				AddrDraw();
				break;
			case BID_PHOTOVIEW:
				if( m_bFirst == INIT_WORK || m_bFirst == INIT_INPUT )
				{
					if( FFS_Exist(m_stWrkData.PHOTO_SAVE_JPG_PATH) )
					{
						SaveInput();
						ON_EXIT();
						OnInit(INIT_PHOTOVIEW);
					}
				}
				break;
			case BID_WRK_PREV:
				ON_EXIT();
				OnInit(INIT_MAIN);
				break;
			case BID_WRK_OK:
				ON_EXIT();
				OnInit(INIT_MAIN);
				break;
			case BID_WRK_PHOTO:
				Shoto_Photo();
				break;
			case BID_WRK_CHANGE:
			case BID_WRK_SAVE:
				if( Validate(ID) > 0 )
				{
					Snd_Change();
				}
				break;
			case BID_WRK_CALENDAR:
				Load_Calendar_Card();
				d = CalendarDialog(&k);
				Unload_Calendar_Card();
				if(d == 0)
				{
					break;
				}
				else
				{
					Str_ItoA(d, szTmp, 10);
					g_Str_DateType(szDate, szTmp);
					EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA8), szDate );
				}
				break;
			case BID_WRITE1:
				g_EditCtrl_ShowEditInput( Get_hDlgCtrlByID(TXT_DATA12), EditCtrl_GetStr(Get_hDlgCtrlByID(TXT_DATA12)) );
				break;
			case BID_WRITE2:
				g_EditCtrl_ShowEditInput( Get_hDlgCtrlByID(TXT_DATA14), EditCtrl_GetStr(Get_hDlgCtrlByID(TXT_DATA14)) );
				break;

//계량기번호 조회
			//case BID_MTR_TAB1:
			//	m_lMtrSearchFlag = 0;
			//	MtrDraw();
			//	break;
			//case BID_MTR_TAB2:
			//	m_lMtrSearchFlag = 1;
			//	MtrDraw();
			//	break;
			case BID_MTR_ADDR:
				if( g_nAddrFlag == 1 )
				{
					g_nAddrFlag = 0;
				}
				else
				{
					g_nAddrFlag = 1;
				}
				AddrDraw();
				break;
			case BID_MTR_SEARCH:
				if( Str_Len(EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA2))) < 1 )
				{
					MessageBoxEx (CONFIRM_OK, "기물번호를 입력해주세요.");
					break;
				}
				Rcv_Info();
				break;
			case BID_MTR_BARCODE:
				Barcode();
				break;
			case BID_MTR_CANCEL:
				Mem_Set((byte*)&m_stWrkData, 0x00, sizeof(m_stWrkData));
				ON_EXIT();
				OnInit(INIT_INPUT);
				break;
			case BID_MTR_OK:
				ON_EXIT();
				OnInit(INIT_INPUT);
				break;
//사진 확대보기
			case BID_OK:
			case BID_OK2:
				//m_lLarge_View_Flag = 1 INIT_WORK , m_lLarge_View_Flag = 2 INIT_INPUT
				if(	m_lLarge_View_Flag == 1 )
				{
					ON_EXIT();
					OnInit(INIT_WORK);
				}
				else
				{
					ON_EXIT();
					OnInit(INIT_INPUT);
				}
				break;
//주소검색
			case BID_JIBUN:
				if( m_bFirst == INIT_TGTSEARCH || m_bFirst == INIT_NEWSEARCH )
				{
					ON_EXIT();
					OnInit(INIT_JIBUNSEARCH);
				}
				break;
			case BID_ROADNM:
				if( m_bFirst == INIT_JIBUNSEARCH || m_bFirst == INIT_TGTSEARCH )
				{
					ON_EXIT();
					OnInit(INIT_NEWSEARCH);
				}
				break;
			case BID_TOGETHER:
				if( m_bFirst == INIT_JIBUNSEARCH || m_bFirst == INIT_NEWSEARCH )
				{
					ON_EXIT();
					OnInit(INIT_TGTSEARCH);
				}
				break;
			case BID_ADDRSEARCH:
				Search_Addr();
				break;
			case BID_CANCEL:
				ON_EXIT();
				OnInit(INIT_INPUT);
				break;
			case BID_ADDRPREV:
				m_lpage_A--;
				if(m_lpage_A < 0)
				{
					m_lpage_A = 0;
					if(m_lTotpage_A > 0)
					{
						if( m_nActIndex_A < 0)
						{
							m_nActIndex_A = 0;
						}
					
						DlgTbl_SetActive(ID_ADDRLIST , m_nActIndex_A+1 );
						DlgTbl_SetRowColor(ID_ADDRLIST, m_nActIndex_A+1, TABLEACTIVE_COLOR);
					}
					break;
				}
				m_nActIndex_A = 0;
				AddrSrchDraw();
				break;
			case BID_ADDRNEXT:
				m_lpage_A++ ;
				if( m_lpage_A > m_lTotpage_A-1 )
				{
					m_lpage_A = m_lTotpage_A-1;
					if(m_lpage_A < 0)
					{
						m_lpage_A = 0;
					}
					if(m_lTotpage_A > 0)
					{
						if( m_nActIndex_A < 0 )
						{
							m_nActIndex_A = 0;
						}
					
						DlgTbl_SetActive(ID_ADDRLIST , m_nActIndex_A+1 );
						DlgTbl_SetRowColor(ID_ADDRLIST, m_nActIndex_A+1, TABLEACTIVE_COLOR);
					}
					break;
				}
				m_nActIndex_A = 0;
				AddrSrchDraw();
				break;

		}
	}		

	//──────────────────────────────────────────────
	void	OnSelect(long Index)
	{
		long index = -1;

/*
		if( m_bFirst == INIT_MAIN )
		{
			//현재 TBL이 선택되었는지를 확인
			if (DlgTbl_IsSelect(ID_MAINLIST))
			{
				// 현재 선택된 인덱스
				index = DlgTbl_GetActiveRow(ID_MAINLIST);
				if ( index-1 == m_nActIndex_M )
				{
					ON_EXIT();
					OnInit(INIT_WORK);
				}
				else
				{
					m_nActIndex_M = index - 1;
				}
			}
		}
		else if( m_bFirst == INIT_INPUT )
		{
			//현재 TBL이 선택되었는지를 확인
			if (DlgTbl_IsSelect(ID_INPUTLIST))
			{
				// 현재 선택된 인덱스
				index = DlgTbl_GetActiveRow(ID_INPUTLIST);
				if ( index-1 == m_nActIndex_I )
				{
					ON_EXIT();
					OnInit(INIT_WORK);
				}
				else
				{
					m_nActIndex_I = index - 1;
				}
			}
		}
		else if( m_bFirst == INIT_WORK )
		{
			if( Str_Cmp(EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA1)), "계약번호" ) == 0 )
			{
				return;
			}
			else if( Str_Cmp(EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA1)), "기물번호" ) == 0 )
			{
				ON_EXIT();
				OnInit(INIT_MTRSEARCH);
				return;
			}
		}
		else if( m_bFirst == INIT_MTRSEARCH )
		{
		}
		*/

		if( m_bFirst == INIT_MAIN )
		{
		/*
			//현재 TBL이 선택되었는지를 확인
			if (DlgTbl_IsSelect(ID_MAINLIST))
			{
				// 현재 선택된 인덱스
				index = DlgTbl_GetActiveRow(ID_MAINLIST);
				if ( index-1 == m_nActIndex_M )
				{
					ON_EXIT();
					OnInit(INIT_WORK);
				}
				else
				{
					m_nActIndex_M = index - 1;
				}
			}
			*/
			
			if (Index > 0)
			{
				if (Index == m_nSelectedIndex)
				{
					//PRINT("%d 항목 선택됨.",m_nSelectedIndex,0,0);
					char* ptr = GridCtrl_GetCellStr(m_hGrid, 1, m_nSelectedIndex);
					if (!MATCH("", ptr))
					{
						g_nScrollIndex = GridCtrl_GetScrollY(m_hGrid);
						g_nActIndex = m_lpage_M*ROW_M + m_nSelectedIndex-1;
						m_lIdxFlag = 0;
						//m_nSelectedIndex = -1;
						
						SetData();
						ON_EXIT();
						OnInit(INIT_WORK);
						return;
					}
				}
				
				m_nSelectedIndex = Index;
			
				Mem_Set( (byte*)m_szUse_cont_num, 0x00, sizeof(m_szUse_cont_num) );
				Str_Cpy(m_szUse_cont_num, GridCtrl_GetCellStr(m_hGrid, 2, m_nSelectedIndex));
				//PRINT("m_szUse_cont_num : %s",m_szUse_cont_num,0,0);
				//PRINT("[%d] = %s",m_nSelectedIndex,GridCtrl_GetCellStr(m_hGrid, 1, m_nSelectedIndex),0);
			}			
		}
		else if( m_bFirst == INIT_INPUT )
		{
			if( Str_Cmp(EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA1)), "계약번호" ) == 0 )
			{
				return;
			}
			else if( Str_Cmp(EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA1)), "주소" ) == 0 )
			{
				m_lAddrFlag = 0;
				ON_EXIT();
				OnInit(INIT_JIBUNSEARCH);
				return;
			}
			else if( Str_Cmp(EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA1)), "기물번호" ) == 0 )
			{
				m_lMtrSearchFlag = 0;
				ON_EXIT();
				OnInit(INIT_MTRSEARCH);
				return;
			}
			else if( Str_Cmp(EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA1)), "바코드" ) == 0 )
			{
				m_lMtrSearchFlag = 1;
				ON_EXIT();
				OnInit(INIT_MTRSEARCH);
				return;
			}

		}
		else if( m_bFirst == INIT_MTRSEARCH )
		{
//			if( Str_Cmp(EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA1)), "계약번호" ) == 0 )
//			{
//				ON_EXIT();
//				OnInit(INIT_INPUT);
//				return;
//			}
//			else if( Str_Cmp(EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA1)), "주소" ) == 0 )
//			{
//				ON_EXIT();
//				OnInit(INIT_JIBUNSEARCH);
//				return;
//			}
//			else if( Str_Cmp(EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA1)), "기물번호" ) == 0 )
//			{
//				if( m_lMtrSearchFlag != 0 )
//				{
//					MtrDraw();
//				}
//				return;
//			}
//			else if( Str_Cmp(EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA1)), "바코드" ) == 0 )
//			{
//				if( m_lMtrSearchFlag != 1 )
//				{
//					MtrDraw();
//				}
//				return;
//			}
		}
		else if( m_bFirst == INIT_JIBUNSEARCH || m_bFirst == INIT_TGTSEARCH || m_bFirst == INIT_NEWSEARCH )
		{
			//현재 TBL이 선택되었는지를 확인
			if (DlgTbl_IsSelect(ID_ADDRLIST))
			{
				// 현재 선택된 인덱스
				index = DlgTbl_GetActiveRow(ID_ADDRLIST);
				// 선택 인덱스와 기존 인덱스가 동일 할 경우
				if ( index-1 == m_nActIndex_A )
				{
					//ON_EXIT();
					//OnInit(INIT_INPUT);
					Rcv_Info();
					return;
				}
				else
				{
					m_nActIndex_A = index - 1;//선택된 INDEX 저장
				
					//처음 선택된 대상의 주소를 상단에 표시
					Mem_Set( (byte*)m_szUse_cont_num, 0x00, sizeof(m_szUse_cont_num) );
					Str_Cpy( m_szUse_cont_num, DlgTbl_GetStr( ID_ADDRLIST, m_nActIndex_A, 2));
				}
			}

//			if( Str_Cmp(EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA1)), "계약번호" ) == 0 )
//			{
//				ON_EXIT();
//				OnInit(INIT_INPUT);
//				return;
//			}
//			else if( Str_Cmp(EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA1)), "주소" ) == 0 )
//			{
//				return;
//			}
//			else if( Str_Cmp(EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA1)), "기물번호" ) == 0 )
//			{
//				m_lMtrSearchFlag = 0;
//				ON_EXIT();
//				OnInit(INIT_MTRSEARCH);
//				return;
//			}
//			else if( Str_Cmp(EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA1)), "바코드" ) == 0 )
//			{
//				m_lMtrSearchFlag = 1;
//				ON_EXIT();
//				OnInit(INIT_MTRSEARCH);
//				return;
//			}
		}


		ON_DRAW();
		return;
	}

//----------------------------------------------------------------------------------------------
	void	OnUart(long nEvent, long nData)
	{
		char szfilenm[256];
		
		if (nEvent == UART_CAMERA)
		{
			if(nData == 1 )
			{
				Mem_Set((byte*)szfilenm, 0x00, sizeof(szfilenm));
				SPRINT (szfilenm, "Camera/%s",  m_szfilenm,0, 0);
				if( FFS_Exist(szfilenm)  )
				{
					Mem_Set((byte*)m_stWrkData.PHOTO_SAVE_JPG_PATH, 0x00, sizeof(m_stWrkData.PHOTO_SAVE_JPG_PATH));
					SPRINT (m_stWrkData.PHOTO_SAVE_JPG_PATH, "%s/%s", PHOTO_WORK,  m_szfilenm, 0);
					
					//CONVERT_WD : 384, CONVERT_HT : 512 / FileMgr.h에 정의되어있음
					ConvertImage(JPG, szfilenm, CONVERT_WD, CONVERT_HT, m_stWrkData.PHOTO_SAVE_JPG_PATH, 60*1000);
					ON_DRAW();
					MessageBoxEx(MESSAGE, "사진을 저장중입니다.");
					
					FFS_Delete( szfilenm );

					JpgToPng();
				}
			}
		}
		else if (nEvent == UART_BARCODE)
		{
			if( theDevInfo.m_nType == FAMILY_PDA )
			{
				PDA_OnBarcodeRead();
			}
			else
			{
				OnBarcodeRead();
			}
		}
	}

//----------------------------------------------------------------------------------------------
	void	OnTask(long nEvent, long nData)
	{
		char szTmp[256];
		char szfilenm[256];
		char szPhotopath[256];
		char* szPath = NULL;
		long nRet = 0;
		long nLen = 0;
		char* ptr;
		
		//PRINT("nEvent : %d , nData : %d",nEvent,nData,0);
		CloseMessageBox();
		
		if( nEvent == TASK_SYS_CALL )
		{
			if(nData == TASK_BARCODE )
			{
				//카메라 바코드 스캔 값
				Mem_Set( (byte*)m_szBarcode_Num, 0x00, sizeof(m_szBarcode_Num) );
				ptr = (char*)System_GetResult((char*)&nRet);
				Str_Cpy(m_szBarcode_Num, ptr);

				if( theDevInfo.m_nType > FAMILY_PDA )
				{
					OnBarcodeRead();
				}
			}
			else if( nData == TASK_CAMERA )
			{
				Mem_Set((byte*)szPhotopath, 0x00, sizeof(szPhotopath));
				Mem_Set((byte*)szTmp, 0x00, sizeof(szTmp));
				szPath = (char*)System_GetResult((char*)&nRet);
				nLen = Str_Len(szPath);
				if( nLen > 19 )
				{
					Mem_Cpy((byte *)szTmp, (byte *)szPath+19, nLen-19);
					Str_Cpy(szPhotopath, "..");
					Str_Cat(szPhotopath, szTmp);
					//PRINT(">>> TASK_SYS_CALL:: TASK_CAMERA: path = %s, size = %d ", szPhotopath, nRet, 0);
					
					//원본파일 +19
					Mem_Set((byte*)m_stWrkData.PHOTO_SAVE_JPG_PATH, 0x00, sizeof(m_stWrkData.PHOTO_SAVE_JPG_PATH));
					SPRINT (m_stWrkData.PHOTO_SAVE_JPG_PATH, "%s/%s", PHOTO_WORK,  m_szfilenm, 0);
				}

				if( FFS_Exist(szPhotopath) )
				{
					FFS_Copy(szPhotopath, m_stWrkData.PHOTO_SAVE_JPG_PATH);
					FFS_Delete(szPhotopath);
					
					ON_DRAW();
					MessageBoxEx(MESSAGE, "사진을 저장중입니다.");

					JpgToPng();
				}
			}
			else
			{
				if( m_bFirst == INIT_WORK || m_bFirst == INIT_INPUT )
				{
					//JPEG -> PNG 변환 후, 화면에 사진 Draw
					PhotoDraw();
				}
				else if( m_bFirst == INIT_PHOTOVIEW )
				{
					//사진 확대 보기
					Photo_View();
				}
			}
		}
		
		ON_DRAW();
		return;
	}


//-------------------------------------------------------------------
	void	OnChar(long nChar)
	{
		if( m_bFirst == INIT_INPUT )
		{
			//숫자만 입력 가능
			if( Get_iDlgCtrlByID(EDT_DATA1) == m_lActiveIndex )
			{
				if( (nChar < 48 ||  nChar > 57) )
				{
					MessageBoxEx (CONFIRM_OK, "숫자만 입력가능합니다.");
					EditCtrl_SetStr(Get_hDlgCtrlByIndex(m_lActiveIndex), "");
					return;
				}
			}
		}
		//계량기 수리품은 영어도 들어감.
		//else if( m_bFirst == INIT_MTRSEARCH )
		//{
			//숫자만 입력 가능
		//	if( Get_iDlgCtrlByID(EDT_DATA2) == m_lActiveIndex )
		//	{
		//		if( (nChar < 48 ||  nChar > 57) )
		//		{
		//			MessageBoxEx (CONFIRM_OK, "숫자만 입력가능합니다.");
		//			EditCtrl_SetStr(Get_hDlgCtrlByIndex(m_lActiveIndex), "");
		//			return;
		//		}
		//	}
		//}

		return;
	}
	
//-------------------------------------------------------------------------
	void	OnPointing(long nAction, long X, long Y)
	{
		long lActiveIndex = -1;
		long lret;
		
		lActiveIndex = Dialog_GetActiveCtrlIndex(this->m_hDlg);	

		if( m_bFirst == INIT_INPUT )
		{
			if( POINTING_UP == nAction )
			{
				if( theDevInfo.m_nType > FAMILY_PDA )
				{
					if( X > DMS_X(STARTX+350) && X < DMS_X(STARTX+750) && Y > DMS_Y(STARTY+125) && Y < DMS_Y(STARTY+180) )
					{
						m_lActiveIndex = lActiveIndex;
					
						if( Get_iDlgCtrlByID(EDT_DATA1) == lActiveIndex )	
						{
							g_Dlgflag = 1;
							g_MOVE_DLG(1);
						
							ShowSip(FALSE);
							g_Sipflag = 0;
							
							//SetKeyMode(KEYMODE_NUMBER);
			
							ShowSip(TRUE);
							g_Sipflag = 1;
						}
					}
					else
					{
						g_Dlgflag = 1;
						g_MOVE_DLG(1);
					
						ShowSip(FALSE);
						g_Sipflag = 0;
					}
					
					ON_DRAW();
				}
			}
		}
		else if( m_bFirst == INIT_MTRSEARCH )
		{
			if( POINTING_UP == nAction )
			{
				if( theDevInfo.m_nType > FAMILY_PDA )
				{
					if( X > DMS_X(STARTX+250) && X < DMS_X(STARTX+750) && Y > DMS_Y(STARTY+65) && Y < DMS_Y(STARTY+130) )
					{
						m_lActiveIndex = lActiveIndex;
					
						if( Get_iDlgCtrlByID(EDT_DATA2) == lActiveIndex )	
						{
							g_Dlgflag = 1;
							g_MOVE_DLG(1);

							ShowSip(FALSE);
							g_Sipflag = 0;
							
							//SetKeyMode(KEYMODE_NUMBER);
			
							ShowSip(TRUE);
							g_Sipflag = 1;
						}
					}
					else
					{
						g_Dlgflag = 1;
						g_MOVE_DLG(1);
					
						ShowSip(FALSE);
						g_Sipflag = 0;
					}
					
					ON_DRAW();
				}
			}
		}
		else if( m_bFirst == INIT_JIBUNSEARCH )
		{
			if( POINTING_UP == nAction )
			{
				m_lActiveIndex = lActiveIndex;
				
				if( theDevInfo.m_nType > FAMILY_PDA )
				{
					if( X > DMS_X(STARTX+200) && X < DMS_X(STARTX+520) && Y > DMS_Y(STARTY+185) && Y < DMS_Y(STARTY+245) ||
                        X > DMS_X(STARTX+650) && X < DMS_X(STARTX+1000) && Y > DMS_Y(STARTY+185) && Y < DMS_Y(STARTY+245) )
					{
						if( Get_iDlgCtrlByID(EDT_DATA3) == lActiveIndex ||
						    Get_iDlgCtrlByID(EDT_DATA4) == lActiveIndex )	
						{
							g_Dlgflag = 1;
							g_MOVE_DLG(1);

							ShowSip(FALSE);
							g_Sipflag = 0;
							
							//SetKeyMode(KEYMODE_NUMBER);
			
							ShowSip(TRUE);
							g_Sipflag = 1;
						}
					}
					else
					{
						g_Dlgflag = 1;
						g_MOVE_DLG(1);
					
						ShowSip(FALSE);
						g_Sipflag = 0;
					}
				}
				
				ON_DRAW();
			}
		}
		else if( m_bFirst == INIT_TGTSEARCH )
		{
			if( POINTING_UP == nAction )
			{
				m_lActiveIndex = lActiveIndex;
				
				if( theDevInfo.m_nType > FAMILY_PDA )
				{
					if( X > DMS_X(STARTX+800) && X < DMS_X(STARTX+1000) && Y > DMS_Y(STARTY+185) && Y < DMS_Y(STARTY+245) )
					{
						if( Get_iDlgCtrlByID(EDT_DATA5) == lActiveIndex )	
						{
							g_Dlgflag = 1;
							g_MOVE_DLG(1);

							ShowSip(FALSE);
							g_Sipflag = 0;
							
							//SetKeyMode(KEYMODE_NUMBER);
			
							ShowSip(TRUE);
							g_Sipflag = 1;
						}
					}
					else
					{
						g_Dlgflag = 1;
						g_MOVE_DLG(1);
					
						ShowSip(FALSE);
						g_Sipflag = 0;
					}
				}
				
				ON_DRAW();
			}
		}
		else if( m_bFirst == INIT_NEWSEARCH )
		{
			if( POINTING_UP == nAction )
			{
				m_lActiveIndex = lActiveIndex;
				
				if( theDevInfo.m_nType > FAMILY_PDA )
				{
					if( X > DMS_X(STARTX+200) && X < DMS_X(STARTX+500) && Y > DMS_Y(STARTY+185) && Y < DMS_Y(STARTY+245) ||
                        X > DMS_X(STARTX+700) && X < DMS_X(STARTX+1000) && Y > DMS_Y(STARTY+185) && Y < DMS_Y(STARTY+245) )
					{
						if( Get_iDlgCtrlByID(EDT_DATA6) == lActiveIndex ||
						    Get_iDlgCtrlByID(EDT_DATA7) == lActiveIndex )	
						{
							g_Dlgflag = 1;
							g_MOVE_DLG(1);

							ShowSip(FALSE);
							g_Sipflag = 0;
							
							//SetKeyMode(KEYMODE_NUMBER);
			
							ShowSip(TRUE);
							g_Sipflag = 1;
						}
					}
					else
					{
						g_Dlgflag = 1;
						g_MOVE_DLG(1);
					
						ShowSip(FALSE);
						g_Sipflag = 0;
					}
				}
				
				ON_DRAW();
			}
		} 
	}


	//------------------------------------------------------------------
	void SetBtnImg(void)
	{
		void* h;

		if( m_bFirst == INIT_PHOTOVIEW )
		{
			IconCtrl_SetImage(Get_hDlgCtrlByID(ICON_TITLE), 0, g_pImgPopTtlL );		//타이틀
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_TITLE), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		}
		else
		{
			IconCtrl_SetImage(Get_hDlgCtrlByID(ICON_TITLE), 0, g_pImgMainTtl );		//타이틀
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_TITLE), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
	
			if( theDevInfo.m_nType > FAMILY_PDA )
			{
				//상단공통메뉴
				h = GetSysButHandle(GID_HOME);
				ButCtrl_SetImage( h,  g_pImgHomeI);
				ButCtrl_SetActiveImage( h,  g_pImgHomeA);
				
				h = GetSysButHandle(GID_KEYBOARD);
				ButCtrl_SetImage( h,  g_pImgKeybrdI);
				ButCtrl_SetActiveImage( h,  g_pImgKeybrdA);
				
				h = GetSysButHandle(GID_SCREEN);
				ButCtrl_SetImage( h,  g_pImgScreenI);
				ButCtrl_SetActiveImage( h,  g_pImgScreenA);
				
				h = GetSysButHandle(GID_CMMNWK);
				ButCtrl_SetImage( h,  g_pImgCmmnwrkI);
				ButCtrl_SetActiveImage( h,  g_pImgCmmnwrkA);
				
				h = GetSysButHandle(GID_VMEXIT);
				ButCtrl_SetImage( h,  g_pImgExitI);
				ButCtrl_SetActiveImage( h,  g_pImgExitA);
			}
		}
	}

	//-----------------------------------------------------------------
	void	SetStyle(void)
	{
		if( m_bFirst == INIT_MAIN )
		{
			m_hGrid = Get_hDlgCtrlByID(ID_MAINLIST);
			GridCtrl_SetTitleBkColor(m_hGrid, m_stGridTitle_M);
		}
		else if( m_bFirst == INIT_INPUT )
		{
			//EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA1), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA2), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA3), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA4), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA5), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA6), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA7), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA8), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA9), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
			//EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA10), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA11), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA12), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA13), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA15), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
			
			EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA1), EDITALIGN_MIDDLE);
			
			EditCtrl_SetMultiLine(Get_hDlgCtrlByID(TXT_DATA1), TRUE, 2, EDITSEP_NONE );
			EditCtrl_SetMultiLine(Get_hDlgCtrlByID(TXT_DATA14), TRUE, 2, EDITSEP_NONE );
		}
		else if( m_bFirst == INIT_MTRSEARCH )
		{
			//EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_DATA1), EDITALIGN_MIDDLE);	//검색조건
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA14), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
			//EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA16), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA2),  EDITALIGN_MIDDLE);
			
			EditCtrl_SetMultiLine(Get_hDlgCtrlByID(TXT_DATA16), TRUE, 2, EDITSEP_NONE );
		}
		else if( m_bFirst == INIT_WORK )
		{
			//EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA1), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA2), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA3), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA4), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA5), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA6), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA7), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA8), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA9), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
			//EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA10), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA11), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA12), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA13), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA15), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA47), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA48), EDITALIGN_MIDDLE);
			
			EditCtrl_SetMultiLine(Get_hDlgCtrlByID(TXT_DATA1), TRUE, 2, EDITSEP_NONE );
			EditCtrl_SetMultiLine(Get_hDlgCtrlByID(TXT_DATA14), TRUE, 2, EDITSEP_NONE );
		}
		else if( m_bFirst == INIT_JIBUNSEARCH )
		{
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA49), EDITALIGN_CENTER|EDITALIGN_MIDDLE);	//리스트 페이지
			
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA50), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA51), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA52), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA53), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			
			EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA3), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA4), EDITALIGN_MIDDLE);

			EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_DATA2), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_DATA3), EDITALIGN_MIDDLE);
		}
		else if(m_bFirst == INIT_TGTSEARCH)
		{
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA49), EDITALIGN_CENTER|EDITALIGN_MIDDLE);	//리스트 페이지
		
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA54), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA55), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA56), EDITALIGN_CENTER|EDITALIGN_MIDDLE);

			EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA5), EDITALIGN_MIDDLE);

			EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_DATA4), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_DATA5), EDITALIGN_MIDDLE);
		}
		else if(m_bFirst == INIT_NEWSEARCH)
		{
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA49), EDITALIGN_CENTER|EDITALIGN_MIDDLE);	//리스트 페이지
		
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA57), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA58), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA59), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA60), EDITALIGN_CENTER|EDITALIGN_MIDDLE);

			EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA6), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA7), EDITALIGN_MIDDLE);

			EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_DATA6), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_DATA7), EDITALIGN_MIDDLE);
		}

		return;
	}	
	
	//------------------------------------------------------------------	
	void SetCombo(void)
	{
		if( m_bFirst == INIT_INPUT )
		{
			handle h = Get_hDlgCtrlByID(CMB_DATA1+2);
		
			if (h != NULL)
			{
				ListCtrl_ResetAllItems (h);
				ListCtrl_AddItem (h, "계약번호", 0, ICON_NONE);
				ListCtrl_AddItem (h, "주소", 0, ICON_NONE);
				ListCtrl_AddItem (h, "기물번호", 0, ICON_NONE);
				ListCtrl_AddItem (h, "바코드", 0, ICON_NONE);
			}	
	
			g_Sql_SetCombo("SELECT ITEM_KNAME FROM COMMONCODE WHERE CODE_ID='C20447'", CMB_GUBUN+2);
			
			EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA1), "계약번호");
		}
		else if( m_bFirst == INIT_WORK )
		{
			//handle h = Get_hDlgCtrlByID(CMB_DATA1+2);
			//if (h != NULL)
			//{
			//	ListCtrl_ResetAllItems (h);
			//	ListCtrl_AddItem (h, "계약번호", 0, ICON_NONE);
			//	ListCtrl_AddItem (h, "기물번호", 0, ICON_NONE);
			//}	
	
			g_Sql_SetCombo("SELECT ITEM_KNAME FROM COMMONCODE WHERE CODE_ID='C20447'", CMB_GUBUN+2);
		}
		else if( m_bFirst == INIT_JIBUNSEARCH )
		{
			g_Sql_SetCombo("SELECT AREA FROM GUMDATA WHERE AREA IS NOT NULL GROUP BY AREA", CMB_DATA2+2);
			g_Sql_SetCombo("SELECT TOWN FROM GUMDATA WHERE TOWN IS NOT NULL GROUP BY TOWN", CMB_DATA3+2);
		}
		else if( m_bFirst == INIT_TGTSEARCH )
		{
			g_Sql_SetCombo("SELECT CO_LIVE_NM FROM GUMDATA WHERE CO_LIVE_NM IS NOT NULL GROUP BY CO_LIVE_NM", CMB_DATA4+2);
			g_Sql_SetCombo("SELECT BLD_NM FROM GUMDATA WHERE BLD_NM IS NOT NULL GROUP BY BLD_NM", CMB_DATA5+2);
		}
		else if( m_bFirst == INIT_NEWSEARCH )
		{
			g_Sql_SetCombo("SELECT AREA FROM GUMDATA WHERE AREA IS NOT NULL GROUP BY AREA", CMB_DATA6+2);
			g_Sql_SetCombo("SELECT NEW_ROAD_NM FROM GUMDATA WHERE NEW_ROAD_NM IS NOT NULL GROUP BY NEW_ROAD_NM", CMB_DATA7+2);
		}

		return;
	}
	
	//------------------------------------------------------------------
	void ListDraw(void)
	{
		long k = ROW_M + 1;
		long i, idx, lstartidx;
		long lDrawFlag = 0;
		char szAddr[500];
		char szName[100];
		char sztmp[400];
		long ret = -1;	
		handle hdb = NULL;
		handle hstmt = NULL;
		handle h = NULL;
		SQLITE sql = NewSqLite();
		
		DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TAB1), FALSE );
		DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TAB2), TRUE );
		
		g_Sql_RetInt( "SELECT COUNT(*) FROM C6101_WORK_REPORT", &m_lTotpage_M );

		if( m_lTotpage_M % ROW_M > 0 )
		{
			m_lTotpage_M = (m_lTotpage_M / ROW_M) + 1;
		}
		else
		{
			m_lTotpage_M = m_lTotpage_M / ROW_M;
		}
		
		if( m_lIdxFlag == 0 )
		{
			m_lpage_M = g_nActIndex / ROW_M;
			m_nSelectedIndex = g_nActIndex+1;
			GridCtrl_SetScroll(m_hGrid, 0, g_nScrollIndex );
			GridCtrl_SetSelectedColor(m_hGrid, m_nSelectedIndex, TABLEACTIVE_COLOR);
		}

		hdb = sql->Open(sql);
		if( hdb == NULL )
		{
			goto Finally;
		}	

		hstmt = sql->CreateStatement(sql, "SELECT REG_YMD, NEW_ADDR_UNION, CURR_ADDR_UNION, USE_CONT_NUM FROM C6101_WORK_REPORT LIMIT ?, ?" );

		if( hstmt == NULL )
		{
			PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}
		
		idx = 0;
		lstartidx = m_lpage_M*ROW_M;
		sql->Bind(sql, idx++, 'X', &lstartidx, 4, DECRYPT);
		i = m_lpage_M*ROW_M+ROW_M;
		sql->Bind(sql, idx++, 'X', &i, 4, DECRYPT);
		
		if(sql->Execute(sql) == FALSE)
		{
			PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}

		// 등록된 코드 리스트를 페이지에 맞게 보여준다.
		for (i=0; i<ROW_M; i++)
		{
			//자료가 없을때 화면을 클리어 시킨다.
			if( k == i )
			{
				k++;
				
				GridCtrl_SetCellStr ( m_hGrid, 0, i+1,  "" );
				GridCtrl_SetCellStr ( m_hGrid, 1, i+1,  "" );
				GridCtrl_SetCellStr ( m_hGrid, 2, i+1,  "" );
				GridCtrl_SetCellStr ( m_hGrid, 3, i+1,  "" );
			}
			else
			{
				if(sql->Next(sql) == FALSE)
				{
					k = i + 1;
					GridCtrl_SetCellStr ( m_hGrid, 0, i+1,  "" );
					GridCtrl_SetCellStr ( m_hGrid, 1, i+1,  "" );
					GridCtrl_SetCellStr ( m_hGrid, 2, i+1,  "" );
					GridCtrl_SetCellStr ( m_hGrid, 3, i+1,  "" );
					continue;
				}

				idx = 0;
				
				//등록일자
				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				sql->GetValue(sql, 0, 'U', (long*)sztmp, 50, DECRYPT);
				GridCtrl_SetCellStr(m_hGrid, 0, i+1, sztmp);
				h = GridCtrl_GetCellHandle(m_hGrid, 0, i+1);
				BaseCtrl_SetFont(h, FONT_30);
				
				//주소
				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				if( g_nAddrFlag == 1 )
				{
					ButCtrl_SetText(Get_hDlgCtrlByID(BID_ADDR), "도로명 주소");
					ButCtrl_SetText(Get_hDlgCtrlByID(BID_QUICK_ADDR), "도로명 스크롤");

					sql->GetValue(sql, 1, 'U', (long*)sztmp, 300, DECRYPT);
				}
				else
				{
					ButCtrl_SetText(Get_hDlgCtrlByID(BID_ADDR), "지번 주소");
					ButCtrl_SetText(Get_hDlgCtrlByID(BID_QUICK_ADDR), "지번 스크롤");
					sql->GetValue(sql, 2, 'U', (long*)sztmp, 300, DECRYPT);
				}
				GridCtrl_SetCellStr(m_hGrid, 1, i+1, sztmp);
				h = GridCtrl_GetCellHandle(m_hGrid, 1, i+1);
				EditCtrl_SetAlign(h, EDITALIGN_LEFT|EDITALIGN_MIDDLE);
				EditCtrl_SetMultiLine(h, TRUE, 2, EDITSEP_NONE );
				
				//USE_CONT_NUM
				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				sql->GetValue(sql, 3, 'U', (long*)sztmp, 50, DECRYPT);
				GridCtrl_SetCellStr(m_hGrid, 2, i+1, sztmp);
				h = GridCtrl_GetCellHandle(m_hGrid, 2, i+1);
			}
		}		
		
Finally:

		if(m_lTotpage_M > 0)
		{
			if( m_nSelectedIndex == -1 )
			{
				m_nSelectedIndex = 0;
			}

			Mem_Set( (byte*)m_szUse_cont_num, 0x00, sizeof(m_szUse_cont_num) );
			Str_Cpy(m_szUse_cont_num, GridCtrl_GetCellStr(m_hGrid, 2, m_nSelectedIndex));
			//DlgTbl_SetActive(ID_MAINLIST , m_nActIndex_M+1 );
			//DlgTbl_SetRowColor(ID_MAINLIST, m_nActIndex_M+1, TABLEACTIVE_COLOR);
		}

		DelSqLite(sql);
		ON_DRAW();
		return;
	}
	
	//------------------------------------------------------------------
	void SaveInput  (void)
	{
		char szTmp[100];
		char szSql[300];

		//구분
		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		Mem_Set( (byte*)m_stWrkData.DUTY_FLAG, 0x00, sizeof(m_stWrkData.DUTY_FLAG) );
		SPRINT(szSql, "SELECT CODE_ITEM FROM COMMONCODE WHERE CODE_ID = 'C20447' AND ITEM_KNAME = '%s'", EditCtrl_GetStr( Get_hDlgCtrlByID(CMB_GUBUN)), 0, 0);
		g_Sql_RetStr( szSql, 10, m_stWrkData.DUTY_FLAG );
		
		//제목
		Mem_Set( (byte*)m_stWrkData.TITLE, 0x00, sizeof(m_stWrkData.TITLE) );
		Str_Cpy(m_stWrkData.TITLE, EditCtrl_GetStr( Get_hDlgCtrlByID(TXT_DATA12)));
		
		//내용
		Str_Cpy(m_stWrkData.REQ_DESC, EditCtrl_GetStr( Get_hDlgCtrlByID(TXT_DATA14)));
	}
	
	//------------------------------------------------------------------
	void InputDraw(void)
	{
		char szTmp[100];
		char szSql[300];
		
		DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TAB1), TRUE );
		DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TAB2), FALSE );

		//계약번호
		EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA1), m_stWrkData.USE_CONT_NUM );
		
		//주소
		AddrDraw();

		//성명
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA3), m_stWrkData.CUST_NM );
		
		//상호
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA5), m_stWrkData.FIRM_NM );
		
		//일자
		Mem_Set((byte*)szTmp, 0x00, sizeof(szTmp));
		Mem_Set((byte*)szSql, 0x00, sizeof(szSql));
		Str_ItoA(Time_GetDate(), szSql, 10);
		g_Str_DateType(szTmp, szSql);
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA8), szTmp );
		
		//구분
		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		Mem_Set( (byte*)szTmp, 0x00, sizeof(szTmp) );
		SPRINT(szSql, "SELECT ITEM_KNAME FROM COMMONCODE WHERE CODE_ID = 'C20447' AND CODE_ITEM = '%s'", m_stWrkData.DUTY_FLAG, 0, 0   );
		g_Sql_RetStr( szSql, 10, szTmp );
		EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_GUBUN), szTmp );
		
		//제목
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA12), m_stWrkData.TITLE );
		
		//내용
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA14), m_stWrkData.REQ_DESC );

		if( FFS_Exist(m_stWrkData.PHOTO_SAVE_JPG_PATH) )
		{
			//사진 , jpg파일 png로 변경 후 화면 출력
			JpgToPng();
		}

		ON_DRAW();
		return;
	}

	//------------------------------------------------------------------
	void MtrDraw(void)
	{
		if( m_lMtrSearchFlag == 0 )
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_TITLE), "기물번호로 찾기" );
		
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(BID_MTR_SEARCH),     TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(BID_MTR_BARCODE),     FALSE);
		}
		else
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_TITLE), "바코드로 찾기" );
		
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(BID_MTR_SEARCH),     FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(BID_MTR_BARCODE),     TRUE);
		}

		//주소
		AddrDraw();
	
		ON_DRAW();
		return;
	}
	
	//------------------------------------------------------------------
	void Recv_List(void)
	{
		char szUrl[200];
		char szbuf[128];
		char* sndbuf;
		long ret = 0;
		
		g_Sql_DirectExecute("DELETE FROM C6101_WORK_REPORT");
		g_DirFS_Clear(PHOTO_WORK, "*");

		Mem_Set( (byte*)szUrl, 0x00, sizeof(szUrl) );
		Mem_Set((byte*)szbuf, 0x00, sizeof(szbuf));	
		g_pjcomm = g_CreateJsonHead(g_pjcomm, szUrl, 68802, FALSE);
		sndbuf = JSON_toString(g_pjcomm);
		
		//g_Save_JsonFile(sndbuf);
		
		Mem_Set((byte*)szbuf, 0x00, sizeof(szbuf));	
		GET_FILENM(szbuf, SQLITE_DB);
		g_SeverConnection();
		
		HTTP_DownloadTR(ret, szUrl, 68802, sndbuf, szbuf);
	}
	
	//------------------------------------------------------------------
	long TR68802(void)
	{
	//char szSql[200];
	//long tot;

		g_Sock_Close();
		
		if(g_Chk_Json(68802) >= 0)
		{
			ListDraw();
		}
		else
		{
			return -1;
		}

		return 0;
	}		
	
	
	//------------------------------------------------------------------
	void SetData(void)
	{
		long i;
		char szindex[10];
		char* szfile;
		char* filedata;
		long nRet, filesize, fd;
		handle file;		
		handle hdb = NULL;
		handle hstmt = NULL;
		SQLITE sql = NewSqLite();

		Mem_Set((byte*)&m_stWrkData, 0x00, sizeof(m_stWrkData));

		hdb = sql->Open(sql);
		if( hdb == NULL )
		{
			goto Finally;
		}

		hstmt = sql->CreateStatement(sql,
"SELECT REQ_DOC_NUM, USE_CONT_NUM, MTR_NUM, REG_YMD, DUTY_FLAG, TAKER_EMPID, CUST_NUM, CUST_NM, TREAT_STS \
, CURR_ADDR_UNION, NEW_ADDR_UNION, FIRM_NM, TREAT_YMD, CENTER_CD, TITLE, REQ_DESC, FILE_SEQ, FILE_ID \
, ORG_FILE_NAME, FILE_PATH, length(PHOTO), PHOTO FROM C6101_WORK_REPORT WHERE USE_CONT_NUM = ? "
		);
		
		if( hstmt == NULL )
		{
			PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}

		i = 0;
		sql->Bind(sql, i++, 'U', (long*)&m_szUse_cont_num , 20, DECRYPT);

		if(sql->Execute(sql) == FALSE)
		{
			PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}

		if(sql->Next(sql) == TRUE )
		{	
			i = 0;
			sql->GetValue( sql, i++, 'U', (long*) m_stWrkData.REQ_DOC_NUM    		, 20 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) m_stWrkData.USE_CONT_NUM   		, 20 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) m_stWrkData.MTR_NUM   	    	, 20 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) m_stWrkData.REG_YMD        		, 20 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) m_stWrkData.DUTY_FLAG      		, 10 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) m_stWrkData.TAKER_EMPID    		, 20 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) m_stWrkData.CUST_NUM       		, 20 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) m_stWrkData.CUST_NM        		, 50 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) m_stWrkData.TREAT_STS      		, 20 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) m_stWrkData.CURR_ADDR_UNION		, 300, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) m_stWrkData.NEW_ADDR_UNION 		, 300, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) m_stWrkData.FIRM_NM        		, 100, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) m_stWrkData.TREAT_YMD      		, 20 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) m_stWrkData.CENTER_CD      		, 10 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) m_stWrkData.TITLE          		, 200, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) m_stWrkData.REQ_DESC       		, 800, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) m_stWrkData.FILE_SEQ       		, 20 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) m_stWrkData.FILE_ID        		, 100, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) m_stWrkData.ORG_FILE_NAME  		, 200, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) m_stWrkData.FILE_PATH      		, 200, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) m_stWrkData.PHOTO_LENGTH   		, 50 , DECRYPT );
			
			filesize = Str_AtoI(m_stWrkData.PHOTO_LENGTH);
			filedata = Mem_Alloc(filesize+5);

			sql->GetValue( sql, i++, 'U', (long*) filedata   		, filesize+1 , DECRYPT );

			file = BASE64_Create();
			BASE64_Decode(file, filedata, filesize );
			szfile = BASE64_GetResult(file);	

			//JPG PATH
			SPRINT (m_stWrkData.PHOTO_SAVE_JPG_PATH, "%s/%s",PHOTO_WORK, m_stWrkData.ORG_FILE_NAME, 0);
			fd = FFS_Open(m_stWrkData.PHOTO_SAVE_JPG_PATH, FS_WRITE_MODE, FS_CREATE_FLAG );
			FFS_Write ( fd, (byte*)szfile, filesize );
			FFS_Close(fd);
		}
		else
		{
			PRINT("::sql->Next fail [%s]",sql->GetLastError(sql),0,0);
			goto Finally;
		}

Finally:

		if(file != NULL )
		{
			BASE64_Finalize(file);
			file = NULL;
		}

//		sql->Commit(sql);
		DelSqLite(sql);
		return;
	}
	
	
	//-----------------------------------------------------------------
	//JPG PATH
	//SPRINT (m_stWrkData.PHOTO_SAVE_JPG_PATH, "%s/%s",PHOTO_WORK, m_stWrkData.ORG_FILE_NAME, 0);
	//Size 변경 JPG PATH
	//SPRINT (m_stWrkData.PHOTO_SAVE_JPG_SIZE_PATH, "%s/%s",PHOTO_WORK, m_stWrkData.ORG_FILE_NAME, 0);
	//PNG PATH
	//SPRINT (m_stWrkData.PHOTO_SAVE_PNG_PATH, "%s/%s",PHOTO_WORK, m_stWrkData.ORG_FILE_NAME, 0);
	void JpgToPng(void)
	{
		long lLen = 0;
		long ret = 0;
		long i = 0;
		char szTmp[256];
		handle h = NULL;
		handle hdata = NULL;

		if( m_bFirst == INIT_WORK || m_bFirst == INIT_INPUT )
		{
			//PNG PATH
			SPRINT (m_stWrkData.PHOTO_SAVE_PNG_PATH, "%s/U%s%s",PHOTO_WORK, m_stWrkData.USE_CONT_NUM, ".png");
			//Size 변경 JPG PATH
			Str_Cpy(m_stWrkData.PHOTO_SAVE_JPG_SIZE_PATH, m_stWrkData.PHOTO_SAVE_JPG_PATH);
	
			//ConvertImage 및 ConvertJpegToPng -> 에뮬에서는 실행 안됨.
			if( m_bFirst == INIT_WORK )
			{
				ConvertImage(JPG, m_stWrkData.PHOTO_SAVE_JPG_PATH, DMS_X(1000), DMS_Y(195), m_stWrkData.PHOTO_SAVE_JPG_SIZE_PATH, 60*1000);
			}
			else if( m_bFirst == INIT_INPUT )
			{
				ConvertImage(JPG, m_stWrkData.PHOTO_SAVE_JPG_PATH, DMS_X(1000), DMS_Y(155), m_stWrkData.PHOTO_SAVE_JPG_SIZE_PATH, 60*1000);
			}

			h = JSON_Create( JSON_Object );
			if (h)
			{
				hdata = JSON_Create( JSON_Object );
				if(hdata == NULL)
				{
					goto Finally;
				}
				
				//Native_System_Call > method 및 data 설정 필요(ex : Native_System_Call , 'TEST_MENU' 카드 확인
				//Native_System_Call이 아닌 System_Call > metod 및 data 설정 불필요(ex : ConvertJpegToPng , 'CM_BIZ' 카드 확인
				JSON_SetValue	(hdata	, 'C', "jpeg_path"		, m_stWrkData.PHOTO_SAVE_JPG_SIZE_PATH);
				JSON_SetValue	(hdata	, 'C', "png_path"		, m_stWrkData.PHOTO_SAVE_PNG_PATH);						//{true, false}
	
				System_Call		("ConvertJpegToPng" , JSON_toString(hdata));
	//PRINT("MAIN >>>>>>> JSON_toString(hdata) : %s",JSON_toString(hdata),0,0);
			}
		}
		else
		{
			Mem_Set((byte*)m_szLarge_Png_Path, 0x00, sizeof(m_szLarge_Png_Path));
			SPRINT (m_szLarge_Png_Path, "%s/LagePhoto.png",PHOTO_WORK, 0, 0);
	
			//ConvertImage 및 ConvertJpegToPng -> 에뮬에서는 실행 안됨.
			Mem_Set((byte*)m_szLarge_Jpg_Path, 0x00, sizeof(m_szLarge_Jpg_Path));
			Str_Cpy(m_szLarge_Jpg_Path, m_stWrkData.PHOTO_SAVE_JPG_PATH);
			ConvertImage(JPG, m_stWrkData.PHOTO_SAVE_JPG_PATH, DMS_X(899), DMS_Y(499), m_szLarge_Jpg_Path, 60*1000);

			h = JSON_Create( JSON_Object );
			if (h)
			{
				hdata = JSON_Create( JSON_Object );
				if(hdata == NULL)
				{
					goto Finally;
				}
				
				//Native_System_Call > method 및 data 설정 필요(ex : Native_System_Call , 'TEST_MENU' 카드 확인
				//Native_System_Call이 아닌 System_Call > metod 및 data 설정 불필요(ex : ConvertJpegToPng , 'CM_BIZ' 카드 확인
				JSON_SetValue	(hdata	, 'C', "jpeg_path"		, m_szLarge_Jpg_Path);
				JSON_SetValue	(hdata	, 'C', "png_path"		, m_szLarge_Png_Path);						//{true, false}
	
				System_Call		("ConvertJpegToPng" , JSON_toString(hdata));
	
//	PRINT("LARGE >>>>>>>>> JSON_toString(hdata) : %s",JSON_toString(hdata),0,0);
			}
		}

		
	Finally:
	
		if (h)
		{
			JSON_Finalize(h);
		}	
	
		if (hdata)
		{
			JSON_Finalize(hdata);
		}	
	}
	
//----------------------------------------------------------------------------------------------
	void PhotoDraw(void)
	{
		char szDate[50];
		char szfilenm[128];
		char szPhotopath[256];

		//JPG PATH
		//SPRINT (m_stWrkData.PHOTO_SAVE_JPG_PATH, "%s/%s",PHOTO_WORK, m_stWrkData.ORG_FILE_NAME, 0);
		//PNG PATH
		//SPRINT (m_stWrkData.PHOTO_SAVE_PNG_PATH, "%s/%s",PHOTO_WORK, m_stWrkData.ORG_FILE_NAME, 0);

		//m_lPhotoFlag = 0 사진 없음, m_lPhotoFlag = 1 사진 있음
		if( FFS_Exist(m_stWrkData.PHOTO_SAVE_PNG_PATH) )
		{
			m_pImgBiz    = GrDev_LoadPngImage(PNG_COLOR_NORMAL,  m_stWrkData.PHOTO_SAVE_PNG_PATH );
			
			ButCtrl_SetImage( Get_hDlgCtrlByID(BID_PHOTOVIEW),  m_pImgBiz);
		}
		
		ON_DRAW();
	}


//----------------------------------------------------------------------------------------------
	void ViewDraw   (void)
	{
		char szTmp[100];
		char szSql[300];

		//계약번호
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA48), m_stWrkData.USE_CONT_NUM );
		
		//주소
		AddrDraw();

		//성명
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA3), m_stWrkData.CUST_NM );
		
		//상호
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA5), m_stWrkData.FIRM_NM );
		
		//일자
		Mem_Set((byte*)szTmp, 0x00, sizeof(szTmp));
		g_Str_DateType(szTmp, m_stWrkData.REG_YMD);
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA8), szTmp );
		
		//구분
		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		Mem_Set( (byte*)szTmp, 0x00, sizeof(szTmp) );
		SPRINT(szSql, "SELECT ITEM_KNAME FROM COMMONCODE WHERE CODE_ID = 'C20447' AND CODE_ITEM = '%s'", m_stWrkData.DUTY_FLAG, 0, 0   );
		g_Sql_RetStr( szSql, 10, szTmp );
		EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_GUBUN), szTmp );
		
		//제목
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA12), m_stWrkData.TITLE );
		
		//내용
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA14), m_stWrkData.REQ_DESC );

		if( FFS_Exist(m_stWrkData.PHOTO_SAVE_JPG_PATH) )
		{
			//사진 , jpg파일 png로 변경 후 화면 출력
			JpgToPng();
		}
		
		if( Str_Cmp(m_stWrkData.TREAT_STS, "10") == 0 )
		{
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_WRK_PHOTO), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_WRK_PHOTO), FALSE );

			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_WRK_CHANGE), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_WRK_CHANGE), FALSE );
		}
		else
		{
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_WRK_PHOTO), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_WRK_PHOTO), TRUE );

			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_WRK_CHANGE), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_WRK_CHANGE), TRUE );
		}
		
		ON_DRAW();
		return;
	}

//----------------------------------------------------------------------------------------------
	long Validate(long BtnId)
	{
		long ret = -1;
		
		if( m_lSearchFlag < 1 )
		{
			MessageBoxEx (CONFIRM_OK, "대상을 검색해주세요.");
			return ret;
		}
		
		if( Str_Len(EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_GUBUN))) == 0 )
		{
			MessageBoxEx (CONFIRM_OK, "구분을 입력해주세요.");
			return ret;
		}

		if( Str_Len(EditCtrl_GetStr(Get_hDlgCtrlByID(TXT_DATA12))) == 0 )
		{
			MessageBoxEx (CONFIRM_OK, "제목을 입력해주세요.");
			return ret;
		}

		if( Str_Len(EditCtrl_GetStr(Get_hDlgCtrlByID(TXT_DATA14))) == 0 )
		{
			MessageBoxEx (CONFIRM_OK, "내용을 입력해주세요.");
			return ret;
		}

		if( FFS_Exist(m_stWrkData.PHOTO_SAVE_JPG_PATH) <= 0 )
		{
			MessageBoxEx (CONFIRM_OK, "사진을 촬영하세요.");
			return ret;
		}
		
		ret = 1;
		
		return ret;
	}

//----------------------------------------------------------------------------------------------
	long Snd_Change(void)
	{
		char szTmp[500];
		char szUrl[200];
		char szbuf[128];
		char* sndbuf;
		long ret = 0;
		long nLen = 0;
		char* szfile;
		char* filedata;
		long nRet, filesize, fd;
		handle file;		
		
		//업무구분
		Mem_Set( (byte*)szTmp, 0x00, sizeof(szTmp) );
		Mem_Set( (byte*)m_stWrkData.DUTY_FLAG, 0x00, sizeof(m_stWrkData.DUTY_FLAG) );
		SPRINT(szTmp, "SELECT CODE_ITEM FROM COMMONCODE WHERE CODE_ID = 'C20447' AND ITEM_KNAME = '%s'", EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_GUBUN)), 0, 0   );
		g_Sql_RetStr( szTmp, 10, m_stWrkData.DUTY_FLAG );
		
		//제목
		Str_Cpy(m_stWrkData.TITLE, EditCtrl_GetStr(Get_hDlgCtrlByID(TXT_DATA12)));
		
		//내용
		Str_Cpy(m_stWrkData.REQ_DESC, EditCtrl_GetStr(Get_hDlgCtrlByID(TXT_DATA14)));
	
		PROGRESS_DUMP("");

		if( g_pjcomm != NULL)
		{
			JSON_Finalize( g_pjcomm );
			g_pjcomm = NULL;
		}		
		
		g_SeverConnection();	
		
		g_pjcomm = g_CreateJsonHead(g_pjcomm, szUrl, 68807, FALSE);
		JSON_SetValue( g_pjcomm, 'C', "branch_cd",          stUserinfo.szbranch_cd );
		JSON_SetValue( g_pjcomm, 'C', "center_cd",          stUserinfo.szcenter_cd );
		JSON_SetValue( g_pjcomm, 'C', "use_cont_num",       m_stWrkData.USE_CONT_NUM );
		JSON_SetValue( g_pjcomm, 'C', "mtr_num",            m_stWrkData.MTR_NUM );
		JSON_SetValue( g_pjcomm, 'C', "cust_num",           m_stWrkData.CUST_NUM );
		
		Mem_Set((byte*)szTmp, 0x00, sizeof(szTmp));	
		SQL_ConvUcStr( szTmp, m_stWrkData.CUST_NM );
		JSON_SetValue( g_pjcomm, 'C', "cust_nm",            szTmp );
		
		Mem_Set((byte*)szTmp, 0x00, sizeof(szTmp));	
		SQL_ConvUcStr( szTmp, m_stWrkData.CURR_ADDR_UNION );
		JSON_SetValue( g_pjcomm, 'C', "curr_addr_union",    szTmp );
		
		Mem_Set((byte*)szTmp, 0x00, sizeof(szTmp));	
		SQL_ConvUcStr( szTmp, m_stWrkData.NEW_ADDR_UNION );
		JSON_SetValue( g_pjcomm, 'C', "new_addr_union",     szTmp );
		
		Mem_Set((byte*)szTmp, 0x00, sizeof(szTmp));	
		SQL_ConvUcStr( szTmp, m_stWrkData.TITLE );
		JSON_SetValue( g_pjcomm, 'C', "title",              szTmp );

		Mem_Set((byte*)szTmp, 0x00, sizeof(szTmp));	
		SQL_ConvUcStr( szTmp, m_stWrkData.REQ_DESC );
		JSON_SetValue( g_pjcomm, 'C', "req_desc",           szTmp );
		
		JSON_SetValue( g_pjcomm, 'C', "req_doc_num",        m_stWrkData.REQ_DOC_NUM );
		JSON_SetValue( g_pjcomm, 'C', "duty_flag",          m_stWrkData.DUTY_FLAG );

		//"I": 등록, "U": 수정
		if( m_bFirst == INIT_WORK )
		{
			JSON_SetValue( g_pjcomm, 'C', "proc_flag",          "U" );

			Mem_Set((byte*)szTmp, 0x00, sizeof(szTmp));	
			SQL_ConvUcStr( szTmp, m_stWrkData.ORG_FILE_NAME );
			JSON_SetValue( g_pjcomm, 'C', "file_nm",            szTmp );
	
			JSON_SetValue( g_pjcomm, 'C', "file_id",            m_stWrkData.FILE_ID );
			JSON_SetValue( g_pjcomm, 'C', "file_seq",           m_stWrkData.FILE_SEQ );
		}
		else
		{
			JSON_SetValue( g_pjcomm, 'C', "proc_flag",          "I" );
			
			//서버에서 파일정보를 셋팅함.
			JSON_SetValue( g_pjcomm, 'C', "file_nm",            "" );
			JSON_SetValue( g_pjcomm, 'C', "file_id",            "" );
			JSON_SetValue( g_pjcomm, 'C', "file_seq",           "" );
		}
//PRINT("m_stWrkData.PHOTO_SAVE_JPG_PATH : %s",m_stWrkData.PHOTO_SAVE_JPG_PATH,0,0);
		filesize = FFS_GetSize( m_stWrkData.PHOTO_SAVE_JPG_PATH );
		filedata = Mem_Alloc(filesize);
		
		fd = FFS_Open(m_stWrkData.PHOTO_SAVE_JPG_PATH, FS_READ_MODE, FS_NORMAL_FLAG );
		FFS_Read ( fd, (byte*)filedata, filesize );
		FFS_Close(fd);

		file = BASE64_Create();
		BASE64_Encode(file, filedata, filesize );
		szfile = BASE64_GetResult(file);	
		
		JSON_SetValue( g_pjcomm, 'C', "photo",  szfile );

		sndbuf = JSON_toString(g_pjcomm);
		
		g_Save_JsonFile(sndbuf);

		Mem_Set((byte*)szbuf, 0x00, sizeof(szbuf));	
		GET_FILENM(szbuf, SQLITE_DB);

		callBackfunc = TR68807; //통신완료 후에 호출 함수
		HTTP_DownloadData( szUrl, "FR68807_IN",  "FR68807" , sndbuf, szbuf );
		
		return 1;
	}


//----------------------------------------------------------------------------------------------
	long TR68807(void)
	{
		char szSql[350];
	
		if(g_Chk_Json(68807) >= 0)
		{
			//송신 후 사진 삭제
			g_DirFS_Clear(PHOTO_WORK, "*");

			ON_EXIT();
			OnInit(INIT_MAIN);
			ON_DRAW();
			return 1;
		}
		else
		{
			g_Sock_Close();
			CloseMessageBox();
			ON_DRAW();
			return -1;
		}
	}


//----------------------------------------------------------------------------------------------
	long Rcv_Info(void)
	{
		char sztmp[32];
		char szUrl[256];
		char szNum[30];
		char* sndbuf;
		long ret;

		if( g_pjcomm != NULL)
		{
			JSON_Finalize( g_pjcomm );
			g_pjcomm = NULL;
		}		
		g_pjcomm = g_CreateJsonHead(g_pjcomm, szUrl, 68805, FALSE);

		Mem_Set((byte*)szNum, 0x00, sizeof(szNum));	
		//if( Str_Cmp(EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA1)), "계약번호") == 0 )
		if( m_bFirst == INIT_INPUT || m_lAddrFlag == 1 )
		{
			if( m_bFirst == INIT_INPUT )
			{
				Str_Cpy(szNum, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA1)));
			}
			else if( m_lAddrFlag == 1 )
			{
				Str_Cpy(szNum, m_szUse_cont_num);
			}
			
			JSON_SetValue( g_pjcomm, 'C', "mtr_id_num",        	"" );
			JSON_SetValue( g_pjcomm, 'C', "use_cont_num",       szNum );
			JSON_SetValue( g_pjcomm, 'C', "srch_flag",        	"U" );
		}
		else
		{
			if( m_lMtrSearchFlag == 0 )
			{
				//m_lMtrSearchFlag -> = 0 기물번호 입력 , = 1 바코드인식
				Mem_Set( (byte*)m_szBarcode_Num, 0x00, sizeof(m_szBarcode_Num) );
				Str_Cpy(m_szBarcode_Num, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA2)));
			}
			JSON_SetValue( g_pjcomm, 'C', "mtr_id_num",        	m_szBarcode_Num );
			JSON_SetValue( g_pjcomm, 'C', "use_cont_num",       "" );
			JSON_SetValue( g_pjcomm, 'C', "srch_flag",        	"M" );
		}
		
		sndbuf = JSON_toString(g_pjcomm);
		
		g_Save_JsonFile(sndbuf);
		
		Mem_Set((byte*)sztmp, 0x00, sizeof(sztmp));	
		GET_FILENM(sztmp, SQLITE_DB);
		
		callBackfunc = TR68805; //통신완료 후에 호출 함수
		ret = HTTP_DownloadData(szUrl, "FR68805_IN",  "FR68805" , sndbuf, sztmp );
		return 0 ;
	}

//----------------------------------------------------------------------------------------------
	long TR68805(void)
	{
		long ntotcnt = 0;
	
		if( g_Chk_Json(68805) >= 0)
		{
			//대상검색여부
			m_lSearchFlag = 1;
			
			//수신 데이터 저장
			Set_InputData(68805);
			
			//if( Str_Cmp(EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA1)), "계약번호") == 0 )
			if( m_bFirst == INIT_INPUT )
			{
				InputDraw();
			}
			else if( m_bFirst == INIT_MTRSEARCH )
			{
				MtrDraw();
			}
			else //주소검색
			{
				ON_EXIT();
				OnInit(INIT_INPUT);
			}
			ON_DRAW();
			return 1;	
		}
		else
		{
			g_Sock_Close();
			ON_DRAW();
			return -1;
		}
	}

//----------------------------------------------------------------------------------------------
	void Set_InputData(long nservicenum)
	{
	char szJsonpath[500];
	char szMsg[500];
	char szCol[128];
	char szTmp[100];
	long *nCol;
	long nCnt = 0;
	long fd, i;
	long chkmsg = 0;
	long chkcode = 0;
	long fsize = 0;
	char *pStr;
	char *szcode;
	char *szmessage;
	char *szitem;
	char szType[2] = {0,0};
	long ret = 11;
	handle hitem = NULL;
	handle hcnt = NULL;
		
		//MessageBox(MESSAGE, "자료 확인중 입니다.", 0, 0, 0, 0);
		
		Mem_Set((byte*) szJsonpath, 0x00, sizeof( szJsonpath) );
		SPRINT(szJsonpath, "%sFR%d_Res.JSON",  SYSTEM_COMM, nservicenum, 0 );
		
		if(FFS_Exist(szJsonpath) != TRUE )
		{
			Mem_Set((byte*) szJsonpath, 0x00, sizeof( szJsonpath) );
			SPRINT(szJsonpath, "%sFR%d.JSON",  SYSTEM_COMM, nservicenum, 0 );
		}
		
		fsize = FFS_GetSize(szJsonpath);
		if(fsize <= 15)
		{
			ret = -1;
			goto Finally;
		}
		pStr = Mem_Alloc(fsize);
		fd = FFS_Open(szJsonpath, FS_READ_MODE, FS_NORMAL_FLAG);
		if(fd == -1)
		{
			ret = -1;
			goto Finally;
		}

		FFS_Read(fd, (byte*)pStr, fsize);
		for(i = 0 ; i < fsize-9 ; i++ )
		{
			if( Mem_Cmp((byte*)pStr+i,(byte*) "\"code\"", 6) == 0  )
			{
				chkcode++;
			}
			if( Mem_Cmp((byte*)pStr+i,(byte*) "\"message\"", 9) == 0  )
			{
				chkmsg++;
			}
			if(chkmsg > 0 &&  chkcode > 0)
				break;
		}

		FFS_Close(fd);
		
		Mem_Free((byte*)pStr);
		if(chkmsg == 0 || chkcode == 0)
		{
			ret = -1;
			goto Finally;
		}
		
		if(g_pjcomm != NULL)
		{
			JSON_Finalize(g_pjcomm);
			g_pjcomm = NULL;
		}
		
		g_pjcomm = JSON_Create( JSON_Object );
		if(g_pjcomm == NULL)
		{
			ret = -1;
			goto Finally;
		}

		if( JSON_LoadFile(g_pjcomm, szJsonpath) > 0)
		{
			szcode    = JSON_GetValue (g_pjcomm, "code",    szType);
			szmessage = JSON_GetValue (g_pjcomm, "message", szType);

			if( Str_Cmp(szcode, "0000") != 0)
			{
			  char* pMsg = NULL;
			  
				Mem_Set((byte*) szJsonpath, 0x00, sizeof( szJsonpath) );
				if(Str_Len(szmessage) < 500 )
					SQL_ConvMbStr( szMsg, szmessage);
				
				//SPRINT(szJsonpath, "[%s] %s", szcode, szMsg, 0 );
				pMsg = g_Chk_Code(szJsonpath, szcode, szMsg);
			
				MessageBoxEx (WARNING_OK, pMsg);
				ON_DRAW();
				ret = -1;
				goto Finally;
			}

			Mem_Set((byte*)&m_stWrkData, 0x00, sizeof(m_stWrkData));

			//사용계약번호
			szitem = (char*)JSON_GetValue ( g_pjcomm, "use_cont_num", szType);
			Str_Cpy(m_stWrkData.USE_CONT_NUM, szitem);

			//사용계약번호
			szitem = (char*)JSON_GetValue ( g_pjcomm, "mtr_num", szType);
			Str_Cpy(m_stWrkData.MTR_NUM, szitem);
			
			//지번주소
			szitem = (char*)JSON_GetValue ( g_pjcomm, "curr_addr_union", szType);
			SQL_ConvMbStr(m_stWrkData.CURR_ADDR_UNION, szitem);
			
			//도로명주소
			szitem = (char*)JSON_GetValue ( g_pjcomm, "new_addr_union", szType);
			SQL_ConvMbStr(m_stWrkData.NEW_ADDR_UNION, szitem);
			
			//고객번호
			szitem = (char*)JSON_GetValue ( g_pjcomm, "cust_num", szType);
			Str_Cpy(m_stWrkData.CUST_NUM, szitem);
			
			//고객명
			szitem = (char*)JSON_GetValue ( g_pjcomm, "cust_nm", szType);
			SQL_ConvMbStr(m_stWrkData.CUST_NM, szitem);
			
			//상호
			szitem = (char*)JSON_GetValue ( g_pjcomm, "firm_nm", szType);
			SQL_ConvMbStr(m_stWrkData.FIRM_NM, szitem);
		}
		else
		{
			ret = 0;
		}
		
Finally:		
		
		if(g_pjcomm != NULL)
		{
			JSON_Finalize(g_pjcomm);
			g_pjcomm = NULL;
		}
		
		g_Close_SubDlg();
		EvtDraw();
		
		return;
	}
	
//----------------------------------------------------------------------------------------------
	void Shoto_Photo(void)
	{
		char *pCamera;
		char szDate[20];
		long nRet;
		handle h = NULL;
		handle hdata = NULL;

		Mem_Set((byte*)m_szfilenm, 0x00, sizeof(m_szfilenm));
		Str_Cpy(m_szfilenm, "U");
		Str_Cat(m_szfilenm, m_stWrkData.USE_CONT_NUM);
	
		//사진 파일명 미정
		Str_Cat(m_szfilenm, ".jpg");

		if( theDevInfo.m_nType == FAMILY_PDA )
		{
			//Mem_Set((byte*)m_stWrkData.PHOTO_SAVE_JPG_PATH, 0x00, sizeof(m_stWrkData.PHOTO_SAVE_JPG_PATH));
			//SPRINT (m_stWrkData.PHOTO_SAVE_JPG_PATH, "%s/%s", PHOTO_WORK,  m_szfilenm, 0);
			Mem_Set((byte*)g_szphoto, 0x00, sizeof(g_szphoto));
			SPRINT (g_szphoto, "%s/%s", PHOTO_WORK,  m_szfilenm, 0);
			Card_Move("CM_PHOTO");
			return;
			
		}
		else
		{
			//원본파일
			//Mem_Set((byte*)m_stWrkData.PHOTO_SAVE_JPG_PATH, 0x00, sizeof(m_stWrkData.PHOTO_SAVE_JPG_PATH));
			//SPRINT (m_stWrkData.PHOTO_SAVE_JPG_PATH, "%s/%s", PHOTO_WORK,  m_szfilenm, 0);
			//에뮬에서 확인시...
			//Str_Cpy(szScrPht, szfilenm);
			//ShootPhoto ( 1, 0, m_szfilenm );

			h = JSON_Create( JSON_Object );
			if (h)
			{
				hdata = JSON_Create( JSON_Object );
				if(hdata == NULL)
				{
					goto Finally;
				}
				
				//2017-08-18 Sanghyun Lee
				//카메라 화질 설정(photo_quality)	
				//"MEDIA_QUALITY_AUTO" ->> 에러 발생, 필요X
				//"MEDIA_QUALITY_LOWEST"
				//"MEDIA_QUALITY_LOW" ->> 선택되는 화질이 없음 , 필요X
				//"MEDIA_QUALITY_MEDIUM" ->> 현재 사용중인버전
				//"MEDIA_QUALITY_HIGH"
				//"MEDIA_QUALITY_HIGHEST"
				JSON_SetValue	(hdata	, 'C', "photo_quality"		, "MEDIA_QUALITY_MEDIUM");

				//JSON_SetValue	(hdata	, 'C', "desc"				, "photo");
				JSON_SetValue	(hdata	, 'C', "position_info"		, " ");
				JSON_SetValue	(h		, 'C', "method"				, "CameraActivity");
				
				JSON_Attach 	(h		, "data"					, hdata);
			
				System_Call		("Native_System_Call" , JSON_toString(h));
			}
			
			Finally:
		
			if (h)
			{
				JSON_Finalize(h);
			}	
		
			if (hdata)
			{
				JSON_Finalize(hdata);
			}	
		}
		
		return;
	}

//----------------------------------------------------------------------------------------------
	void Photo_View(void)
	{	
		void* pImgViewPng;

		//PDA
		if(Str_Cmp(g_szDEVICE_NAME, "DS3") == 0 || Str_Cmp(g_szDEVICE_NAME, "M3T") == 0 || Str_Cmp(g_szDEVICE_NAME, "M3T") == 0 )
		{
			if( FFS_Exist("\\windows\\iexplore.exe" ) )
			{
				RunApp( "iexplore.exe", m_szLarge_Png_Path);
			}
			else if( FFS_Exist("\\windows\\iesample.exe" ) )
			{
				RunApp( "iesample.exe", m_szLarge_Png_Path);
			}
			else
			{
				MessageBoxEx (CONFIRM_OK, "사진조회 프로그램이 없습니다.");
			}
		}
		else
		{	
			if(FFS_Exist(m_szLarge_Png_Path))
			{
				pImgViewPng    = GrDev_LoadPngImage(PNG_COLOR_NORMAL,  m_szLarge_Png_Path );
				
				ButCtrl_SetImage( Get_hDlgCtrlByID(BID_LARGEPHOTO),  pImgViewPng);
			}
			else
			{
				MessageBoxEx (CONFIRM_OK, "사진이 없습니다.");
			}
		}

		ON_DRAW();
		return;
	}

//----------------------------------------------------------------------------------------------
	void AddrDraw   (void)
	{
		if( m_bFirst == INIT_INPUT )
		{
			//주소
			if( g_nAddrFlag == 1 )
			{
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_WRK_ADDR), "도로명\n주소");
				EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA1), m_stWrkData.NEW_ADDR_UNION );
			}
			else
			{
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_WRK_ADDR), "지번\n주소");
				EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA1), m_stWrkData.CURR_ADDR_UNION );
			}
		}
		else if( m_bFirst == INIT_WORK )
		{
			//주소
			if( g_nAddrFlag == 1 )
			{
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_WRK_ADDR), "도로명\n주소");
				EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA1), m_stWrkData.NEW_ADDR_UNION );
			}
			else
			{
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_WRK_ADDR), "지번\n주소");
				EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA1), m_stWrkData.CURR_ADDR_UNION );
			}
		}
		else if( m_bFirst == INIT_MTRSEARCH )
		{
			//주소
			if( g_nAddrFlag == 1 )
			{
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_MTR_ADDR), "도로명\n주소");
				EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA16), m_stWrkData.NEW_ADDR_UNION);
			}
			else
			{
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_MTR_ADDR), "지번\n주소");
				EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA16), m_stWrkData.CURR_ADDR_UNION);
			}
		}
		
		ON_DRAW();
		return;
	}

//-----------------------------------------------------------------------------------------------
	void Barcode(void)
	{
		long ret = 0;
		handle h = NULL;
		handle hdata = NULL;

		//2017-08-22 Sanghyun Lee
		//카메라 바코드(스마트폰 전용) & 빔 바코드 구분 사용 추가(설정은 공통메뉴에서 진행)
		if( Str_Cmp(g_szBarcodeSet, PHOTO_BARCODE) == 0 && theDevInfo.m_nType > FAMILY_PDA )
		{
			h = JSON_Create( JSON_Object );
			if (h)
			{
				hdata = JSON_Create( JSON_Object );
				if(hdata == NULL)
				{
					goto Finally;
				}
				
				JSON_SetValue	(hdata	, 'C', "desc"				, "카메라바코드");
				JSON_SetValue	(hdata	, 'C', "imgSaveEnabled"		, "false");						//{true, false}
				JSON_SetValue	(hdata	, 'C', "imgOutPath"			, "Barcode/barcode.jpg");		//Smart 하위 경로만 설정
				
				JSON_SetValue	(h		, 'C', "method"				, "BarcodeActivity");
				
				JSON_Attach 	(h		, "data"					, hdata);
			
				System_Call		("Native_System_Call" , JSON_toString(h));
			}
			
		Finally:
		
			if (h)
			{
				JSON_Finalize(h);
			}	
		
			if (hdata)
			{
				JSON_Finalize(hdata);
			}	
		}
		else
		{
			//스마트폰 -> Barcode_Init, Barcode_Exit 필요 ,, PDA -> Barcode_Init, Barcode_Exit 불필요 
			if( theDevInfo.m_nType > FAMILY_PDA )
			{
				Barcode_Init();
			}

			ret = Barcode_SendCommand( "start" );
		}

		return;
	}

//=======================================================================================
	void OnBarcodeRead(void)
	{
	char sztmp[100];
	char szSql[300];
	char szBar[10];
	long lCnt, lRow;
	long RetFlag = -1;
	long ret = 0;

		if( Str_Cmp(g_szBarcodeSet, BEAM_BARCODE) == 0 )
		{
			Mem_Set( (byte*)m_szBarcode_Num, 0x00, sizeof(m_szBarcode_Num) );
			ret = Barcode_Read( m_szBarcode_Num );	
			if( ret < 0)
			{
				MessageBoxEx (ERROR_OK, "바코드 읽기 실패");
				goto Finally;
			}
		}

		if( Str_Len(m_szBarcode_Num) > 3 )
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA2), m_szBarcode_Num );
			RetFlag = 1;
		}
		else
		{
			MessageBoxEx (CONFIRM_OK, "바코드 길이가 맞지 않습니다.");
			goto Finally;
		}

Finally:
		
		if( theDevInfo.m_nType > FAMILY_PDA && Str_Cmp(g_szBarcodeSet, BEAM_BARCODE) == 0 )
		{
			Barcode_Exit();
			//PRINT("m_szBarcode_Num  : %s",m_szBarcode_Num,0,0);
		}

		if( RetFlag > 0 )
		{
			Rcv_Info();
		}
		
		ON_DRAW();
		return;
	}


//=======================================================================================
	void PDA_OnBarcodeRead(void)
	{
	char sztmp[100];
	char szSql[300];
	char szBar[10];
	long lCnt, lRow;
	long RetFlag = -1;
	long ret = 0;

		Mem_Set( (byte*)m_szBarcode_Num, 0x00, sizeof(m_szBarcode_Num) );
		ret = Barcode_Read( m_szBarcode_Num );	
		if( ret < 0)
		{
			MessageBoxEx (ERROR_OK, "바코드 읽기 실패");
			goto Finally;
		}

		if( Str_Len(m_szBarcode_Num) > 3 )
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA2), m_szBarcode_Num );
			RetFlag = 1;
		}
		else
		{
			MessageBoxEx (CONFIRM_OK, "바코드 길이가 맞지 않습니다.");
			goto Finally;
		}

Finally:
		
		if( RetFlag > 0 )
		{
			Rcv_Info();
		}
		ON_DRAW();
		return;
	}

//------------------------------------------------------------------
	void AddrSrchDraw(void)
	{
		long i, idx;
		long k = ROW_A + 1;
		char sztmp[400];
		long ret = -1;	
		long lstartidx;
		handle hdb = NULL;
		handle hstmt = NULL;
		SQLITE sql = NewSqLite();

		if( m_bFirst == INIT_JIBUNSEARCH )
		{
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_JIBUN), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_ROADNM), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TOGETHER), TRUE );
		}
		else if( m_bFirst == INIT_TGTSEARCH )
		{
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_JIBUN), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_ROADNM), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TOGETHER), FALSE );
		}
		else if( m_bFirst == INIT_NEWSEARCH )
		{
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_JIBUN), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_ROADNM), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_TOGETHER), TRUE );
		}


		if( m_lAddrFlag == 1 )
		{
			SPRINT(sztmp, "SELECT COUNT(*) FROM GUMDATA WHERE %s",m_szAddr,0,0);
			g_Sql_RetInt( sztmp, &m_lTotpage_A );
			
			if( m_lTotpage_A % ROW_A > 0 )
			{
				m_lTotpage_A = (m_lTotpage_A / ROW_A) + 1;
			}
			else
			{
				m_lTotpage_A = m_lTotpage_A / ROW_A;
			}
			//페이지
			SPRINT(m_szCnt_page_A, "%d/%d", m_lpage_A+1, m_lTotpage_A, 0);
			
			hdb = sql->Open(sql);
			if( hdb == NULL )
			{
				goto Finally;
			}
			
			if( m_bFirst == INIT_NEWSEARCH )
			{
				hstmt = sql->CreateStatement(sql, m_szSql[1]);
			}
			else
			{
				hstmt = sql->CreateStatement(sql, m_szSql[0]);
			}
			
			if( hstmt == NULL )
			{
				PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
				goto Finally;
			}
			
			idx = 0;
			lstartidx = m_lpage_A*ROW_A;
			sql->Bind(sql, idx++, 'X', &lstartidx, 4, DECRYPT);
			i = m_lpage_A*ROW_A+ROW_A;
			sql->Bind(sql, idx++, 'X', &i, 4, DECRYPT);
			
			if(sql->Execute(sql) == FALSE)
			{
				PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
				goto Finally;
			}
	
			// 등록된 코드 리스트를 페이지에 맞게 보여준다.
			for (i=0 ; i<ROW_A ; i++)
			{
				//자료가 없을때 화면을 클리어 시킨다.
				if( k == i )
				{
					k++;
					DlgTbl_SetStr ( ID_ADDRLIST, i, 0, "" );
					DlgTbl_SetStr ( ID_ADDRLIST, i, 1, "" );
					DlgTbl_SetStr ( ID_ADDRLIST, i, 2, "" );
				}
				else
				{
					if(sql->Next(sql) == FALSE)
					{
						k = i + 1;
						DlgTbl_SetStr ( ID_ADDRLIST, i, 0, "" );
						DlgTbl_SetStr ( ID_ADDRLIST, i, 1, "" );
						DlgTbl_SetStr ( ID_ADDRLIST, i, 2, "" );
						continue;
					}
					
					idx = 0;
					//동명
					Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
					sql->GetValue(sql, idx++, 'U', (long*)sztmp, 50, DECRYPT);
					DlgTbl_SetStr ( ID_ADDRLIST, i, 0, sztmp );
					//주소
					Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
					sql->GetValue(sql, idx++, 'U', (long*)sztmp, 250, DECRYPT);
					DlgTbl_SetStr ( ID_ADDRLIST, i, 1, sztmp );
					//USE_CONT_NUM
					Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
					sql->GetValue(sql, idx++, 'U', (long*)sztmp, 20, DECRYPT);
					DlgTbl_SetStr ( ID_ADDRLIST, i, 2, sztmp );
				}
			}		
	Finally:
			//sql->Commit(sql);
			DelSqLite(sql);
	
			if(m_lTotpage_A > 0)
			{
				if( m_nActIndex_A < 0 )
				{
					m_nActIndex_A = 0;
				}
			
				DlgTbl_SetActive(ID_ADDRLIST , m_nActIndex_A+1 );
				DlgTbl_SetRowColor(ID_ADDRLIST, m_nActIndex_A+1, TABLEACTIVE_COLOR);
	
				Mem_Set( (byte*)m_szUse_cont_num, 0x00, sizeof(m_szUse_cont_num) );
				Str_Cpy( m_szUse_cont_num, DlgTbl_GetStr( ID_ADDRLIST, m_nActIndex_A, 2));
			}
		}

		ON_DRAW();
		return;
	}
	
	
//------------------------------------------------------------------
	void Search_Addr(void)
	{
		long chki = 0;
		char szWhere[400];

		Mem_Set( (byte*)m_szSql, 0x00, sizeof(m_szSql) );
		Mem_Set( (byte*)m_szAddr, 0x00, sizeof(m_szAddr) );
		
		Str_Cpy( m_szSql[0], "SELECT TOWN, CASE WHEN Length(Trim(CO_LIVE_NM))+Length(Trim(BLD_NM)) > 0 THEN ifnull(CO_LIVE_NM,'') ||' '|| ifnull(BLD_NM,'') ||'-'|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') ELSE ifnull(ADDR1_M,'') ||'-'|| ifnull(ADDR1_S,'') ||' '|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') END, USE_CONT_NUM FROM GUMDATA WHERE ");
		Str_Cpy( m_szSql[1], "SELECT TOWN, CASE WHEN Length(Trim(CO_LIVE_NM))+Length(Trim(BLD_NM)) > 0 THEN ifnull(CO_LIVE_NM,'') ||' '|| ifnull(BLD_NM,'') ||'-'|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') ELSE ifnull(NEW_ADDR_M,'') ||'-'|| ifnull(NEW_ADDR_S,'') ||' '|| ifnull(HOSU,'') ||' '|| ifnull(DETA_FLOOR,'') END, USE_CONT_NUM FROM GUMDATA WHERE ");
		
		if( m_bFirst == INIT_JIBUNSEARCH )
		{
			//지번
			if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(CMB_DATA2)) == 0 ||
			    EditCtrl_GetStrLen(Get_hDlgCtrlByID(CMB_DATA3)) == 0 ||
			    EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA3)) == 0 )
			{
				MessageBoxEx (CONFIRM_OK, "주소입력을 확인하세요.");
				return;
			}

			if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(CMB_DATA2) ) > 0   ) 
			{
				Mem_Set( (byte*)szWhere, 0x00, sizeof(szWhere) );
				Str_Cat( szWhere, "AREA = '" );
				Str_Cat( szWhere, EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA2) ) );
				Str_Cat( szWhere, "' " );
				Str_Cat( m_szSql[0], szWhere );
				Str_Cat( m_szSql[1], szWhere );
				Str_Cat( m_szAddr, szWhere );
				
				chki++;
			}
			
			if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(CMB_DATA3) ) > 0   ) 
			{
				Mem_Set( (byte*)szWhere, 0x00, sizeof(szWhere) );				
				if(chki > 0)
					Str_Cat( szWhere, " AND " );
				Str_Cat( szWhere, "TOWN = '" );
				Str_Cat( szWhere, EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA3) ) );
				Str_Cat( szWhere, "' " );
				Str_Cat( m_szSql[0], szWhere );
				Str_Cat( m_szSql[1], szWhere );
				Str_Cat( m_szAddr, szWhere );
				
				chki++;
			}
	
			if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA3) ) > 0   ) 
			{
				Mem_Set( (byte*)szWhere, 0x00, sizeof(szWhere) );
				if(chki > 0)
					Str_Cat( szWhere, " AND " );
				Str_Cat( szWhere, "ADDR1_M = '" );
				Str_Cat( szWhere, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA3) ) );
				Str_Cat( szWhere, "' " );
				Str_Cat( m_szSql[0], szWhere );
				Str_Cat( m_szSql[1], szWhere );
				Str_Cat( m_szAddr, szWhere );
				
				chki++;
			}
			
			if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA4) ) > 0   ) 
			{
				Mem_Set( (byte*)szWhere, 0x00, sizeof(szWhere) );
				if(chki > 0)
					Str_Cat( szWhere, " AND " );
				Str_Cat( szWhere, "ADDR1_S = '" );
				Str_Cat( szWhere, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA4) ) );
				Str_Cat( szWhere, "' " );
				Str_Cat( m_szSql[0], szWhere );
				Str_Cat( m_szSql[1], szWhere );
				Str_Cat( m_szAddr, szWhere );
			}
		}
		else if( m_bFirst == INIT_NEWSEARCH )
		{
			//도로명
			if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(CMB_DATA6)) == 0 ||
			    EditCtrl_GetStrLen(Get_hDlgCtrlByID(CMB_DATA7)) == 0 ||
			    EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA6)) == 0 )
			{
				MessageBoxEx (CONFIRM_OK, "주소입력을 확인하세요.");
				return;
			}

			if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(CMB_DATA6) ) > 0   ) 
			{
				Mem_Set( (byte*)szWhere, 0x00, sizeof(szWhere) );
				Str_Cat( szWhere, "AREA = '" );
				Str_Cat( szWhere, EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA6) ) );
				Str_Cat( szWhere, "' " );
				Str_Cat( m_szSql[0], szWhere );
				Str_Cat( m_szSql[1], szWhere );
				Str_Cat( m_szAddr, szWhere );
				chki++;
			}
	
			if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(CMB_DATA7) ) > 0   ) 
			{
				Mem_Set( (byte*)szWhere, 0x00, sizeof(szWhere) );
				if(chki > 0)
					Str_Cat( szWhere, " AND " );
				Str_Cat( szWhere, "NEW_ROAD_NM = '" );
				Str_Cat( szWhere, EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA7) ) );
				Str_Cat( szWhere, "' " );
				Str_Cat( m_szSql[0], szWhere );
				Str_Cat( m_szSql[1], szWhere );
				Str_Cat( m_szAddr, szWhere );
				chki++;
			}
	
			if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA6) ) > 0   ) 
			{
				Mem_Set( (byte*)szWhere, 0x00, sizeof(szWhere) );
				if(chki > 0)
					Str_Cat( szWhere, " AND " );
				Str_Cat( szWhere, "NEW_ADDR_M = '" );
				Str_Cat( szWhere, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA6) ) );
				Str_Cat( szWhere, "' " );
				Str_Cat( m_szSql[0], szWhere );
				Str_Cat( m_szSql[1], szWhere );
				Str_Cat( m_szAddr, szWhere );
				chki++;
			}
			
			if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA7) ) > 0   ) 
			{
				Mem_Set( (byte*)szWhere, 0x00, sizeof(szWhere) );
				if(chki > 0)
					Str_Cat( szWhere, " AND " );
				Str_Cat( szWhere, "NEW_ADDR_S = '" );
				Str_Cat( szWhere, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA7) ) );
				Str_Cat( szWhere, "' " );
				Str_Cat( m_szSql[0], szWhere );
				Str_Cat( m_szSql[1], szWhere );
				Str_Cat( m_szAddr, szWhere );
			}
		}
		else if( m_bFirst == INIT_TGTSEARCH )
		{
			//공동
			if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(CMB_DATA4)) == 0 )
			{
				MessageBoxEx (CONFIRM_OK, "공동 주택 입력을 확인하세요.");
				return;
			}
			else if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(CMB_DATA5)) == 0 )
			{
				MessageBoxEx (CONFIRM_OK, "건물명 입력을 확인하세요.");
				return;
			}

			if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(CMB_DATA4) ) > 0   ) 
			{
				Mem_Set( (byte*)szWhere, 0x00, sizeof(szWhere) );
				Str_Cat( szWhere, "CO_LIVE_NM = '" );
				Str_Cat( szWhere, EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA4) ) );
				Str_Cat( szWhere, "' " );
				Str_Cat( m_szSql[0], szWhere );
				Str_Cat( m_szSql[1], szWhere );
				Str_Cat( m_szAddr, szWhere );
				
				chki++;
			}
	
			if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(CMB_DATA5) ) > 0   ) 
			{
				Mem_Set( (byte*)szWhere, 0x00, sizeof(szWhere) );
				if(chki > 0)
					Str_Cat( szWhere, " AND " );
				Str_Cat( szWhere, "BLD_NM = '" );
				Str_Cat( szWhere, EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA5) ) );
				Str_Cat( szWhere, "' " );
				Str_Cat( m_szSql[0], szWhere );
				Str_Cat( m_szSql[1], szWhere );
				Str_Cat( m_szAddr, szWhere );
				
				chki++;
			}
			
			if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA5) ) > 0   ) 
			{
				Mem_Set( (byte*)szWhere, 0x00, sizeof(szWhere) );
				if(chki > 0)
					Str_Cat( szWhere, " AND " );
				Str_Cat( szWhere, "HOSU = '" );
				Str_Cat( szWhere, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA5) ) );
				Str_Cat( szWhere, "' " );
				Str_Cat( m_szSql[0], szWhere );
				Str_Cat( m_szSql[1], szWhere );
				Str_Cat( m_szAddr, szWhere );
			}
		}
		
		Str_Cat( m_szSql[0], "ORDER BY DONG_ORD, HOUSE_NUM_ORD, MTR_COURSE LIMIT ?, ?"  );
		Str_Cat( m_szSql[1], "ORDER BY DONG_ORD, HOUSE_NUM_ORD, MTR_COURSE LIMIT ?, ?"  );

		m_lAddrFlag = 1;
		AddrSrchDraw();
		
		return;
	}
	
	//---------------------------------------------------------------------------------------------------------------
	void Grid_QuickList(void)
	{
		handle h = NULL;
		handle hData = NULL;
		handle hHead = NULL;
		char key[32];
		char val[32];
		long i, j;
		long col_count;
		long col_height;
		long start_position;
		
		char col_name[5][32] = {"등록일자", "주소", " ", "", ""};
		//필드 간격 조정
		char col_weight[5][10] = {"2","3","0","0","0"};
		char col_align[5][10]  = {"center", "left", "center","center", ""};
		
		Mem_Set( (byte*)m_szQuickSql, 0x00, sizeof(m_szQuickSql) );
		if( g_nAddrFlag == 0 )
		{
			Str_Cpy(m_szQuickSql, "SELECT REG_YMD, CURR_ADDR_UNION, '' AS ETC FROM C6101_WORK_REPORT");
		}
		else
		{
			Str_Cpy(m_szQuickSql, "SELECT REG_YMD, NEW_ADDR_UNION, '' AS ETC FROM C6101_WORK_REPORT");
		}
	
		h = JSON_Create( JSON_Object );
		if (h)
		{
			hData = JSON_Create( JSON_Object );
			if(hData == NULL)
			{
				goto Finally;
			}

			JSON_SetValue	(hData	, 'C', "list_type"	, "GridListView");
			//재 호출했을때, 이전 위치를 기억하고 있으려면 매 호출시 마다
			//true를 해 주어야 한다.
			//만약 종류가 다른 뷰를 호출할 경우, 문제가 되므로 반드시 매번 호출시
			//개별 판단하여 제어를 해야 한다.
			JSON_SetValue	(hData	, 'C', "list_position_save"	, "true");		//true/false
			
			col_count = 3;
			JSON_SetValue	(hData	, 'X', "col_count"			, &col_count);

			col_height = 250;
			JSON_SetValue	(hData	, 'X', "col_height"			, &col_height);

			start_position = m_nSelectedIndex;
			JSON_SetValue	(hData	, 'X', "start_position"		, &start_position);
			
			JSON_SetValue	(hData	, 'C', "bind_type"	, "query");				//json or query
			JSON_SetValue	(hData	, 'C', "dbname"		, "APP_DBF/SCGGAS.db");
			
			JSON_SetValue	(hData	, 'C', "query", m_szQuickSql);
			
			hHead = JSON_Create( JSON_Array );
			if(hHead == NULL)
			{
				goto Finally;
			}		
	
			for (i=0; i<col_count; i++)
			{
				JSON_AddArrayItem(hHead);
				JSON_SetArrayItem(hHead, 'C', "col_head"	, col_name[i]);
				JSON_SetArrayItem(hHead, 'C', "col_weight"	, col_weight[i]);
				JSON_SetArrayItem(hHead, 'C', "col_align"	, col_align[i]);
			}
			
			JSON_Attach 	(hData	, "head"				, hHead);
			
			JSON_SetValue	(h		, 'C', "title"			, "업무보고 조회");
			JSON_SetValue	(h		, 'C', "method"			, "ListViewActivity");
			JSON_Attach 	(h		, "data"				, hData);
		
			System_Call		("Native_System_Call" , JSON_toString(h));
		}
		
	Finally:
	
		if (h)
		{
			JSON_Finalize(h);
		}	
	
		if (hData)
		{
			JSON_Finalize(hData);
		}
			
		if (hHead)
		{
			JSON_Finalize(hHead);
		}	
	}
}





