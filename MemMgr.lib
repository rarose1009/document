/*----------------------------------------------------------------------------------
	Project Name: Smart
	Compiler & Virtual Machine : SMART 1.0.0
	Copyright(c) 2014 Value CMD Co., Ltd
	----------	------		------------------------------------------------------
	2014.10.01	dkjung		v 3.0.1		: Create 스마트폰 포팅
----------------------------------------------------------------------------------*/

#include "MemMgr.h"

/*
// 매크로 사용 방법

//기존의 소스 사용을 가능하도록 유지.
#define CREATE_INFO(p, nOld, nNew) g_CreateData ((DATA_TYPE*)p, nOld, nNew)
#define DELETE_INFO(p) g_Delete((DATA_TYPE**)&p)

// 메모리 매니저 매크로

// 메모리매니저를 생성한다. msg는 할당된 메모리의 설명을 넣을 수 있다.
#define MMGR_CREATE(hMem, nOld, nNew, msg) g_CreateMemMgr (hMem, nOld, nNew, msg)

// 지정된 핸들의 메모리 매니저를 해제한다. 
#define MMGR_DELETE(hMem) 	g_DeleteMemMgr (hMem)

// 현재 메모리 매니저내의 모든 메모리를 해제 한다.
#define MMGR_DELETE_ALL 	g_DeleteMemMgrAll

// 메모리 릭 첵크 매크로

// 메모리 릭되는 전체 크기를 알아낸다.
#define MMGR_GET_LEAKSIZE	g_GetMemLeakSize

// 메모리 릭되는 정보를 한개씩 리턴한다.
// 결과값이 NULL이 될때까지 계속 i를 증가 시키면서 읽으면 된다. (0 < i < MAX_MEM_MGR)
// 포인터로 되돌려지는 정보는 
// 1. msg  : 메모리 할당 블럭의 설명
// 2. size : 릭되는 현재 할당 블럭의 크기
// 3. pMem : 릭되는 할당 메모리 포인터
#define MMGR_GET_LEAKINFO(i, msg, size, pMem) g_GetMemLeakInfo (hMem, msg, size, pMem)

//응용
MMGR_GET_LEAKINFO 를 이용하여, msg에 특정한 업무 영역내에 사용되는 메모리를 구별해 낼 수 있다.
예를 들어, 특정한 업무 영역을 벗어날 경우, 업무 영역내에 사용되었던 메모리들을 모두 찾아내서
선택적 해제가 가능하다. 그외 기타의 응용은 맘대로 생각해 보세요.

*/

//dkjung 2004-10-07
//50개로 제한.
//인덱스 0은 사용하지 않는다.
//이유: 메모리 NULL 핸들과 겹치지 않도록...
MEM_MGR_INFO g_stMemMgr[ MAX_MEM_MGR ] =
{
	{-1, -1, -1},//사용하지 않음, 메모리 NULL 핸들 영역과 겹치지 않도록...
	{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
	{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
	{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
	{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
	{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
	{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
	{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
	{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
	{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0},
	{0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}
};

//-----------------------------------------------------------------------------
long MemMgr_FindEmptySlot (void)
{
	long i;

	for(i=1; i<MAX_MEM_MGR; i++)
	{
		if ( g_stMemMgr[i].m_pMem == NULL ) 
			return i;
	}
	return NULL;
}

//-----------------------------------------------------------------------------
MEM_MGR_INFO* MemMgr_GetHandle (long hMem)
{
	if( hMem == 0 && hMem > MAX_MEM_MGR - 1 )
		return NULL;
	
	if (g_stMemMgr[hMem].m_pMem == NULL)
		return NULL;
	
	return (&g_stMemMgr[hMem]);
}

//-----------------------------------------------------------------------------
BOOL MemMgr_SetHandle (long hMem, MEM_MGR_INFO* p)
{
	if( hMem == 0 && hMem > MAX_MEM_MGR - 1 )
		return FALSE;
		
	g_stMemMgr[hMem] = *p;
	
	return TRUE;
}

//-----------------------------------------------------------------------------
BOOL MemMgr_IsAlloc (long hMem)
{
	if( hMem == 0 && hMem > MAX_MEM_MGR - 1 )
		return FALSE;
		
	if ( g_stMemMgr[hMem].m_pMem ) 
		return TRUE;

	return FALSE;
}

//-----------------------------------------------------------------------------
long MemMgr_CreateInfo (MEM_MGR_INFO* p)
{
	long hMem;

	hMem = MemMgr_FindEmptySlot ();
	if ( hMem == NULL ) return NULL;

	if( !MemMgr_SetHandle (hMem, p) )
		return NULL;

	return hMem;
}

//-----------------------------------------------------------------------------
BOOL MemMgr_DeleteInfo ( long hMem )
{
	MEM_MGR_INFO stInfo = {0, 0, 0};
	
	if( hMem == 0 && hMem > MAX_MEM_MGR - 1 )
		return FALSE;
	
	if( !MemMgr_IsAlloc (hMem) )
		return FALSE;

	if( !MemMgr_SetHandle (hMem, &stInfo) )
		return FALSE;

	return TRUE;
}

// 데이터를 메모리에 크기만큼 새로 할당한다.
//---------------------------------------------------------------
long g_New (DATA_TYPE* p[], long nSize)
{
	*p = (void*)Mem_Alloc (nSize*sizeof(DATA_TYPE));
	if (!*p)
	{
		return -1;
	}
		
	return 0;
}

// 할당된 데이터를 메모리에서 제거 한다.
//---------------------------------------------------------------
long g_Delete (DATA_TYPE* p[])
{
	if (*p)
	{
		Mem_Free ((void*)*p);
		*p = NULL;
	}
	
	return 0;	
}

// dkjung 2003-06-11
// DATA_TYPE 타입은 각 지역에서 타입캐스팅으로 처리 
//========================================================================================
//	기  능 : 선언된 DATA_TYPE형의 메모리를 재 할당
//	설  명 : 데이터를 메모리에 지정된 크기나 변경된 크기만큼 할당, 재 할당한다.
//	Parameter
//		pOld		: 이미 할당되어 있는 메모리 포인터.
//		nOldSize	: 이전 할당 메모리 크기
//						- 크기가 0이고, 이전 메모리가 할당되어 있을 경우 삭제하고 할당.
//						- 크기가 0이 아니고, 이전 메모리가 존재하면 변경된 크기만큼 재 할당.
//						- 크기와 상관없이 이전메모리가 없으면, 새 크기만큼만 할당된다.
//		nNewSize	: 새로 할당될 메모리 크기
//========================================================================================
DATA_TYPE*	g_CreateData (DATA_TYPE* pOld, quad nOldSize, quad nNewSize)
{
	DATA_TYPE* pNew;
	
	if (nOldSize == nNewSize)
		return pOld;
	else if (nNewSize == 0)
		return NULL;
	
	if (nOldSize == 0 && pOld)
	{
		g_Delete (&pOld);
		pOld = NULL;
	}

	if( g_New (&pNew, nNewSize) < 0)
	{
		pNew = NULL;
		return NULL;
	}
	
	// 할당된 버퍼를 모두 클리어 하고 사용한다.
	Mem_Set ((byte*)pNew, 0, nNewSize);
	
	if (pOld)
	{
		Mem_Cpy ((byte*)pNew, (byte*)pOld, nOldSize*sizeof(DATA_TYPE));
		g_Delete (&pOld);
		pOld = NULL;
	}
	
	return pNew;
}

//========================================================================================
//	기  능 : 선언된 MEM_MGR_INFO형의 메모리를 재 할당
//	설  명 : 데이터를 메모리에 지정된 크기나 변경된 크기만큼 할당, 재 할당한다.
//	Parameter
//		hMem		: 이미 할당되어 있는 메모리 매니저 핸들, 만약 NULL이면,
//					: 새로 할당한다.
//		nOldSize	: 이전 할당 메모리 크기
//						- 크기가 0이고, 이전 메모리 매니저 핸들이 할당되어 있을 경우,
//						  삭제하고 할당.
//						- 크기가 0이 아니고, 이전 메모리 매니저 핸들이 존재하면,
//						  변경된 크기만큼 재 할당.
//						- 크기와 상관없이 이전 메모리 매니저 핸들이 없으면,
//						  새 크기만큼만 할당된다.
//		nNewSize	: 새로 할당될 메모리 크기
//		pszMsg		: 할당된 메모리에 간단한 설명을 넣을 수 있다.
//========================================================================================
long g_CreateMemMgr ( long hMem, quad nOldSize, quad nNewSize, char* pszMsg )
{
	MEM_MGR_INFO* 	pstOld = NULL;
	MEM_MGR_INFO 	stNew;
	
	if (nNewSize == 0)
		return NULL;
	
	if (pszMsg == NULL) return NULL;
	else if (Str_Len (pszMsg)+1 > MAX_MEMMSG_LEN)
		return NULL;
	
	//기존의 할당된 핸들로 간주.
	if ( hMem > 0 && hMem < MAX_MEM_MGR )
	{
		pstOld = MemMgr_GetHandle (hMem);
		if (pstOld->m_pMem)
		{
			if (nOldSize >= nNewSize)
			{
				//이 경우 그대로 리턴한다.
				return hMem;
			}
			else if (nOldSize == 0)
			{
				//메모리 해제하고 새 크기로 다시 할당
				g_Delete (&pstOld->m_pMem);
				MemMgr_DeleteInfo (hMem);
			}
		}
	}
	else if (hMem >= MAX_MEM_MGR)
	{
		return NULL;
	}
	
	if( g_New (&stNew.m_pMem, nNewSize) < 0)
	{
		return NULL;
	}
	
	// 할당된 버퍼를 모두 클리어 하고 사용한다.
	Mem_Set ((byte*)stNew.m_pMem, 0, nNewSize);
	
	if (pstOld->m_pMem)
	{
		Mem_Cpy ((byte*)stNew.m_pMem, (byte*)pstOld->m_pMem,
				 pstOld->m_nSize * sizeof(DATA_TYPE));
				 
		g_Delete (&pstOld->m_pMem);
		MemMgr_DeleteInfo (hMem);
	}
	
	Str_Cpy (stNew.m_szName, pszMsg);
	stNew.m_nSize = nNewSize;
	
	return MemMgr_CreateInfo (&stNew);
}

//========================================================================================
long g_DeleteMemMgr ( long hMem )
{
	MEM_MGR_INFO* 	p = NULL;
	
	p = MemMgr_GetHandle (hMem);
	if (p->m_pMem)
	{
		g_Delete (&p->m_pMem);
		MemMgr_DeleteInfo (hMem);
		
		return 0;
	}

	return -1;
}

//========================================================================================
void g_DeleteMemMgrAll ( void )
{
	long i;

	for(i=1; i<MAX_MEM_MGR; i++)
	{
		if ( g_stMemMgr[i].m_pMem )
		{
			g_Delete (&g_stMemMgr[i].m_pMem);
			MemMgr_DeleteInfo (i);
		}
	}
}

//메모리 디버깅 관련 API
//========================================================================================
//
//	메모리 릭 첵크
//
//========================================================================================
long g_GetMemLeakSize ( void )
{
	long i;
	long nMemLeak;
	
	nMemLeak = 0;

	for(i=1; i<MAX_MEM_MGR; i++)
	{
		if ( g_stMemMgr[i].m_pMem )
		{
			nMemLeak += g_stMemMgr[i].m_nSize;
		}
	}
	
	return nMemLeak;
}

// NULL이 될때까지 계속해서 hMem을 증가하면서 호출한다.
// hMem 은 1부터 시작...
long g_GetMemLeakInfo ( long hMem, char* pszMsg, long* pSize, long* pMem )
{
	MEM_MGR_INFO* p = NULL;
	
	if( hMem == 0 && hMem > MAX_MEM_MGR - 1 )
		return NULL;
	
	p = &g_stMemMgr[hMem];
	
	if ( p->m_pMem )
	{
		Str_Cpy (pszMsg, p->m_szName);
		*pSize = p->m_nSize;
		*pMem = (long)p->m_pMem;
	}
	else
	{
		pszMsg = '\0';
		*pSize = 0;
		*pMem = 0;
	}
	
	return 1;
}
