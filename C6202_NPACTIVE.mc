/*----------------------------------------------------------------------------------
	Project Name:
	Smart Application : 카드 기본폼
	Smart Version : Smart 1.0
	Copyright(c) 2014  ValueCMD Co., Ltd.
----------------------------------------------------------------------------------*/
card C6202_NPACTIVE
{
	#include <include.h>
	#include "globalcard.h"
	#include "SQL.lib"
	
//	#define USE_ON_EXIT
//	#define USE_ON_CHAR
//	#define USE_ON_KEY
//	#define USE_ON_DRAW
//	#define USE_ON_TIMER
	#define USE_ON_POINTING
	#define USE_ON_SELECT

	#include "DefEvent.h"
	
	//BUTTON ID define
	BEGIN_BUTTON_ID()
		DEF_BUTTON_ID ( BID_CLIENT )		//계약번호(고객정보)
		DEF_BUTTON_ID ( BID_STOPCANCEL )	//중단대상
		DEF_BUTTON_ID ( BID_ACTEXCEPT )		//활동제외
		DEF_BUTTON_ID ( BID_MEMO )			//메모
		DEF_BUTTON_ID ( BID_ADDR )			//주소토글
		DEF_BUTTON_ID ( BID_VOUCHER )		//바우처
		DEF_BUTTON_ID ( BID_HPTEL)			//핸드폰번호
		DEF_BUTTON_ID ( BID_HOUSETEL)		//집전화번호
		DEF_BUTTON_ID ( BID_PAYTEL)			//납부자번호
		DEF_BUTTON_ID ( BID_VIRTACCOUNT )	//납부방법(가상계좌)
		DEF_BUTTON_ID ( BID_PAYINFO )		//자동이체 정보
		DEF_BUTTON_ID ( BID_NPMANAGE )		//체납관리
		DEF_BUTTON_ID ( BID_AUCTION )		//경매정보
		DEF_BUTTON_ID ( BID_DEPT )			//불이행
		DEF_BUTTON_ID ( BID_WARR )			//담보관리
		DEF_BUTTON_ID ( BID_VISIT )			//방문활동
		DEF_BUTTON_ID ( BID_EARLYALARM )	//조기경보
		DEF_BUTTON_ID ( BID_PREVPG )		//이전페이지
		DEF_BUTTON_ID ( BID_NEXTPG )		//다음페이지
		DEF_BUTTON_ID ( BID_SMS )		
		DEF_BUTTON_ID ( BID_SMSOK )		
		DEF_BUTTON_ID ( BID_SMSBACK )		
		DEF_BUTTON_ID ( BID_SMSPREV )		

		

//가상계좌
		DEF_BUTTON_ID ( BID_CLOSE )			//상단 닫기 버튼
		DEF_BUTTON_ID ( BID_VIRTCLOSE )		//닫기
		DEF_BUTTON_ID ( BID_VIRTPREV )		//이전
		DEF_BUTTON_ID ( BID_VIRTNEXT )		//다음
//메모
		DEF_BUTTON_ID ( BID_MEMOCLOSE )		//X
		DEF_BUTTON_ID ( BID_MEMOOK )		//확인
		DEF_BUTTON_ID ( BID_PREVMEMO )		//이전메모
		DEF_BUTTON_ID ( BID_NEXTMEMO )		//다음메모
		DEF_BUTTON_ID ( BID_PREVCUST )		//이전대상
		DEF_BUTTON_ID ( BID_NEXTCUST )		//다음대상
		DEF_BUTTON_ID ( BID_CLIENT_M )		//계약번호
		DEF_BUTTON_ID ( BID_STOPCANCEL_M )	//중단대상
		DEF_BUTTON_ID ( BID_ADDR_M )		//주소
//자동이체 정보
		DEF_BUTTON_ID ( BID_PAYOK )			//확인
		
	//화면 상단 공통 메뉴 모음
		DEF_BUTTON_ID ( BID_HOME )		//홈
		DEF_BUTTON_ID ( BID_MENU )		//메뉴
		DEF_BUTTON_ID ( BID_KEYBOARD )	//키보드
		DEF_BUTTON_ID ( BID_SCREEN )	//화면 상하
		DEF_BUTTON_ID ( BID_CMMNWORK )	//공통업무
		DEF_BUTTON_ID ( BID_PREV )		//이전
		DEF_BUTTON_ID ( BID_EXIT )		//종료
	END_BUTTON_ID()
	
	BEGIN_OBJECT_ID()
		DEF_OBJECT_ID ( TXT_TITLE )		//타이틀
		DEF_OBJECT_ID ( TXT_TITLE_SUB )		//타이틀
		DEF_OBJECT_ID ( TXT_BORDER )
		DEF_OBJECT_ID ( TXT_PAGE )
		DEF_OBJECT_ID ( TXT_DATA1 )
		DEF_OBJECT_ID ( TXT_DATA2 )
		DEF_OBJECT_ID ( TXT_DATA3 )
		DEF_OBJECT_ID ( TXT_DATA4 )
		DEF_OBJECT_ID ( TXT_DATA5 )
		DEF_OBJECT_ID ( TXT_DATA6 )
		DEF_OBJECT_ID ( TXT_DATA7 )
		DEF_OBJECT_ID ( TXT_DATA8 )
		DEF_OBJECT_ID ( TXT_DATA9 )
		DEF_OBJECT_ID ( TXT_DATA10 )
		DEF_OBJECT_ID ( TXT_DATA11 )
		DEF_OBJECT_ID ( TXT_DATA12 )
		DEF_OBJECT_ID ( TXT_DATA13 )
		DEF_OBJECT_ID ( TXT_DATA14 )
		DEF_OBJECT_ID ( TXT_DATA15 )
		DEF_OBJECT_ID ( TXT_DATA16 )
		DEF_OBJECT_ID ( TXT_DATA17 )
		DEF_OBJECT_ID ( TXT_DATA18 )
		DEF_OBJECT_ID ( TXT_DATA19 )
		DEF_OBJECT_ID ( TXT_DATA20 )
		DEF_OBJECT_ID ( TXT_DATA21 )
		DEF_OBJECT_ID ( TXT_DATA22 )
		DEF_OBJECT_ID ( TXT_DATA23 )
		DEF_OBJECT_ID ( TXT_DATA24 )
		DEF_OBJECT_ID ( TXT_DATA25 )
		DEF_OBJECT_ID ( TXT_DATA26 )
		DEF_OBJECT_ID ( TXT_DATA27 )
		DEF_OBJECT_ID ( TXT_DATA28 )
		DEF_OBJECT_ID ( TXT_DATA29 )
		DEF_OBJECT_ID ( TXT_DATA30 )
		DEF_OBJECT_ID ( TXT_DATA31 )
		DEF_OBJECT_ID ( TXT_DATA32 )
		DEF_OBJECT_ID ( TXT_DATA33 )
		DEF_OBJECT_ID ( TXT_DATA34 )
		DEF_OBJECT_ID ( TXT_DATA35 )
		DEF_OBJECT_ID ( TXT_DATA36 )
		DEF_OBJECT_ID ( TXT_DATA37 )
		DEF_OBJECT_ID ( TXT_DATA38 )
		DEF_OBJECT_ID ( TXT_DATA39 )
		DEF_OBJECT_ID ( TXT_DATA40 )
//가상계좌조회
		DEF_OBJECT_ID ( TXT_VIRTPAGE )
		DEF_OBJECT_ID ( TXT_DATA41 )
//메모
		DEF_OBJECT_ID ( TXT_PAGE_M )
		DEF_OBJECT_ID ( TXT_MEMOPAGE )
		DEF_OBJECT_ID ( TXT_DATA42 )
		DEF_OBJECT_ID ( TXT_DATA49 )
		DEF_OBJECT_ID ( TXT_DATA50 )

//자동이체 정보
		DEF_OBJECT_ID ( TXT_DATA43 )
		DEF_OBJECT_ID ( TXT_DATA44 )
		DEF_OBJECT_ID ( TXT_DATA45 )
		DEF_OBJECT_ID ( TXT_DATA46 )
		DEF_OBJECT_ID ( TXT_DATA47 )
		DEF_OBJECT_ID ( TXT_DATA48 )

// SMS 정보 
		DEF_OBJECT_ID ( TXT_DATA51 )
		DEF_OBJECT_ID ( TXT_DATA52 )
		DEF_OBJECT_ID ( TXT_DATA53 )

//포인팅 자판
		DEF_OBJECT_ID ( TXT_KEY_ONE )
		DEF_OBJECT_ID ( TXT_KEY_TWO )
		DEF_OBJECT_ID ( TXT_KEY_THREE )
		DEF_OBJECT_ID ( TXT_KEY_FOUR )
		DEF_OBJECT_ID ( TXT_KEY_FIVE )
		DEF_OBJECT_ID ( TXT_KEY_SIX )
		DEF_OBJECT_ID ( TXT_KEY_SEVEN )
		DEF_OBJECT_ID ( TXT_KEY_EIGHT )
		DEF_OBJECT_ID ( TXT_KEY_NINE )
		DEF_OBJECT_ID ( TXT_KEY_ZERO )
		DEF_OBJECT_ID ( TXT_KEY_DEL )		

		DEF_OBJECT_ID ( EDT_DATA1 )
		DEF_OBJECT_ID ( EDT_DATA2 )
		DEF_OBJECT_ID ( EDT_DATA3 )

	
		DEF_OBJECT_ID ( ICON_TITLE )		//타이틀
		DEF_OBJECT_ID ( ICON_TITLE_SUB )		//타이틀
		
		DEF_OBJECT_ID ( LINE_DATA1 )
		
		DEF_OBJECT_ID ( ID_VIRTTBLLIST )
//메모
		DEF_OBJECT_ID ( ID_MEMOLIST)
	END_OBJECT_ID()
	
	#define INIT_MAIN	     1
	#define INIT_VIRTACCOUNT 2
	#define INIT_MEMO        3
	#define INIT_PAYINFO     4
	#define INIT_SMS	     5
	
	//-------------------------------------------------------------------------------------------------	
	//	Table정의에 관련된 내용들
	//-------------------------------------------------------------------------------------------------
	#define		ROW_V 	    11								// table의 행개수
	#define		COL_V 	    3								// table의 열개수
	#define		GRID_H_V	(CHT+15)						// table 행 높이
	#define		GRID_H_V_P	(CHT+20)						// table 행 높이
	#define		GRID_CLR_V	TRANSPARENT   					// table 클리어 color
	#define		GRID_X_V	STARTX 							// table 시작x좌표
	#define		MAXCHAR_V	201 				    		// table에 들어갈수 있는 최대  char 길이
	#define		GRID_Y_V	STARTY-29  	    				//table 시작y좌표
	#define		GRID_Y_V_P	STARTY-40  	    				//table 시작y좌표 PDA
	#define		GRID_ENDY_V	(GRID_Y_V+(ROW_V+1)*GRID_H_V)   //table마지막 row의 Y값
	
	char	m_szTableBuf_V [COL_V*(ROW_V+1)*MAXCHAR_V]; // 각 CELL에 들어가 텍스트 내용을 담은 버퍼
		
	Column m_stGridTitle_V[] = {
		{"코드", 		 CWD*5, EDITALIGN_CENTER|EDITALIGN_MIDDLE, TABLE_TEXT, 0},
		{"은행명", 		CWD*11+23, EDITALIGN_CENTER|EDITALIGN_MIDDLE, TABLE_TEXT, 0},
		{"계좌번호", 	CWD*23, EDITALIGN_CENTER|EDITALIGN_MIDDLE, TABLE_TEXT, 0}
	};


	//-------------------------------------------------------------------------------------------------	
	//	Table정의에 관련된 내용들 메모
	//-------------------------------------------------------------------------------------------------
	#define		ROW_M 	    2					// table의 행개수
	#define		COL_M 	    3					// table의 열개수
	#define		GRID_H_M	(CHT+15)			// table 행 높이
	#define		GRID_H_M_P	(CHT+20)			// table 행 높이
	#define		GRID_CLR_M	TRANSPARENT   		// table 클리어 color
	#define		GRID_X_M	STARTX 				// table 시작x좌표
	#define		MAXCHAR_M	501 			    // table에 들어갈수 있는 최대  char 길이
	#define		GRID_Y_M	STARTY+640  	    //table 시작y좌표
	#define		GRID_Y_M_P	STARTY+660  	    //table 시작y좌표 PDA
	#define		GRID_ENDY_M	(GRID_Y_M+(ROW_M+1)*GRID_H_M) //table마지막 row의 Y값
	
	char	m_szTableBuf_M [COL_M*(ROW_M+1)*MAXCHAR_M]; // 각 CELL에 들어가 텍스트 내용을 담은 버퍼
		
	Column m_stGridTitle_M[] = {
		{"등록일시", 	CWD*25,    EDITALIGN_CENTER|EDITALIGN_MIDDLE, TABLE_TEXT, 0},
		{"등록자", 		CWD*14+23, EDITALIGN_CENTER|EDITALIGN_MIDDLE, TABLE_TEXT, 0},
		{"메모내용", 	CWD*0,     EDITALIGN_CENTER|EDITALIGN_MIDDLE, TABLE_TEXT, 0}
	};

		
	SysButCtrl SysButRes_MAIN[] =
	 {
		  SYS_BUT_IMG (  BTNX_1, BTNY_1, BTNWD_1, BTNHT_1, 0, 0, BUTSTY_BOLD , 0, 0, 0, OBJ_BUT, GID_HOME,  0),
		  SYS_BUT_IMG (  BTNX_2, BTNY_1, BTNWD_1, BTNHT_1, 0, 0, BUTSTY_BOLD , 0, 0, 0, OBJ_BUT, GID_KEYBOARD,  0),
		  SYS_BUT_IMG (  BTNX_3, BTNY_1, BTNWD_1, BTNHT_1, 0, 0, BUTSTY_BOLD , 0, 0, 0, OBJ_BUT, GID_SCREEN, 0),
		  SYS_BUT_IMG (  BTNX_4, BTNY_1, BTNWD_1, BTNHT_1, 0, 0, BUTSTY_BOLD , 0, 0, 0, OBJ_BUT, GID_CMMNWK,  0),
		  SYS_BUT_IMG (  BTNX_5, BTNY_1, BTNWD_1, BTNHT_1, 0, 0, BUTSTY_BOLD , 0, 0, 0, OBJ_BUT, GID_VMEXIT, 0),
		  SYS_BUT_IMG (  BTNX_6, BTNY_2, BTNWD_2, BTNHT_2, 0, 0, BUTSTY_BOLD|BUTSTY_BORDER , 0, TRANSPARENT, TRANSPARENT, OBJ_BUT, GID_MENU, 0),
		  SYS_BUT_IMG (  BTNX_7, BTNY_2, BTNWD_2, BTNHT_2, 0, 0, BUTSTY_BOLD|BUTSTY_BORDER , 0, TRANSPARENT, TRANSPARENT, OBJ_BUT, GID_PREV, 0),
	 };


	long m_bFirst;	
	long m_ltotcnt;
	long m_lpage_V = 0;
	long m_lpage_M = 0;
	long m_lTotpage_V = 0;
	long m_lTotpage_M = 0;
	long m_lVirtActIndex = -1;
	long m_lMemoAct = -1;
	long m_lPayinfoFlag = -1;
	long m_lMemoBtnFlag = 0;
	long m_lMoveFlag = 0;

	char m_szCnt_page_V[10];
	char m_szCnt_page_M[10];
	char m_szPhone[20];
	char m_szCnt_index[11];     //인덱스 문자열(현재 페이지)
	char m_szHpTel[30];
	char m_szHouseTel[30];
	char m_szPayTel[30];

	long m_lEditCtrlIndex = -1;

	
	long FS_GetSrchTotCnt(void);
	void SetBtnImg(void);
	void Set_Index(void);
	void SetStyle(void);
	void SetData(void);
	void SetDate_Part(void);
	void SetDate_Stop(void);
	
	void Snd_FR90008(void);
	long Rcv_FR90008(void);
	
	void ReDraw(void);
	void Prev_Np(void);
	void Next_Np(void);
	void Call_Tel(long BtnId);
//체납활동 미납요금 실시간조회 응답
	long Rcv_Unpay(void);
	long TR82257(void);
	long RcvDraw(long nservicenum);
//체납활동 체납상태 정보 응답
	long Rcv_MtrSupplySts(void);
	long TR822571(void);
	
//가상계좌
	long Rcv_VirtAccount(void);
	long TR82211(void);
	void Virt_Draw(void);
	
//자동이체 정보
	long Rcv_Payinfo(void);
	long TR82246(void);
	long Payinfo_Draw(long nservicenum);

//메모
	long Rcv_Memo(void);
	long TR82249(void);
	void Memo_Draw(void);

	// 메인 다이얼로그
	//---------------------------------------------------------------
	DlgObject	DlgRes[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_TEXT(0, 0, 998, BTNHT_1, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, WHITE, TRANSPARENT, TXT_BORDER, ""),
		DLG_ICON(0, BTNY_2, ICON_TITLE, ""),
		//타이틀
		DLG_TEXT(TX, TY, STWD, STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "체납 활동"),

		DLG_BUTTON(STARTX,     STARTY+65, 230, 50, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CLIENT		, "계약번호"),
		DLG_BUTTON(STARTX+570, STARTY+65, 230, 50, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_STOPCANCEL	, ""), //중단대상
		DLG_BUTTON(STARTX,    STARTY+115, 230, 85, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ADDR			, "지번\n주소"),
		//DLG_BUTTON(STARTX+580,STARTY+200, 250, 50, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ACTEXCEPT	, "활동제외"),
		DLG_BUTTON(STARTX+780,STARTY+200, 220, 50, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_MEMO			, "메모"),
		DLG_BUTTON(STARTX+580,STARTY+350, 200, 50, 0, 0, 0, BUTSTY_BORDER, 			  RED, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_VOUCHER		, "바우처"),
		DLG_BUTTON(STARTX+230,STARTY+400, 380, 50, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_HPTEL		, ""),
		DLG_BUTTON(STARTX+610,STARTY+400, 390, 50, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_HOUSETEL		, ""),
		DLG_BUTTON(STARTX+610,STARTY+450, 390, 50, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_PAYTEL		, ""),
		DLG_BUTTON(STARTX+560,STARTY+550, 215, 50, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_VIRTACCOUNT	, "납부방법"),
		DLG_BUTTON(STARTX+775,STARTY+550, 225, 50, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_PAYINFO		, "자동이체"), //자동이체정보
		
		DLG_BUTTON(STARTX,    STARTY+750, 250, 75, 0, 0, 0, BUTSTY_BORDER, BTNCTRLFRCOLOR_NP, BTNCTRLBKBLACK, CALL_FUNC , "", BID_PREVPG		, "<<"),
		DLG_BUTTON(STARTX+250,STARTY+750, 250, 75, 0, 0, 0, BUTSTY_BORDER, BTNCTRLFRCOLOR_NP, BTNCTRLBKBLACK, CALL_FUNC , "", BID_NPMANAGE		, "체납관리"),
		DLG_BUTTON(STARTX+500,STARTY+750, 250, 75, 0, 0, 0, BUTSTY_BORDER, BTNCTRLFRCOLOR_NP, BTNCTRLBKBLACK, CALL_FUNC , "", BID_AUCTION		, "경매정보"),
		DLG_BUTTON(STARTX+750,STARTY+750, 250, 75, 0, 0, 0, BUTSTY_BORDER, BTNCTRLFRCOLOR_NP, BTNCTRLBKBLACK, CALL_FUNC , "", BID_DEPT			, "불이행"),
		DLG_BUTTON(STARTX,    STARTY+825, 250, 74, 0, 0, 0, BUTSTY_BORDER, BTNCTRLFRCOLOR_NP, BTNCTRLBKBLACK, CALL_FUNC , "", BID_NEXTPG		, ">>"),
		DLG_BUTTON(STARTX+250,STARTY+825, 250, 74, 0, 0, 0, BUTSTY_BORDER, BTNCTRLFRCOLOR_NP, BTNCTRLBKBLACK, CALL_FUNC , "", BID_WARR			, "담보관리"),
		DLG_BUTTON(STARTX+500,STARTY+825, 250, 74, 0, 0, 0, BUTSTY_BORDER, BTNCTRLFRCOLOR_NP, BTNCTRLBKBLACK, CALL_FUNC , "", BID_VISIT		, "방문활동"),
		DLG_BUTTON(STARTX+750,STARTY+825, 250, 74, 0, 0, 0, BUTSTY_BORDER, BTNCTRLFRCOLOR_NP, BTNCTRLBKBLACK, CALL_FUNC , "", BID_EARLYALARM	, "조기경보"),

		DLG_TEXT(STARTX+230,    STARTY+65, 340,  50, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA1 , ""),
		DLG_TEXT(STARTX+800,    STARTY+65, 200,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_PAGE  , m_szCnt_index),
		DLG_TEXT(STARTX+230,   STARTY+115, 770,  85, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA2 , ""),
		DLG_TEXT(STARTX,       STARTY+200, 230,  50, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBKGRAY, TXT_DATA3 , "실명"),
		DLG_TEXT(STARTX+230,   STARTY+200, 160,  50, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA4 , ""),
		//DLG_TEXT(STARTX+390,   STARTY+200, 230,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBKGRAY, TXT_DATA5 , "대체키"),
		//DLG_TEXT(STARTX+620,   STARTY+200, 160,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA6 , ""),
		DLG_TEXT(STARTX+390,   STARTY+200, 230,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBKGRAY, TXT_DATA5 , "납부유예"),
		DLG_TEXT(STARTX+620,   STARTY+200, 160,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA6 , ""),
		DLG_TEXT(STARTX,	   STARTY+250, 230,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBKGRAY, TXT_DATA7 , "생년월일"),
		DLG_TEXT(STARTX+230,   STARTY+250, 350,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA8 , ""),
		DLG_TEXT(STARTX+580,   STARTY+250, 200,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBKGRAY, TXT_DATA9 , "성명"),
		DLG_TEXT(STARTX+780,   STARTY+250, 220,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA10, ""),
		DLG_TEXT(STARTX,	   STARTY+300, 230,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBKGRAY, TXT_DATA11, "사업자"),
		DLG_TEXT(STARTX+230,   STARTY+300, 350,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA12, ""),
		DLG_TEXT(STARTX+580,   STARTY+300, 200,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBKGRAY, TXT_DATA13, "대표자"),
		DLG_TEXT(STARTX+780,   STARTY+300, 220,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA14, ""),
		DLG_TEXT(STARTX,	   STARTY+350, 230,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBKGRAY, TXT_DATA15, "상호"),
		DLG_TEXT(STARTX+230,   STARTY+350, 350,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA16, ""),
		DLG_TEXT(STARTX+780,   STARTY+350, 220,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, RED, TXTINCTRLBK, TXT_DATA17, ""),
		// DLG_TEXT(STARTX,	   STARTY+400, 230,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBKGRAY, TXT_DATA18, "HP/자택"),
		// DLG_TEXT(STARTX,	   STARTY+400, 230,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBKGRAY, TXT_DATA18, "HP/자택"),
		DLG_BUTTON(STARTX,	   STARTY+400, 230 , 50, 0, 0, 0, BUTSTY_BORDER, BTNCTRLFRCOLOR_NP, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SMS	, "SMS발송"),
		DLG_TEXT(STARTX,	   STARTY+450, 230,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBKGRAY, TXT_DATA19, "납부자"),
		DLG_TEXT(STARTX+230,   STARTY+450, 250,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA20, ""),
		DLG_TEXT(STARTX+480,   STARTY+450, 130,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBKGRAY, TXT_DATA21, "전화"),
		DLG_TEXT(STARTX,	   STARTY+500, 230,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBKGRAY, TXT_DATA22, "용도"),
		DLG_TEXT(STARTX+230,   STARTY+500, 330,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA23, ""),
		DLG_TEXT(STARTX+560,   STARTY+500, 215,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBKGRAY, TXT_DATA24, "상태"),
		DLG_TEXT(STARTX+775,   STARTY+500, 225,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA25, ""),
		DLG_TEXT(STARTX,	   STARTY+550, 230,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBKBLUE, TXT_DATA26, "납기구분"),
		DLG_TEXT(STARTX+230,   STARTY+550, 330,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA27, ""),
		DLG_TEXT(STARTX+775,   STARTY+550, 225,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA28, ""),
		DLG_TEXT(STARTX,	   STARTY+600, 230,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBKBLUE, TXT_DATA29, "체납상태"),
		DLG_TEXT(STARTX+230,   STARTY+600, 330,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA30, ""),
		DLG_TEXT(STARTX+560,   STARTY+600, 215,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBKRED, TXT_DATA35, "개월"),
		DLG_TEXT(STARTX+775,   STARTY+600, 225,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA36, ""),		
		DLG_TEXT(STARTX,	   STARTY+650, 230,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBKRED, TXT_DATA33, "총미납액"),
		DLG_TEXT(STARTX+230,   STARTY+650, 330,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA34, ""),
		DLG_TEXT(STARTX+560,   STARTY+650, 215,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBKRED, TXT_DATA31, "미납요금"),
		DLG_TEXT(STARTX+775,   STARTY+650, 225,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA32, ""),
		DLG_TEXT(STARTX,	   STARTY+700, 230,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBKRED, TXT_DATA37, "대손금액"),
		DLG_TEXT(STARTX+230,   STARTY+700, 330,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA38, ""),
		DLG_TEXT(STARTX+560,   STARTY+700, 215,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBKRED, TXT_DATA39, "기타"),
		DLG_TEXT(STARTX+775,   STARTY+700, 225,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA40, ""),
	};	
	
	// PDA 다이얼로그
	//---------------------------------------------------------------
	DlgObject	DlgRes_P[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_ICON(P_TTLTX, 0, ICON_TITLE, ""),		
		//타이틀
		DLG_TEXT(P_TX, P_TY, P_STWD, P_STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, WHITE, TRANSPARENT, TXT_TITLE, "체납 메뉴"),
		DLG_BUTTON(P_BTNX, P_BTNY, P_BTNWD, P_BTNHD, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", GID_PREV, ""),

		//2차시안 적용. 간격 없음.
		DLG_BUTTON(STARTX,     STARTY-40, 230, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CLIENT		, "계약번호"),
		DLG_BUTTON(STARTX+570, STARTY-40, 230, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_STOPCANCEL	, ""), //중단대상
		DLG_BUTTON(STARTX,     STARTY+20, 230, 110, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ADDR			, "지번\n주소"),
		//DLG_BUTTON(STARTX+580,STARTY+130, 250, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ACTEXCEPT	, "활동제외"),
		DLG_BUTTON(STARTX+730,STARTY+130, 270, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_MEMO			, "메모"),
		DLG_BUTTON(STARTX+580,STARTY+310, 200, 60, 0, 0, 0, BUTSTY_BORDER, 			  RED, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_VOUCHER		, "바우처"),
		DLG_BUTTON(STARTX+230,STARTY+370, 385, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_HPTEL		, ""),
		DLG_BUTTON(STARTX+615,STARTY+370, 385, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_HOUSETEL		, ""),
		DLG_BUTTON(STARTX+615,STARTY+430, 385, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_PAYTEL		, ""),
		DLG_BUTTON(STARTX+560,STARTY+550, 215, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_VIRTACCOUNT	, "납부방법"),
		DLG_BUTTON(STARTX+775,STARTY+550, 225, 60, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_PAYINFO		, "자동이체"), //자동이체정보
		
		DLG_BUTTON(STARTX,    STARTY+760, 250, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKBLACK, CALL_FUNC , "", BID_PREVPG		, "<<"),
		DLG_BUTTON(STARTX+250,STARTY+760, 250, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKBLACK, CALL_FUNC , "", BID_NPMANAGE		, "체납관리"),
		DLG_BUTTON(STARTX+500,STARTY+760, 250, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKBLACK, CALL_FUNC , "", BID_AUCTION		, "경매정보"),
		DLG_BUTTON(STARTX+750,STARTY+760, 250, 70, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKBLACK, CALL_FUNC , "", BID_DEPT			, "불이행"),
		DLG_BUTTON(STARTX,    STARTY+830, 250, 69, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKBLACK, CALL_FUNC , "", BID_NEXTPG		, ">>"),
		DLG_BUTTON(STARTX+250,STARTY+830, 250, 69, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKBLACK, CALL_FUNC , "", BID_WARR			, "담보관리"),
		DLG_BUTTON(STARTX+500,STARTY+830, 250, 69, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKBLACK, CALL_FUNC , "", BID_VISIT		, "방문활동"),
		DLG_BUTTON(STARTX+750,STARTY+830, 250, 69, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKBLACK, CALL_FUNC , "", BID_EARLYALARM	, "조기경보"),

		DLG_TEXT(STARTX+230,    STARTY-40, 340,  60, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA1 , ""),
		DLG_TEXT(STARTX+800,    STARTY-40, 200,  60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_PAGE  , m_szCnt_index),
		DLG_TEXT(STARTX+230,    STARTY+20, 770,  110, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA2 , ""),
		DLG_TEXT(STARTX,       STARTY+130, 230,  60, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, WHITE, TXTCTRLBKGRAY, TXT_DATA3 , "실명"),
		DLG_TEXT(STARTX+230,   STARTY+130, 150,  60, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA4 , ""),
		DLG_TEXT(STARTX+380,   STARTY+130, 200,  60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, WHITE, TXTCTRLBKGRAY, TXT_DATA5 , "대체키"),
		DLG_TEXT(STARTX+580,   STARTY+130, 150,  60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA6 , ""),
		DLG_TEXT(STARTX,	   STARTY+190, 230,  60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, WHITE, TXTCTRLBKGRAY, TXT_DATA7 , "생년월일"),
		DLG_TEXT(STARTX+230,   STARTY+190, 350,  60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA8 , ""),
		DLG_TEXT(STARTX+580,   STARTY+190, 200,  60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, WHITE, TXTCTRLBKGRAY, TXT_DATA9 , "성명"),
		DLG_TEXT(STARTX+780,   STARTY+190, 220,  60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA10, ""),
		DLG_TEXT(STARTX,	   STARTY+250, 230,  60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, WHITE, TXTCTRLBKGRAY, TXT_DATA11, "사업자"),
		DLG_TEXT(STARTX+230,   STARTY+250, 350,  60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA12, ""),
		DLG_TEXT(STARTX+580,   STARTY+250, 200,  60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, WHITE, TXTCTRLBKGRAY, TXT_DATA13, "대표자"),
		DLG_TEXT(STARTX+780,   STARTY+250, 220,  60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA14, ""),
		DLG_TEXT(STARTX,	   STARTY+310, 230,  60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, WHITE, TXTCTRLBKGRAY, TXT_DATA15, "상호"),
		DLG_TEXT(STARTX+230,   STARTY+310, 350,  60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA16, ""),
		DLG_TEXT(STARTX+780,   STARTY+310, 220,  60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA17, ""),
		DLG_TEXT(STARTX,	   STARTY+370, 230,  60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, WHITE, TXTCTRLBKGRAY, TXT_DATA18, "HP/자택"),
		DLG_TEXT(STARTX,	   STARTY+430, 230,  60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, WHITE, TXTCTRLBKGRAY, TXT_DATA19, "납부자"),
		DLG_TEXT(STARTX+230,   STARTY+430, 250,  60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA20, ""),
		DLG_TEXT(STARTX+480,   STARTY+430, 135,  60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, WHITE, TXTCTRLBKGRAY, TXT_DATA21, "전화"),
		DLG_TEXT(STARTX,	   STARTY+490, 230,  60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, WHITE, TXTCTRLBKGRAY, TXT_DATA22, "고객번호"),
		DLG_TEXT(STARTX+230,   STARTY+490, 330,  60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA23, ""),
		DLG_TEXT(STARTX+560,   STARTY+490, 215,  60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, WHITE, TXTCTRLBKGRAY, TXT_DATA24, "상태"),
		DLG_TEXT(STARTX+775,   STARTY+490, 225,  60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA25, ""),
		DLG_TEXT(STARTX,	   STARTY+550, 230,  60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, WHITE, TXTCTRLBKBLUE, TXT_DATA26, "납기구분"),
		DLG_TEXT(STARTX+230,   STARTY+550, 330,  60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA27, ""),
		DLG_TEXT(STARTX+775,   STARTY+550, 225,  60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA28, ""),
		DLG_TEXT(STARTX,	   STARTY+610, 230,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, WHITE, TXTCTRLBKBLUE, TXT_DATA29, "체납상태"),
		DLG_TEXT(STARTX+230,   STARTY+610, 330,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA30, ""),
		DLG_TEXT(STARTX+560,   STARTY+610, 215,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, WHITE, TXTCTRLBKRED, TXT_DATA35, "개월"),
		DLG_TEXT(STARTX+775,   STARTY+610, 225,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA36, ""),		
		DLG_TEXT(STARTX,	   STARTY+660, 230,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, WHITE, TXTCTRLBKRED, TXT_DATA33, "총미납액"),
		DLG_TEXT(STARTX+230,   STARTY+660, 330,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA34, ""),
		DLG_TEXT(STARTX+560,   STARTY+660, 215,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, WHITE, TXTCTRLBKRED, TXT_DATA31, "미납요금"),
		DLG_TEXT(STARTX+775,   STARTY+660, 225,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA32, ""),
		DLG_TEXT(STARTX,	   STARTY+710, 230,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, WHITE, TXTCTRLBKRED, TXT_DATA37, "대손금액"),
		DLG_TEXT(STARTX+230,   STARTY+710, 330,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA38, ""),
		DLG_TEXT(STARTX+560,   STARTY+710, 215,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, WHITE, TXTCTRLBKRED, TXT_DATA39, "기타"),
		DLG_TEXT(STARTX+775,   STARTY+710, 225,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA40, ""),
	};
	
	// 가상계좌 
	//---------------------------------------------------------------
	DlgObject	DlgRes_VirtAccount[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, ""),
		DLG_ICON(POPTX, POPTY, ICON_TITLE, ""),
		DLG_TEXT(POPTX, POPTY, POPSTWD, POPSTHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "가상계좌 조회"),
		DLG_BUTTON(BTNX_7, P_BTNY, BTNWD_2, BTNHT_2, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_CLOSE, ""),

		DLG_BUTTON(STARTX,		STARTY+830, 250, 69, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_VIRTPREV , "▲"),
		DLG_BUTTON(STARTX+250,  STARTY+830, 250, 69, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_VIRTNEXT , "▼"),
		DLG_BUTTON(STARTX+750,  STARTY+830, 250, 69, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_VIRTCLOSE , "닫 기"),
		
		DLG_TEXT(STARTX, 	   STARTY+630,1000, 200, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA41, "*주의\n가상계좌, 신용카드 수납은 실시간\n입금확인 가능하나,자동이체·고지서(OCR)\n수납의 경우 입금확인은 2-3일 소요 됨."),
		DLG_TEXT(STARTX+500,   STARTY+830, 250, 69, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_VIRTPAGE, m_szCnt_page_V), 	//현재페이지/총페이지				

		// 리스트
		DLG_TABLE(GRID_X_V, GRID_Y_V, ROW_V, COL_V, 0, GRID_H_V, 1, GRID_H_V, SEL_ROW, MAXCHAR_V, m_stGridTitle_V, ID_VIRTTBLLIST, m_szTableBuf_V),
	};	
	
	// 가상계좌 PDA 다이얼로그
	//---------------------------------------------------------------
	DlgObject	DlgRes_VirtAccount_P[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, ""),
		DLG_ICON(P_TTLTX, 0, ICON_TITLE, ""),
		DLG_TEXT(P_TX, P_TY, P_STWD, P_STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "가상계좌 조회"),
		DLG_BUTTON(P_BTNX, P_BTNY, P_BTNWD, P_BTNHD, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_CLOSE, ""),

		DLG_BUTTON(STARTX,		STARTY+830, 250, 69, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_VIRTPREV , "▲"),
		DLG_BUTTON(STARTX+250,  STARTY+830, 250, 69, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_VIRTNEXT , "▼"),
		DLG_BUTTON(STARTX+750,  STARTY+830, 250, 69, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_VIRTCLOSE , "닫 기"),
		
		DLG_TEXT(STARTX+500,   STARTY+830, 250, 69, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_VIRTPAGE, m_szCnt_page_V), 	//현재페이지/총페이지				
		DLG_TEXT(STARTX, 	   STARTY+650, 1000, 180, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA41, "*주의\n가상계좌, 신용카드 수납은 실시간 입금확인\n가능하나, 자동이체·고지서(OCR) 수납의 경우\n입금확인은 2-3일 소요 됨."),

		// 리스트
		DLG_TABLE(GRID_X_V, GRID_Y_V_P, ROW_V, COL_V, 0, GRID_H_V_P, 1, GRID_H_V_P-10, SEL_ROW, MAXCHAR_V, m_stGridTitle_V, ID_VIRTTBLLIST, m_szTableBuf_V),
	};		

	
	// 메모
	//---------------------------------------------------------------
	DlgObject	DlgRes_Memo[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, ""),
		DLG_ICON(POPTX, STARTY+200, ICON_TITLE, ""),
		DLG_TEXT(POPTX, STARTY+200, POPSTWD, POPSTHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "메모"),
		DLG_BUTTON(BTNX_7, STARTY+200, BTNWD_2, BTNHT_2, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_MEMOCLOSE, ""),

		DLG_BUTTON(STARTX,     STARTY+70, 230, 50, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CLIENT_M		, "계약번호"),
		DLG_BUTTON(STARTX+570, STARTY+70, 230, 50, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_STOPCANCEL_M	, ""), //중단대상
		DLG_BUTTON(STARTX,    STARTY+120, 230, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ADDR_M		, "지번\n주소"),

		DLG_TEXT(STARTX+800,    STARTY+70, 200,  50, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_PAGE_M  , m_szCnt_index),
		DLG_TEXT(STARTX+230,    STARTY+70, 340,  50, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA49 , ""),
		DLG_TEXT(STARTX+230,   STARTY+120, 770,  80, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA50 , ""),

		DLG_BUTTON(STARTX,	    STARTY+565, 250, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_PREVMEMO , "▲"),
		DLG_BUTTON(STARTX+250,  STARTY+565, 250, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_NEXTMEMO , "▼"),
		DLG_BUTTON(STARTX,		STARTY+830, 250, 69, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_PREVCUST , "<<"),
		DLG_BUTTON(STARTX+250,  STARTY+830, 250, 69, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_NEXTCUST , ">>"),
		DLG_BUTTON(STARTX+700,  STARTY+830, 300, 69, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_MEMOOK , "확 인"),
		
		DLG_TEXT(STARTX+700,    STARTY+565, 300, 70, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_MEMOPAGE, m_szCnt_page_M), 	//현재페이지/총페이지				
		DLG_TEXT(0, 	        STARTY+270, 1000, 290, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA42, ""),

		//DLG_LINE(0, STARTY+, 998, STARTY+520, BLUE, 3, LINE_DATA1),

		// 리스트
		DLG_TABLE(GRID_X_M, GRID_Y_M, ROW_M, COL_M, 0, GRID_H_M, 1, GRID_H_M, SEL_ROW, MAXCHAR_M, m_stGridTitle_M, ID_MEMOLIST, m_szTableBuf_M),
	};	
	
	// 메모 PDA 다이얼로그
	//---------------------------------------------------------------
	DlgObject	DlgRes_Memo_P[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_ICON(P_TTLTX, STARTY+200, ICON_TITLE, ""),
		DLG_TEXT(P_TX, STARTY+200, P_STWD, P_STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "메모"),
		DLG_BUTTON(P_BTNX, STARTY+200, P_BTNWD, P_BTNHD, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_MEMOCLOSE, ""),

		DLG_BUTTON(STARTX,			STARTY, 230, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CLIENT_M		, "계약번호"),
		DLG_BUTTON(STARTX+570,		STARTY, 230, 80, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_STOPCANCEL_M	, ""), //중단대상
		DLG_BUTTON(STARTX,		 STARTY+80, 230, 120, 0, 0, 0, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ADDR_M		, "지번\n주소"),

		DLG_TEXT(STARTX+230,		STARTY, 340,  80, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA49 , ""),
		DLG_TEXT(STARTX+800,		STARTY, 200,  80, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_PAGE_M  , m_szCnt_index),
		DLG_TEXT(STARTX+230,	 STARTY+80, 770,  120, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA50 , ""),
		DLG_TEXT(STARTX,        STARTY+260, 1000, 330, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA42, ""),

		DLG_BUTTON(STARTX,	    STARTY+590, 250, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_PREVMEMO , "▲"),
		DLG_BUTTON(STARTX+250,  STARTY+590, 250, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_NEXTMEMO , "▼"),
		DLG_TEXT(STARTX+700,    STARTY+590, 300, 70, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_MEMOPAGE, m_szCnt_page_M), 	//현재페이지/총페이지				

		DLG_BUTTON(STARTX,		STARTY+829, 250, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKBLACK, CALL_FUNC , "", BID_PREVCUST , "<<"),
		DLG_BUTTON(STARTX+250,  STARTY+829, 250, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKBLACK, CALL_FUNC , "", BID_NEXTCUST , ">>"),
		DLG_BUTTON(STARTX+700,  STARTY+829, 300, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_MEMOOK , "확 인"),
		
		//DLG_LINE(0, STARTY+, 998, STARTY+520, BLUE, 3, LINE_DATA1),

		// 리스트
		DLG_TABLE(GRID_X_M, GRID_Y_M_P, ROW_M, COL_M, 0, GRID_H_M_P, 1, GRID_H_M_P-10, SEL_ROW, MAXCHAR_M, m_stGridTitle_M, ID_MEMOLIST, m_szTableBuf_M),
	};		


	// 자동이체정보
	//---------------------------------------------------------------
	DlgObject	DlgRes_Payinfo[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, ""),
		DLG_ICON(POPTX, POPTY, ICON_TITLE, ""),
		DLG_TEXT(POPTX, POPTY, POPSTWD, POPSTHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "자동이체 정보"),
		DLG_BUTTON(BTNX_7, P_BTNY, BTNWD_2, BTNHT_2, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_PAYOK, ""),

		DLG_BUTTON(STARTX+600,	 STARTY+200, 400, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_PAYOK , "확인"),
		
		DLG_TEXT(STARTX, 	     STARTY-29, 300, 70, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA43, "은행"),
		DLG_TEXT(STARTX+300, 	 STARTY-29, 700, 70, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA44, ""),
		DLG_TEXT(STARTX, 	     STARTY+41, 300, 70, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA45, "계좌번호"),
		DLG_TEXT(STARTX+300, 	 STARTY+41, 700, 70, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA46, ""),
		DLG_TEXT(STARTX, 	    STARTY+111, 300, 70, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA47, "예금주"),
		DLG_TEXT(STARTX+300, 	STARTY+111, 700, 70, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA48, ""),
	};	
	
	// 자동이체정보 PDA 다이얼로그
	//---------------------------------------------------------------
	DlgObject	DlgRes_Payinfo_P[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, ""),
		DLG_ICON(P_TTLTX, 0, ICON_TITLE, ""),
		DLG_TEXT(P_TX, P_TY, P_STWD, P_STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "자동이체 정보"),
		DLG_BUTTON(P_BTNX, P_BTNY, P_BTNWD, P_BTNHD, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_PAYOK, ""),

		DLG_BUTTON(STARTX+600,	 STARTY+250, 400, 100, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_PAYOK , "확인"),
		
		DLG_TEXT(STARTX, 	     STARTY-40, 300, 80, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA43, "은행"),
		DLG_TEXT(STARTX+300, 	 STARTY-40, 700, 80, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA44, ""),
		DLG_TEXT(STARTX, 	     STARTY+40, 300, 80, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA45, "계좌번호"),
		DLG_TEXT(STARTX+300, 	 STARTY+40, 700, 80, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA46, ""),
		DLG_TEXT(STARTX, 	    STARTY+120, 300, 80, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA47, "예금주"),
		DLG_TEXT(STARTX+300, 	STARTY+120, 700, 80, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA48, ""),
	};	

	DlgObject	DlgRes_Sms[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, ""),
		DLG_ICON(POPTX, POPTY, ICON_TITLE, ""),
		DLG_TEXT(POPTX, POPTY, POPSTWD, POPSTHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "SMS 발송"),
		DLG_BUTTON(BTNX_7, P_BTNY, BTNWD_2, BTNHT_2, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_SMSPREV, ""),

		DLG_BUTTON(STARTX,	 	STARTY+600, 400, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SMSBACK , "이전"),
		DLG_BUTTON(STARTX+600,	 STARTY+600, 400, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_SMSOK , "발송"),
		
		DLG_TEXT(STARTX,		STARTY+400, 230, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA7, "핸드폰"),
		DLG_EDIT(STARTX+230,	STARTY+400, 215, 60, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA1, 4,  ""),
		DLG_TEXT(STARTX+445,	STARTY+400,  50, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA8, "-"),
		DLG_EDIT(STARTX+495,	STARTY+400, 215, 60, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA2, 4,  ""),
		DLG_TEXT(STARTX+710,	STARTY+400,  50, 60, 0, 0, 0, EDITSTY_BORDER|EDITSTY_BOLD, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA9, "-"),
		DLG_EDIT(STARTX+750,	STARTY+400, 250, 60, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA3, 4,  ""),

		//숫자 자판
		DLG_TEXT(0,    STARTY+940, 333, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_ONE, "1"),
		DLG_TEXT(333,  STARTY+940, 333, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_TWO, "2"),
		DLG_TEXT(666,  STARTY+940, 334, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_THREE, "3"),
		DLG_TEXT(0,   STARTY+1030, 333, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_FOUR, "4"),
		DLG_TEXT(333, STARTY+1030, 333, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_FIVE, "5"),
		DLG_TEXT(666, STARTY+1030, 334, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_SIX, "6"),
		DLG_TEXT(0,   STARTY+1120, 333, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_SEVEN, "7"),
		DLG_TEXT(333, STARTY+1120, 333, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_EIGHT, "8"),
		DLG_TEXT(666, STARTY+1120, 334, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_NINE, "9"),
		DLG_TEXT(333, STARTY+1210, 333, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_ZERO, "0"),
		DLG_TEXT(666, STARTY+1210, 334, 90, 0, 0, 0, EDITSTY_BOLD|EDITSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, TXT_KEY_DEL, "←"),
	};		

	//----------------------------------------------------------------------
	bool	main (quad MsgType, quad wParam, quad lParam)
	{
		EVENT_HANDLER (MsgType, wParam, lParam);
		return TRUE;
	}
	
//┌─────────────────────────────────────┐
//│ 				   『	OnInit Function  』  				              │
//└─────────────────────────────────────┘
	void	OnInit(char bFirst)
	{
		long lCnt;
		long lRet;
		char szSql[256];
		
		m_bFirst = bFirst;
		
		switch (bFirst)
		{
			case INIT_MAIN:
				switch (theDevInfo.m_nType)
				{
					case FAMILY_PDA:
						CREATE_DIALOG_OBJECT (DlgRes_P, SIZEOF(DlgRes_P));
						break;
					default:
						CREATE_GLOBAL_BUTTON (SysButRes_MAIN);
						CREATE_DIALOG_OBJECT (DlgRes, SIZEOF(DlgRes));
						break;		
				}

				SetBtnImg();
				SetStyle();
				
				//2017-06-07 Sanghyun Lee (신기호 확인)
				//고객센터와 솔루션즈 비활성화시켜야함 
				//고객센터는 고유구분코드가 있으나 솔루션즈는 모호하여 설정조건을 신규입력하는데 시간이 걸리므로 
				//수정전까지 본사 및 위탁사 모두 사용불가토록 비활성화 전산실 협의완료
				//DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_ACTEXCEPT), FALSE );
				//DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_ACTEXCEPT), TRUE );

				if( g_lDataflag == 0 )
				{
					g_lDataflag = 1;
					g_nAddrFlag = 0;
					
					if( g_nWorkFlag == 810 )
					{
						SetDate_Part();
					}
					else if( g_nWorkFlag == 830 )
					{
						SetDate_Stop();
					}
					else
					{
						SetData();
					}
				}
				ReDraw();
				Rcv_Unpay();
				break;
			case INIT_VIRTACCOUNT:
				switch (theDevInfo.m_nType)
				{
					case FAMILY_PDA:
						CREATE_DIALOG_OBJECT (DlgRes_VirtAccount_P, SIZEOF(DlgRes_VirtAccount_P));
						break;
					default:
						CREATE_DIALOG_OBJECT (DlgRes_VirtAccount, SIZEOF(DlgRes_VirtAccount));
						break;		
				}

				SetBtnImg();	
				SetStyle();
				
				//테이블 클리어
				Mem_Set((byte*)m_szTableBuf_V+(COL_V*MAXCHAR_V), 0x00, sizeof(m_szTableBuf_V)-(COL_V*MAXCHAR_V));
				Rcv_VirtAccount();
				break;
			case INIT_MEMO:
				switch (theDevInfo.m_nType)
				{
					case FAMILY_PDA:
						CREATE_DIALOG_OBJECT (DlgRes_Memo_P, SIZEOF(DlgRes_Memo_P));
						break;
					default:
						CREATE_GLOBAL_BUTTON (SysButRes_MAIN);
						CREATE_DIALOG_OBJECT (DlgRes_Memo, SIZEOF(DlgRes_Memo));
						break;		
				}

				SetBtnImg();	
				SetStyle();
				m_lMemoAct = 0;
				
				Memo_Draw();
				ON_DRAW();
				break;
			case INIT_PAYINFO:
				switch (theDevInfo.m_nType)
				{
					case FAMILY_PDA:
						CREATE_DIALOG_OBJECT (DlgRes_Payinfo_P, SIZEOF(DlgRes_Payinfo_P));
						break;
					default:
						CREATE_DIALOG_OBJECT (DlgRes_Payinfo, SIZEOF(DlgRes_Payinfo));
						break;		
				}

				SetBtnImg();	
				SetStyle();
				Rcv_Payinfo();
				ON_DRAW();
				break;	

			case INIT_SMS:
				
				CREATE_DIALOG_OBJECT (DlgRes_Sms, SIZEOF(DlgRes_Sms));

				SetBtnImg();	
				SetStyle();
				ON_DRAW();
				break;			
		}

	}

	void	OnPointing(long nAction, long X, long Y)
	{
		long lActiveIndex = -1;
		//EDITCTRL에 ACTIVE시에 CTRLINDEX를 저장
		//키보드 BUTTONCTRL이 ACTIVE시에도 EDITCTRL에 커서를 두기위해서 INDEX를 저장
		lActiveIndex = Dialog_GetActiveCtrlIndex(this->m_hDlg);	
		
		if( POINTING_UP == nAction )
		{
			m_lEditCtrlIndex = lActiveIndex;
			if( theDevInfo.m_nType > FAMILY_PDA )
			{
				if( m_bFirst == INIT_SMS )
				{
					if( X > DMS_X(STARTX+230) && X < DMS_X(STARTX+445) && Y > DMS_Y(STARTY+400) && Y < DMS_Y(STARTY+460) )
					{
						if( Get_iDlgCtrlByID(EDT_DATA1) == lActiveIndex )	
						{
							g_Dlgflag = 0;
							if( m_lMoveFlag == 0 )
							{
								g_MOVE_DLG(400);
							}
							m_lMoveFlag = 1;
						}
					}
					else if( X > DMS_X(STARTX+495) && X < DMS_X(STARTX+710) && Y > DMS_Y(STARTY+400) && Y < DMS_Y(STARTY+460) )
					{
						if( Get_iDlgCtrlByID(EDT_DATA2) == lActiveIndex )
						{
							g_Dlgflag = 0;
							if( m_lMoveFlag == 0 )
							{
								g_MOVE_DLG(400);
							}
							m_lMoveFlag = 1;
						}
					}
					else if( X > DMS_X(STARTX+750) && X < DMS_X(STARTX+1000) && Y > DMS_Y(STARTY+400) && Y < DMS_Y(STARTY+460) )
					{
						if( Get_iDlgCtrlByID(EDT_DATA3) == lActiveIndex )
						{
							g_Dlgflag = 0;
							if( m_lMoveFlag == 0 )
							{
								g_MOVE_DLG(400);
							}
							m_lMoveFlag = 1;
						}
					}
					else
					{
						if( X > DMS_X(0) && X < DMS_X(333) && Y > DMS_Y(STARTY+940-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1030-(g_Dlgflag*400))  )
						{
							if( g_Dlgflag == 1 )
							{
								ON_CHAR( '1' );
								VM_PlaySound("1");
							}
						}
						else if( X > DMS_X(333) && X < DMS_X(666) && Y > DMS_Y(STARTY+940-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1030-(g_Dlgflag*400)) )
						{
							if( g_Dlgflag == 1 )
							{
								ON_CHAR( '2' );
								VM_PlaySound("2");
							}
						}
						else if( X > DMS_X(666) && X < DMS_X(1000) && Y > DMS_Y(STARTY+940-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1030-(g_Dlgflag*400)) )
						{
							if( g_Dlgflag == 1 )
							{
								ON_CHAR( '3' );
								VM_PlaySound("3");
							}
						}
						else if( X > DMS_X(0) && X < DMS_X(333) && Y > DMS_Y(STARTY+1030-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1120-(g_Dlgflag*400)) )
						{
							if( g_Dlgflag == 1 )
							{
								ON_CHAR( '4' );
								VM_PlaySound("4");
							}
						}
						else if( X > DMS_X(333) && X < DMS_X(666) && Y > DMS_Y(STARTY+1030-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1120-(g_Dlgflag*400)) )
						{
							if( g_Dlgflag == 1 )
							{
								ON_CHAR( '5' );
								VM_PlaySound("5");
							}
						}
						else if( X > DMS_X(666) && X < DMS_X(1000) && Y > DMS_Y(STARTY+1030-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1120-(g_Dlgflag*400)) )
						{
							if( g_Dlgflag == 1 )
							{
								ON_CHAR( '6' );
								VM_PlaySound("6");
							}
						}
						else if( X > DMS_X(0) && X < DMS_X(333) && Y > DMS_Y(STARTY+1120-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1210-(g_Dlgflag*400)) )
						{
							if( g_Dlgflag == 1 )
							{
								ON_CHAR( '7' );
								VM_PlaySound("7");
							}
						}
						else if( X > DMS_X(333) && X < DMS_X(666) && Y > DMS_Y(STARTY+1120-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1210-(g_Dlgflag*400)) )
						{
							if( g_Dlgflag == 1 )
							{
								ON_CHAR( '8' );
								VM_PlaySound("8");
							}
						}
						else if( X > DMS_X(666) && X < DMS_X(1000) && Y > DMS_Y(STARTY+1120-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1210-(g_Dlgflag*400)) )
						{
							if( g_Dlgflag == 1 )
							{
								ON_CHAR( '9' );
								VM_PlaySound("9");
							}
						}
						else if( X > DMS_X(333) && X < DMS_X(666) && Y > DMS_Y(STARTY+1210-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1300-(g_Dlgflag*400)) )
						{
							if( g_Dlgflag == 1 )
							{
								ON_CHAR( '0' );
								VM_PlaySound("0");
							}
						}
						else if( X > DMS_X(666) && X < DMS_X(1000) && Y > DMS_Y(STARTY+1210-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+1300-(g_Dlgflag*400)) )
						{
							if( g_Dlgflag == 1 )
							{
								ON_KEY( 5 );
								VM_PlaySound(CLICKSOUND);
							}
						}
						else
						{
								g_Dlgflag = 1;
								// g_MOVE_DLG(1);
								m_lMoveFlag = 0;
							
								ShowSip(FALSE);
								g_Sipflag = 0;
						}
					}
				}
				
			}
			
			ON_DRAW();
		}
	}

//------------------------------------------------------------------
	void	OnButton(long ID)
	{	
		char szMsg[200];
		char szSql[256];
		long lActIndex = -1;
	
		switch(ID)
		{
			case BID_CLIENT:
				if( m_bFirst == INIT_MAIN )
				{
					Card_Move("C6202_CUSTINFO");
				}
				break;
			case BID_STOPCANCEL:
				if( m_bFirst == INIT_MAIN )
				{
					if( Str_Cmp(stNoPayObj.STOP_FLAG, "Y") == 0 )
					{
						if( Str_Cmp(stNoPayObj.CONT_STS_CD, "30") == 0 )
						{
							MessageBoxEx (CONFIRM_OK, "사용계약상태가 해지인 경우 취소할 수 없습니다.");
							break;
						}
						g_nAddrFlag = 0;
						Card_Move("C6202_STOPCANCEL");
					}
				}
				break;
			case BID_ADDR:
				if( m_bFirst == INIT_MAIN )
				{
					if( g_nAddrFlag == 0)
					{
						g_nAddrFlag = 1;
					}
					else
					{
						g_nAddrFlag = 0;
					}
					ReDraw();
				}
				break;
			case BID_ACTEXCEPT:
				if( MessageBoxEx(CONFIRM_YESNO, "해당세대를 리스트에서 제외 하시겠습니까?") == MB_OK)
				{
					//대상 LOCAL 삭제
					Mem_Set((byte*)szSql, 0x00, sizeof(szSql));	
					SPRINT(szSql,"DELETE FROM C6202_NOPAY_OBJ WHERE USE_CONT_NUM = '%s' ",stNoPayObj.USE_CONT_NUM,0,0);
					g_Sql_DirectExecute(szSql);
					
					//저장된 그룹, 상세리스트 INDEX -1 시키는 코드.
					lActIndex = g_nActIndex-1;				
					if( lActIndex < 0 )
					{
						Mem_Set((byte*)szSql, 0x00, sizeof(szSql));
						SPRINT(szSql, "UPDATE RCV_LOG SET PARAM9 = '%d', PARAM8 = (SELECT (PARAM8-1) FROM RCV_LOG WHERE GUBUN = '9') WHERE GUBUN = '9' ", lActIndex, 0, 0);		
						g_Sql_DirectExecute(szSql);
					}
					else
					{
						Mem_Set((byte*)szSql, 0x00, sizeof(szSql));
						SPRINT(szSql, "UPDATE RCV_LOG SET PARAM9 = '%d' WHERE GUBUN = '9' ", lActIndex, 0, 0);		
						g_Sql_DirectExecute(szSql);
					}
					
					Card_Move("C6202_DETALLST");
				}
				break;
			case BID_MEMO:
				m_lMemoBtnFlag = 1;
				Rcv_Memo();
				break;
			case BID_VOUCHER:
				Card_Move("C6202_VOUCHER");
				break;
			case BID_HPTEL:
				Mem_Set( (byte*) szMsg, 0x00, sizeof( szMsg) );
				SPRINT(szMsg, "%s 고객님께\n전화하시겠습니까?\n(%s)", stNoPayObj.CUST_NM, m_szHpTel, 0);	
				
				if( MessageBoxEx(CONFIRM_YESNO, szMsg) == MB_OK)
				{
					Call_Tel(ID);
				}
				break;
			case BID_HOUSETEL:
				Mem_Set( (byte*) szMsg, 0x00, sizeof( szMsg) );
				SPRINT(szMsg, "%s 고객님께\n전화하시겠습니까?\n(%s)", stNoPayObj.CUST_NM,m_szHouseTel,0);	
				
				if( MessageBoxEx(CONFIRM_YESNO, szMsg) == MB_OK)
				{
					Call_Tel(ID);
				}
				break;
			case BID_PAYTEL:
				Mem_Set( (byte*) szMsg, 0x00, sizeof( szMsg) );
				SPRINT(szMsg, "%s 고객님께\n전화하시겠습니까?\n(%s)", stNoPayObj.CUST_NM,m_szPayTel,0);	
				
				if( MessageBoxEx(CONFIRM_YESNO, szMsg) == MB_OK)
				{
					Call_Tel(ID);
				}
				break;
			case BID_VIRTACCOUNT:
				ON_EXIT();
				OnInit(INIT_VIRTACCOUNT);
				break;
			case BID_PAYINFO:
				if( m_lPayinfoFlag > 0 )
				{
					m_lPayinfoFlag = 0;
					
					ON_EXIT()
					OnInit(INIT_PAYINFO);
				}
				else
				{
					m_lPayinfoFlag++;
				}
				break;
			case BID_PREVPG:
				Prev_Np();
				break;
			case BID_NEXTPG:
				Next_Np();
				break;
			case BID_NPMANAGE:
				g_lConfrimFlag = 0;		//체납정보 수신 관련 flag로 사용중.
				Card_Move("C6202_NPMANAGE");
				break;
			case BID_AUCTION:
				g_nAddrFlag = 0;
				Card_Move("C6202_AUCTION");
				break;
			case BID_DEPT:
				Card_Move("C6202_DEPT");
				break;
			case BID_WARR:
				Card_Move("C6202_WARR");
				break;
			case BID_VISIT:
				g_Sql_DirectExecute("DELETE FROM RCV_TMP");
				Card_Move("C6202_VISIT");
				break;
			case BID_EARLYALARM:
				Card_Move("C6202_EARLYALARM");
				break;
			case GID_HOME:
				if( m_bFirst != INIT_MEMO )
				{
					if( MessageBoxEx (CONFIRM_YESNO, "메인 메뉴로 나가시겠습니까?")  == MB_OK)
					{
						Card_Move("MENU");
					}
				}
				break;
			case GID_MENU:
				if( m_bFirst != INIT_MEMO )
				{
					if( MessageBoxEx (CONFIRM_YESNO, "체납 메뉴로 나가시겠습니까?")  == MB_OK)
					{
						Card_Move("C6202_MENU");
					}
				}
				break;
			case GID_KEYBOARD:
				if( m_bFirst != INIT_MEMO )
				{
					g_SHOW_SIP();
				}
				break;
			case GID_SCREEN:
				if( m_bFirst != INIT_MEMO )
				{
					PRINT("4444444444444444",0,0,0);
					g_MOVE_DLG(400);
				}
				break;
			case GID_CMMNWK:
				break;				
			case GID_PREV:
				if( m_bFirst != INIT_MEMO )
				{
					g_lNpMemoChkFlag = 0;
					g_lDataflag = 0;
					
					if( g_nWorkFlag > 799 && g_nWorkFlag < 810 )
					{
						Set_Index();
						Card_Move("C6202_DETALLST");
					}
					else if( g_nWorkFlag == 810 )
					{
						Card_Move("C6202_PART");
					}
					else if( g_nWorkFlag == 830 )
					{
						Card_Move("C6202_STOPLST");
					}
					else if( g_nWorkFlag == 840 )
					{
						Card_Move("C6202_AUCTIONLST");
					}
					else if( g_nWorkFlag == 850 )
					{
						Card_Move("C6202_PAYCONFIRM");
					}
					else if( g_nWorkFlag == 860 || g_nWorkFlag == 861 || g_nWorkFlag == 862 
					      || g_nWorkFlag == 870 || g_nWorkFlag == 871 || g_nWorkFlag == 872 )
					{
						Set_Index();
						Card_Move("C6202_DETALLST");
					}
				}
				if( m_bFirst == INIT_SMS )
				{
					ON_EXIT();
					OnInit(INIT_MAIN);
				}
				break;	
			case GID_VMEXIT:
				if( m_bFirst != INIT_MEMO )
				{
					g_Exit();
				}
				break;
				
//가상계좌조회
			case BID_VIRTPREV:
				m_lpage_V--;
				if(m_lpage_V < 0)
				{
					m_lpage_V = 0;
					if(m_lTotpage_V > 0)
					{
						if( m_lVirtActIndex < 0)
						{
							m_lVirtActIndex = 0;
						}
					
						DlgTbl_SetActive(ID_VIRTTBLLIST , m_lVirtActIndex+1 );
						DlgTbl_SetRowColor(ID_VIRTTBLLIST, m_lVirtActIndex+1, TABLEACTIVE_COLOR);
					}
					break;
				}
				m_lVirtActIndex = 0;
				ON_DRAW();
				break;
			case BID_VIRTNEXT:
				m_lpage_V++ ;
				if( m_lpage_V > m_lTotpage_V-1 )
				{
					m_lpage_V = m_lTotpage_V-1;
					if(m_lpage_V < 0)
					{
						m_lpage_V = 0;
					}
					if(m_lTotpage_V > 0)
					{
						if( m_lVirtActIndex < 0 )
						{
							m_lVirtActIndex = 0;
						}
					
						DlgTbl_SetActive(ID_VIRTTBLLIST , m_lVirtActIndex+1 );
						DlgTbl_SetRowColor(ID_VIRTTBLLIST, m_lVirtActIndex+1, TABLEACTIVE_COLOR);
					}
					break;
				}
				m_lVirtActIndex = 0;
				break;
			case BID_VIRTCLOSE:
			case BID_CLOSE:
				ON_EXIT();
				OnInit(INIT_MAIN);
				break;
//메모
			case BID_MEMOCLOSE:
				ON_EXIT();
				OnInit(INIT_MAIN);
				break;
			case BID_MEMOOK:
				Mem_Set((byte*)szSql, 0x00, sizeof(szSql));	
				SPRINT(szSql,"UPDATE C6202_NOPAY_OBJ SET READ_MEMO_YN = 'Y' WHERE USE_CONT_NUM = '%s' ",stNoPayObj.USE_CONT_NUM,0,0);
				g_Sql_DirectExecute(szSql);
				Str_Cpy(stNoPayObj.READ_MEMO_YN, "Y");
				
				ON_EXIT();
				OnInit(INIT_MAIN);
				break;
			case BID_PREVMEMO:
				m_lpage_M--;
				if(m_lpage_M < 0)
				{
					m_lpage_M = 0;
					if(m_lTotpage_M > 0)
					{
						if( m_lMemoAct < 0)
						{
							m_lMemoAct = 0;
						}
					
						DlgTbl_SetActive(ID_MEMOLIST , m_lMemoAct+1 );
						DlgTbl_SetRowColor(ID_MEMOLIST, m_lMemoAct+1, TABLEACTIVE_COLOR);
					}
					break;
				}
				g_lNpMemoChkFlag = 0;
				m_lMemoAct = 0;
				Memo_Draw();
				break;
			case BID_NEXTMEMO:
				m_lpage_M++ ;
				if( m_lpage_M > m_lTotpage_M-1 )
				{
					m_lpage_M = m_lTotpage_M-1;
					if(m_lpage_M < 0)
					{
						m_lpage_M = 0;
					}
					if(m_lTotpage_M > 0)
					{
						if( m_lMemoAct < 0 )
						{
							m_lMemoAct = 0;
						}
					
						DlgTbl_SetActive(ID_MEMOLIST , m_lMemoAct+1 );
						DlgTbl_SetRowColor(ID_MEMOLIST, m_lMemoAct+1, TABLEACTIVE_COLOR);
					}
					break;
				}
				g_lNpMemoChkFlag = 0;
				m_lMemoAct = 0;
				Memo_Draw();
				break;
			case BID_PREVCUST:
				Prev_Np();
				break;
			case BID_NEXTCUST:
				Next_Np();
				break;
//자동이체 정보
			case BID_PAYOK:
				ON_EXIT();
				OnInit(INIT_MAIN);
				break;

			case BID_SMS:
				ON_EXIT();
				OnInit(INIT_SMS);
				break;

			case BID_SMSOK:
				g_MOVE_DLG(1);
				Snd_FR90008();
				break;

			case BID_SMSBACK:
			   	ON_EXIT();
				g_MOVE_DLG(1);
				OnInit(INIT_MAIN);
				break;

			case BID_SMSPREV:
				ON_EXIT();
				OnInit(INIT_MAIN);
				break;
			

				
		}
	}		

//------------------------------------------------------------------
	void	OnSelect(long Index)
	{
		long index;

		if( m_bFirst == INIT_MEMO )
		{
			//현재 TBL이 선택되었는지를 확인
			if (DlgTbl_IsSelect(ID_MEMOLIST))
			{
				// 현재 선택된 인덱스
				index = DlgTbl_GetActiveRow(ID_MEMOLIST);
				m_lMemoAct = index - 1;
//PRINT("DlgTbl_GetStr( ID_MEMOLIST, m_lMemoAct, 2) : %s",DlgTbl_GetStr( ID_MEMOLIST, m_lMemoAct, 2),0,0);
				EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA42), DlgTbl_GetStr( ID_MEMOLIST, m_lMemoAct, 2) );
			}
			
			ON_DRAW();
		}
	}	

	
//------------------------------------------------------------------
	void SetBtnImg(void)
	{
		void* h;

		if( m_bFirst == INIT_MAIN )
		{
			IconCtrl_SetImage(Get_hDlgCtrlByID(ICON_TITLE), 0, g_pImgMainTtl );		//타이틀
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_TITLE), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
	
			if( theDevInfo.m_nType > FAMILY_PDA )
			{
				//상단공통메뉴
				h = GetSysButHandle(GID_HOME);
				ButCtrl_SetImage( h,  g_pImgHomeI);
				ButCtrl_SetActiveImage( h,  g_pImgHomeA);
				
				h = GetSysButHandle(GID_KEYBOARD);
				ButCtrl_SetImage( h,  g_pImgKeybrdI);
				ButCtrl_SetActiveImage( h,  g_pImgKeybrdA);
				
				h = GetSysButHandle(GID_SCREEN);
				ButCtrl_SetImage( h,  g_pImgScreenI);
				ButCtrl_SetActiveImage( h,  g_pImgScreenA);
				
				h = GetSysButHandle(GID_CMMNWK);
				ButCtrl_SetImage( h,  g_pImgCmmnwrkI);
				ButCtrl_SetActiveImage( h,  g_pImgCmmnwrkA);
				
				h = GetSysButHandle(GID_VMEXIT);
				ButCtrl_SetImage( h,  g_pImgExitI);
				ButCtrl_SetActiveImage( h,  g_pImgExitA);
			}
		}
		else if( m_bFirst == INIT_MEMO )
		{
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_TITLE), EDITALIGN_MIDDLE);

			if( theDevInfo.m_nType > FAMILY_PDA )
			{
				//상단공통메뉴
				h = GetSysButHandle(GID_HOME);
				ButCtrl_SetImage( h,  g_pImgHomeI);
				ButCtrl_SetActiveImage( h,  g_pImgHomeA);
				
				h = GetSysButHandle(GID_KEYBOARD);
				ButCtrl_SetImage( h,  g_pImgKeybrdI);
				ButCtrl_SetActiveImage( h,  g_pImgKeybrdA);
				
				h = GetSysButHandle(GID_SCREEN);
				ButCtrl_SetImage( h,  g_pImgScreenI);
				ButCtrl_SetActiveImage( h,  g_pImgScreenA);
				
				h = GetSysButHandle(GID_CMMNWK);
				ButCtrl_SetImage( h,  g_pImgCmmnwrkI);
				ButCtrl_SetActiveImage( h,  g_pImgCmmnwrkA);
				
				h = GetSysButHandle(GID_VMEXIT);
				ButCtrl_SetImage( h,  g_pImgExitI);
				ButCtrl_SetActiveImage( h,  g_pImgExitA);
				
				IconCtrl_SetImage(Get_hDlgCtrlByID(ICON_TITLE), 0, g_pImgSubTtlClose );		//메모 타이틀
			}
			else
			{
				IconCtrl_SetImage(Get_hDlgCtrlByID(ICON_TITLE), 0, g_pImgMainTtl );		//체납활동 타이틀
			}
		}
		else
		{
			IconCtrl_SetImage(Get_hDlgCtrlByID(ICON_TITLE), 0, g_pImgPopTtlL );		//타이틀
			// EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_TITLE), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_TITLE), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		}
	}

	/*=======================================================================================
	함수명 : FS_GetSrchTotCnt
	기  능 : 검색인덱스파일의 레코드 수를 리턴한다.
	Param  : nPos:검색 인덱스 파일의 순번
 	Return : 레코드수
	========================================================================================*/
	long FS_GetSrchTotCnt(void)
	{
		long size = 0;

		size = FFS_GetSize( SREACH_FILE );

		size = size/SRCH_FS_SIZE;

		return size;
	}


//------------------------------------------------------------------
	void SetStyle(void)
	{
		if( m_bFirst == INIT_MAIN )
		{
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_PAGE), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA3), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA5), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA7), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA9), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA11), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA13), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA15), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA18), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA19), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA21), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA22), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA24), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA26), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA29), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA31), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA33), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA35), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA37), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA39), EDITALIGN_CENTER|EDITALIGN_MIDDLE);		
			
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA1), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA4), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA6), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA8), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA10), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA12), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA14), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA16), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA17), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA20), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA23), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA25), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA27), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA28), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA30), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA32), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA34), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA36), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA38), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA40), EDITALIGN_MIDDLE);
	
			EditCtrl_SetMultiLine(Get_hDlgCtrlByID(TXT_DATA2), TRUE, 2, EDITSEP_NONE );
		}
		else if( m_bFirst == INIT_VIRTACCOUNT )
		{
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_VIRTPAGE), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA41), EDITALIGN_MIDDLE);
			
			EditCtrl_SetMultiLine(Get_hDlgCtrlByID(TXT_DATA41), TRUE, 2, EDITSEP_NONE );
		}
		else if( m_bFirst == INIT_MEMO )
		{
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_PAGE_M), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_MEMOPAGE), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA49), EDITALIGN_MIDDLE);

			EditCtrl_SetMultiLine(Get_hDlgCtrlByID(TXT_DATA42), TRUE, 2, EDITSEP_NONE );
		}
		else if( m_bFirst == INIT_PAYINFO )
		{
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA43), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA44), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA45), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA46), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA47), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA48), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		}
		else if( m_bFirst == INIT_SMS )
		{
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA51), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA52), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA53), EDITALIGN_CENTER|EDITALIGN_MIDDLE);

			EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA1 ), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA2 ), EDITALIGN_MIDDLE);
			EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA3 ), EDITALIGN_MIDDLE);

			if( theDevInfo.m_nType > FAMILY_PDA )
			{
				//숫자판
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_ONE), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_TWO), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_THREE), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_FOUR), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_FIVE), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_SIX), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_SEVEN), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_EIGHT), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_NINE), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_ZERO), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
				EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_KEY_DEL), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			}
		}
	}

	/*=======================================================================================
	함수명 : Set_Index
	기  능 : 최종 인덱스 저장한다.
	Param  : 
 	Return : TRUE :성공
 			 FALSE:파일이 없을시에 실패
	========================================================================================*/
	void Set_Index(void)
	{
		char sztmp[101];

		Mem_Set((byte*)sztmp, 0x00, sizeof(sztmp));
		SPRINT(sztmp, "UPDATE RCV_LOG SET PARAM9 =%d WHERE GUBUN = '9' ", g_nActIndex, 0, 0);
		g_Sql_DirectExecute(sztmp);
	}

//------------------------------------------------------------------	
	void SetData(void)
	{
		long i;
		long lindex = 0;
		char szSql[200];
		char szindex[10];
		handle hdb = NULL;
		handle hstmt = NULL;
		SQLITE sql = NewSqLite();

		if( g_nWorkFlag == 840 )
		{
			//경매활동에서 진행 시 , 사용계약번호 셋팅
			//lindex = g_SREACHFILE_GetSeq(SREACH_FILE, g_nActIndex);
			Mem_Set((byte*)szSql, 0x00, sizeof(szSql));
			Mem_Set((byte*)g_szUSE_CONT_NUM, 0x00, sizeof(g_szUSE_CONT_NUM));
			SPRINT(szSql, "SELECT USE_CONT_NUM FROM C6202_AUCTION WHERE ROWID = '%d'",g_lindex, 0, 0   );
			g_Sql_RetStr( szSql, 12, g_szUSE_CONT_NUM );
		}

		Mem_Set((byte*)&stNoPayObj, 0x00, sizeof(stNoPayObj));

		hdb = sql->Open(sql);
		if( hdb == NULL )
		{
			goto Finally;
		}

		hstmt = sql->CreateStatement(sql, " SELECT ROWID, USE_CONT_NUM, BASE_YMD, CONT_YMD, CNL_YMD \
										  		 , PAY_METHOD, DEADLINE_FLAG , CONT_STS_CD, NONPAY_OBJ_FLAG, NONPAY_MANAGE_FLAG \
										  		 , NONPAY_MANAGE_AMT, WARR_AMT_SUM, UNPAY_AMT_SUM, NONPAY_MM_CNT, ZIP_NO1 \
												 , ZIP_NO2, TRIM(CITY), TRIM(AREA), TRIM(TOWN) , TRIM(VILLAGE) \
												 , TRIM(ADDR1_M), TRIM(ADDR1_S), TRIM(CO_LIVE_NM), TRIM(DONG_NUM), TRIM(HOSU) \
												 , TRIM(BLD_NM), TRIM(DETAIL_FLOOR), NEW_ADDR_UNION, CUST_NUM, CUST_TYPE_CD \
												 , CUST_NM, FIRM_NM, BIZ_REGI_NUM, SOC_NUM, REPRE_NM \
												 , CP_DDD, CP_EXN, CP_NUM, OWNHOUSE_TEL_DDD, OWNHOUSE_TEL_EXN \
												 , OWNHOUSE_TEL_NUM, PAY_CUST_NUM, PAY_CUST_TYPE_CD, PAY_CUST_NM, PAY_FIRM_NM \
												 , PAY_BIZ_REGI_NUM, PAY_SOC_NUM, PAY_REPRE_NM, PAY_CP_NUM, PAY_TEL_NUM \
												 , OWNER_CUST_NUM, OWNER_CUST_TYPE_CD, OWNER_CUST_NM, OWNER_FIRM_NM, OWNER_BIZ_REGI_NUM \
												 , OWNER_SOC_NUM, OWNER_REPRE_NM, OWNER_CP_NUM, OWNER_TEL_NUM, NONPAY_ACTIVE_DEPT \
												 , NONPAY_MANAGE_ZONE, TAKER_NM, RMK, STOP_FLAG, CUST_FLAG \
												 , ACCEPT_AMT, SEL_M_CNT, VISIT_FLAG, CUT_FLAG, AUTO_FLAG \
												 , RELE_FLAG, RCEI_FLAG, RSLT_NOTICE_YN, OBJ_PERS_SOC_NUM, LAW_ETC_AMT \
												 , DEBT_AMT, DEBT_UNPAY_AMT, ALL_UNPAY, LAW_TOWN, TRIM(NEW_ROAD_NM) \
												 , TRIM(NEW_ADDR_M), TRIM(NEW_ADDR_S), CURR_ADDR_UNION, ENER_VOUCH_YN, EARLY_ALAM_YN \
												 , VISIT_REG_YN, WARR_YN, READ_MEMO_YN, INST_PLACE_NUM, REAL_NM_CONF_YN \
												 , SAFE_KEY_YN, PAYCONFIRM_FLAG, USE_CD, EXCEP_TEL_YN, STOP_SMS_YN \
											  FROM C6202_NOPAY_OBJ WHERE USE_CONT_NUM = ? ORDER BY TOWN, ADDR1_M, ADDR1_S, CO_LIVE_NM, BLD_NM, HOSU "
		);
		
		if( hstmt == NULL )
		{
			PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}

		i = 0;

		sql->Bind(sql, i++, 'U', (long*)&g_szUSE_CONT_NUM , 11, DECRYPT);

		if(sql->Execute(sql) == FALSE)
		{
			PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}

		if(sql->Next(sql) == TRUE )
		{	
			i = 0;
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.ROWID               , 3  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.USE_CONT_NUM        , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.BASE_YMD            , 8  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CONT_YMD            , 8  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CNL_YMD             , 8  +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.PAY_METHOD          , 2  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.DEADLINE_FLAG       , 20 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CONT_STS_CD         , 2  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.NONPAY_OBJ_FLAG     , 2  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.NONPAY_MANAGE_FLAG  , 2  +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.NONPAY_MANAGE_AMT   , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.WARR_AMT_SUM        , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.UNPAY_AMT_SUM       , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.NONPAY_MM_CNT       , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.ZIP_NO1             , 3  +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.ZIP_NO2             , 3  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CITY                , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.AREA                , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.TOWN                , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.VILLAGE             , 30 +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.ADDR1_M             , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.ADDR1_S             , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CO_LIVE_NM          , 60 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.DONG_NUM            , 20 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.HOSU                , 20 +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.BLD_NM              , 60 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.DETAIL_FLOOR        , 20 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.NEW_ADDR_UNION      , 300+1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CUST_NUM            , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CUST_TYPE_CD        , 2  +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CUST_NM             , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.FIRM_NM             , 50 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.BIZ_REGI_NUM        , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.SOC_NUM             , 13 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.REPRE_NM            , 30 +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CP_DDD              , 4  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CP_EXN              , 4  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CP_NUM              , 4  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.OWNHOUSE_TEL_DDD    , 4  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.OWNHOUSE_TEL_EXN    , 4  +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.OWNHOUSE_TEL_NUM    , 4  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.PAY_CUST_NUM        , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.PAY_CUST_TYPE_CD    , 2  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.PAY_CUST_NM         , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.PAY_FIRM_NM         , 50 +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.PAY_BIZ_REGI_NUM    , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.PAY_SOC_NUM         , 13 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.PAY_REPRE_NM        , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.PAY_CP_NUM          , 20 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.PAY_TEL_NUM         , 20 +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.OWNER_CUST_NUM      , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.OWNER_CUST_TYPE_CD  , 2  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.OWNER_CUST_NM       , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.OWNER_FIRM_NM       , 50 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.OWNER_BIZ_REGI_NUM  , 10 +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.OWNER_SOC_NUM       , 13 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.OWNER_REPRE_NM      , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.OWNER_CP_NUM        , 20 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.OWNER_TEL_NUM       , 20 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.NONPAY_ACTIVE_DEPT  , 4  +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.NONPAY_MANAGE_ZONE  , 6  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.TAKER_NM            , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.RMK                 , 300+1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.STOP_FLAG           , 2  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CUST_FLAG           , 1  +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.ACCEPT_AMT          , 20 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.SEL_M_CNT           , 20 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.VISIT_FLAG          , 1  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CUT_FLAG            , 1  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.AUTO_FLAG           , 1  +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.RELE_FLAG           , 1  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.RCEI_FLAG           , 1  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.RSLT_NOTICE_YN      , 1  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.OBJ_PERS_SOC_NUM    , 15 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.LAW_ETC_AMT         , 10 +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.DEBT_AMT            , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.DEBT_UNPAY_AMT      , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.ALL_UNPAY           , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.LAW_TOWN            , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.NEW_ROAD_NM         , 200+1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.NEW_ADDR_M          , 5  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.NEW_ADDR_S          , 5  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CURR_ADDR_UNION     , 300+1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.ENER_VOUCH_YN       , 1  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.EARLY_ALAM_YN       , 1  +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.VISIT_REG_YN        , 1  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.WARR_YN             , 1  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.READ_MEMO_YN        , 1  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.INST_PLACE_NUM      , 13 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.REAL_NM_CONF_YN     , 2 +1 , DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.SAFE_KEY_YN         , 2 +1 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.PAYCONFIRM_FLAG     , 5 +1 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.USE_CD              , 2 +1 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.EXCEP_TEL_YN        , 1 +1 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.STOP_SMS_YN         , 1 +1 , DECRYPT );
			
		}
		else
		{
			PRINT("::sql->Next fail [%s]",sql->GetLastError(sql),0,0);
			goto Finally;
		}

Finally:
//		sql->Commit(sql);
		DelSqLite(sql);
		return;
	}

//------------------------------------------------------------------	
	void SetDate_Part(void)
	{
		long i;
		char szSql[200];
		char szindex[10];
		handle hdb = NULL;
		handle hstmt = NULL;
		SQLITE sql = NewSqLite();

		//사용계약번호 셋팅
		//2017-12-07 Sanghyun Lee
		//대상이 1건만 검색되는 오류 수정
		Mem_Set((byte*)szSql, 0x00, sizeof(szSql));
		Mem_Set((byte*)g_szUSE_CONT_NUM, 0x00, sizeof(g_szUSE_CONT_NUM));
		SPRINT(szSql, "SELECT USE_CONT_NUM FROM C6202_NOPAY_OBJ_PART WHERE ROWID = '%d'",g_lindex, 0, 0   );
		g_Sql_RetStr( szSql, 12, g_szUSE_CONT_NUM );

		Mem_Set((byte*)&stNoPayObj, 0x00, sizeof(stNoPayObj));

		hdb = sql->Open(sql);
		if( hdb == NULL )
		{
			goto Finally;
		}

		hstmt = sql->CreateStatement(sql, " SELECT ROWID, USE_CONT_NUM, BASE_YMD, CONT_YMD, CNL_YMD \
												 , PAY_METHOD, DEADLINE_FLAG, CONT_STS_CD, NONPAY_OBJ_FLAG, NONPAY_MANAGE_FLAG \
												 , NONPAY_MANAGE_AMT, WARR_AMT_SUM, UNPAY_AMT_SUM, NONPAY_MM_CNT, ZIP_NO1 \
												 , ZIP_NO2, TRIM(CITY), TRIM(AREA), TRIM(TOWN), TRIM(VILLAGE) \
												 , TRIM(ADDR1_M), TRIM(ADDR1_S), TRIM(CO_LIVE_NM), TRIM(DONG_NUM), TRIM(HOSU) \
												 , TRIM(BLD_NM), TRIM(DETAIL_FLOOR), NEW_ADDR_UNION, CUST_NUM, CUST_TYPE_CD \
												 , CUST_NM, FIRM_NM, BIZ_REGI_NUM, SOC_NUM, REPRE_NM \
												 , CP_DDD, CP_EXN, CP_NUM, OWNHOUSE_TEL_DDD, OWNHOUSE_TEL_EXN \
												 , OWNHOUSE_TEL_NUM, PAY_CUST_NUM, PAY_CUST_TYPE_CD, PAY_CUST_NM, PAY_FIRM_NM \
												 , PAY_BIZ_REGI_NUM, PAY_SOC_NUM, PAY_REPRE_NM, PAY_CP_NUM, PAY_TEL_NUM \
												 , OWNER_CUST_NUM, OWNER_CUST_TYPE_CD, OWNER_CUST_NM, OWNER_FIRM_NM, OWNER_BIZ_REGI_NUM \
												 , OWNER_SOC_NUM, OWNER_REPRE_NM, OWNER_CP_NUM, OWNER_TEL_NUM, NONPAY_ACTIVE_DEPT \
												 , NONPAY_MANAGE_ZONE, TAKER_NM, RMK, STOP_FLAG, CUST_FLAG \
												 , ACCEPT_AMT, SEL_M_CNT, VISIT_FLAG, CUT_FLAG, AUTO_FLAG \
												 , RELE_FLAG, RCEI_FLAG, RSLT_NOTICE_YN, OBJ_PERS_SOC_NUM, LAW_ETC_AMT \
												 , DEBT_AMT, DEBT_UNPAY_AMT, ALL_UNPAY, LAW_TOWN, TRIM(NEW_ROAD_NM) \
												 , TRIM(NEW_ADDR_M), TRIM(NEW_ADDR_S), CURR_ADDR_UNION, ENER_VOUCH_YN, EARLY_ALAM_YN \
												 , VISIT_REG_YN, WARR_YN, READ_MEMO_YN, INST_PLACE_NUM, REAL_NM_CONF_YN \
												 , SAFE_KEY_YN, PAYCONFIRM_FLAG, USE_CD, EXCEP_TEL_YN, STOP_SMS_YN \
											  FROM C6202_NOPAY_OBJ_PART WHERE USE_CONT_NUM = ? ORDER BY TOWN, ADDR1_M, ADDR1_S, CO_LIVE_NM, BLD_NM, HOSU "
		);
		
		if( hstmt == NULL )
		{
			PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}

		i = 0;

		//2017-12-07 Sanghyun Lee
		//대상이 1건만 검색되는 오류 수정
		sql->Bind(sql, i++, 'U', (long*)&g_szUSE_CONT_NUM , 11, DECRYPT);

		if(sql->Execute(sql) == FALSE)
		{
			PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}

		if(sql->Next(sql) == TRUE )
		{	
			i = 0;
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.ROWID               , 3  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.USE_CONT_NUM        , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.BASE_YMD            , 8  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CONT_YMD            , 8  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CNL_YMD             , 8  +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.PAY_METHOD          , 2  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.DEADLINE_FLAG       , 20 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CONT_STS_CD         , 2  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.NONPAY_OBJ_FLAG     , 2  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.NONPAY_MANAGE_FLAG  , 2  +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.NONPAY_MANAGE_AMT   , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.WARR_AMT_SUM        , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.UNPAY_AMT_SUM       , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.NONPAY_MM_CNT       , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.ZIP_NO1             , 3  +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.ZIP_NO2             , 3  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CITY                , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.AREA                , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.TOWN                , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.VILLAGE             , 30 +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.ADDR1_M             , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.ADDR1_S             , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CO_LIVE_NM          , 60 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.DONG_NUM            , 20 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.HOSU                , 20 +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.BLD_NM              , 60 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.DETAIL_FLOOR        , 20 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.NEW_ADDR_UNION      , 300+1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CUST_NUM            , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CUST_TYPE_CD        , 2  +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CUST_NM             , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.FIRM_NM             , 50 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.BIZ_REGI_NUM        , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.SOC_NUM             , 13 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.REPRE_NM            , 30 +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CP_DDD              , 4  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CP_EXN              , 4  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CP_NUM              , 4  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.OWNHOUSE_TEL_DDD    , 4  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.OWNHOUSE_TEL_EXN    , 4  +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.OWNHOUSE_TEL_NUM    , 4  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.PAY_CUST_NUM        , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.PAY_CUST_TYPE_CD    , 2  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.PAY_CUST_NM         , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.PAY_FIRM_NM         , 50 +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.PAY_BIZ_REGI_NUM    , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.PAY_SOC_NUM         , 13 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.PAY_REPRE_NM        , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.PAY_CP_NUM          , 20 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.PAY_TEL_NUM         , 20 +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.OWNER_CUST_NUM      , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.OWNER_CUST_TYPE_CD  , 2  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.OWNER_CUST_NM       , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.OWNER_FIRM_NM       , 50 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.OWNER_BIZ_REGI_NUM  , 10 +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.OWNER_SOC_NUM       , 13 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.OWNER_REPRE_NM      , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.OWNER_CP_NUM        , 20 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.OWNER_TEL_NUM       , 20 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.NONPAY_ACTIVE_DEPT  , 4  +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.NONPAY_MANAGE_ZONE  , 6  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.TAKER_NM            , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.RMK                 , 300+1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.STOP_FLAG           , 2  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CUST_FLAG           , 1  +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.ACCEPT_AMT          , 20 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.SEL_M_CNT           , 20 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.VISIT_FLAG          , 1  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CUT_FLAG            , 1  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.AUTO_FLAG           , 1  +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.RELE_FLAG           , 1  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.RCEI_FLAG           , 1  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.RSLT_NOTICE_YN      , 1  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.OBJ_PERS_SOC_NUM    , 15 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.LAW_ETC_AMT         , 10 +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.DEBT_AMT            , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.DEBT_UNPAY_AMT      , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.ALL_UNPAY           , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.LAW_TOWN            , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.NEW_ROAD_NM         , 200+1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.NEW_ADDR_M          , 5  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.NEW_ADDR_S          , 5  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CURR_ADDR_UNION     , 300+1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.ENER_VOUCH_YN       , 1  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.EARLY_ALAM_YN       , 1  +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.VISIT_REG_YN        , 1  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.WARR_YN             , 1  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.READ_MEMO_YN        , 1  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.INST_PLACE_NUM      , 13 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.REAL_NM_CONF_YN     , 2  +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.SAFE_KEY_YN         , 2  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.PAYCONFIRM_FLAG     , 5  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.USE_CD              , 2  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.EXCEP_TEL_YN        , 1 +1 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.STOP_SMS_YN         , 1 +1 , DECRYPT );
		}
		else
		{
			PRINT("::sql->Next fail [%s]",sql->GetLastError(sql),0,0);
			goto Finally;
		}

Finally:
//		sql->Commit(sql);
		DelSqLite(sql);
		return;
	}


//------------------------------------------------------------------
	
	void SetDate_Stop(void)
	{
		long i;
		char szindex[10];
		handle hdb = NULL;
		handle hstmt = NULL;
		SQLITE sql = NewSqLite();

		Mem_Set((byte*)&stNoPayObj, 0x00, sizeof(stNoPayObj));

		hdb = sql->Open(sql);
		if( hdb == NULL )
		{
			goto Finally;
		}

		hstmt = sql->CreateStatement(sql, " SELECT ROWID, USE_CONT_NUM, BASE_YMD, CONT_YMD, CNL_YMD \
											     , PAY_METHOD, DEADLINE_FLAG, CONT_STS_CD, NONPAY_OBJ_FLAG, NONPAY_MANAGE_FLAG \
												 , NONPAY_MANAGE_AMT, WARR_AMT_SUM, UNPAY_AMT_SUM, NONPAY_MM_CNT, ZIP_NO1 \
												 , ZIP_NO2, TRIM(CITY), TRIM(AREA), TRIM(TOWN), TRIM(VILLAGE) \
												 , TRIM(ADDR1_M), TRIM(ADDR1_S), TRIM(CO_LIVE_NM), TRIM(DONG_NUM), TRIM(HOSU) \
												 , TRIM(BLD_NM), TRIM(DETAIL_FLOOR), NEW_ADDR_UNION, CUST_NUM, CUST_TYPE_CD \
												 , CUST_NM, FIRM_NM, BIZ_REGI_NUM, SOC_NUM, REPRE_NM \
												 , CP_DDD, CP_EXN, CP_NUM, OWNHOUSE_TEL_DDD, OWNHOUSE_TEL_EXN \
												 , OWNHOUSE_TEL_NUM, PAY_CUST_NUM, PAY_CUST_TYPE_CD, PAY_CUST_NM, PAY_FIRM_NM \
												 , PAY_BIZ_REGI_NUM, PAY_SOC_NUM, PAY_REPRE_NM, PAY_CP_NUM, PAY_TEL_NUM \
												 , OWNER_CUST_NUM, OWNER_CUST_TYPE_CD, OWNER_CUST_NM, OWNER_FIRM_NM, OWNER_BIZ_REGI_NUM \
												 , OWNER_SOC_NUM, OWNER_REPRE_NM, OWNER_CP_NUM, OWNER_TEL_NUM, NONPAY_ACTIVE_DEPT \
												 , NONPAY_MANAGE_ZONE, TAKER_NM, RMK, STOP_FLAG, CUST_FLAG \
												 , ACCEPT_AMT, SEL_M_CNT, VISIT_FLAG, CUT_FLAG, AUTO_FLAG \
												 , RELE_FLAG, RCEI_FLAG, RSLT_NOTICE_YN, OBJ_PERS_SOC_NUM, LAW_ETC_AMT \
												 , DEBT_AMT, DEBT_UNPAY_AMT, ALL_UNPAY, LAW_TOWN, TRIM(NEW_ROAD_NM) \
												 , TRIM(NEW_ADDR_M), TRIM(NEW_ADDR_S), CURR_ADDR_UNION, ENER_VOUCH_YN, EARLY_ALAM_YN \
												 , VISIT_REG_YN, WARR_YN, READ_MEMO_YN, INST_PLACE_NUM, REAL_NM_CONF_YN \
												 , SAFE_KEY_YN, PAYCONFIRM_FLAG, USE_CD, EXCEP_TEL_YN, STOP_SMS_YN \
											  FROM C6202_STOP_OBJ WHERE USE_CONT_NUM = ? ORDER BY TOWN, ADDR1_M, ADDR1_S, CO_LIVE_NM, BLD_NM, HOSU "
		);
		
		if( hstmt == NULL )
		{
			PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}

		i = 0;
		sql->Bind(sql, i++, 'U', (long*)&g_szUSE_CONT_NUM , 11, DECRYPT);

		if(sql->Execute(sql) == FALSE)
		{
			PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}

		if(sql->Next(sql) == TRUE )
		{	
			i = 0;
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.ROWID               , 3  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.USE_CONT_NUM        , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.BASE_YMD            , 8  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CONT_YMD            , 8  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CNL_YMD             , 8  +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.PAY_METHOD          , 2  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.DEADLINE_FLAG       , 20 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CONT_STS_CD         , 2  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.NONPAY_OBJ_FLAG     , 2  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.NONPAY_MANAGE_FLAG  , 2  +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.NONPAY_MANAGE_AMT   , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.WARR_AMT_SUM        , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.UNPAY_AMT_SUM       , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.NONPAY_MM_CNT       , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.ZIP_NO1             , 3  +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.ZIP_NO2             , 3  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CITY                , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.AREA                , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.TOWN                , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.VILLAGE             , 30 +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.ADDR1_M             , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.ADDR1_S             , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CO_LIVE_NM          , 60 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.DONG_NUM            , 20 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.HOSU                , 20 +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.BLD_NM              , 60 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.DETAIL_FLOOR        , 20 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.NEW_ADDR_UNION      , 300+1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CUST_NUM            , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CUST_TYPE_CD        , 2  +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CUST_NM             , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.FIRM_NM             , 50 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.BIZ_REGI_NUM        , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.SOC_NUM             , 13 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.REPRE_NM            , 30 +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CP_DDD              , 4  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CP_EXN              , 4  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CP_NUM              , 4  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.OWNHOUSE_TEL_DDD    , 4  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.OWNHOUSE_TEL_EXN    , 4  +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.OWNHOUSE_TEL_NUM    , 4  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.PAY_CUST_NUM        , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.PAY_CUST_TYPE_CD    , 2  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.PAY_CUST_NM         , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.PAY_FIRM_NM         , 50 +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.PAY_BIZ_REGI_NUM    , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.PAY_SOC_NUM         , 13 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.PAY_REPRE_NM        , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.PAY_CP_NUM          , 20 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.PAY_TEL_NUM         , 20 +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.OWNER_CUST_NUM      , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.OWNER_CUST_TYPE_CD  , 2  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.OWNER_CUST_NM       , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.OWNER_FIRM_NM       , 50 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.OWNER_BIZ_REGI_NUM  , 10 +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.OWNER_SOC_NUM       , 13 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.OWNER_REPRE_NM      , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.OWNER_CP_NUM        , 20 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.OWNER_TEL_NUM       , 20 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.NONPAY_ACTIVE_DEPT  , 4  +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.NONPAY_MANAGE_ZONE  , 6  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.TAKER_NM            , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.RMK                 , 300+1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.STOP_FLAG           , 2  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CUST_FLAG           , 1  +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.ACCEPT_AMT          , 20 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.SEL_M_CNT           , 20 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.VISIT_FLAG          , 1  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CUT_FLAG            , 1  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.AUTO_FLAG           , 1  +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.RELE_FLAG           , 1  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.RCEI_FLAG           , 1  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.RSLT_NOTICE_YN      , 1  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.OBJ_PERS_SOC_NUM    , 15 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.LAW_ETC_AMT         , 10 +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.DEBT_AMT            , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.DEBT_UNPAY_AMT      , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.ALL_UNPAY           , 10 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.LAW_TOWN            , 30 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.NEW_ROAD_NM         , 200+1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.NEW_ADDR_M          , 5  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.NEW_ADDR_S          , 5  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.CURR_ADDR_UNION     , 300+1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.ENER_VOUCH_YN       , 1  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.EARLY_ALAM_YN       , 1  +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.VISIT_REG_YN        , 1  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.WARR_YN             , 1  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.READ_MEMO_YN        , 1  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.INST_PLACE_NUM      , 13 +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.REAL_NM_CONF_YN     , 2  +1, DECRYPT );
			
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.SAFE_KEY_YN         , 2  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.PAYCONFIRM_FLAG     , 5  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.USE_CD              , 2  +1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.EXCEP_TEL_YN        , 1 +1 , DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stNoPayObj.STOP_SMS_YN         , 1 +1 , DECRYPT );
		}
		else
		{
			PRINT("::sql->Next fail [%s]",sql->GetLastError(sql),0,0);
			goto Finally;
		}

Finally:
//		sql->Commit(sql);
		DelSqLite(sql);
		return;
	}
	
//------------------------------------------------------------------
	void ReDraw(void)
	{
		char szTmp[300];
		char szMem[100];
/*	
		if( g_nWorkFlag == 810 )
		{
			Str_Cpy(m_szCnt_index, "1/1");
		}
		else if( g_nWorkFlag == 840 )
		{
			m_ltotcnt = FS_GetSrchTotCnt();
			
			//체납활동 화면에서 현재 page 표시로 사용
			g_nObjIndex = g_Get_FsIndex(g_lindex, SREACH_FILE);
	
			SPRINT(m_szCnt_index, "%d/%d", g_nObjIndex+1, m_ltotcnt, 0);
		}
		else
		{
			m_ltotcnt = FS_GetSrchTotCnt();
	
			SPRINT(m_szCnt_index, "%d/%d", g_nActIndex+1, m_ltotcnt, 0);
		}
*/	

		//2017-12-07 Sanghyun Lee
		//개별활동 대상이 1건만 검색되는 오류 수정
		if( g_nWorkFlag == 840 )
		{
			m_ltotcnt = FS_GetSrchTotCnt();
			
			//체납활동 화면에서 현재 page 표시로 사용
			g_nObjIndex = g_Get_FsIndex(g_lindex, SREACH_FILE);
	
			SPRINT(m_szCnt_index, "%d/%d", g_nObjIndex+1, m_ltotcnt, 0);
		}
		else
		{
			m_ltotcnt = FS_GetSrchTotCnt();
	
			SPRINT(m_szCnt_index, "%d/%d", g_nActIndex+1, m_ltotcnt, 0);
		}

		//계약번호 00000-00000
		Mem_Set( (byte*)szTmp, 0x00, sizeof(szTmp) );
		Mem_Set( (byte*)szMem, 0x00, sizeof(szMem) );
		Mem_Cpy((byte *)szTmp, (byte *)stNoPayObj.USE_CONT_NUM, 5);
		Str_Cat(szTmp, "-");
		Mem_Cpy((byte *)szMem, (byte *)stNoPayObj.USE_CONT_NUM+5, 5);
		Str_Cat(szTmp, szMem);
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA1),  szTmp);
		
		//중단대상
		if( Str_Cmp(stNoPayObj.STOP_FLAG, "Y") == 0 )
		{
			ButCtrl_SetText(Get_hDlgCtrlByID(BID_STOPCANCEL), "중단대상");
			ButCtrl_SetBkColorEx(Get_hDlgCtrlByID(BID_STOPCANCEL), RED);
		}
		else
		{
			ButCtrl_SetText(Get_hDlgCtrlByID(BID_STOPCANCEL), "");
			ButCtrl_SetBkColorEx(Get_hDlgCtrlByID(BID_STOPCANCEL), BTNCTRLBKCOLOR);
		}
		
		//주소
		if( g_nAddrFlag == 0 )
		{
			ButCtrl_SetText(Get_hDlgCtrlByID(BID_ADDR), "지번\n주소");
		
			Mem_Set( (byte*)szTmp, 0x00, sizeof(szTmp) );
			Str_Cpy(szTmp, stNoPayObj.TOWN);
			Str_Cat(szTmp, " ");
			Str_Cat(szTmp, stNoPayObj.VILLAGE);
			Str_Cat(szTmp, " ");
			Str_Cat(szTmp, stNoPayObj.ADDR1_M);
			Str_Cat(szTmp, "-");
			Str_Cat(szTmp, stNoPayObj.ADDR1_S);
		}
		else
		{
			ButCtrl_SetText(Get_hDlgCtrlByID(BID_ADDR), "도로명\n주소");
		
			Mem_Set( (byte*)szTmp, 0x00, sizeof(szTmp) );
			Str_Cpy(szTmp, stNoPayObj.NEW_ROAD_NM);
			Str_Cat(szTmp, " ");
			Str_Cat(szTmp, stNoPayObj.NEW_ADDR_M);
			Str_Cat(szTmp, "-");
			Str_Cat(szTmp, stNoPayObj.NEW_ADDR_S);
		}
		
		if( ( Str_Len(stNoPayObj.CO_LIVE_NM) + Str_Len(stNoPayObj.BLD_NM) ) > 0 )
		{
			Str_Cat(szTmp, " ");
			Str_Cat(szTmp, stNoPayObj.CO_LIVE_NM);
			Str_Cat(szTmp, " ");
			Str_Cat(szTmp, stNoPayObj.BLD_NM);
			Str_Cat(szTmp, "-");
			Str_Cat(szTmp, stNoPayObj.HOSU);
			Str_Cat(szTmp, " ");
			Str_Cat(szTmp, stNoPayObj.DETAIL_FLOOR);
		}
		else
		{
			Str_Cat(szTmp, " ");
			Str_Cat(szTmp, stNoPayObj.HOSU);
			Str_Cat(szTmp, " ");
			Str_Cat(szTmp, stNoPayObj.DETAIL_FLOOR);
		}
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA2),  szTmp);
		
	
		//실명
		if( Str_Cmp(stNoPayObj.REAL_NM_CONF_YN, "Y") == 0 )
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA4),  stNoPayObj.REAL_NM_CONF_YN);
		}
		else if( Str_Cmp(stNoPayObj.REAL_NM_CONF_YN, "N") == 0 )
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA4),  stNoPayObj.REAL_NM_CONF_YN);
		}
		else
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA4),  "N");
		}
		
		/* 20200623 납부유예로 변경
		//대체키
		if( Str_Cmp(stNoPayObj.SAFE_KEY_YN, "Y") == 0 )
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA6),  stNoPayObj.SAFE_KEY_YN);
		}
		else if( Str_Cmp(stNoPayObj.SAFE_KEY_YN, "N") == 0 )
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA6),  stNoPayObj.SAFE_KEY_YN);
		}
		else
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA6),  "N");
		}
		*/

		//생년월일
		Mem_Set( (byte*)szTmp, 0x00, sizeof(szTmp) );
		Mem_Cpy((byte *)szTmp, (byte *)stNoPayObj.SOC_NUM, 6);
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA8),  szTmp);
		
		//성명
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA10),  stNoPayObj.CUST_NM);
		
		//사업자 , BIZ_REGI_NUM 000-00-00000
		Mem_Set( (byte*)szTmp, 0x00, sizeof(szTmp) );
		Mem_Set( (byte*)szMem, 0x00, sizeof(szMem) );
		Mem_Cpy((byte *)szTmp, (byte *)stNoPayObj.BIZ_REGI_NUM, 3);
		Str_Cat(szTmp, "-");
		Mem_Cpy((byte *)szMem, (byte *)stNoPayObj.BIZ_REGI_NUM+3, 2);
		Str_Cat(szTmp, szMem);
		Str_Cat(szTmp, "-");
		Mem_Cpy((byte *)szMem, (byte *)stNoPayObj.BIZ_REGI_NUM+5, 5);
		Str_Cat(szTmp, szMem);
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA12),  szTmp);
		
		//대표자
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA14),  stNoPayObj.REPRE_NM);
		
		//상호
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA16),  stNoPayObj.FIRM_NM);
		
		//바우처
		if( Str_Cmp(stNoPayObj.ENER_VOUCH_YN, "Y") == 0 )
		{
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(BID_VOUCHER), TRUE);
		}
		else
		{
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(BID_VOUCHER), FALSE);
		}
		
		//
		if( Str_Len(stNoPayObj.OBJ_PERS_SOC_NUM) > 0 )
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA17),  "유예대상");
		}
		else
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA17),  "");
		}
		
		//HP
		Mem_Set( (byte*)m_szHpTel, 0x00, sizeof(m_szHpTel) );
		Str_Cpy(m_szHpTel, stNoPayObj.CP_DDD);
		Str_Cat(m_szHpTel, "-");
		Str_Cat(m_szHpTel, stNoPayObj.CP_EXN);
		Str_Cat(m_szHpTel, "-");
		Str_Cat(m_szHpTel, stNoPayObj.CP_NUM);
		ButCtrl_SetText(Get_hDlgCtrlByID(BID_HPTEL), m_szHpTel);

		if( Str_Len(m_szHpTel) > 7)
		{
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_HPTEL), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_HPTEL), FALSE );
		}
		else
		{
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_HPTEL), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_HPTEL), TRUE );
		}

		
		//자택
		Mem_Set( (byte*)m_szHouseTel, 0x00, sizeof(m_szHouseTel) );
		Str_Cpy(m_szHouseTel, stNoPayObj.OWNHOUSE_TEL_DDD);
		Str_Cat(m_szHouseTel, "-");
		Str_Cat(m_szHouseTel, stNoPayObj.OWNHOUSE_TEL_EXN);
		Str_Cat(m_szHouseTel, "-");
		Str_Cat(m_szHouseTel, stNoPayObj.OWNHOUSE_TEL_NUM);
		ButCtrl_SetText(Get_hDlgCtrlByID(BID_HOUSETEL), m_szHouseTel);
		
		if( Str_Len(m_szHouseTel) > 7)
		{
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_HOUSETEL), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_HOUSETEL), FALSE );
		}
		else
		{
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_HOUSETEL), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_HOUSETEL), TRUE );
		}

		//납부자
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA20),  stNoPayObj.PAY_CUST_NM);
		
		//납부자전화 
		Str_Chg(stNoPayObj.PAY_TEL_NUM, STRCHG_DEL_NONDIGIT);
		Mem_Set( (byte*)m_szPayTel, 0x00, sizeof(m_szPayTel) );
		Mem_Set( (byte*)szMem, 0x00, sizeof(szMem) );
		Mem_Cpy((byte *)szMem, (byte *)stNoPayObj.PAY_TEL_NUM, 2);
		if( Str_Len(stNoPayObj.PAY_TEL_NUM) > 11 )
		{
			Mem_Cpy((byte *)m_szPayTel, (byte *)stNoPayObj.PAY_TEL_NUM, 4);
		}
		else if( Str_Cmp(szMem, "02") == 0 )
		{
			Mem_Cpy((byte *)m_szPayTel, (byte *)stNoPayObj.PAY_TEL_NUM, 2);
		}
		else
		{
			Mem_Cpy((byte *)m_szPayTel, (byte *)stNoPayObj.PAY_TEL_NUM, 3);
		}
		Str_Cat(m_szPayTel, "-");


		if( Str_Len(stNoPayObj.PAY_TEL_NUM) > 11 )
		{
			Mem_Set( (byte*)szMem, 0x00, sizeof(szMem) );
			Mem_Cpy((byte *)szMem, (byte *)stNoPayObj.PAY_TEL_NUM+4, 4);
		}
		else if( Str_Len(stNoPayObj.PAY_TEL_NUM) == 11 )
		{
			Mem_Set( (byte*)szMem, 0x00, sizeof(szMem) );
			Mem_Cpy((byte *)szMem, (byte *)stNoPayObj.PAY_TEL_NUM+3, 4);
		}
		else if( Str_Cmp(szMem, "02") == 0 )
		{
			if( Str_Len(stNoPayObj.PAY_TEL_NUM) == 10 )
			{
				Mem_Set( (byte*)szMem, 0x00, sizeof(szMem) );
				Mem_Cpy((byte *)szMem, (byte *)stNoPayObj.PAY_TEL_NUM+2, 4);
			}
			else
			{
				Mem_Set( (byte*)szMem, 0x00, sizeof(szMem) );
				Mem_Cpy((byte *)szMem, (byte *)stNoPayObj.PAY_TEL_NUM+2, 3);
			}
		}
		else
		{
			Mem_Set( (byte*)szMem, 0x00, sizeof(szMem) );
			Mem_Cpy((byte *)szMem, (byte *)stNoPayObj.PAY_TEL_NUM+3, 3);
		}
		Str_Cat(m_szPayTel, szMem);
		Str_Cat(m_szPayTel, "-");

		Mem_Set( (byte*)szMem, 0x00, sizeof(szMem) );
		Mem_Cpy((byte *)szMem, (byte *)stNoPayObj.PAY_TEL_NUM, 2);
		if( Str_Cmp(szMem, "02") == 0  )
		{
			Mem_Set( (byte*)szMem, 0x00, sizeof(szMem) );
			if( Str_Len(stNoPayObj.PAY_TEL_NUM) == 10 )
			{
				
				Mem_Cpy((byte *)szMem, (byte *)stNoPayObj.PAY_TEL_NUM+6, 4);
			}
			else
			{
				Mem_Cpy((byte *)szMem, (byte *)stNoPayObj.PAY_TEL_NUM+5, 4);
			}
		}
		else if( Str_Len(stNoPayObj.PAY_TEL_NUM) == 11 )
		{
			Mem_Set( (byte*)szMem, 0x00, sizeof(szMem) );
			Mem_Cpy((byte *)szMem, (byte *)stNoPayObj.PAY_TEL_NUM+7, 4);
		}
		else if( Str_Len(stNoPayObj.PAY_TEL_NUM) == 10 )
		{
			Mem_Set( (byte*)szMem, 0x00, sizeof(szMem) );
			Mem_Cpy((byte *)szMem, (byte *)stNoPayObj.PAY_TEL_NUM+6, 4);
		}
		else
		{
			Mem_Set( (byte*)szMem, 0x00, sizeof(szMem) );
			Mem_Cpy((byte *)szMem, (byte *)stNoPayObj.PAY_TEL_NUM+8, 4);
		}
		Str_Cat(m_szPayTel, szMem);
		ButCtrl_SetText(Get_hDlgCtrlByID(BID_PAYTEL), m_szPayTel);

		if( Str_Len(m_szPayTel) > 7)
		{
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_PAYTEL), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_PAYTEL), FALSE );
		}
		else
		{
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_PAYTEL), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_PAYTEL), TRUE );
		}
		
		//20181116 용도
		
		if( Str_Cmp(stNoPayObj.USE_CD, "1") == 0 )
		{	
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA23), "가정용" );
			EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(TXT_DATA23), TXTFRCOLOR);
		}
		else if( Str_Cmp(stNoPayObj.USE_CD, "2") == 0 )
		{	
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA23), "비가정용" );
			EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(TXT_DATA23), RED);
		}

		//고객번호 00000-00000
		/*
		Mem_Set( (byte*)szTmp, 0x00, sizeof(szTmp) );
		Mem_Set( (byte*)szMem, 0x00, sizeof(szMem) );
		Mem_Cpy((byte *)szTmp, (byte *)stNoPayObj.CUST_NUM, 5);
		Str_Cat(szTmp, "-");
		Mem_Cpy((byte *)szMem, (byte *)stNoPayObj.CUST_NUM+5, 5);
		Str_Cat(szTmp, szMem);
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA23),  szTmp);
		*/
/*
--> 실시간 상태 수신
		//상태 , Decode(CONT_STS_CD,'10','정상','20','중지','30','해지','')
		if( Str_Cmp(stNoPayObj.CONT_STS_CD, "10") == 0 )
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA25),  "정상");
		}
		else if( Str_Cmp(stNoPayObj.CONT_STS_CD, "20") == 0 )
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA25),  "중지");
		}
		else if( Str_Cmp(stNoPayObj.CONT_STS_CD, "30") == 0 )
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA25),  "해지");
		}
		else
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA25),  "");
		}
*/
		
		//납기구분
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA27),  stNoPayObj.DEADLINE_FLAG);
		
		//납부방법 Decode(PAY_METHOD,'10','지로','20','자동이체','30','카드','40','가상계좌','')
		if( Str_Cmp(stNoPayObj.PAY_METHOD, "20") == 0 )
		{
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(BID_PAYINFO), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA28), FALSE);
		}
		else
		{
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(BID_PAYINFO), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA28), TRUE);
		
			if( Str_Cmp(stNoPayObj.PAY_METHOD, "10") == 0 )
			{
				EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA28),  "지로");
			}
			else if( Str_Cmp(stNoPayObj.PAY_METHOD, "30") == 0 )
			{
				EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA28),  "카드");
			}
			else if( Str_Cmp(stNoPayObj.PAY_METHOD, "40") == 0 )
			{
				EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA28),  "가상계좌");
			}
			else
			{
				EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA28),  "");
			}
		}
		
		//체납상태 Decode(NONPAY_MANAGE_FLAG,'10','채권추심','20','신용등록','')
		if( Str_Cmp(stNoPayObj.NONPAY_MANAGE_FLAG, "10") == 0 )
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA30),  "채권추심");
		}
		else if( Str_Cmp(stNoPayObj.NONPAY_MANAGE_FLAG, "20") == 0 )
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA30),  "신용등록");
		}
		else
		{
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA30),  "");
		}
		
/*
//실시간 수신 데이터로 변경. 
		//금액
		Mem_Set( (byte*)szTmp, 0x00, sizeof(szTmp) );
		Str_Cpy(szTmp, stNoPayObj.NONPAY_MANAGE_AMT);
		Str_Chg(szTmp, STRCHG_INS_COMMA);
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA32),  szTmp);
		
		//총체납액
		Mem_Set( (byte*)szTmp, 0x00, sizeof(szTmp) );
		Str_Cpy(szTmp, stNoPayObj.ALL_UNPAY);
		Str_Chg(szTmp, STRCHG_INS_COMMA);
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA34), szTmp);
		
		//개월
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA36),  stNoPayObj.NONPAY_MM_CNT);
*/
		
		//대손금액
		Mem_Set( (byte*)szTmp, 0x00, sizeof(szTmp) );
		//Str_Cpy(szTmp, stNoPayObj.DEBT_AMT);
		Str_Cpy(szTmp, stNoPayObj.DEBT_UNPAY_AMT);
		Str_Chg(szTmp, STRCHG_INS_COMMA);
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA38),  szTmp);
		
		//기타
		//EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA40),  stNoPayObj.LAW_ETC_AMT);
		Mem_Set( (byte*)szTmp, 0x00, sizeof(szTmp) );
		Str_Cpy(szTmp, stNoPayObj.LAW_ETC_AMT);
		Str_Chg(szTmp, STRCHG_INS_COMMA);
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA40),  szTmp);
		
		//경매정보
		if( Str_Cmp(stNoPayObj.NONPAY_OBJ_FLAG, "10") != 0 )
		{
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_AUCTION), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_AUCTION), FALSE );
		}
		else
		{
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_AUCTION), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_AUCTION), TRUE );
		}

		//불이행
		if( Str_Cmp(stNoPayObj.NONPAY_MANAGE_FLAG, "20") == 0 )
		{
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_DEPT), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_DEPT), FALSE );
		}
		else
		{
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_DEPT), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_DEPT), TRUE );
		}

		//담보
		if( Str_Cmp(stNoPayObj.WARR_YN, "Y") == 0 )
		{
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_WARR), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_WARR), FALSE );
		}
		else
		{
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_WARR), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_WARR), TRUE );
		}

		//조기경보
		if( Str_Cmp(stNoPayObj.EARLY_ALAM_YN, "Y") == 0 )
		{
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_EARLYALARM), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_EARLYALARM), FALSE );
		}
		else
		{
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_EARLYALARM), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_EARLYALARM), TRUE );
		}
		
		ON_DRAW();
		return;
	}
	
	
//------------------------------------------------------------------	
	void Prev_Np(void)
	{
		long lindex;
		char szTmp[200];
	
		if( g_nActIndex > 0 )
		{
			g_nActIndex--;
			g_lindex = g_SREACHFILE_GetSeq(SREACH_FILE, g_nActIndex);
		}
		else
		{
			g_nActIndex = -1;
		}
		
		if( g_lindex <= 0 || g_nActIndex < 0 )
		{
			g_nActIndex = 0;
			g_lindex = g_SREACHFILE_GetSeq(SREACH_FILE, g_nActIndex);

			return;
		}

		lindex = g_SREACHFILE_GetSeq(SREACH_FILE, g_nActIndex);


		if( g_nWorkFlag == 810 )
		{
			Mem_Set((byte*)szTmp, 0x00, sizeof(szTmp));	
			Mem_Set((byte*)g_szUSE_CONT_NUM, 0x00, sizeof(g_szUSE_CONT_NUM));	
			SPRINT(szTmp, "SELECT USE_CONT_NUM FROM C6202_NOPAY_OBJ_PART WHERE ROWID = '%d'",lindex, 0, 0   );
			g_Sql_RetStr( szTmp, 15, g_szUSE_CONT_NUM );
		}
		else if( g_nWorkFlag == 830 )
		{
			Mem_Set((byte*)szTmp, 0x00, sizeof(szTmp));	
			Mem_Set((byte*)g_szUSE_CONT_NUM, 0x00, sizeof(g_szUSE_CONT_NUM));	
			SPRINT(szTmp, "SELECT USE_CONT_NUM FROM C6202_STOP_OBJ WHERE ROWID = '%d'",lindex, 0, 0   );
			g_Sql_RetStr( szTmp, 15, g_szUSE_CONT_NUM );
		}
		else
		{
			Mem_Set((byte*)szTmp, 0x00, sizeof(szTmp));	
			Mem_Set((byte*)g_szUSE_CONT_NUM, 0x00, sizeof(g_szUSE_CONT_NUM));	
			SPRINT(szTmp, "SELECT USE_CONT_NUM FROM C6202_NOPAY_OBJ WHERE ROWID = '%d'",lindex, 0, 0   );
			g_Sql_RetStr( szTmp, 15, g_szUSE_CONT_NUM );
		}


		g_lDataflag = 0;
		g_lNpMemoChkFlag = 0;
		
		ON_EXIT();
		OnInit(INIT_MAIN);
		return;
	}
	
//------------------------------------------------------------------	
	void Next_Np(void)
	{
		long lindex;
		char szTmp[200];

		g_nActIndex++;
		g_lindex = g_SREACHFILE_GetSeq(SREACH_FILE, g_nActIndex);

		if( g_nActIndex > m_ltotcnt || g_lindex < 0 )
		{
			if( g_SREACHFILE_GetSeq(SREACH_FILE, g_nActIndex) < g_nActIndex )
			{
				g_nActIndex = g_nActIndex-1;
			}
			g_lindex = g_SREACHFILE_GetSeq(SREACH_FILE, g_nActIndex);
			
			//MessageBoxEx (CONFIRM_OK, "마지막 고객입니다.");
			return;
		}
		
		lindex = g_SREACHFILE_GetSeq(SREACH_FILE, g_nActIndex);

		if( g_nWorkFlag == 810 )
		{
			Mem_Set((byte*)szTmp, 0x00, sizeof(szTmp));	
			Mem_Set((byte*)g_szUSE_CONT_NUM, 0x00, sizeof(g_szUSE_CONT_NUM));	
			SPRINT(szTmp, "SELECT USE_CONT_NUM FROM C6202_NOPAY_OBJ_PART WHERE ROWID = '%d'",lindex, 0, 0   );
			g_Sql_RetStr( szTmp, 15, g_szUSE_CONT_NUM );
		}
		else if( g_nWorkFlag == 830 )
		{
			Mem_Set((byte*)szTmp, 0x00, sizeof(szTmp));	
			Mem_Set((byte*)g_szUSE_CONT_NUM, 0x00, sizeof(g_szUSE_CONT_NUM));	
			SPRINT(szTmp, "SELECT USE_CONT_NUM FROM C6202_STOP_OBJ WHERE ROWID = '%d'",lindex, 0, 0   );
			g_Sql_RetStr( szTmp, 15, g_szUSE_CONT_NUM );
		}
		else
		{
			Mem_Set((byte*)szTmp, 0x00, sizeof(szTmp));	
			Mem_Set((byte*)g_szUSE_CONT_NUM, 0x00, sizeof(g_szUSE_CONT_NUM));	
			SPRINT(szTmp, "SELECT USE_CONT_NUM FROM C6202_NOPAY_OBJ WHERE ROWID = '%d'",lindex, 0, 0   );
			g_Sql_RetStr( szTmp, 15, g_szUSE_CONT_NUM );
		}

		g_lDataflag = 0;
		g_lNpMemoChkFlag = 0;

		ON_EXIT();
		OnInit(INIT_MAIN);
		return;
	}
	
//------------------------------------------------------------------	
	long Rcv_VirtAccount(void)
	{
		char sztmp[32];
		char szUrl[256];
		char szSql[256];
		char sznm_kor[64];
		char* sndbuf;
		long ret;
		long ntotcnt;
		
		g_Sql_DirectExecute("DELETE FROM RCV_TMP");
		
		g_SeverConnection();

		if( g_pjcomm != NULL)
		{
			JSON_Finalize( g_pjcomm );
			g_pjcomm = NULL;
		}
		g_pjcomm = g_CreateJsonHead(g_pjcomm, szUrl, 82211, FALSE);
		
		JSON_SetValue( g_pjcomm, 'C', "use_cont_num",  stNoPayObj.USE_CONT_NUM );
						
		sndbuf = JSON_toString(g_pjcomm);
		
		Mem_Set((byte*)sztmp, 0x00, sizeof(sztmp));	
		GET_FILENM(sztmp, SQLITE_DB);
		
		callBackfunc = TR82211; //통신완료 후에 호출 함수
		ret = HTTP_DownloadData(szUrl, "FR82211_IN",  "FR82211" , sndbuf, sztmp );
		return 0 ;
	}
	
//---------------------------------------------------------------------------------------------
	long TR82211(void)
	{
		long ntotcnt = 0;
		char szMsg[128];
		
		g_Sock_Close();
		
		if(g_Chk_Json(82211) >= 0)
		{
			Virt_Draw();
			ON_DRAW();
			return 1;
		}
		else
		{
			CloseMessageBox();
			ON_DRAW();
			return -1;
		}
	}
	
	
//---------------------------------------------------------------------------------------------
	void Virt_Draw(void)
	{
	long i, idx;
	long k = ROW_V + 1;
	char sztmp[201];
	long ret = -1;	
	long lstartidx;
	handle hdb = NULL;
	handle hstmt = NULL;
	SQLITE sql = NewSqLite();

		g_Sql_RetInt( "SELECT COUNT(*) FROM RCV_TMP", &m_lTotpage_V );
		
		if( m_lTotpage_V % ROW_V > 0 )
		{
			m_lTotpage_V = (m_lTotpage_V / ROW_V) + 1;
		}
		else
		{
			m_lTotpage_V = m_lTotpage_V / ROW_V;
		}
		//페이지
		SPRINT(m_szCnt_page_V, "%d/%d", m_lpage_V+1, m_lTotpage_V, 0);
		
		hdb = sql->Open(sql);
		if( hdb == NULL )
		{
			goto Finally;
		}
		
		hstmt = sql->CreateStatement(sql, "SELECT  PARAM3, PARAM2, PARAM1, '1' as srt \
FROM RCV_TMP \
where PARAM3 = '003'  \
union \
SELECT PARAM3, PARAM2, PARAM1 , '2' as srt \
FROM RCV_TMP \
where PARAM3 = '027' \
union \
SELECT  PARAM3, PARAM2, PARAM1, '3' as srt \
FROM RCV_TMP \
where PARAM3 <> '027' and PARAM3 <> '003' \
order by srt, PARAM3 LIMIT ?, ? " );
				
		if( hstmt == NULL )
		{
			PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}
		
		idx = 0;
		lstartidx = m_lpage_V*ROW_V;
		sql->Bind(sql, idx++, 'X', &lstartidx, 4, DECRYPT);
		i = m_lpage_V*ROW_V+ROW_V;
		sql->Bind(sql, idx++, 'X', &i, 4, DECRYPT);
		
		if(sql->Execute(sql) == FALSE)
		{
			PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}

		// 등록된 코드 리스트를 페이지에 맞게 보여준다.
		for (i=0 ; i<ROW_V ; i++)
		{
			//자료가 없을때 화면을 클리어 시킨다.
			if( k == i )
			{
				k++;
				DlgTbl_SetStr ( ID_VIRTTBLLIST, i, 0, "" );
				DlgTbl_SetStr ( ID_VIRTTBLLIST, i, 1, "" );
				DlgTbl_SetStr ( ID_VIRTTBLLIST, i, 2, "" );
			}
			else
			{
				if(sql->Next(sql) == FALSE)
				{
					k = i + 1;
					DlgTbl_SetStr ( ID_VIRTTBLLIST, i, 0, "" );
					DlgTbl_SetStr ( ID_VIRTTBLLIST, i, 1, "" );
					DlgTbl_SetStr ( ID_VIRTTBLLIST, i, 2, "" );
					continue;
				}
				idx = 0;
				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				sql->GetValue(sql, idx++, 'U', (long*)sztmp, 30, DECRYPT);
				DlgTbl_SetStr ( ID_VIRTTBLLIST, i, 0, sztmp );

				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				sql->GetValue(sql, idx++, 'U', (long*)sztmp, 30, DECRYPT);
				DlgTbl_SetStr ( ID_VIRTTBLLIST, i, 1, sztmp );

				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				sql->GetValue(sql, idx++, 'U', (long*)sztmp, 5, DECRYPT);
				DlgTbl_SetStr ( ID_VIRTTBLLIST, i, 2, sztmp );
			}
		}		
Finally:
		//sql->Commit(sql);
		DelSqLite(sql);

		ON_DRAW();
		return;
	}
	
/*=======================================================================================
	함수명 : Snd_FR90008
	기  능 : SMS발송 / FR90008
	Param  : 
	Return : 
	========================================================================================*/	
	void Snd_FR90008(void)
	{
		char szUrl[200];
		char szbuf[200];
		char szTmp[200];
		char szMsg[200];
		char* sndbuf;
		long ret = 0;
		char CpDdd[10] , CpExn[10] , CpNum[10] ;
		
		/********************************/
		/* 이동고객센터_메인            */
		/********************************/
		Mem_Set( (byte*)CpDdd, 0x00, sizeof(CpDdd) );
		Str_Cpy(CpDdd, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA1)));

		Mem_Set( (byte*)CpExn, 0x00, sizeof(CpExn) );
		Str_Cpy(CpExn, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA2)));

		Mem_Set( (byte*)CpNum, 0x00, sizeof(CpNum) );
		Str_Cpy(CpNum, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA3)));
		 
		if( Str_Len(CpDdd) < 3
			|| Str_Len(CpExn) < 4
			|| Str_Len(CpNum) < 4 )
		{
			MessageBoxEx (CONFIRM_OK, "전화번호 형식이 맞지않습니다.");
			return;
		
		}
		else
		{
			Mem_Set( (byte*)szTmp, 0x00, sizeof(szTmp) );
			Mem_Set( (byte*)szMsg, 0x00, sizeof(szMsg) );
			
			Str_Cpy( szTmp, CpDdd );
			Str_Cat( szTmp, "-" );
			Str_Cat( szTmp, CpExn );
			Str_Cat( szTmp, "-" );
			Str_Cat( szTmp, CpNum );
			
			SPRINT(szMsg, "고객님께 SMS발송을 하시겠습니까?\n( HP : %s )", szTmp, 0, 0);	

			if( MessageBoxEx(CONFIRM_YESNO, szMsg) != MB_OK)
			{
				return;
			}
		}

		Mem_Set( (byte*)szUrl, 0x00, sizeof(szUrl) );
		g_pjcomm = g_CreateJsonHead(g_pjcomm, szUrl, 90008, FALSE);
		
		/********************************/
		/* 이동고객센터_메인            */
		/********************************/
		
	
		JSON_SetValue( g_pjcomm, 'C', "receiverNumber1", CpDdd);
		JSON_SetValue( g_pjcomm, 'C', "receiverNumber2", CpExn);
		JSON_SetValue( g_pjcomm, 'C', "receiverNumber3", CpNum);
		
		JSON_SetValue( g_pjcomm, 'C', "use_cont_num", stNoPayObj.USE_CONT_NUM );
		JSON_SetValue( g_pjcomm, 'C', "center_cd", stUserinfo.szcenter_cd );
		JSON_SetValue( g_pjcomm, 'C', "recommender_id", stUserinfo.szRecommender_id );
		// 2023-08-28 추천인코드로 보여지도록 .
		
		Mem_Set((byte*)szTmp, 0x00, sizeof(szTmp));
		SQL_ConvUcStr( szTmp, stUserinfo.sztel );
		JSON_SetValue( g_pjcomm, 'C', "center_tel", szTmp );
		
		sndbuf = JSON_toString(g_pjcomm);
		
		g_SeverConnection();
				
		Mem_Set((byte*)szbuf, 0x00, sizeof(szbuf));	
		GET_FILENM(szbuf, SQLITE_DB);
		
		callBackfunc = Rcv_FR90008;
		ret = HTTP_DownloadData(szUrl, "FR90008_IN",  "FR90008" , sndbuf, szbuf );
	}
	
	/*=======================================================================================
	함수명 : Snd_FR90007
	기  능 : FR90008 CallBack
	Param  : 
	Return : 
	========================================================================================*/	
	long Rcv_FR90008(void)
	{
		g_Sock_Close();
		CloseMessageBox();
		
		if( g_Chk_Json(90008) >= 0)
		{
			MessageBoxEx (CONFIRM_OK, "SMS발송을 완료하였습니다.");
			ON_EXIT();
			OnInit(INIT_MAIN);
			return 1;
		}
		else
		{
			ON_DRAW();
			return -1;
		}
	}
	
	void Call_Tel(long BtnId)
	{
		char szNum[15];

		Mem_Set( (byte*)szNum, 0x00, sizeof(szNum) );
		if( BtnId == BID_HPTEL )
		{
			Str_Cpy(szNum, m_szHpTel);
		}
		else if( BtnId == BID_HOUSETEL )
		{
			Str_Cpy(szNum, m_szHouseTel);
		}
		else if( BtnId == BID_PAYTEL )
		{
			Str_Cpy(szNum, m_szPayTel);
		}
		Str_Chg(szNum, STRCHG_DEL_NONDIGIT );
		
		if( Str_Len(szNum) > 3 )
		{
			Tapi_MakeCall((byte*)szNum);
		}
	}

//------------------------------------------------------------------
	long Rcv_Payinfo(void)
	{
		char sztmp[32];
		char szUrl[256];
		char szSql[256];
		char sznm_kor[64];
		char* sndbuf;
		long ret;
		long ntotcnt;

		g_SeverConnection();

		if( g_pjcomm != NULL)
		{
			JSON_Finalize( g_pjcomm );
			g_pjcomm = NULL;
		}
		g_pjcomm = g_CreateJsonHead(g_pjcomm, szUrl, 82246, FALSE);
		
		JSON_SetValue( g_pjcomm, 'C', "use_cont_num",  stNoPayObj.USE_CONT_NUM );
		JSON_SetValue( g_pjcomm, 'C', "cust_num",  stNoPayObj.CUST_NUM );
						
		sndbuf = JSON_toString(g_pjcomm);
		
		//g_Save_JsonFile(sndbuf);
		
		Mem_Set((byte*)sztmp, 0x00, sizeof(sztmp));	
		GET_FILENM(sztmp, SQLITE_DB);
		
		callBackfunc = TR82246; //통신완료 후에 호출 함수
		ret = HTTP_DownloadData(szUrl, "FR82246_IN",  "FR82246" , sndbuf, sztmp );
		return 0 ;
	}
	
//------------------------------------------------------------------
	long TR82246(void)
	{
		long ntotcnt = 0;
		char szSql[256];
		
		g_Sock_Close();
		
		if( g_Chk_Json(82246) > 0)
		{
			Payinfo_Draw(82246);
			ON_DRAW();
			return 1;
		}
		else
		{
//PRINT("FAIL!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!",0,0,0);
			CloseMessageBox();
			ON_DRAW();
			return -1;
		}
	}

//------------------------------------------------------------------
	long Payinfo_Draw(long nservicenum)
	{
	char szJsonpath[500];
	char szMsg[500];
	char szCol[128];
	char szSumUnpayAmt[30];
	long *nCol;
	long lUnpayAmt = 0;
	long lDeptUnpayAmt = 0;
	long lLawEtcAmt = 0;
	long nRet = 0;
	long fd, i;
	long chkmsg = 0;
	long chkcode = 0;
	long fsize = 0;
	char *pStr;
	char *szcode;
	char *szmessage;
	char *szitem;
	char szType[2] = {0,0};
	long ret = 11;
	handle hitem = NULL;
	handle hcnt = NULL;
		
		//MessageBox(MESSAGE, "자료 확인중 입니다.", 0, 0, 0, 0);
		
		Mem_Set((byte*) szJsonpath, 0x00, sizeof( szJsonpath) );
		SPRINT(szJsonpath, "%sFR%d_Res.JSON",  SYSTEM_COMM, nservicenum, 0 );
		
		if(FFS_Exist(szJsonpath) != TRUE )
		{
			Mem_Set((byte*) szJsonpath, 0x00, sizeof( szJsonpath) );
			SPRINT(szJsonpath, "%sFR%d.JSON",  SYSTEM_COMM, nservicenum, 0 );
		}
		
		fsize = FFS_GetSize(szJsonpath);
		if(fsize <= 15)
		{
			ret = -1;
			goto Finally;
		}
		pStr = Mem_Alloc(fsize);
		fd = FFS_Open(szJsonpath, FS_READ_MODE, FS_NORMAL_FLAG);
		if(fd == -1)
		{
			ret = -1;
			goto Finally;
		}

		FFS_Read(fd, (byte*)pStr, fsize);
		for(i = 0 ; i < fsize-9 ; i++ )
		{
			if( Mem_Cmp((byte*)pStr+i,(byte*) "\"code\"", 6) == 0  )
			{
				chkcode++;
			}
			if( Mem_Cmp((byte*)pStr+i,(byte*) "\"message\"", 9) == 0  )
			{
				chkmsg++;
			}
			if(chkmsg > 0 &&  chkcode > 0)
				break;
		}

		FFS_Close(fd);
		
		Mem_Free((byte*)pStr);
		if(chkmsg == 0 || chkcode == 0)
		{
			ret = -1;
			goto Finally;
		}
		
		if(g_pjcomm != NULL)
		{
			JSON_Finalize(g_pjcomm);
			g_pjcomm = NULL;
		}
		
		g_pjcomm = JSON_Create( JSON_Object );
		if(g_pjcomm == NULL)
		{
			ret = -1;
			goto Finally;
		}
	
		if( JSON_LoadFile(g_pjcomm, szJsonpath) > 0)
		{
			szcode    = JSON_GetValue (g_pjcomm, "code",    szType);
			szmessage = JSON_GetValue (g_pjcomm, "message", szType);

			if( Str_Cmp(szcode, "0000") != 0)
			{
			  char* pMsg = NULL;
			  
				Mem_Set((byte*) szJsonpath, 0x00, sizeof( szJsonpath) );
				if(Str_Len(szmessage) < 500 )
					SQL_ConvMbStr( szMsg, szmessage);
				
				//SPRINT(szJsonpath, "[%s] %s", szcode, szMsg, 0 );
				pMsg = g_Chk_Code(szJsonpath, szcode, szMsg);
			
				MessageBoxEx (WARNING_OK, pMsg);
				ON_DRAW();
				ret = -1;
			}
			else
			{
				ret = 0;
				szitem =JSON_GetValue(g_pjcomm, "item", szType);
				if(szitem != NULL)
				{
					if( Str_Len(szitem) > 0 )
					{
						hitem = JSON_Create( JSON_Array );
						if( hitem != NULL)
						{
							JSON_toJson(hitem, szitem ) ;
							ret = JSON_GetArrayCount( hitem );
							
							if( ret > 0 )
							{
								//BNK_BRANCH_NM
								Mem_Set((byte*) szCol, 0x00, sizeof( szCol) );
								szcode = (char*)JSON_GetArrayItem ( hitem, 0, "bnk_branch_nm", szType);
								SQL_ConvMbStr(szCol, szcode);
								EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA44),  szCol);	//은행

								//DEFRAY_ACCOUNT_NUM
								Mem_Set((byte*) szCol, 0x00, sizeof( szCol) );
								szcode = (char*)JSON_GetArrayItem ( hitem, 0, "defray_account_num", szType);
								SQL_ConvMbStr(szCol, szcode);
								EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA46),  szCol);	//계좌번호

								//DEPOSITOR_NM
								Mem_Set((byte*) szCol, 0x00, sizeof( szCol) );
								szcode = (char*)JSON_GetArrayItem ( hitem, 0, "depositor_nm", szType);
								SQL_ConvMbStr(szCol, szcode);
								EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA48),  szCol);	//예금주
							}

							JSON_Finalize(hitem);
							hitem = NULL;
						}
					}
				}
			}
		}
		else
		{
			ret = 0;
		}
		
Finally:		
		
		if(g_pjcomm != NULL)
		{
			JSON_Finalize(g_pjcomm);
			g_pjcomm = NULL;
		}
		
		g_Close_SubDlg();
		ON_DRAW();
		
		return ret;
	}


//------------------------------------------------------------------
	long Rcv_Memo(void)
	{
		char sztmp[32];
		char szUrl[256];
		char szSql[256];
		char sznm_kor[64];
		char* sndbuf;
		long ret;
		long ntotcnt;
		
		g_Sql_DirectExecute("DELETE FROM RCV_TMP");
		
		g_SeverConnection();

		if( g_pjcomm != NULL)
		{
			JSON_Finalize( g_pjcomm );
			g_pjcomm = NULL;
		}
		g_pjcomm = g_CreateJsonHead(g_pjcomm, szUrl, 82249, FALSE);

//PRINT("Rcv_Memo !!!  stNoPayObj.INST_PLACE_NUM : %s",stNoPayObj.INST_PLACE_NUM,0,0);
		JSON_SetValue( g_pjcomm, 'C', "inst_place_num",  stNoPayObj.INST_PLACE_NUM );
						
		sndbuf = JSON_toString(g_pjcomm);
		
		//g_Save_JsonFile(sndbuf);
		
		Mem_Set((byte*)sztmp, 0x00, sizeof(sztmp));	
		GET_FILENM(sztmp, SQLITE_DB);
		
		callBackfunc = TR82249; //통신완료 후에 호출 함수
		ret = HTTP_DownloadData(szUrl, "FR82249_IN",  "FR82249" , sndbuf, sztmp );
		return 0 ;
	}
	
//------------------------------------------------------------------
	long TR82249(void)
	{
		long ntotcnt = 0;
		char szSql[256];
		
		g_Sock_Close();
		
		if( g_Chk_Json(82249) >= 0)
		{
			//2017-12-08 Sanghyun Lee
			//미납액,대손금액 등 안보이는 부분 오류 수정
			RcvDraw(82257);
			RcvDraw(822571);
			
			if( m_lMemoBtnFlag == 1 )
			{
				m_lMemoBtnFlag = 0;
				ON_EXIT();
				OnInit(INIT_MEMO);
			}
			else
			{
				g_Sql_RetInt( "SELECT COUNT(*) FROM RCV_TMP", &ntotcnt );
				if( ntotcnt > 0 )
				{
					ON_EXIT();
					OnInit(INIT_MEMO);
				}
			}
			ON_DRAW();
			return 1;
		}
		else
		{
			CloseMessageBox();
			ON_DRAW();
			return -1;
		}
	}

	
//------------------------------------------------------------------
	void Memo_Draw(void)
	{
	long i, idx;
	long k = ROW_M + 1;
	char sztmp[500];
	char szMem[200];
	long ret = -1;	
	long lstartidx;
	handle hdb = NULL;
	handle hstmt = NULL;
	SQLITE sql = NewSqLite();

		//계약번호, 중지대상, 주소 표시 필요
		m_ltotcnt = FS_GetSrchTotCnt();

		SPRINT(m_szCnt_index, "%d/%d", g_nActIndex+1, m_ltotcnt, 0);
	
		//계약번호 00000-00000
		Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
		Mem_Set( (byte*)szMem, 0x00, sizeof(szMem) );
		Mem_Cpy((byte *)sztmp, (byte *)stNoPayObj.USE_CONT_NUM, 5);
		Str_Cat(sztmp, "-");
		Mem_Cpy((byte *)szMem, (byte *)stNoPayObj.USE_CONT_NUM+5, 5);
		Str_Cat(sztmp, szMem);
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA49),  sztmp);

		//중단대상
		if( Str_Cmp(stNoPayObj.STOP_FLAG, "Y") == 0 )
		{
			ButCtrl_SetText(Get_hDlgCtrlByID(BID_STOPCANCEL_M), "중단대상");
			ButCtrl_SetBkColorEx(Get_hDlgCtrlByID(BID_STOPCANCEL_M), RED);
		}
		else
		{
			ButCtrl_SetText(Get_hDlgCtrlByID(BID_STOPCANCEL_M), "");
			ButCtrl_SetBkColorEx(Get_hDlgCtrlByID(BID_STOPCANCEL_M), BTNCTRLBKCOLOR);
		}
		
		//주소
		if( g_nAddrFlag == 0 )
		{
			ButCtrl_SetText(Get_hDlgCtrlByID(BID_ADDR_M), "지번\n주소");
		
			Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
			Str_Cpy(sztmp, stNoPayObj.TOWN);
			Str_Cat(sztmp, " ");
			Str_Cat(sztmp, stNoPayObj.VILLAGE);
			Str_Cat(sztmp, " ");
			Str_Cat(sztmp, stNoPayObj.ADDR1_M);
			Str_Cat(sztmp, "-");
			Str_Cat(sztmp, stNoPayObj.ADDR1_S);
		}
		else
		{
			ButCtrl_SetText(Get_hDlgCtrlByID(BID_ADDR_M), "도로명\n주소");
		
			Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
			Str_Cpy(sztmp, stNoPayObj.NEW_ROAD_NM);
			Str_Cat(sztmp, " ");
			Str_Cat(sztmp, stNoPayObj.NEW_ADDR_M);
			Str_Cat(sztmp, "-");
			Str_Cat(sztmp, stNoPayObj.NEW_ADDR_S);
		}
		
		if( ( Str_Len(stNoPayObj.CO_LIVE_NM) + Str_Len(stNoPayObj.BLD_NM) ) > 0 )
		{
			Str_Cat(sztmp, " ");
			Str_Cat(sztmp, stNoPayObj.CO_LIVE_NM);
			Str_Cat(sztmp, " ");
			Str_Cat(sztmp, stNoPayObj.BLD_NM);
			Str_Cat(sztmp, "-");
			Str_Cat(sztmp, stNoPayObj.HOSU);
			Str_Cat(sztmp, " ");
			Str_Cat(sztmp, stNoPayObj.DETAIL_FLOOR);
		}
		else
		{
			Str_Cat(sztmp, " ");
			Str_Cat(sztmp, stNoPayObj.HOSU);
			Str_Cat(sztmp, " ");
			Str_Cat(sztmp, stNoPayObj.DETAIL_FLOOR);
		}
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA50),  sztmp);
		
		g_Sql_RetInt( "SELECT COUNT(*) FROM RCV_TMP", &m_lTotpage_M );
		
		if( m_lTotpage_M % ROW_M > 0 )
		{
			m_lTotpage_M = (m_lTotpage_M / ROW_M) + 1;
		}
		else
		{
			m_lTotpage_M = m_lTotpage_M / ROW_M;
		}
		//페이지
		SPRINT(m_szCnt_page_M, "%d/%d", m_lpage_M+1, m_lTotpage_M, 0);
		
		hdb = sql->Open(sql);
		if( hdb == NULL )
		{
			goto Finally;
		}
		
		hstmt = sql->CreateStatement(sql, "SELECT PARAM8, PARAM10, PARAM12 FROM RCV_TMP ORDER BY PARAM8 LIMIT ?, ? " );
				
		if( hstmt == NULL )
		{
			PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}
		
		idx = 0;
		lstartidx = m_lpage_M*ROW_M;
		sql->Bind(sql, idx++, 'X', &lstartidx, 4, DECRYPT);
		i = m_lpage_M*ROW_M+ROW_M;
		sql->Bind(sql, idx++, 'X', &i, 4, DECRYPT);
		
		if(sql->Execute(sql) == FALSE)
		{
			PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}

		// 등록된 코드 리스트를 페이지에 맞게 보여준다.
		for (i=0 ; i<ROW_M ; i++)
		{
			//자료가 없을때 화면을 클리어 시킨다.
			if( k == i )
			{
				k++;
				DlgTbl_SetStr ( ID_MEMOLIST, i, 0, "" );
				DlgTbl_SetStr ( ID_MEMOLIST, i, 1, "" );
				DlgTbl_SetStr ( ID_MEMOLIST, i, 2, "" );
			}
			else
			{
				if(sql->Next(sql) == FALSE)
				{
					k = i + 1;
					DlgTbl_SetStr ( ID_MEMOLIST, i, 0, "" );
					DlgTbl_SetStr ( ID_MEMOLIST, i, 1, "" );
					DlgTbl_SetStr ( ID_MEMOLIST, i, 2, "" );
					continue;
				}
				idx = 0;
				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				sql->GetValue(sql, idx++, 'U', (long*)sztmp, 30, DECRYPT);
				DlgTbl_SetStr ( ID_MEMOLIST, i, 0, sztmp );

				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				sql->GetValue(sql, idx++, 'U', (long*)sztmp, 30, DECRYPT);
				DlgTbl_SetStr ( ID_MEMOLIST, i, 1, sztmp );

				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				sql->GetValue(sql, idx++, 'U', (long*)sztmp, 480, DECRYPT);
				DlgTbl_SetStr ( ID_MEMOLIST, i, 2, sztmp );
			}
		}		
Finally:
		//sql->Commit(sql);
		DelSqLite(sql);

		if(m_lTotpage_M > 0)
		{
			if( m_lMemoAct < 0 )
			{
				m_lMemoAct = 0;
			}
		
			DlgTbl_SetActive(ID_MEMOLIST , m_lMemoAct+1 );
			DlgTbl_SetRowColor(ID_MEMOLIST, m_lMemoAct+1, TABLEACTIVE_COLOR);

			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA42), DlgTbl_GetStr( ID_MEMOLIST, m_lMemoAct, 2) );
		}

		ON_DRAW();
		return;
	}

//------------------------------------------------------------------	
	long Rcv_Unpay(void)
	{
		char sztmp[32];
		char szUrl[256];
		char szSql[256];
		char sznm_kor[64];
		char* sndbuf;
		long ret;
		long ntotcnt;
		
		g_SeverConnection();

		if( g_pjcomm != NULL)
		{
			JSON_Finalize( g_pjcomm );
			g_pjcomm = NULL;
		}
		g_pjcomm = g_CreateJsonHead(g_pjcomm, szUrl, 82257, FALSE);

		JSON_SetValue( g_pjcomm, 'C', "use_cont_num",  stNoPayObj.USE_CONT_NUM );
						
		sndbuf = JSON_toString(g_pjcomm);
		
		Mem_Set((byte*)sztmp, 0x00, sizeof(sztmp));	
		GET_FILENM(sztmp, SQLITE_DB);
		
		callBackfunc = TR82257; //통신완료 후에 호출 함수
		ret = HTTP_DownloadData(szUrl, "FR82257_IN",  "FR82257" , sndbuf, sztmp );
		return 0 ;
	}
	
//---------------------------------------------------------------------------------------------
	long TR82257(void)
	{
		long ntotcnt = 0;
		char szMsg[128];
		
		if(g_Chk_Json(82257) >= 0)
		{
			//RcvDraw(82257);

/*			//안읽은 메모데이터 존재 할 경우 메모 화면 출력.
			//stNoPayObj.READ_MEMO_YN = 0 안읽은 메모 존재 , stNoPayObj.READ_MEMO_YN = 1 메모 다 읽음.
			//if( g_lNpMemoChkFlag == 0 )
//PRINT("stNoPayObj.READ_MEMO_YN : %s , g_lNpMemoChkFlag : %d",stNoPayObj.READ_MEMO_YN,g_lNpMemoChkFlag,0);
			if( (Str_Cmp(stNoPayObj.READ_MEMO_YN, "Y") != 0 ) && g_lNpMemoChkFlag == 0 )
			{
				g_lNpMemoChkFlag = 1;
				Rcv_Memo();
			}
*/
			Rcv_MtrSupplySts();
			return 1;
		}
		else
		{
			g_Sock_Close();
			CloseMessageBox();
			ON_DRAW();
			return -1;
		}
	}

//------------------------------------------------------------------
	long Rcv_MtrSupplySts(void)
	{
		char sztmp[32];
		char szUrl[256];
		char szSql[256];
		char sznm_kor[64];
		char* sndbuf;
		long ret;
		long ntotcnt;
		
		g_SeverConnection();

		if( g_pjcomm != NULL)
		{
			JSON_Finalize( g_pjcomm );
			g_pjcomm = NULL;
		}
		g_pjcomm = g_CreateJsonHead(g_pjcomm, szUrl, 822571, FALSE);
		
PRINT("Rcv_MtrSupplySts >> stNoPayObj.USE_CONT_NUM : %s , g_szUSE_CONT_NUM : %s",stNoPayObj.USE_CONT_NUM,g_szUSE_CONT_NUM,0);
		JSON_SetValue( g_pjcomm, 'C', "use_cont_num",  stNoPayObj.USE_CONT_NUM );
						
		sndbuf = JSON_toString(g_pjcomm);

		Mem_Set((byte*)sztmp, 0x00, sizeof(sztmp));	
		GET_FILENM(sztmp, SQLITE_DB);
		
		callBackfunc = TR822571; //통신완료 후에 호출 함수
		ret = HTTP_DownloadData(szUrl, "FR822571_IN",  "FR822571" , sndbuf, sztmp );
		return 0 ;
	}


//------------------------------------------------------------------
	long TR822571(void)
	{
		long ntotcnt = 0;
		char szMsg[128];
		
		if(g_Chk_Json(822571) >= 0)
		{
			//RcvDraw(822571);

			//안읽은 메모데이터 존재 할 경우 메모 화면 출력.
			//stNoPayObj.READ_MEMO_YN = 0 안읽은 메모 존재 , stNoPayObj.READ_MEMO_YN = 1 메모 다 읽음.
			//if( g_lNpMemoChkFlag == 0 )
PRINT("stNoPayObj.READ_MEMO_YN : %s , g_lNpMemoChkFlag : %d",stNoPayObj.READ_MEMO_YN,g_lNpMemoChkFlag,0);
			if( (Str_Cmp(stNoPayObj.READ_MEMO_YN, "Y") != 0 ) && g_lNpMemoChkFlag == 0 )
			{
				g_lNpMemoChkFlag = 1;
				Rcv_Memo();
				return 1;
			}
			else
			{
				g_Sock_Close();
				RcvDraw(82257);
				RcvDraw(822571);
			}
			ON_DRAW();
			return 1;
		}
		else
		{
			g_Sock_Close();
			CloseMessageBox();
			ON_DRAW();
			return -1;
		}
	}


//------------------------------------------------------------------
	long RcvDraw(long nservicenum)
	{
	char szJsonpath[500];
	char szMsg[500];
	char szCol[128];
	char szSumUnpayAmt[30];
	long *nCol;
	long lUnpayAmt = 0;
	long lDeptUnpayAmt = 0;
	long lLawEtcAmt = 0;
	long nRet = 0;
	long fd, i;
	long chkmsg = 0;
	long chkcode = 0;
	long fsize = 0;
	char *pStr;
	char *szcode;
	char *szmessage;
	char *szitem;
	char szType[2] = {0,0};
	long ret = 11;
	handle hitem = NULL;
	handle hcnt = NULL;
		
		//MessageBox(MESSAGE, "자료 확인중 입니다.", 0, 0, 0, 0);
		
		Mem_Set((byte*) szJsonpath, 0x00, sizeof( szJsonpath) );
		SPRINT(szJsonpath, "%sFR%d_Res.JSON",  SYSTEM_COMM, nservicenum, 0 );
		
		if(FFS_Exist(szJsonpath) != TRUE )
		{
			Mem_Set((byte*) szJsonpath, 0x00, sizeof( szJsonpath) );
			SPRINT(szJsonpath, "%sFR%d.JSON",  SYSTEM_COMM, nservicenum, 0 );
		}
		
		fsize = FFS_GetSize(szJsonpath);
		if(fsize <= 15)
		{
			ret = -1;
			goto Finally;
		}
		pStr = Mem_Alloc(fsize);
		fd = FFS_Open(szJsonpath, FS_READ_MODE, FS_NORMAL_FLAG);
		if(fd == -1)
		{
			ret = -1;
			goto Finally;
		}

		FFS_Read(fd, (byte*)pStr, fsize);
		for(i = 0 ; i < fsize-9 ; i++ )
		{
			if( Mem_Cmp((byte*)pStr+i,(byte*) "\"code\"", 6) == 0  )
			{
				chkcode++;
			}
			if( Mem_Cmp((byte*)pStr+i,(byte*) "\"message\"", 9) == 0  )
			{
				chkmsg++;
			}
			if(chkmsg > 0 &&  chkcode > 0)
				break;
		}

		FFS_Close(fd);
		
		Mem_Free((byte*)pStr);
		if(chkmsg == 0 || chkcode == 0)
		{
			ret = -1;
			goto Finally;
		}
		
		if(g_pjcomm != NULL)
		{
			JSON_Finalize(g_pjcomm);
			g_pjcomm = NULL;
		}
		
		g_pjcomm = JSON_Create( JSON_Object );
		if(g_pjcomm == NULL)
		{
			ret = -1;
			goto Finally;
		}
	
		if( JSON_LoadFile(g_pjcomm, szJsonpath) > 0)
		{
			szcode    = JSON_GetValue (g_pjcomm, "code",    szType);
			szmessage = JSON_GetValue (g_pjcomm, "message", szType);

			if( Str_Cmp(szcode, "0000") != 0)
			{
			  char* pMsg = NULL;
			  
				Mem_Set((byte*) szJsonpath, 0x00, sizeof( szJsonpath) );
				if(Str_Len(szmessage) < 500 )
					SQL_ConvMbStr( szMsg, szmessage);
				
				//SPRINT(szJsonpath, "[%s] %s", szcode, szMsg, 0 );
				pMsg = g_Chk_Code(szJsonpath, szcode, szMsg);
			
				MessageBoxEx (WARNING_OK, pMsg);
				ON_DRAW();
				ret = -1;
			}
			else
			{
				ret = 0;
				szitem =JSON_GetValue(g_pjcomm, "item", szType);

				if(szitem != NULL)
				{
					if( Str_Len(szitem) > 0 )
					{
						hitem = JSON_Create( JSON_Array );
						if( hitem != NULL)
						{
							JSON_toJson(hitem, szitem ) ;
							ret = JSON_GetArrayCount( hitem );
							
							if( ret > 0 )
							{
								if( nservicenum == 82257 )
								{
									//UNPAY_AMT
									Mem_Set((byte*) szCol, 0x00, sizeof( szCol) );
									Mem_Set((byte*) stNoPayObj.UNPAY_AMT, 0x00, sizeof( stNoPayObj.UNPAY_AMT) );
									nCol = (long*)JSON_GetArrayItem ( hitem, 0, "unpay_amt", szType);
									nRet = *nCol;
									Str_ItoA( nRet, szCol, 10);
									
									if( Str_Cmp(szCol, "0") == 0 || Str_Len(szCol) == 0 )
									{
										Str_Cpy(szCol, "0");
										Str_Cpy(stNoPayObj.UNPAY_AMT, szCol);
										Str_Chg(szCol, STRCHG_INS_COMMA);
										EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA32),  szCol);	//미납요금
									}
									else
									{
										Str_Cpy(stNoPayObj.UNPAY_AMT, szCol);
										Str_Chg(szCol, STRCHG_INS_COMMA);
										EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA32),  szCol);	//미납요금
									}
									
									lUnpayAmt = Str_AtoI(stNoPayObj.UNPAY_AMT);
									lDeptUnpayAmt = Str_AtoI(stNoPayObj.DEBT_UNPAY_AMT );
									lLawEtcAmt = Str_AtoI(stNoPayObj.LAW_ETC_AMT);
									
									Mem_Set((byte*) szSumUnpayAmt, 0x00, sizeof( szSumUnpayAmt) );
									lUnpayAmt = nRet + lDeptUnpayAmt + lLawEtcAmt;
									Str_ItoA(lUnpayAmt, szSumUnpayAmt, 10);
									
									if( Str_Cmp(szSumUnpayAmt, "0") == 0 || Str_Len(szSumUnpayAmt) == 0 )
									{
										Str_Cpy(szSumUnpayAmt, "0");
										Str_Chg(szSumUnpayAmt, STRCHG_INS_COMMA);
										EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA34),  szSumUnpayAmt);	//총미납액
									}
									else
									{
										Str_Chg(szSumUnpayAmt, STRCHG_INS_COMMA);
										EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA34),  szSumUnpayAmt);	//총미납액
									}
	
									//UNPAY_MONTH
									Mem_Set((byte*) szCol, 0x00, sizeof( szCol) );
									Mem_Set((byte*) stNoPayObj.UNPAY_MONTH, 0x00, sizeof( stNoPayObj.UNPAY_MONTH) );
									nCol = (long*)JSON_GetArrayItem ( hitem, 0, "unpay_month", szType);
									nRet = *nCol;
									Str_ItoA(nRet, szCol, 10);
									
									if( Str_Cmp(szCol, "0") == 0 || Str_Len(szCol) == 0 )
									{
										Str_Cpy(szCol, "0");
										Str_Cpy(stNoPayObj.UNPAY_MONTH, szCol);
										EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA36),  stNoPayObj.UNPAY_MONTH);	//개월
									}
									else
									{
										Str_Cpy(stNoPayObj.UNPAY_MONTH, szCol);
										EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA36),  stNoPayObj.UNPAY_MONTH);	//개월
									}
								}
								else
								{
									Mem_Set((byte*) szCol, 0x00, sizeof( szCol) );
									szcode = (char*)JSON_GetArrayItem ( hitem, 0, "mtr_supply_sts", szType);
									SQL_ConvMbStr(szCol, szcode);
									EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA25),  szCol);
										
									Mem_Set((byte*) stNoPayObj.CONT_STS_CD, 0x00, sizeof( stNoPayObj.CONT_STS_CD) );
									
									if( Str_Cmp(szCol, "정상") == 0 )
									{
										Str_Cpy(stNoPayObj.CONT_STS_CD, "10");
									}
									else if( Str_Cmp(szCol, "중지") == 0 )
									{
										EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(TXT_DATA25), RED);
										Str_Cpy(stNoPayObj.CONT_STS_CD, "20");
									}
									else if( Str_Cmp(szCol, "해지") == 0 )
									{
										Str_Cpy(stNoPayObj.CONT_STS_CD, "30");
									}
									else
									{
										Str_Cpy(stNoPayObj.CONT_STS_CD, "");
									}
									
									// 20200623 납부유예 추가, 체납팀 장호준 차장님
									Mem_Set((byte*) szCol, 0x00, sizeof( szCol) );
									Mem_Set((byte*) stNoPayObj.PAY_DELAY_YN, 0x00, sizeof( stNoPayObj.PAY_DELAY_YN) );
									szcode = (char*)JSON_GetArrayItem ( hitem, 0, "pay_delay_yn", szType);
									SQL_ConvMbStr(szCol, szcode);
									Str_Cpy(stNoPayObj.PAY_DELAY_YN, szCol);
									
									EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA6),  szCol);
									
									if( Str_Cmp(szCol, "Y") == 0 )
									{
										EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(TXT_DATA5), RED);
										EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(TXT_DATA6), RED);
									}
									else
									{
										EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(TXT_DATA5), TXTTTLFRCOLOR);	
										EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(TXT_DATA6), TXTFRCOLOR);
									}
								}
							}

							JSON_Finalize(hitem);
							hitem = NULL;
						}
					}
					else
					{
				PRINT("not item >> mtr_supply_sts : %s",szCol,0,0);
						Str_Cpy(stNoPayObj.UNPAY_AMT, "0");
						Str_Chg(stNoPayObj.UNPAY_AMT, STRCHG_INS_COMMA);
						EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA32),  stNoPayObj.UNPAY_AMT);	//미납요금
	
						Str_Cpy(szSumUnpayAmt, "0");
						Str_Chg(szSumUnpayAmt, STRCHG_INS_COMMA);
						EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA34),  szSumUnpayAmt);	//총미납액
	
						Str_Cpy(stNoPayObj.UNPAY_MONTH, "0");
						EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA36),  stNoPayObj.UNPAY_MONTH);	//개월
					}
				}
				else
				{
				PRINT("error >> mtr_supply_sts : %s",szCol,0,0);
					Str_Cpy(stNoPayObj.UNPAY_AMT, "0");
					Str_Chg(stNoPayObj.UNPAY_AMT, STRCHG_INS_COMMA);
					EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA32),  stNoPayObj.UNPAY_AMT);	//미납요금

					Str_Cpy(szSumUnpayAmt, "0");
					Str_Chg(szSumUnpayAmt, STRCHG_INS_COMMA);
					EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA34),  szSumUnpayAmt);	//총미납액

					Str_Cpy(stNoPayObj.UNPAY_MONTH, "0");
					EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA36),  stNoPayObj.UNPAY_MONTH);	//개월
				}
			}
		}
		else
		{
			ret = 0;
		}
		
Finally:		
		
		if(g_pjcomm != NULL)
		{
			JSON_Finalize(g_pjcomm);
			g_pjcomm = NULL;
		}
		
		g_Close_SubDlg();
		ON_DRAW();
		
		return ret;
	}
}


