/*----------------------------------------------------------------------------------
	Project Name:
	Smart Application : 카드 기본폼
	Smart Version : Smart 1.0
	Copyright(c) 2014  ValueCMD Co., Ltd.
----------------------------------------------------------------------------------*/

card SC_RFRMPRGRS
{
	#include <include.h>
	#include "globalcard.h"
	#include "SQL.lib"
	#include "Calendar.h"

//	#define USE_ON_EXIT
	#define USE_ON_CHAR
//	#define USE_ON_KEY
//	#define USE_ON_DRAW
//	#define USE_ON_TIMER
	#define USE_ON_POINTING
	#define USE_ON_SELECT

	#include "DefEvent.h"
	
	//BUTTON ID define
	BEGIN_BUTTON_ID()
		DEF_BUTTON_ID ( BID_ADDR )		//지번
		DEF_BUTTON_ID ( BID_CHANGE )	//수정
		DEF_BUTTON_ID ( BID_NOFIT )		//부적합상세
		DEF_BUTTON_ID ( BID_ISSUE )		//발행
		DEF_BUTTON_ID ( BID_VISIT )		//방문등록
		DEF_BUTTON_ID ( BID_OK )		//확인
//주소확인		
		DEF_BUTTON_ID ( BID_OK3 )		//확인
		DEF_BUTTON_ID ( BID_BOX8 )		//
		DEF_BUTTON_ID ( BID_BOX9 )		//
		DEF_BUTTON_ID ( BID_BOX10 )		//
		DEF_BUTTON_ID ( BID_BOX11 )		//
		DEF_BUTTON_ID ( BID_BOX12 )		//
		DEF_BUTTON_ID ( BID_BOX13 )		//
		
		DEF_BUTTON_ID ( BID_PREVLST)
		DEF_BUTTON_ID ( BID_NEXTLST)
//개선권고발행
		DEF_BUTTON_ID ( BID_STOP )
		DEF_BUTTON_ID ( BID_CANCEL )
		DEF_BUTTON_ID ( BID_ISSUE2 )
		DEF_BUTTON_ID ( BID_REFSCHDL )	//개선권고일자
		DEF_BUTTON_ID ( BID_REFSCHDL2 )	//개선권고기한
//방문등록
		DEF_BUTTON_ID ( BID_VSTSCHDL)
		DEF_BUTTON_ID ( BID_ENTRY)
		DEF_BUTTON_ID ( BID_PREVPG)
		DEF_BUTTON_ID ( BID_NEXTPG)
		DEF_BUTTON_ID ( BID_CANCEL2)
//화면 상단 공통 메뉴 모음
		DEF_BUTTON_ID ( BID_HOME )		//홈
		DEF_BUTTON_ID ( BID_MENU )		//메뉴
		DEF_BUTTON_ID ( BID_KEYBOARD )	//키보드
		DEF_BUTTON_ID ( BID_SCREEN )	//화면 상하
		DEF_BUTTON_ID ( BID_CMMNWORK )	//공통업무
		DEF_BUTTON_ID ( BID_PREV )		//이전
		DEF_BUTTON_ID ( BID_EXIT )		//종료
	END_BUTTON_ID()
	
	BEGIN_OBJECT_ID()
		DEF_OBJECT_ID ( TXT_TITLE )			//타이틀
		DEF_OBJECT_ID ( TXT_PAGE )
		DEF_OBJECT_ID ( TXT_SCDT )			//점검년월
		DEF_OBJECT_ID ( TXT_NUMBER )		//차수
		DEF_OBJECT_ID ( TXT_CLIENT )		//고객/사업자
		DEF_OBJECT_ID ( TXT_HPNUM )			//전화번호
		DEF_OBJECT_ID ( TXT_REFORMTERM )	//개선권고기한
		DEF_OBJECT_ID ( TXT_CMPLTDT )		//완료일자
		DEF_OBJECT_ID ( TXT_NAME )			//입력자명
		DEF_OBJECT_ID ( TXT_DATA1 )
		DEF_OBJECT_ID ( TXT_DATA2 )
		DEF_OBJECT_ID ( TXT_DATA3 )
		DEF_OBJECT_ID ( TXT_DATA4 )
		DEF_OBJECT_ID ( TXT_DATA5 )
		DEF_OBJECT_ID ( TXT_DATA6 )
		DEF_OBJECT_ID ( TXT_DATA7 )
		DEF_OBJECT_ID ( TXT_DATA8 )
		DEF_OBJECT_ID ( TXT_DATA9 )
		DEF_OBJECT_ID ( TXT_DATA10 )
		DEF_OBJECT_ID ( TXT_DATA11 )
//개선권고발행
		DEF_OBJECT_ID ( TXT_DATA12 )
		DEF_OBJECT_ID ( TXT_DATA13 )
		DEF_OBJECT_ID ( TXT_DATA14 )
		DEF_OBJECT_ID ( TXT_DATA15 )
		DEF_OBJECT_ID ( TXT_DATA16 )
		DEF_OBJECT_ID ( TXT_DATA17 )
		DEF_OBJECT_ID ( TXT_DATA18 )
		DEF_OBJECT_ID ( TXT_DATA84 )
		DEF_OBJECT_ID ( TXT_DATA85 )
		DEF_OBJECT_ID ( TXT_DATA86 )
		DEF_OBJECT_ID ( TXT_DATA87 )
//방문등록
		DEF_OBJECT_ID ( TXT_DATA19 )
		DEF_OBJECT_ID ( TXT_DATA20 )
		DEF_OBJECT_ID ( TXT_DATA21 )
		DEF_OBJECT_ID ( TXT_DATA22 )
		DEF_OBJECT_ID ( TXT_DATA23 )
		DEF_OBJECT_ID ( TXT_DATA88 )
		DEF_OBJECT_ID ( TXT_DATA89 )
		DEF_OBJECT_ID ( TXT_DATA90 )
		DEF_OBJECT_ID ( TXT_DATA91 )
//주소확인
		DEF_OBJECT_ID ( EDT_DATA22 )
		DEF_OBJECT_ID ( EDT_DATA23 )
		DEF_OBJECT_ID ( EDT_DATA24 )
		DEF_OBJECT_ID ( EDT_DATA25 )
		
		DEF_OBJECT_ID ( TXT_DATA68 )
		DEF_OBJECT_ID ( TXT_DATA69 )
		DEF_OBJECT_ID ( TXT_DATA70 )		
		DEF_OBJECT_ID ( TXT_DATA71 )
		DEF_OBJECT_ID ( TXT_DATA72 )
		DEF_OBJECT_ID ( TXT_DATA73 )
		DEF_OBJECT_ID ( TXT_DATA74 )
		DEF_OBJECT_ID ( TXT_DATA75 )
		DEF_OBJECT_ID ( TXT_DATA76 )
		DEF_OBJECT_ID ( TXT_DATA77 )
		DEF_OBJECT_ID ( TXT_DATA78 )
		DEF_OBJECT_ID ( TXT_DATA79 )
		DEF_OBJECT_ID ( TXT_DATA80 )
		DEF_OBJECT_ID ( TXT_DATA81 )
		DEF_OBJECT_ID ( TXT_DATA82 )
		DEF_OBJECT_ID ( TXT_DATA83 )
		
		DEF_OBJECT_ID ( EDT_DATA1 )
		DEF_OBJECT_ID ( EDT_DATA2 )
		DEF_OBJECT_ID ( EDT_DATA3 )
		DEF_OBJECT_ID ( EDT_DATA4 )
		DEF_OBJECT_ID ( EDT_DATA5 )
		DEF_OBJECT_ID ( EDT_DATA6 )
				
		DEF_OBJECT_ID ( ID_TBLLIST )
//방문등록
		DEF_OBJECT_ID ( ID_TBLVISIT )
		
		DEF_OBJECT_ID ( ICON_TITLE )		//타이틀
		
//개선권고발행
		DEF_OBJECT_ID ( CMB_DATA1 )
	END_OBJECT_ID()
	
	//-------------------------------------------------------------------------------------------------	
	//	메인_Table정의에 관련된 내용들
	//-------------------------------------------------------------------------------------------------
	#define		ROW 	    4					// table의 행개수
	#define		COL 	    6					// table의 열개수
	#define		GRID_H		(CHT+9)				// table 행 높이
	#define		GRID_CLR	TRANSPARENT   		// table 클리어 color
	#define		GRID_X		STARTX 			    // table 시작x좌표
	#define		MAXCHAR		201 			    // table에 들어갈수 있는 최대  char 길이
	#define		GRID_Y		STARTY+330  	    // table 시작y좌표
	#define		GRID_Y_P	STARTY+250  	    // table 시작y좌표
	#define		GRID_ENDY	(GRID_Y+(ROW+1)*GRID_H) //table마지막 row의 Y값
	
	char	m_szTableBuf [COL*(ROW+1)*MAXCHAR]; // 각 CELL에 들어가 텍스트 내용을 담은 버퍼
		
	Column m_stGridTitle[] = {
		{"차수",        CWD*6 , 	EDITALIGN_CENTER|EDITALIGN_MIDDLE,   TABLE_TEXT, 0},
		{"발급일자",    CWD*12+10,	EDITALIGN_CENTER|EDITALIGN_MIDDLE,   TABLE_TEXT, 0},
		{"개선권고기한",CWD*13+13,	EDITALIGN_CENTER|EDITALIGN_MIDDLE,   TABLE_TEXT, 0},
		{"여부",        CWD*8 ,		EDITALIGN_CENTER|EDITALIGN_MIDDLE,   TABLE_TEXT, 0},
		{"완료일자",    CWD*0 ,		EDITALIGN_CENTER|EDITALIGN_MIDDLE,   TABLE_TEXT, 0},
		{"입력자명",    CWD*0 ,		EDITALIGN_CENTER|EDITALIGN_MIDDLE,   TABLE_TEXT, 0}
	};
	
	//-------------------------------------------------------------------------------------------------	
	//	방문등록_Table정의에 관련된 내용들
	//-------------------------------------------------------------------------------------------------
	#define		ROW_V 	    	5								// table의 행개수
	#define		COL_V 	    	3								// table의 열개수
	#define		GRID_H_V		(CHT+20)						// table 행 높이
	#define		GRID_H_V_P		(CHT+30)						// table 행 높이
	#define		GRID_CLR_V		TRANSPARENT   					// table 클리어 color
	#define		GRID_X_V		STARTX		    			    // table 시작x좌표
	#define		MAXCHAR_V		30 			 		  	 		// table에 들어갈수 있는 최대  char 길이
	#define		GRID_Y_V		STARTY-29  	    				// table 시작y좌표
	#define		GRID_Y_V_P		STARTY-40  	    				// table 시작y좌표
	#define		GRID_ENDY_V		(GRID_Y_V+(ROW_V+1)*GRID_H_V)	//table마지막 row의 Y값
	
	char	m_szTableBuf_V [COL_V*(ROW_V+1)*MAXCHAR_V]; // 각 CELL에 들어가 텍스트 내용을 담은 버퍼
		
	Column m_stGridTitle_V[] = {
		{"차수",        CWD*8 , EDITALIGN_CENTER|EDITALIGN_MIDDLE,   TABLE_TEXT, 0},
		{"방문일자",    CWD*18, EDITALIGN_CENTER|EDITALIGN_MIDDLE,   TABLE_TEXT, 0},
		{"방문자",		CWD*13+23, EDITALIGN_CENTER|EDITALIGN_MIDDLE,   TABLE_TEXT, 0}
	};
	
	#define INIT_MAIN	   1
	#define INIT_RFRMISSU  2
	#define INIT_RFRMVISIT 3
	#define INIT_SCADDR    4
	
	
	//개선권고 발행 데이터 임시 저장 스트럭쳐
	typedef struct _NOGOODCHA
	{
		char BETTER_ADVICE_YMD   	[8 +1];		//개선권고일자
		char BETTER_ADVICE_EXPIRE	[8 +1];		//개선권고기한
		char SUPPLY_STOP_YMD     	[8 +1];		//공급중지
		char NOT_PERMIT_WHY      	[2 +1];		//중지불가사유
	}	NOGOODCHA;
	
	NOGOODCHA m_stNogoodCha;
	
	long m_lActiveIndex = -1;
	long m_lAddrFlag1 = 0;
	long m_lAddrFlag2 = 0;
	long m_IssueFlag = 0;		//m_IssueFlag = 0 default, m_IssueFlag = 1 개선권고발행
	long m_lSelIndex = -1;
	long m_lSelIndexV = -1;
	long m_lpage = 0;
	long m_lpageV = 0;
	long m_lTotpage;
	long m_lTotpageV;
	long m_bFirst;
	char m_szSms_Desc[800];
	char m_szReceiver_Tel[50];
	char m_szCnt_page[10];
	char m_szCnt_page_V[10];
	char m_szVisitDegree[5];
	char m_szVisitYmd[10];
	
	void SetStyle(void);
	void SetBtnImg(void);
	void SetActRow(void);
	void REDRAW(void);
	void TBL_DRAW(void);
	void ISSUE_DRAW(void);
	void VISIT_DRAW(void);
	void Set_Nogood(void);
	void SetDataNogoodCha(void);			//개선권고 최대 차수의 데이터 셋
	void Save_Result(void);
	bool Save_Issue(void);
	bool Save_Visit(void);
	long SearchStr(char *Str, CodeTable *CT);	//코드 값을 찾는다.
	long SearchCD(char *CD, CodeTable *CT);	//코드 값을 찾는다.
	void ADDR_DRAW(void);
	long SetAddr(void);
	bool Save_Addr(void);
	bool Visit_Chk(void);
	
	//개선권고 발생 시 문자발송 및 이력 송신
	long Analy_Phone(char*phone, char* num1, char* num2, char* num3 );
	long Snd_Sms(void);
	long Snd_Sms_Hist(void);
	long TR312400(void);
	
	SysButCtrl SysButRes_MAIN[] =
	 {
		  SYS_BUT_IMG (  BTNX_1, BTNY_1, BTNWD_1, BTNHT_1, 0, 0, BUTSTY_BOLD , 0, 0, 0, OBJ_BUT, GID_HOME,  0),
		  SYS_BUT_IMG (  BTNX_2, BTNY_1, BTNWD_1, BTNHT_1, 0, 0, BUTSTY_BOLD , 0, 0, 0, OBJ_BUT, GID_KEYBOARD,  0),
		  SYS_BUT_IMG (  BTNX_3, BTNY_1, BTNWD_1, BTNHT_1, 0, 0, BUTSTY_BOLD , 0, 0, 0, OBJ_BUT, GID_SCREEN, 0),
		  SYS_BUT_IMG (  BTNX_4, BTNY_1, BTNWD_1, BTNHT_1, 0, 0, BUTSTY_BOLD , 0, 0, 0, OBJ_BUT, GID_CMMNWK,  0),
		  SYS_BUT_IMG (  BTNX_5, BTNY_1, BTNWD_1, BTNHT_1, 0, 0, BUTSTY_BOLD , 0, 0, 0, OBJ_BUT, GID_VMEXIT, 0),
		  SYS_BUT_IMG (  BTNX_6, BTNY_2, BTNWD_2, BTNHT_2, 0, 0, BUTSTY_BOLD|BUTSTY_BORDER , 0, TRANSPARENT, TRANSPARENT, OBJ_BUT, GID_MENU, 0),
		  SYS_BUT_IMG (  BTNX_7, BTNY_2, BTNWD_2, BTNHT_2, 0, 0, BUTSTY_BOLD|BUTSTY_BORDER , 0, TRANSPARENT, TRANSPARENT, OBJ_BUT, GID_PREV, 0),
	 };
	
	// 메인 다이얼로그
	//---------------------------------------------------------------
	DlgObject	DlgRes[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_ICON(0, BTNY_2, ICON_TITLE, ""),
		//타이틀
		DLG_TEXT(TX, TY, STWD, STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "개선권고 진행"),

		DLG_BUTTON(STARTX,	   STARTY+165, 200, 55, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ADDR, "지번"),
		DLG_BUTTON(STARTX,	   STARTY+220, 200, 55, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CHANGE, "수정"),	
		DLG_BUTTON(STARTX+500, STARTY+575, 250, 55, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_PREVLST, "▲"),	
		DLG_BUTTON(STARTX+750, STARTY+575, 250, 55, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_NEXTLST, "▼"),	
		DLG_BUTTON(STARTX,	   STARTY+780, 500, 60, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_NOFIT, "부적합상세"),
		DLG_BUTTON(STARTX+500, STARTY+780, 500, 60, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ISSUE, "발행"),
		DLG_BUTTON(STARTX,	   STARTY+840, 500, 59, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_VISIT, "방문등록"),
		DLG_BUTTON(STARTX+500, STARTY+840, 500, 59, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_OK, "확인"),			
		
		DLG_TEXT(STARTX, 	 STARTY+65, 300, 50, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_SCDT, "점검년월"),
		DLG_TEXT(STARTX+300, STARTY+65, 250, 50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA1, ""),
		DLG_TEXT(STARTX+550, STARTY+65, 200, 50, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_NUMBER, "차수"),
		DLG_TEXT(STARTX+750, STARTY+65, 250, 50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA2, ""),
		DLG_TEXT(STARTX, 	 STARTY+115, 300, 50, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_CLIENT, "고객/사업자"),
		DLG_TEXT(STARTX+300, STARTY+115, 350, 50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA3, ""),
		DLG_TEXT(STARTX+650, STARTY+115, 350, 50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA4, ""),
		DLG_TEXT(STARTX+200, STARTY+165, 800, 110, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA5, ""),
		//DLG_TEXT(STARTX+200, STARTY+230, 775, 50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA6, ""),
		DLG_TEXT(STARTX, 	 STARTY+275, 230, 50, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_HPNUM, "전화번호"),
		DLG_TEXT(STARTX+230, STARTY+275, 385, 50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA7, ""),
		DLG_TEXT(STARTX+615, STARTY+275, 385, 50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA8, ""),

		DLG_TEXT(STARTX    , STARTY+575, 350, 55, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_PAGE, m_szCnt_page),	//페이지
		DLG_TEXT(STARTX, 	 STARTY+630, 350, 50, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_REFORMTERM, "개선권고기한"),
		DLG_TEXT(STARTX+350, STARTY+630, 650, 50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA9, ""), 
		DLG_TEXT(STARTX, 	 STARTY+680, 350, 50, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_CMPLTDT, "완료일자"), 
		DLG_TEXT(STARTX+350, STARTY+680, 650, 50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA10, ""), 
		DLG_TEXT(STARTX, 	 STARTY+730, 350, 50, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_NAME, "입력자명"), 
		DLG_TEXT(STARTX+350, STARTY+730, 650, 50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA11, ""), 
		
		DLG_TABLE (GRID_X, GRID_Y, ROW, COL, 0, GRID_H, 1, GRID_H, SEL_ROW, MAXCHAR, m_stGridTitle, ID_TBLLIST, m_szTableBuf),
	};	
	
	// PDA 다이얼로그
	//---------------------------------------------------------------
	DlgObject	DlgRes_P[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),		
		DLG_ICON(P_TTLTX, 0, ICON_TITLE, ""),
		//타이틀
		DLG_TEXT(P_TX, P_TY, P_STWD, P_STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, WHITE, TRANSPARENT, TXT_TITLE, "개선권고 진행"),
		DLG_BUTTON(P_BTNX, P_BTNY, P_BTNWD, P_BTNHD, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", GID_PREV, ""),

		DLG_BUTTON(STARTX,	    STARTY+80, 200, 60, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ADDR, "지번"),
		DLG_BUTTON(STARTX,	   STARTY+140, 200, 60, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CHANGE, "수정"),	
		DLG_BUTTON(STARTX+500, STARTY+495, 250, 65, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_PREVLST, "▲"),	
		DLG_BUTTON(STARTX+750, STARTY+495, 250, 65, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_NEXTLST, "▼"),	
		DLG_BUTTON(STARTX,	   STARTY+740, 500, 80, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_NOFIT, "부적합상세"),
		DLG_BUTTON(STARTX+500, STARTY+740, 500, 80, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ISSUE, "발행"),
		DLG_BUTTON(STARTX,	   STARTY+820, 500, 79, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_VISIT, "방문등록"),
		DLG_BUTTON(STARTX+500, STARTY+820, 500, 79, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_OK, "확인"),	
				
		DLG_TEXT(STARTX, 	 STARTY-40,  300, 60, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_SCDT, "점검년월"),
		DLG_TEXT(STARTX+300, STARTY-40,  250, 60, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA1, ""),
		DLG_TEXT(STARTX+550, STARTY-40,  200, 60, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_NUMBER, "차수"),
		DLG_TEXT(STARTX+750, STARTY-40,  250, 60, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA2, ""),
		DLG_TEXT(STARTX, 	 STARTY+20,  300, 60, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_CLIENT, "고객/사업자"),
		DLG_TEXT(STARTX+300, STARTY+20,  350, 60, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA3, ""),
		DLG_TEXT(STARTX+650, STARTY+20,  350, 60, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA4, ""),
		DLG_TEXT(STARTX+200, STARTY+80,  800, 120, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA5, ""),
		//DLG_TEXT(STARTX+200, STARTY+150, 775, 50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA6, ""),
		DLG_TEXT(STARTX, 	 STARTY+200, 230, 50, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_HPNUM, "전화번호"),
		DLG_TEXT(STARTX+230, STARTY+200, 385, 50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA7, ""),
		DLG_TEXT(STARTX+615, STARTY+200, 385, 50, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA8, ""),

		DLG_TEXT(STARTX,	 STARTY+495, 350, 65, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_PAGE, m_szCnt_page),	//페이지
		DLG_TEXT(STARTX, 	 STARTY+560, 350, 60, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_REFORMTERM, "개선권고기한"),
		DLG_TEXT(STARTX+350, STARTY+560, 650, 60, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA9, ""), 
		DLG_TEXT(STARTX, 	 STARTY+620, 350, 60, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_CMPLTDT, "완료일자"), 
		DLG_TEXT(STARTX+350, STARTY+620, 650, 60, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA10, ""), 
		DLG_TEXT(STARTX, 	 STARTY+680, 350, 60, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_NAME, "입력자명"), 
		DLG_TEXT(STARTX+350, STARTY+680, 650, 60, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA11, ""),
		
		DLG_TABLE (GRID_X, GRID_Y_P, ROW, COL, 0, GRID_H, 1, GRID_H, SEL_ROW, MAXCHAR, m_stGridTitle, ID_TBLLIST, m_szTableBuf),
	};		
	
	//  다이얼로그:개선권고발행
	//---------------------------------------------------------------
	DlgObject	DlgRes_RFRMISSU[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),
		DLG_ICON(POPTX, POPTY, ICON_TITLE, ""),
		DLG_TEXT(POPTX, POPTY, POPSTWD, POPSTHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "개선권고 발행"),
		DLG_BUTTON(BTNX_7, P_BTNY, BTNWD_2, BTNHT_2, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_CANCEL, ""),

		DLG_BUTTON(STARTX,	    STARTY+300, 400, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CANCEL,  "취소"),
		DLG_BUTTON(STARTX+600,	STARTY+300, 400, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ISSUE2,  "발행"),
		
		DLG_TEXT( STARTX,	    STARTY-29, 350, 70, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA12, "개선권고일자"),
		DLG_TEXT( STARTX+350, 	STARTY-29, 650, 70, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA17, ""),
		//DLG_BUTTON(STARTX+770,	STARTY,  80, 50, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_REFSCHDL, "▼"),
		
		DLG_TEXT( STARTX,	   STARTY+41, 350, 70, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA13, "개선권고기한"),
		DLG_EDIT(STARTX+350,   STARTY+41, 165, 70, 0, 0, EDITSTY_BOLD, 0, TXTFRCOLOR, EDTCTRLBK, EDT_DATA1, 4,  ""),
		DLG_TEXT(STARTX+515,   STARTY+41,  20, 40, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA84, ""),
		DLG_TEXT(STARTX+515,   STARTY+81,  20, 30, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA85, "."),
		DLG_EDIT(STARTX+535,   STARTY+41, 140, 70, 0, 0, EDITSTY_BOLD, 0, TXTFRCOLOR, EDTCTRLBK, EDT_DATA2, 2,  ""),
		DLG_TEXT(STARTX+675,   STARTY+41,  20, 40, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA86, ""),
		DLG_TEXT(STARTX+675,   STARTY+81,  20, 30, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA87, "."),
		DLG_EDIT(STARTX+695,   STARTY+41, 140, 70, 0, 0, EDITSTY_BOLD, 0, TXTFRCOLOR, EDTCTRLBK, EDT_DATA3, 2,  ""),
		DLG_BUTTON(STARTX+835, STARTY+41, 165, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, TXTFRCOLOR, PDAEDTCTRLBK, CALL_FUNC , "", BID_REFSCHDL2, "▼"),
		//DLG_TEXT( STARTX+350,   STARTY+50, 475, 70, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA18, ""),
		//DLG_BUTTON(STARTX+825,  STARTY+50, 150, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_REFSCHDL2, "▼"),
		
		DLG_TEXT ( STARTX,	    STARTY+111, 350, 70, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA14, "공급중지"),
		DLG_TEXT ( STARTX+350,	STARTY+111, 485, 70, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA15, ""),
		DLG_BUTTON(STARTX+835,	STARTY+111, 165, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_STOP,  "중지"),
		
		DLG_TEXT ( STARTX,		STARTY+181, 350, 70, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA16, "중지불가사유"),
		DLG_COMBO (STARTX+350,  STARTY+181, 650, 200, 165, 70, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA1, 10),
	};
	
	//  다이얼로그:개선권고발행
	//---------------------------------------------------------------
	DlgObject	DlgRes_RFRMISSU_P[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),
		DLG_ICON(P_TTLTX, 0, ICON_TITLE, ""),
		DLG_TEXT(P_TX, P_TY, P_STWD, P_STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "개선권고 발행"),
		DLG_BUTTON(P_BTNX, P_BTNY, P_BTNWD, P_BTNHD, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_CANCEL, ""),

		DLG_BUTTON(STARTX,	    STARTY+350, 400, 80, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CANCEL,  "취소"),
		DLG_BUTTON(STARTX+600,	STARTY+350, 400, 80, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ISSUE2,  "발행"),
		
		DLG_TEXT( STARTX,	    STARTY-40, 350, 80, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA12, "개선권고일자"),
		DLG_TEXT( STARTX+350,	STARTY-40, 650, 80, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA17, ""),
		//DLG_BUTTON(STARTX+770,	STARTY,  80, 50, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_REFSCHDL, "▼"),
		
		DLG_TEXT( STARTX,	   STARTY+40, 350, 80, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA13, "개선권고기한"),
		DLG_EDIT(STARTX+350,   STARTY+40, 165, 80, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA1, 4,  ""),
		DLG_TEXT(STARTX+515,   STARTY+40,  20, 40, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA84, ""),
		DLG_TEXT(STARTX+515,   STARTY+80,  20, 40, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA85, "."),
		DLG_EDIT(STARTX+535,   STARTY+40, 140, 80, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA2, 2,  ""),
		DLG_TEXT(STARTX+675,   STARTY+40,  20, 40, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA86, ""),
		DLG_TEXT(STARTX+675,   STARTY+80,  20, 40, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA87, "."),
		DLG_EDIT(STARTX+695,   STARTY+40, 140, 80, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA3, 2,  ""),
		DLG_BUTTON(STARTX+835, STARTY+40, 165, 80, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, TXTFRCOLOR, PDAEDTCTRLBK, CALL_FUNC , "", BID_REFSCHDL2, "▼"),
		//DLG_TEXT( STARTX+350,   STARTY+50, 475, 70, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA18, ""),
		//DLG_BUTTON(STARTX+825,  STARTY+50, 150, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_REFSCHDL2, "▼"),
		
		DLG_TEXT ( STARTX,	    STARTY+120, 350, 80, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA14, "공급중지"),
		DLG_TEXT ( STARTX+350,	STARTY+120, 485, 80, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA15, ""),
		DLG_BUTTON(STARTX+835,	STARTY+120, 165, 80, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_STOP,  "중지"),
		
		DLG_TEXT ( STARTX,		STARTY+200, 350, 80, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA16, "중지불가사유"),
		DLG_COMBO (STARTX+350,  STARTY+200, 650, 200, 165, 80, TXTFRCOLOR, TXTINCTRLBK, CALL_FUNC, "", CMB_DATA1, 10),
	};
	
	//  다이얼로그:개선권고_방문등록
	//---------------------------------------------------------------
	DlgObject	DlgRes_RFRMVISIT[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),
		DLG_ICON(POPTX, POPTY, ICON_TITLE, ""),
		DLG_TEXT(POPTX, POPTY, POPSTWD, POPSTHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "방문 등록"),
		DLG_BUTTON(BTNX_7, P_BTNY, BTNWD_2, BTNHT_2, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_CANCEL2, ""),

		DLG_BUTTON(STARTX,	    STARTY+500, 250, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_PREVPG,  "▲"),
		DLG_BUTTON(STARTX+250,	STARTY+500, 250, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_NEXTPG,  "▼"),
		DLG_BUTTON(STARTX+500,	STARTY+500, 500, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ENTRY,  "등록"),
		DLG_BUTTON(STARTX+500,	STARTY+600, 500, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CANCEL2,  "취소"),
		
		DLG_TEXT( STARTX,	    STARTY+330, 300, 70, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA19, "방문차수"),
		DLG_TEXT( STARTX+300,   STARTY+330, 700, 70, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA23, ""),

		DLG_TEXT( STARTX,	   STARTY+400, 300, 70, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA20, "방문일자"),
		DLG_EDIT(STARTX+300,   STARTY+400, 180, 70, 0, 0, EDITSTY_BOLD, 0, TXTFRCOLOR, EDTCTRLBK, EDT_DATA4, 4,  ""),
		DLG_TEXT(STARTX+480,   STARTY+400,  20, 40, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA88, ""),
		DLG_TEXT(STARTX+480,   STARTY+440,  20, 30, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA89, "."),
		DLG_EDIT(STARTX+500,   STARTY+400, 150, 70, 0, 0, EDITSTY_BOLD, 0, TXTFRCOLOR, EDTCTRLBK, EDT_DATA5, 2,  ""),
		DLG_TEXT(STARTX+650,   STARTY+400,  20, 40, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA90, ""),
		DLG_TEXT(STARTX+650,   STARTY+440,  20, 30, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA91, "."),
		DLG_EDIT(STARTX+670,   STARTY+400, 150, 70, 0, 0, EDITSTY_BOLD, 0, TXTFRCOLOR, EDTCTRLBK, EDT_DATA6, 2,  ""),
		DLG_BUTTON(STARTX+820, STARTY+400, 180, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, TXTFRCOLOR, PDAEDTCTRLBK, CALL_FUNC , "", BID_VSTSCHDL, "▼"),
		//DLG_TEXT( STARTX+300,   STARTY+430, 520, 70, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA21, ""),
		//DLG_BUTTON(STARTX+820,  STARTY+430,  150, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_VSTSCHDL,  "▼"),
		
		DLG_TEXT( STARTX,   STARTY+600, 500, 70, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA22, m_szCnt_page_V),	//페이지
		
		DLG_TABLE (GRID_X_V, GRID_Y_V, ROW_V, COL_V, 0, GRID_H_V, 1, GRID_H_V, SEL_ROW, MAXCHAR_V, m_stGridTitle_V, ID_TBLVISIT, m_szTableBuf_V),
	};
	
	//  다이얼로그:개선권고_방문등록
	//---------------------------------------------------------------
	DlgObject	DlgRes_RFRMVISIT_P[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),
		DLG_ICON(P_TTLTX, 0, ICON_TITLE, ""),
		DLG_TEXT(P_TX, P_TY, P_STWD, P_STHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "방문 등록"),
		DLG_BUTTON(P_BTNX, P_BTNY, P_BTNWD, P_BTNHD, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_CANCEL2, ""),

		DLG_BUTTON(STARTX,	    STARTY+580, 250, 80, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_PREVPG,  "▲"),
		DLG_BUTTON(STARTX+250,	STARTY+580, 250, 80, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_NEXTPG,  "▼"),
		DLG_BUTTON(STARTX+600,	STARTY+580, 400, 80, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_ENTRY,  "등록"),
		DLG_BUTTON(STARTX+600,	STARTY+680, 400, 80, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_CANCEL2,  "취소"),
		
		DLG_TEXT( STARTX,	    STARTY+370, 300, 80, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA19, "방문차수"),
		DLG_TEXT( STARTX+300,   STARTY+370, 700, 80, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA23, ""),
		
		DLG_TEXT( STARTX,	   STARTY+450, 300, 80, 0, 0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA20, "방문일자"),
		DLG_EDIT(STARTX+300,   STARTY+450, 180, 80, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA4, 4,  ""),
		DLG_TEXT(STARTX+480,   STARTY+450,  20, 40, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA88, ""),
		DLG_TEXT(STARTX+480,   STARTY+490,  20, 40, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA89, "."),
		DLG_EDIT(STARTX+500,   STARTY+450, 150, 80, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA5, 2,  ""),
		DLG_TEXT(STARTX+650,   STARTY+450,  20, 40, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA90, ""),
		DLG_TEXT(STARTX+650,   STARTY+490,  20, 40, 0, 0, 0, 0, TXTFRCOLOR, EDTCTRLBK, TXT_DATA91, "."),
		DLG_EDIT(STARTX+670,   STARTY+450, 150, 80, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA6, 2,  ""),
		DLG_BUTTON(STARTX+820, STARTY+450, 180, 80, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, TXTFRCOLOR, PDAEDTCTRLBK, CALL_FUNC , "", BID_VSTSCHDL, "▼"),
		//DLG_TEXT( STARTX+300,   STARTY+430, 520, 70, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA21, ""),
		//DLG_BUTTON(STARTX+820,  STARTY+430,  150, 70, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_VSTSCHDL,  "▼"),
		
		DLG_TEXT( STARTX,   STARTY+680, 500, 80, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA22, m_szCnt_page_V),	//페이지
		
		DLG_TABLE (GRID_X_V, GRID_Y_V_P, ROW_V, COL_V, 0, GRID_H_V_P, 1, GRID_H_V_P, SEL_ROW, MAXCHAR_V, m_stGridTitle_V, ID_TBLVISIT, m_szTableBuf_V),
	};
	
	//  다이얼로그:주소확인
	//---------------------------------------------------------------
	DlgObject	DlgRes_SCADDR[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),
		DLG_ICON(POPTX, POPTY, ICON_TITLE, ""),
		DLG_TEXT(POPTX, POPTY, POPSTWD, POPSTHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "주소 확인"),
		DLG_BUTTON(BTNX_7, P_BTNY, BTNWD_2, BTNHT_2, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_OK3, ""),

		DLG_BUTTON(STARTX+600,  STARTY+700, 400, 80, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_OK3, "확인"),
		
		DLG_TEXT ( STARTX,		STARTY-29 , 300, 60, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA68, "건물번호"),
		DLG_TEXT ( STARTX+300,	STARTY-29 , 700, 60, 0,0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA69, ""),
		
		DLG_TEXT ( STARTX,		STARTY+50,  300, 60, 0,0, 0, 		    EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA70, ">지번주소"),
		DLG_TEXT ( STARTX,		STARTY+110, 550, 60, 0,0, 0, 		    EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA71, ""),
		DLG_EDIT ( STARTX+550,  STARTY+110, 200, 60, 0,0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA22, 10,  ""),
		DLG_TEXT ( STARTX+750,	STARTY+110,  50, 60, 0,0, 0, 		    EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA72, "-"),
		DLG_EDIT ( STARTX+800,  STARTY+110, 200, 60, 0,0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA23, 10,  ""),
		DLG_TEXT ( STARTX,		STARTY+170, 1000,60, 0, 0, 0,            EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA82, ""),
		
		DLG_BUTTON(STARTX,		STARTY+250, 130, 60, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNCHKFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_BOX8,  CHKOFF),
		DLG_TEXT ( STARTX+130,	STARTY+250, 180, 60, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA73, "맞음"),
		DLG_BUTTON(STARTX+310,  STARTY+250, 130, 60, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNCHKFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_BOX9,  CHKOFF),
		DLG_TEXT ( STARTX+440,	STARTY+250, 180, 60, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA74, "틀림"),
		DLG_BUTTON(STARTX+620,  STARTY+250, 130, 60, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNCHKFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_BOX10,  CHKOFF),
		DLG_TEXT ( STARTX+750,	STARTY+250, 250, 60, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA75, "주소없음"),
		
		DLG_TEXT ( STARTX,		STARTY+350, 300, 60, 0, 0, 0,            EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA76, ">새주소"),
		DLG_TEXT ( STARTX,		STARTY+410, 550, 60, 0, 0, 0,            EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA77, ""),
		DLG_EDIT ( STARTX+550,  STARTY+410, 200, 60, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA24, 20,  ""),
		DLG_TEXT ( STARTX+750,	STARTY+410, 50,  60, 0, 0, 0,            EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA78, "-"),
		DLG_EDIT ( STARTX+800,  STARTY+410, 200, 60, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA25, 20,  ""),
		DLG_TEXT ( STARTX,		STARTY+470, 1000,60, 0, 0, 0,            EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA83, ""),
		
		DLG_BUTTON(STARTX,		STARTY+550, 130, 60, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNCHKFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_BOX11,  CHKOFF),
		DLG_TEXT ( STARTX+130,	STARTY+550, 180, 60, 0, 0, 0,            EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA79, "맞음"),
		DLG_BUTTON(STARTX+310,  STARTY+550, 130, 60, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNCHKFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_BOX12,  CHKOFF),
		DLG_TEXT ( STARTX+440,	STARTY+550, 180, 60, 0, 0, 0,            EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA80, "틀림"),
		DLG_BUTTON(STARTX+620,  STARTY+550, 130, 60, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNCHKFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_BOX13,  CHKOFF),
		DLG_TEXT ( STARTX+750,	STARTY+550, 250, 60, 0, 0, 0,            EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA81, "주소없음"),
	};
	
	//  다이얼로그:주소확인
	//---------------------------------------------------------------
	DlgObject	DlgRes_SCADDR_P[] = 
	{
		NORM_DLG ("", "", DLGSTY_HSCROLLBAR|DLGSTY_VSCROLLBAR|DLGSTY_TITLE, 0, MAINBKCOLOR, WHITE, BLUE, TITLE_HEIGHT, 0),
		DLG_ICON(P_TTLTX, 0, ICON_TITLE, ""),
		DLG_TEXT(POPTX, POPTY, POPSTWD, POPSTHT, 0, 0, EDITSTY_BORDER, EDITSTY_BOLD, TTLCTRLFR, TTLCTRLBK, TXT_TITLE, "주소 확인"),
		DLG_BUTTON(P_BTNX, P_BTNY, P_BTNWD, P_BTNHD, 0, 0, BUTSTY_BORDER, 0, BTNMENUFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_OK3, ""),

		DLG_BUTTON(STARTX+600,  STARTY+809, 400, 90, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNMENUFRCOLOR, BTNCTRLBKCOLOR, CALL_FUNC , "", BID_OK3, "확인"),
		
		DLG_TEXT ( STARTX,		STARTY-40 , 400, 80, 0,0, 0, EDITSTY_BORDER, TXTTTLFRCOLOR, TXTCTRLBK, TXT_DATA68, "건물번호"),
		DLG_TEXT ( STARTX+400,	STARTY-40 , 600, 80, 0,0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA69, ""),
		
		DLG_TEXT ( STARTX,		STARTY+70,  300, 80, 0,0, 0, 		    EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA70, ">지번주소"),
		DLG_TEXT ( STARTX,		STARTY+150, 560, 80, 0,0, 0, 		    EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA71, ""),
		DLG_EDIT ( STARTX+560,  STARTY+150, 200, 80, 0,0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA22, 10,  ""),
		DLG_TEXT ( STARTX+760,	STARTY+150,  40, 80, 0,0, 0, 		    EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA72, "-"),
		DLG_EDIT ( STARTX+800,  STARTY+150, 200, 80, 0,0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA23, 10,  ""),
		DLG_TEXT ( STARTX,		STARTY+230, 1000, 80, 0, 0, 0,            EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA82, ""),
		
		DLG_BUTTON(STARTX,		STARTY+330, 130, 80, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNCHKFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_BOX8,  CHKOFF),
		DLG_TEXT ( STARTX+130,	STARTY+330, 180, 80, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA73, "맞음"),
		DLG_BUTTON(STARTX+310,  STARTY+330, 130, 80, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNCHKFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_BOX9,  CHKOFF),
		DLG_TEXT ( STARTX+440,	STARTY+330, 180, 80, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA74, "틀림"),
		DLG_BUTTON(STARTX+620,  STARTY+330, 130, 80, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNCHKFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_BOX10,  CHKOFF),
		DLG_TEXT ( STARTX+750,	STARTY+330, 250, 80, 0, 0, 0, EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA75, "주소없음"),
		
		DLG_TEXT ( STARTX,		STARTY+450, 300, 80, 0, 0, 0,            EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA76, ">새주소"),
		DLG_TEXT ( STARTX,		STARTY+530, 560, 80, 0, 0, 0,            EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA77, ""),
		DLG_EDIT ( STARTX+560,  STARTY+530, 200, 80, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA24, 20,  ""),
		DLG_TEXT ( STARTX+760,	STARTY+530, 40,  80, 0, 0, 0,            EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA78, "-"),
		DLG_EDIT ( STARTX+800,  STARTY+530, 200, 80, 0, 0, EDITSTY_BOLD, EDITSTY_BORDER, TXTFRCOLOR, EDTCTRLBK, EDT_DATA25, 20,  ""),
		DLG_TEXT ( STARTX,		STARTY+610, 1000, 80, 0, 0, 0,            EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA83, ""),
		
		DLG_BUTTON(STARTX,		STARTY+710, 130, 80, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNCHKFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_BOX11,  CHKOFF),
		DLG_TEXT ( STARTX+130,	STARTY+710, 180, 80, 0, 0, 0,            EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA79, "맞음"),
		DLG_BUTTON(STARTX+310,  STARTY+710, 130, 80, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNCHKFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_BOX12,  CHKOFF),
		DLG_TEXT ( STARTX+440,	STARTY+710, 180, 80, 0, 0, 0,            EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA80, "틀림"),
		DLG_BUTTON(STARTX+620,  STARTY+710, 130, 80, 0, 0, BUTSTY_BOLD, BUTSTY_BORDER, BTNCHKFRCOLOR, BTNCTRLMNBKCOLOR, CALL_FUNC , "", BID_BOX13,  CHKOFF),
		DLG_TEXT ( STARTX+750,	STARTY+710, 250, 80, 0, 0, 0,            EDITSTY_BORDER, TXTFRCOLOR, TXTINCTRLBK, TXT_DATA81, "주소없음"),
	};

	//----------------------------------------------------------------------
	bool	main (quad MsgType, quad wParam, quad lParam)
	{
		EVENT_HANDLER (MsgType, wParam, lParam);
		return TRUE;
	}
	
//┌─────────────────────────────────────┐
//│ 				   『	OnInit Function  』  				              │
//└─────────────────────────────────────┘
	void	OnInit(char bFirst)
	{
		long i;
		
		m_bFirst = bFirst;
	
		switch (bFirst)
		{
			case INIT_MAIN:
				switch (theDevInfo.m_nType)
				{
					case FAMILY_PDA:
						CREATE_DIALOG_OBJECT (DlgRes_P, SIZEOF(DlgRes_P));
						break;
					default:
						CREATE_GLOBAL_BUTTON (SysButRes_MAIN);
						CREATE_DIALOG_OBJECT (DlgRes, SIZEOF(DlgRes));
						break;		
				}
				
				SetBtnImg();
				SetStyle();
				REDRAW();
				TBL_DRAW();
				break;
			case INIT_RFRMISSU:
				switch (theDevInfo.m_nType)
				{
					case FAMILY_PDA:
						CREATE_DIALOG_OBJECT (DlgRes_RFRMISSU_P, SIZEOF(DlgRes_RFRMISSU_P));
						break;
					default:
						CREATE_DIALOG_OBJECT (DlgRes_RFRMISSU, SIZEOF(DlgRes_RFRMISSU));
						break;		
				}

				SetBtnImg();
				SetStyle();

				for ( i = 0 ;  SCNOSTOP_WHY[i].Str[0] != 0 ; i++)
				{
					ListCtrl_AddItem (Get_hDlgCtrlByID(CMB_DATA1+2), SCNOSTOP_WHY[i].Str, 0, ICON_NONE);
				}
				
				Mem_Set( (byte*)&m_stNogoodCha, 0x00, sizeof(m_stNogoodCha) );
				SetDataNogoodCha();
				Set_Nogood();
				ISSUE_DRAW();
				break;
				
			case INIT_RFRMVISIT:
				switch (theDevInfo.m_nType)
				{
					case FAMILY_PDA:
						CREATE_DIALOG_OBJECT (DlgRes_RFRMVISIT_P, SIZEOF(DlgRes_RFRMVISIT_P));
						break;
					default:
						CREATE_DIALOG_OBJECT (DlgRes_RFRMVISIT, SIZEOF(DlgRes_RFRMVISIT));
						break;		
				}
				
				SetBtnImg();
				SetStyle();
				Set_Nogood();
				VISIT_DRAW();
				break;
			//주소확인
			case INIT_SCADDR:
				switch (theDevInfo.m_nType)
				{
					case FAMILY_PDA:
						CREATE_DIALOG_OBJECT (DlgRes_SCADDR_P, SIZEOF(DlgRes_SCADDR_P));
						break;
					default:
						CREATE_DIALOG_OBJECT (DlgRes_SCADDR, SIZEOF(DlgRes_SCADDR));
						break;		
				}

				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA22), FALSE );
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA23), FALSE );
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA24), FALSE );
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA25), FALSE );

				SetBtnImg();
				if( SetAddr() > 0 )
					ADDR_DRAW();
				break;
		}
	}

//------------------------------------------------------------------
	void SetBtnImg(void)
	{
		void* h;

		if( m_bFirst == INIT_MAIN )
		{
			IconCtrl_SetImage(Get_hDlgCtrlByID(ICON_TITLE), 0, g_pImgMainTtl );		//타이틀
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_TITLE), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
			
			if( theDevInfo.m_nType != FAMILY_PDA )
			{	
				//상단공통메뉴
				h = GetSysButHandle(GID_HOME);
				ButCtrl_SetImage( h,  g_pImgHomeI);
				ButCtrl_SetActiveImage( h,  g_pImgHomeA);
				
				h = GetSysButHandle(GID_KEYBOARD);
				ButCtrl_SetImage( h,  g_pImgKeybrdI);
				ButCtrl_SetActiveImage( h,  g_pImgKeybrdA);
				
				h = GetSysButHandle(GID_SCREEN);
				ButCtrl_SetImage( h,  g_pImgScreenI);
				ButCtrl_SetActiveImage( h,  g_pImgScreenA);
				
				h = GetSysButHandle(GID_CMMNWK);
				ButCtrl_SetImage( h,  g_pImgCmmnwrkI);
				ButCtrl_SetActiveImage( h,  g_pImgCmmnwrkA);
				
				h = GetSysButHandle(GID_VMEXIT);
				ButCtrl_SetImage( h,  g_pImgExitI);
				ButCtrl_SetActiveImage( h,  g_pImgExitA);
			}
		}
		else
		{
			IconCtrl_SetImage(Get_hDlgCtrlByID(ICON_TITLE), 0, g_pImgPopTtlL );		//타이틀
			EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_TITLE), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		}
	}

//-----------------------------------------------------------------
void	SetStyle(void)
{
	if( m_bFirst == INIT_MAIN )
	{
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_SCDT), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_NUMBER), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_CLIENT), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_HPNUM), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_REFORMTERM), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_CMPLTDT), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_NAME), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_PAGE), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA1), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA2), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA3), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA4), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA5), EDITALIGN_MIDDLE);
		//EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA6), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA7), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA8), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA9), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA10), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA11), EDITALIGN_MIDDLE);
		
		EditCtrl_SetMultiLine(Get_hDlgCtrlByID(TXT_DATA5), TRUE, 2, EDITSEP_NONE );
	}
	else if( m_bFirst == INIT_RFRMISSU )
	{
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA12), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA13), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA14), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA15), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA16), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA17), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		//EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA18), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA1), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA2), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA3), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(CMB_DATA1), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
	}
	else if( m_bFirst == INIT_RFRMVISIT )
	{
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA19), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA20), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		//EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA21), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA22), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA23), EDITALIGN_MIDDLE|EDITALIGN_CENTER);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA4), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA5), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA6), EDITALIGN_MIDDLE);
	}
}

//-------------------------------------------------------------------
	void	OnChar(long nChar)
	{
		long nRet = 0;
		long nDate = 0;
		char szTmp[10];
		char szDate[10];

		//숫자만 입력 가능
		if( m_bFirst == INIT_RFRMISSU )
		{
			if( (Get_iDlgCtrlByID(EDT_DATA1) == m_lActiveIndex 
			|| Get_iDlgCtrlByID(EDT_DATA2) == m_lActiveIndex
			|| Get_iDlgCtrlByID(EDT_DATA3) == m_lActiveIndex )
			&& (nChar < 48 ||  nChar > 57) )
			{
				MessageBoxEx (CONFIRM_OK, "숫자만 입력가능합니다.");
				ON_KEY( 5 );
				return;
			}
			
			//개선권고일자
			if( Get_iDlgCtrlByID(EDT_DATA1) == m_lActiveIndex )
			{
				if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA1)) == 4 )
				{
					Dialog_SetActiveCtrl(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA2));
					m_lActiveIndex = Dialog_GetActiveCtrlIndex(this->m_hDlg);
				}
			}
			else if( Get_iDlgCtrlByID(EDT_DATA2) == m_lActiveIndex )
			{
				Mem_Set((byte *)szTmp, 0x00, sizeof(szTmp));
				Mem_Cpy((byte *)szTmp, (byte *)EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA2)), 1);
				if( Str_AtoI(szTmp) > 1 )
				{
					ON_KEY( 5 );
					return;
				}
				
				Mem_Set((byte *)szTmp, 0x00, sizeof(szTmp));
				Mem_Cpy((byte *)szTmp, (byte *)EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA2)), 2);
				if( Str_Len(szTmp) > 1 && (Str_AtoI(szTmp) == 0 || Str_AtoI(szTmp) > 12) )
				{
					ON_KEY( 5 );
					return;
				}
				
				if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA2)) == 2 )
				{
					Dialog_SetActiveCtrl(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA3));
					m_lActiveIndex = Dialog_GetActiveCtrlIndex(this->m_hDlg);
				}
			}
			else if( Get_iDlgCtrlByID(EDT_DATA3) == m_lActiveIndex )
			{
				Mem_Set((byte *)szTmp, 0x00, sizeof(szTmp));
				Mem_Cpy((byte *)szTmp, (byte *)EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA3)), 1);
				if( Str_AtoI(szTmp) > 3 )
				{
					ON_KEY( 5 );
					return;
				}
				
				Mem_Set((byte *)szTmp, 0x00, sizeof(szTmp));
				Mem_Cpy((byte *)szTmp, (byte *)EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA3)), 2);
				if( Str_Len(szTmp) > 1 && (Str_AtoI(szTmp) == 0 || Str_AtoI(szTmp) > 31) )
				{
					ON_KEY( 5 );
					return;
				}
			}
	
			Mem_Set((byte *)szTmp, 0x00, sizeof(szTmp));
			Str_Cpy(szTmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA1)));
			Str_Cat(szTmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA2)));
			Str_Cat(szTmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA3)));
			if( Str_Len(szTmp) == 8 )
			{
				Str_Chg(szTmp, STRCHG_DEL_NONDIGIT);
				nDate = Str_AtoI(szTmp);
				nRet = Time_ValidateDate(nDate);
				//PRINT(">>>>>>>>>>>>>>>>>>>>> nRet : %d , nDate : %d , szTmp : %s",nRet,nDate,szTmp);
				
				if( nRet == 0 )
				{
					MessageBoxEx (CONFIRM_OK, "유효한 날짜가 아닙니다.\n날짜를 확인해주세요.");
					EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA1), "");
					EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA2), "");
					EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA3), "");
					
					Dialog_SetActiveCtrl(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA1));
					m_lActiveIndex = Dialog_GetActiveCtrlIndex(this->m_hDlg);
					
					ON_DRAW();
					return;
				}
				else
				{
					if( Str_AtoI(m_stNogoodCha.BETTER_ADVICE_YMD) <= Str_AtoI(szTmp) )
					{
						Mem_Set((byte *)m_stNogoodCha.BETTER_ADVICE_EXPIRE, 0x00, sizeof(m_stNogoodCha.BETTER_ADVICE_EXPIRE));
						Str_Cpy(m_stNogoodCha.BETTER_ADVICE_EXPIRE, szTmp);
					}
					else
					{
						MessageBoxEx (WARNING_OK, "개선권고기한이\n잘못 설정되었습니다.\n 다시 설정해주세요.");
						EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA1), "");
						EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA2), "");
						EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA3), "");
						
						Dialog_SetActiveCtrl(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA1));
						m_lActiveIndex = Dialog_GetActiveCtrlIndex(this->m_hDlg);
					}
				}
			}
		}
		else if( m_bFirst == INIT_RFRMVISIT)
		{
			if( (Get_iDlgCtrlByID(EDT_DATA4) == m_lActiveIndex 
			|| Get_iDlgCtrlByID(EDT_DATA5) == m_lActiveIndex
			|| Get_iDlgCtrlByID(EDT_DATA6) == m_lActiveIndex )
			&& (nChar < 48 ||  nChar > 57) )
			{
				MessageBoxEx (CONFIRM_OK, "숫자만 입력가능합니다.");
				ON_KEY( 5 );
				return;
			}
		
			//개선권고일자
			if( Get_iDlgCtrlByID(EDT_DATA4) == m_lActiveIndex )
			{
				if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA4)) == 4 )
				{
					Dialog_SetActiveCtrl(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA5));
					m_lActiveIndex = Dialog_GetActiveCtrlIndex(this->m_hDlg);
				}
			}
			else if( Get_iDlgCtrlByID(EDT_DATA5) == m_lActiveIndex )
			{
				Mem_Set((byte *)szTmp, 0x00, sizeof(szTmp));
				Mem_Cpy((byte *)szTmp, (byte *)EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA5)), 1);
				if( Str_AtoI(szTmp) > 1 )
				{
					ON_KEY( 5 );
					return;
				}
				
				Mem_Set((byte *)szTmp, 0x00, sizeof(szTmp));
				Mem_Cpy((byte *)szTmp, (byte *)EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA5)), 2);
				if( Str_Len(szTmp) > 1 && (Str_AtoI(szTmp) == 0 || Str_AtoI(szTmp) > 12) )
				{
					ON_KEY( 5 );
					return;
				}
				
				if( EditCtrl_GetStrLen(Get_hDlgCtrlByID(EDT_DATA5)) == 2 )
				{
					Dialog_SetActiveCtrl(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA6));
					m_lActiveIndex = Dialog_GetActiveCtrlIndex(this->m_hDlg);
				}
			}
			else if( Get_iDlgCtrlByID(EDT_DATA6) == m_lActiveIndex )
			{
				Mem_Set((byte *)szTmp, 0x00, sizeof(szTmp));
				Mem_Cpy((byte *)szTmp, (byte *)EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA6)), 1);
				if( Str_AtoI(szTmp) > 3 )
				{
					ON_KEY( 5 );
					return;
				}
				
				Mem_Set((byte *)szTmp, 0x00, sizeof(szTmp));
				Mem_Cpy((byte *)szTmp, (byte *)EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA6)), 2);
				if( Str_Len(szTmp) > 1 && (Str_AtoI(szTmp) == 0 || Str_AtoI(szTmp) > 31) )
				{
					ON_KEY( 5 );
					return;
				}
			}
	
	
			Mem_Set((byte *)szTmp, 0x00, sizeof(szTmp));
			Str_Cpy(szTmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA4)));
			Str_Cat(szTmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA5)));
			Str_Cat(szTmp, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA6)));
			if( Str_Len(szTmp) == 8 )
			{
				Str_Chg(szTmp, STRCHG_DEL_NONDIGIT);
				nDate = Str_AtoI(szTmp);
				nRet = Time_ValidateDate(nDate);
				//PRINT(">>>>>>>>>>>>>>>>>>>>> nRet : %d , nDate : %d , szTmp : %s",nRet,nDate,szTmp);
				
				if( nRet == 0 )
				{
					MessageBoxEx (CONFIRM_OK, "유효한 날짜가 아닙니다.\n날짜를 확인해주세요.");
					EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA4), "");
					EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA5), "");
					EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA6), "");
					
					Dialog_SetActiveCtrl(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA4));
					m_lActiveIndex = Dialog_GetActiveCtrlIndex(this->m_hDlg);
					
					ON_DRAW();
					return;
				}
				else
				{
					Str_ItoA(Time_GetDate(), szDate, 10);
					if( Str_Cmp(szDate, szTmp) == 0 )
					{
						Mem_Set((byte *)m_szVisitYmd, 0x00, sizeof(m_szVisitYmd));
						Str_Cpy(m_szVisitYmd, szTmp);
						SetActRow();
					}
					else
					{
						MessageBoxEx (WARNING_OK, "방문등록일이 잘못 설정되었습니다.\n 다시 설정해주세요.");
						EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA4), "");
						EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA5), "");
						EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA6), "");
						
						Dialog_SetActiveCtrl(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA4));
						m_lActiveIndex = Dialog_GetActiveCtrlIndex(this->m_hDlg);

						SetActRow();
					}
				}
			}
		}
		
		ON_DRAW();
		return;
	}


//-------------------------------------------------------------------------
	void	OnPointing(long nAction, long X, long Y)
	{
		long lActiveIndex = -1;
		long lret;
		
		lActiveIndex = Dialog_GetActiveCtrlIndex(this->m_hDlg);	

		if( m_bFirst == INIT_RFRMISSU )
		{
			if( POINTING_UP == nAction )
			{
				m_lActiveIndex = lActiveIndex;
			
				if( theDevInfo.m_nType > FAMILY_PDA )
				{
					if( X > DMS_X(STARTX+350) && X < DMS_X(STARTX+515) && Y > DMS_Y(STARTY+41) && Y < DMS_Y(STARTY+111) ||
						X > DMS_X(STARTX+535) && X < DMS_X(STARTX+675) && Y > DMS_Y(STARTY+41) && Y < DMS_Y(STARTY+111) ||
						X > DMS_X(STARTX+695) && X < DMS_X(STARTX+835) && Y > DMS_Y(STARTY+41) && Y < DMS_Y(STARTY+111) )
					{
						if( Get_iDlgCtrlByID(EDT_DATA1) == lActiveIndex ||
							Get_iDlgCtrlByID(EDT_DATA2) == lActiveIndex ||
							Get_iDlgCtrlByID(EDT_DATA3) == lActiveIndex )	
						{
							ShowSip(FALSE);
							g_Sipflag = 0;
							
							//SetKeyMode(KEYMODE_NUMBER);
			
							ShowSip(TRUE);
							g_Sipflag = 1;
						}
					}
					else
					{
						ShowSip(FALSE);
						g_Sipflag = 0;
					}
					
					ON_DRAW();
				}
			}
		}
		else if( m_bFirst == INIT_RFRMVISIT )
		{
			if( POINTING_UP == nAction )
			{
				m_lActiveIndex = lActiveIndex;
			
				if( theDevInfo.m_nType > FAMILY_PDA )
				{
					if( X > DMS_X(STARTX+300) && X < DMS_X(STARTX+480) && Y > DMS_Y(STARTY+430) && Y < DMS_Y(STARTY+500) ||
						X > DMS_X(STARTX+500) && X < DMS_X(STARTX+650) && Y > DMS_Y(STARTY+430) && Y < DMS_Y(STARTY+500) ||
						X > DMS_X(STARTX+670) && X < DMS_X(STARTX+820) && Y > DMS_Y(STARTY+430) && Y < DMS_Y(STARTY+500) )
					{
						if( Get_iDlgCtrlByID(EDT_DATA4) == lActiveIndex ||
							Get_iDlgCtrlByID(EDT_DATA5) == lActiveIndex ||
							Get_iDlgCtrlByID(EDT_DATA6) == lActiveIndex )	
						{
							ShowSip(FALSE);
							g_Sipflag = 0;
							
							//SetKeyMode(KEYMODE_NUMBER);
			
							ShowSip(TRUE);
							g_Sipflag = 1;
						}
					}
					else
					{
						ShowSip(FALSE);
						g_Sipflag = 0;
					}
					
					ON_DRAW();
				}
			}
		}
		else if( m_bFirst == INIT_SCADDR )
		{
			if( POINTING_UP == nAction )
			{
				m_lActiveIndex = lActiveIndex;
			
				if( theDevInfo.m_nType > FAMILY_PDA )
				{
					if( X > DMS_X(STARTX+550) && X < DMS_X(STARTX+750) && Y > DMS_Y(STARTY+110) && Y < DMS_Y(STARTY+170) ||
					    X > DMS_X(STARTX+800) && X < DMS_X(STARTX+1000) && Y > DMS_Y(STARTY+110) && Y < DMS_Y(STARTY+170) )
					{
						if( Get_iDlgCtrlByID(EDT_DATA22) == lActiveIndex ||
						    Get_iDlgCtrlByID(EDT_DATA23) == lActiveIndex )	
						{
							g_Dlgflag = 1;
							g_MOVE_DLG(1);
						
							ShowSip(FALSE);
							g_Sipflag = 0;
							
							//SetKeyMode(KEYMODE_NUMBER);
			
							ShowSip(TRUE);
							g_Sipflag = 1;
	
						}
					}
					else if( X > DMS_X(STARTX+550) && X < DMS_X(STARTX+750) && Y > DMS_Y(STARTY+410-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+470-(g_Dlgflag*400)) ||
					         X > DMS_X(STARTX+800) && X < DMS_X(STARTX+1000) && Y > DMS_Y(STARTY+410-(g_Dlgflag*400)) && Y < DMS_Y(STARTY+470-(g_Dlgflag*400)) )
					{
						if( Get_iDlgCtrlByID(EDT_DATA24) == lActiveIndex ||
						    Get_iDlgCtrlByID(EDT_DATA25) == lActiveIndex )	
						{
							g_Dlgflag = 0;
							g_MOVE_DLG(400);
						
							ShowSip(FALSE);
							g_Sipflag = 0;
							
							//SetKeyMode(KEYMODE_NUMBER);
			
							ShowSip(TRUE);
							g_Sipflag = 1;
						}
					}
					else
					{
						g_Dlgflag = 1;
						g_MOVE_DLG(1);
					
						ShowSip(FALSE);
						g_Sipflag = 0;
					}
					
					ON_DRAW();
				}
			}
		}
		
		return;
	}

//------------------------------------------------------------------
	void	OnButton(long ID)
	{	
		long d, k;
		long lCnt = 0;
		long lRet = 0;
		char szDate[20];
		char szYear[5];
		char szMonth[3];
		char szDay[3];
		char szToday[20];
		char sztmp[200];
		char szSql[300];
	
		switch(ID)
		{					
			case BID_ADDR:
				if( 0 == g_nAddrFlag )
				{
					g_nAddrFlag = 1;
					ButCtrl_SetText(Get_hDlgCtrlByID(BID_ADDR), "도로명");
				}
				else
				{
					g_nAddrFlag = 0;
					ButCtrl_SetText(Get_hDlgCtrlByID(BID_ADDR), "지번");
				}
				REDRAW();
				TBL_DRAW();
				if( m_lSelIndex >= 0 )
				{
					EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA9), DlgTbl_GetStr( ID_TBLLIST, m_lSelIndex, 2));
					EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA10), DlgTbl_GetStr( ID_TBLLIST, m_lSelIndex, 4));
					EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA11), DlgTbl_GetStr( ID_TBLLIST, m_lSelIndex, 5));
				}
				break;
			case BID_CHANGE:
				ON_EXIT();
				OnInit(INIT_SCADDR);
				break;
			case BID_PREVLST:
				m_lpage--;
				if(m_lpage < 0)
				{
					m_lpage = 0;
					//MessageBoxEx (CONFIRM_OK, "첫번째 페이지 입니다.");
					//SetStyle();
					//REDRAW();
					//TBL_DRAW();
					break;
				}
				m_lSelIndex = 0;
				//SetStyle();
				REDRAW();
				TBL_DRAW();
				break;
			
			case BID_NEXTLST:
				m_lpage++ ;
				if( m_lpage > m_lTotpage-1 )
				{
					m_lpage = m_lTotpage-1;
					if(m_lpage < 0)
					{
						m_lpage = 0;
					}
					//MessageBoxEx (CONFIRM_OK, "마지막 페이지 입니다.");
					//SetStyle();
					//REDRAW();
					//TBL_DRAW();
					break;
				}
				m_lSelIndex = 0;
				//SetStyle();
				REDRAW();
				TBL_DRAW();
				break;
			case BID_NOFIT:
				Card_Move("SC_RFRMRSK");
				break;
			case BID_ISSUE:
				Mem_Set((byte*)szToday, 0x00, sizeof(szToday));
				Str_ItoA (Time_GetDate(), szToday, 10 );
				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				SPRINT(sztmp, "SELECT COUNT(*) FROM NORMAL_NOGOOD_CHA  WHERE CHK_EXEC_NUM = '%s' AND BETTER_ADVICE_YMD = '%s' ", g_szCHK_EXEC_NUM, szToday, 0   );
				g_Sql_RetInt( sztmp, &lCnt );
				
				if( lCnt > 0 )
				{
					MessageBoxEx (WARNING_OK, "금일 대상의 개선권고를 발행하였습니다.");
				}
				else
				{
					ON_EXIT();
					OnInit(INIT_RFRMISSU);
				}
				break;
			case BID_VISIT:
				ON_EXIT();
				OnInit(INIT_RFRMVISIT);
				break;
			case BID_OK:
				Save_Result();
				
				g_nBackFlag++;
				
				if( g_nBackFlag > 9 )
				{
					g_Db_Backup();
					g_nBackFlag = 0;
				}
				
				if( g_lMoveFlag != 2)
				{
					Card_Move("SC_RFRMLST");
				}
				else
				{
					Card_Move("SC_CONFIRM");
				}
				
				break;
			case GID_HOME:
				if( MessageBoxEx (CONFIRM_YESNO, "메인 메뉴로 나가시겠습니까?")  == MB_OK)
				{
					Card_Move("MENU");
				}
				break;
			case GID_MENU:
				if( MessageBoxEx (CONFIRM_YESNO, "안전점검 메뉴로\n나가시겠습니까?")  == MB_OK)
				{
					Card_Move("SC_MENU");
				}
				break;
			case GID_KEYBOARD:
				g_SHOW_SIP();
				break;
			case GID_SCREEN:
				g_MOVE_DLG(400);
				break;
			case GID_CMMNWK:
				break;				
			case GID_PREV:
				if( g_lMoveFlag != 2)
				{
					Card_Move("SC_RFRMLST");
				}
				else
				{
					Card_Move("SC_CONFIRM");
				}
				
				break;	
			case GID_VMEXIT:
				g_Exit();
				break;
//발행
			case BID_REFSCHDL2:
				Mem_Set((byte*)szDate, 0x00, sizeof(szDate));		
				Str_Cpy(szDate, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA1)));
				Str_Cat(szDate, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA2)));
				Str_Cat(szDate, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA3)));
//PRINT(">>>>>>>>>>>>>>>>>>>>>>>>>>>>szDate : %s",szDate,0,0);
				k = Str_AtoI(szDate);

				Load_Calendar_Card();
				d = CalendarDialog(&k);
				Unload_Calendar_Card();
				if(d == 0)
				{
					break;
				}
				else
				{
					Mem_Set((byte*)m_stNogoodCha.BETTER_ADVICE_EXPIRE, 0x00, sizeof(m_stNogoodCha.BETTER_ADVICE_EXPIRE));
					Str_ItoA ( d, m_stNogoodCha.BETTER_ADVICE_EXPIRE, 10);
					
					if( Str_AtoI(m_stNogoodCha.BETTER_ADVICE_YMD) <= Str_AtoI(m_stNogoodCha.BETTER_ADVICE_EXPIRE) )
					{
						Mem_Set((byte*)szYear, 0x00, sizeof(szYear));
						Mem_Set((byte*)szMonth, 0x00, sizeof(szMonth));
						Mem_Set((byte*)szDay, 0x00, sizeof(szDay));
						Mem_Cpy((byte *)szYear, (byte *)m_stNogoodCha.BETTER_ADVICE_EXPIRE, 4);
						Mem_Cpy((byte *)szMonth, (byte *)m_stNogoodCha.BETTER_ADVICE_EXPIRE+4, 2);
						Mem_Cpy((byte *)szDay, (byte *)m_stNogoodCha.BETTER_ADVICE_EXPIRE+6, 2);
						
						EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA1), szYear );
						EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA2), szMonth );
						EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA3), szDay );

						//g_Str_DateType(szToday, m_stNogoodCha.BETTER_ADVICE_EXPIRE);
						//EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA18), szToday );
					}
					else
					{
						MessageBoxEx (WARNING_OK, "개선권고기한이 잘못 설정되었습니다.\n 다시 설정해주세요.");
					}
				}
				break;
			case BID_STOP:
				if( MessageBoxEx (CONFIRM_YESNO, "공급중지 하시겠습니까?") == MB_OK )
				{
					Mem_Set((byte*)m_stNogoodCha.SUPPLY_STOP_YMD, 0x00, sizeof(m_stNogoodCha.SUPPLY_STOP_YMD));
					Str_ItoA(Time_GetDate(),m_stNogoodCha.SUPPLY_STOP_YMD,10);
					g_Str_DateType(szDate, m_stNogoodCha.SUPPLY_STOP_YMD);
					EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA15), szDate );

					Mem_Set((byte*)m_stNogoodCha.NOT_PERMIT_WHY, 0x00, sizeof(m_stNogoodCha.NOT_PERMIT_WHY));
					EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA1), "" );
					DlgCtrl_SetEnable( this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA1+1), FALSE );
					DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA1+1), TRUE );
				}
				break;
			case BID_ISSUE2:
				if( Save_Issue() )
				{
					if( m_IssueFlag == 1 )
					{
						//2차, 부적합 차수 발행 시 고객에게 문자전송
						Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
						lCnt = 0;
						SPRINT(szSql, " SELECT COUNT(1) FROM NORMAL_NOGOOD_DETAL WHERE CHK_EXEC_NUM = '%s' AND BETTER_YN <> 'Y' ", g_szCHK_EXEC_NUM, 0, 0);
						g_Sql_RetInt( szSql, &lCnt );
						
						if( lCnt > 0 && Str_Cmp(stScNogood.CONT_STS_CD, "30") != 0 )
						{
							lRet = Snd_Sms();
							if( lRet > 0 )
							{
								Snd_Sms_Hist();
							}
						}
						
						ON_EXIT();
						OnInit(INIT_MAIN);
					}
				}
				else
				{
					Mem_Set((byte*)szToday, 0x00, sizeof(szToday));
					g_Str_DateType(szToday, m_stNogoodCha.BETTER_ADVICE_YMD);
					EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA17), szToday);
					
					Mem_Set((byte*)szYear, 0x00, sizeof(szYear));
					Mem_Set((byte*)szMonth, 0x00, sizeof(szMonth));
					Mem_Set((byte*)szDay, 0x00, sizeof(szDay));
					Mem_Cpy((byte *)szYear, (byte *)m_stNogoodCha.BETTER_ADVICE_EXPIRE, 4);
					Mem_Cpy((byte *)szMonth, (byte *)m_stNogoodCha.BETTER_ADVICE_EXPIRE+4, 2);
					Mem_Cpy((byte *)szDay, (byte *)m_stNogoodCha.BETTER_ADVICE_EXPIRE+6, 2);
					
					EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA1), szYear );
					EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA2), szMonth );
					EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA3), szDay );
					
					//Mem_Set((byte*)szToday, 0x00, sizeof(szToday));
					//g_Str_DateType(szToday, m_stNogoodCha.BETTER_ADVICE_EXPIRE);
					//EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA18), szToday);
					
					Mem_Set((byte*)szToday, 0x00, sizeof(szToday));
					g_Str_DateType(szToday, m_stNogoodCha.SUPPLY_STOP_YMD);
					EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA15), szToday);
					
					EditCtrl_SetStr( Get_hDlgCtrlByID(CMB_DATA1), m_stNogoodCha.NOT_PERMIT_WHY);
				}
				break;
			case BID_CANCEL:
				ON_EXIT();
				OnInit(INIT_MAIN);
				break;
//방문등록
			case BID_ENTRY:
				if( Save_Visit() )
				{
					ON_EXIT();
					OnInit(INIT_MAIN);
				}
				break;
			case BID_CANCEL2:
				ON_EXIT();
				OnInit(INIT_MAIN);	
				break;			
			case BID_VSTSCHDL:
				Mem_Set((byte*)szDate, 0x00, sizeof(szDate));		
				Str_Cpy(szDate, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA4)));
				Str_Cat(szDate, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA5)));
				Str_Cat(szDate, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA6)));
//PRINT(">>>>>>>>>>>>>>>>>>>>>>>>>>>>szDate : %s",szDate,0,0);
				k = Str_AtoI(szDate);
			
				Load_Calendar_Card();
				d = CalendarDialog(&k);
				Unload_Calendar_Card();
				if(d == 0)
				{
					break;
				}
				else
				{
					Mem_Set((byte*)m_szVisitYmd, 0x00, sizeof(m_szVisitYmd));
					Mem_Set((byte*)szToday, 0x00, sizeof(szToday));
					Str_ItoA ( d, m_szVisitYmd, 10);
					Str_ItoA (Time_GetDate(), szToday, 10 );
					//if( Str_AtoI(szToday) <= Str_AtoI(m_szVisitYmd) )
					if( Str_Cmp(szToday, m_szVisitYmd) == 0 )
					{
						Mem_Set((byte*)szYear, 0x00, sizeof(szYear));
						Mem_Set((byte*)szMonth, 0x00, sizeof(szMonth));
						Mem_Set((byte*)szDay, 0x00, sizeof(szDay));
						Mem_Cpy((byte *)szYear, (byte *)m_szVisitYmd, 4);
						Mem_Cpy((byte *)szMonth, (byte *)m_szVisitYmd+4, 2);
						Mem_Cpy((byte *)szDay, (byte *)m_szVisitYmd+6, 2);
						
						EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA4), szYear );
						EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA5), szMonth );
						EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA6), szDay );

						//g_Str_DateType(szToday, m_szVisitYmd);
						//EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA21), szToday );
						SetActRow();
					}
					else
					{
						MessageBoxEx (WARNING_OK, "방문등록일이 잘못 설정되었습니다.\n 다시 설정해주세요.");
						SetActRow();
					}
				}
				break;
			case BID_OK3:
				ShowSip(FALSE);
				g_Sipflag = 0;
				
				if( Save_Addr() )
				{
					ON_EXIT();
					OnInit(INIT_MAIN);
				}
				break;
			case BID_BOX8:
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX8), CHKON);
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX9), CHKOFF);
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX10), CHKOFF);
				EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(EDT_DATA22), TXTFRCOLOR);
				EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(EDT_DATA23), TXTFRCOLOR);
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA22), FALSE );
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA23), FALSE );
				
				Str_Cpy(stScAddr.CURR_ADDR_RSLT, "10");
				m_lAddrFlag1 = 1;
				break;
			case BID_BOX9:
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX8), CHKOFF);
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX9), CHKON);
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX10), CHKOFF);
				EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(EDT_DATA22), RED);
				EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(EDT_DATA23), RED);
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA22), TRUE );
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA23), TRUE );
				
				Str_Cpy(stScAddr.CURR_ADDR_RSLT, "20");
				m_lAddrFlag1 = 1;
				break;
			case BID_BOX10:
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX8), CHKOFF);
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX9), CHKOFF);
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX10), CHKON);
				EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(EDT_DATA22), TXTFRCOLOR);
				EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(EDT_DATA23), TXTFRCOLOR);
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA22), FALSE );
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA23), FALSE );
				
				Str_Cpy(stScAddr.CURR_ADDR_RSLT, "30");
				m_lAddrFlag1 = 1;
				break;
			case BID_BOX11:
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX11), CHKON);
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX12), CHKOFF);
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX13), CHKOFF);
				EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(EDT_DATA24), TXTFRCOLOR);
				EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(EDT_DATA25), TXTFRCOLOR);
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA24), FALSE );
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA25), FALSE );
				
				Str_Cpy(stScAddr.NEW_ADDR_RSLT , "10");
				m_lAddrFlag2 = 1;
				break;
			case BID_BOX12:
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX11), CHKOFF);
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX12), CHKON);
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX13), CHKOFF);
				EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(EDT_DATA24), RED);
				EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(EDT_DATA25), RED);
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA24), TRUE );
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA25), TRUE );
				
				Str_Cpy(stScAddr.NEW_ADDR_RSLT , "20");
				m_lAddrFlag2 = 1;
				break;
			case BID_BOX13:
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX11), CHKOFF);
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX12), CHKOFF);
				ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX13), CHKON);
				EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(EDT_DATA24), TXTFRCOLOR);
				EditCtrl_SetForeColorEx(Get_hDlgCtrlByID(EDT_DATA25), TXTFRCOLOR);
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA24), FALSE );
				DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(EDT_DATA25), FALSE );
				
				Str_Cpy(stScAddr.NEW_ADDR_RSLT , "30");
				m_lAddrFlag2 = 1;
				break;				
			case BID_PREVPG:
				m_lpageV--;
				if(m_lpageV < 0)
				{
					m_lpageV = 0;
					//MessageBoxEx (CONFIRM_OK, "첫번째 페이지 입니다.");
					//VISIT_DRAW();
					break;
				}
				m_lSelIndexV = 0;
				VISIT_DRAW();
				break;
			case BID_NEXTPG:
				m_lpageV++ ;
				if( m_lpageV > m_lTotpageV-1 )
				{
					m_lpageV = m_lTotpageV-1;
					if(m_lpageV < 0)
					{
						m_lpageV = 0;
					}
					//MessageBoxEx (CONFIRM_OK, "마지막 페이지 입니다.");
					//VISIT_DRAW();
					break;
				}
				m_lSelIndexV = 0;
				VISIT_DRAW();
				break;
		}
	}
	
//-----------------------------------------------------------------------------------------
	void	OnSelect(long Index)
	{
		long index = -1;

		if( INIT_MAIN == m_bFirst )
		{
			//현재 TBL이 선택되었는지를 확인
			if (DlgTbl_IsSelect(ID_TBLLIST))
			{
				// 현재 선택된 인덱스
				index = DlgTbl_GetActiveRow(ID_TBLLIST);
				m_lSelIndex = index - 1;
				EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA9), DlgTbl_GetStr( ID_TBLLIST, m_lSelIndex, 2));
				EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA10), DlgTbl_GetStr( ID_TBLLIST, m_lSelIndex, 4));
				EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA11), DlgTbl_GetStr( ID_TBLLIST, m_lSelIndex, 5));
			}
		}
		else if( INIT_RFRMISSU == m_bFirst )
		{
			Str_Cpy(m_stNogoodCha.NOT_PERMIT_WHY, EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA1)));
			
			
		}
		else if(  INIT_RFRMVISIT == m_bFirst )
		{
			//현재 TBL이 선택되었는지를 확인
			if (DlgTbl_IsSelect(ID_TBLVISIT))
			{
				// 현재 선택된 인덱스
				index = DlgTbl_GetActiveRow(ID_TBLVISIT);
				m_lSelIndexV = index - 1;
			}
		}
	}

	/*=======================================================================================
	함수명 : SearchStr
	기  능 : 스트링으로 코드인덱스를 찾는다.
	Param  : 
	Return : 코드인덱스, 없으면 -1
	========================================================================================*/
	long	SearchStr( char *Str, CodeTable *CT)
	{
		long i;

		for ( i = 0 ; GM_CODE[i].Code[0] != 0 ; i++)
		{
			if( Str_Cmp(Str, CT[i].Str) == 0 )
				return i;
		}
		
		return -1;
	}
	
	/*=======================================================================================
	함수명 : SearchCD
	기  능 : 코드값으로 코드인덱스를 찾는다.
	Param  : 
	Return : 코드인덱스, 없으면 -1
	========================================================================================*/
	long	SearchCD( char *CD, CodeTable *CT)
	{
		long i;
		
		for(i = 0; CT[i].Code[0] != 0; i++)
		{	
			if ( Str_Cmp(CD, CT[i].Code) == 0)
				return i;
		}
		
		return -1;
	}


//-----------------------------------------------------------------------------------------
	void REDRAW(void)
	{
		long i, idx;
		char sztmp[101];
		char szAddr[250];
		char szDp[16];
		char szSql[200];
		handle hdb = NULL;
		handle hstmt = NULL;
		SQLITE sql = NewSqLite();
		
		hdb = sql->Open(sql);
		if( hdb == NULL )
		{
			goto Finally;
		}

		if( g_nAddrFlag == 0)
		{
hstmt = sql->CreateStatement(sql,
" SELECT OBJ_YM, CHK_ORDER, CUST_NM , FIRM_NM \
, ifnull(COUNTY,'') ||' '|| ifnull(TOWN,'') ||' '|| ifnull(VILLAGE,'') ||'- '|| ifnull(ADDR1_M,'') ||'-'|| ifnull(ADDR1_S,'') \
, Length(Trim(CO_LIVE_NM))+Length(Trim(BLD_NM)) \
, ifnull(CO_LIVE_NM,'')||' '||ifnull(BLD_NM,'')||'-'||ifnull(HOUSE_CNT,'') \
, ifnull(HOUSE_CNT,'')||' '||ifnull(LOT_NUM_SECOND_ADDR,'') \
, OWNHOUSE_TEL_DDD||'-'||OWNHOUSE_TEL_EXN||'-'||OWNHOUSE_TEL_NUM \
, CP_DDD||'-'||CP_EXN||'-'||CP_NUM FROM NORMAL_NOGOOD WHERE CHK_EXEC_NUM = ? "
);
		}
		else
		{
hstmt = sql->CreateStatement(sql,
" SELECT OBJ_YM, CHK_ORDER, CUST_NM , FIRM_NM \
, ifnull(COUNTY,'') ||' '|| NEW_ROAD_NM||' '||NEW_ADDR_M||'-'|| NEW_ADDR_S \
, Length(Trim(CO_LIVE_NM))+Length(Trim(BLD_NM)) \
, ifnull(CO_LIVE_NM,'')||' '||ifnull(BLD_NM,'')||'-'||ifnull(HOUSE_CNT,'') \
, ifnull(HOUSE_CNT,'')||' '||ifnull(LOT_NUM_SECOND_ADDR,'') \
, OWNHOUSE_TEL_DDD||'-'||OWNHOUSE_TEL_EXN||'-'||OWNHOUSE_TEL_NUM \
, CP_DDD||'-'||CP_EXN||'-'||CP_NUM FROM NORMAL_NOGOOD WHERE CHK_EXEC_NUM = ? "
);		
		}
				
		if( hstmt == NULL )
		{
			PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}
		
		i = 0;
		idx = 0;
		sql->Bind(sql, idx++, 'U', (long*)g_szCHK_EXEC_NUM, 12, DECRYPT);
		
		if(sql->Execute(sql) == FALSE)
		{
			PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}
		
		if( sql->Next(sql) == TRUE )
		{
			idx = 0;
			//점검년월
			Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
			sql->GetValue(sql, 0, 'U', (long*)sztmp, 7, DECRYPT);
			g_Str_DateType( szDp, sztmp);
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA1), szDp);
			//차수
			Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
			sql->GetValue(sql, 1, 'U', (long*)sztmp, 3, DECRYPT);
			if( Str_Cmp(sztmp, "10") == 0 )
				EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA2), "전반기");
			else if( Str_Cmp(sztmp, "70") == 0 )
				EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA2), "하반기");
			//고객명
			Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
			sql->GetValue(sql, 2, 'U', (long*)sztmp, 31, DECRYPT);
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA3), sztmp);
			//사업자명
			Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
			sql->GetValue(sql, 3, 'U', (long*)sztmp, 51, DECRYPT);
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA4), sztmp);
			
			//기본주소
			Mem_Set( (byte*)szAddr, 0x00, sizeof(szAddr) );
			sql->GetValue(sql, 4, 'U', (long*)szAddr, 100, DECRYPT);
			//EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA5), szAddr);
			//보여주는 주소 결정하는 값.
			Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
			sql->GetValue(sql, 5, 'U', (long*)sztmp, 100, DECRYPT);
			//상세주소
			if( Str_Cmp(sztmp, "0") == 0 )
			{
				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				sql->GetValue(sql, 7, 'U', (long*)sztmp, 100, DECRYPT);
				//EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA6), sztmp);
			}
			else
			{
				Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
				sql->GetValue(sql, 6, 'U', (long*)sztmp, 100, DECRYPT);
				//EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA6), sztmp);
			}
			Str_Cat(szAddr, sztmp);
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA5), szAddr);

			//자택번호
			Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
			sql->GetValue(sql, 8, 'U', (long*)sztmp, 13, DECRYPT);
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA7), sztmp);
			//핸드폰
			Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
			Mem_Set( (byte*)g_szCpNum, 0x00, sizeof(g_szCpNum) );
			sql->GetValue(sql, 9, 'U', (long*)sztmp, 13, DECRYPT);
			EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA8), sztmp);
			Str_Cpy(g_szCpNum, sztmp);
			Str_Chg(g_szCpNum, STRCHG_DEL_NONDIGIT);
		}

Finally:
		//sql->Commit(sql);
		DelSqLite(sql);

		//개선완료된 자료는 확인버튼을 막는다.
		Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
/*
		SPRINT(szSql, "SELECT BETTER_YN FROM NORMAL_NOGOOD_CHA WHERE CHK_EXEC_NUM = '%s' \
AND BETTER_ADVICE_DEGREE=(SELECT MAX(BETTER_ADVICE_DEGREE) FROM NORMAL_NOGOOD_CHA WHERE CHK_EXEC_NUM = '%s' ) "
,g_szCHK_EXEC_NUM, g_szCHK_EXEC_NUM, 0   );
*/

		SPRINT(szSql, "SELECT END_YN FROM NORMAL_NOGOOD WHERE CHK_EXEC_NUM = '%s' "
,g_szCHK_EXEC_NUM, 0, 0   );
		g_Sql_RetStr( szSql, 2, sztmp );

		if( sztmp[0] == 'Y')
		{
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_OK), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_OK), TRUE );
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_ISSUE), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_ISSUE), TRUE );
		}
		else
		{
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_OK), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_OK), FALSE );
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_ISSUE), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_ISSUE), FALSE );
		}
		
		if( m_IssueFlag == 1 )
		{
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_NOFIT), FALSE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_NOFIT), TRUE );
		}
		else
		{
			DlgCtrl_SetEnable(this->m_hDlg, Get_iDlgCtrlByID(BID_NOFIT), TRUE );
			DlgCtrl_SetGray( this->m_hDlg, Get_iDlgCtrlByID(BID_NOFIT), FALSE );
		}
			
		return;
	}
	
//-----------------------------------------------------------------------------------------
	void TBL_DRAW(void)
	{
		long i, idx;
		long k = ROW + 1;
		char sztmp[401];
		long lstartidx ;
		handle hdb = NULL;
		handle hstmt = NULL;
		SQLITE sql = NewSqLite();
		
		Mem_Set( (byte*)&stScNogoodCha, 0x00, sizeof(stScNogoodCha) );
		Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
		SPRINT(sztmp, "SELECT COUNT(*) FROM NORMAL_NOGOOD_CHA  WHERE CHK_EXEC_NUM = '%s' ",g_szCHK_EXEC_NUM, 0, 0   );
		g_Sql_RetInt( sztmp, &m_lTotpage );

		if( m_lTotpage % ROW > 0 )
		{
			m_lTotpage = (m_lTotpage / ROW) + 1;
		}
		else
		{
			m_lTotpage = m_lTotpage / ROW;
		}

		SPRINT(m_szCnt_page, "%d/%d", m_lpage+1, m_lTotpage, 0);
		
		hdb = sql->Open(sql);
		if( hdb == NULL )
		{
			goto Finally;
		}
		
		Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
		SPRINT(sztmp, "SELECT BETTER_ADVICE_DEGREE, BETTER_ADVICE_YMD, BETTER_ADVICE_EXPIRE, BETTER_YN, Trim(BETTER_END_YMD), UPD_EMPID \
						, INST_PLACE_NUM, OBJ_YM, CHK_TYPE, SUPPLY_STOP_YMD, NOT_PERMIT_WHY \
						, PRE_CHK_OBJ_YN, SEND_YN, PDA_IP, BLD_NUM, CHK_YEAR, CHK_ORDER, PLAN_YM  \
						FROM NORMAL_NOGOOD_CHA WHERE  CHK_EXEC_NUM = '%s' ORDER BY BETTER_ADVICE_DEGREE LIMIT ?, ? "
						, g_szCHK_EXEC_NUM, 0, 0);
						
		Str_Cpy(stScNogoodCha.CHK_EXEC_NUM, g_szCHK_EXEC_NUM);

		hstmt = sql->CreateStatement(sql, sztmp);
		if( hstmt == NULL )
		{
			PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}
		
		idx = 0;
		lstartidx = m_lpage*ROW;
		sql->Bind(sql, idx++, 'X', &lstartidx, 4, DECRYPT);
		i = m_lpage*ROW+ROW;
		sql->Bind(sql, idx++, 'X', &i, 4, DECRYPT);

		if(sql->Execute(sql) == FALSE)
		{
			PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}
		
		// 등록된 코드 리스트를 페이지에 맞게 보여준다.
		for (i=0 ; i<ROW ; i++)
		{
			//자료가 없을때 화면을 클리어 시킨다.
			if( k == i )
			{
				k++;
				DlgTbl_SetStr ( ID_TBLLIST, i, 0, "" );
				DlgTbl_SetStr ( ID_TBLLIST, i, 1, "" );
				DlgTbl_SetStr ( ID_TBLLIST, i, 2, "" );
				DlgTbl_SetStr ( ID_TBLLIST, i, 3, "" );
				DlgTbl_SetStr ( ID_TBLLIST, i, 4, "" );
				DlgTbl_SetStr ( ID_TBLLIST, i, 5, "" );
			}
			else
			{
				if(sql->Next(sql) == FALSE)
				{
					k = i + 1;
					DlgTbl_SetStr ( ID_TBLLIST, i, 0, "" );
					DlgTbl_SetStr ( ID_TBLLIST, i, 1, "" );
					DlgTbl_SetStr ( ID_TBLLIST, i, 2, "" );
					DlgTbl_SetStr ( ID_TBLLIST, i, 3, "" );
					DlgTbl_SetStr ( ID_TBLLIST, i, 4, "" );
					DlgTbl_SetStr ( ID_TBLLIST, i, 5, "" );
					continue;
				}
				//차수
				idx = 0;
				Mem_Set( (byte*)stScNogoodCha.BETTER_ADVICE_DEGREE, 0x00, sizeof(stScNogoodCha.BETTER_ADVICE_DEGREE) );
				sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.BETTER_ADVICE_DEGREE, 2+1, DECRYPT);
				DlgTbl_SetStr ( ID_TBLLIST, i, 0, stScNogoodCha.BETTER_ADVICE_DEGREE );
				//발급일자
				Mem_Set( (byte*)stScNogoodCha.BETTER_ADVICE_YMD, 0x00, sizeof(stScNogoodCha.BETTER_ADVICE_YMD) );
				sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.BETTER_ADVICE_YMD, 8+1, DECRYPT);
				g_Str_DateType( sztmp, stScNogoodCha.BETTER_ADVICE_YMD);
				DlgTbl_SetStr ( ID_TBLLIST, i, 1, sztmp );
				//개선권고기한
				Mem_Set( (byte*)stScNogoodCha.BETTER_ADVICE_EXPIRE, 0x00, sizeof(stScNogoodCha.BETTER_ADVICE_EXPIRE) );
				sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.BETTER_ADVICE_EXPIRE, 8+1, DECRYPT);
				g_Str_DateType( sztmp, stScNogoodCha.BETTER_ADVICE_EXPIRE);
				DlgTbl_SetStr ( ID_TBLLIST, i, 2, sztmp );			
				//여부
				Mem_Set( (byte*)stScNogoodCha.BETTER_YN, 0x00, sizeof(stScNogoodCha.BETTER_YN) );
				sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.BETTER_YN, 1+1, DECRYPT);
				if(stScNogoodCha.BETTER_YN[0] == 'Y')
					DlgTbl_SetStr ( ID_TBLLIST, i, 3, "개선" );
				else
					DlgTbl_SetStr ( ID_TBLLIST, i, 3,  "미개선");	
				
				//완료일자
				Mem_Set( (byte*)stScNogoodCha.BETTER_END_YMD, 0x00, sizeof(stScNogoodCha.BETTER_END_YMD) );
				sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.BETTER_END_YMD, 8+1, DECRYPT);
				g_Str_DateType( sztmp, stScNogoodCha.BETTER_END_YMD);
				DlgTbl_SetStr ( ID_TBLLIST, i, 4, sztmp );			
				//입력자명
				Mem_Set( (byte*)stScNogoodCha.UPD_EMPID, 0x00, sizeof(stScNogoodCha.UPD_EMPID) );
				sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.UPD_EMPID, 20+1, DECRYPT);
				DlgTbl_SetStr ( ID_TBLLIST, i, 5, stScNogoodCha.UPD_EMPID );
				
				if( i == 0 )
				{
					sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.INST_PLACE_NUM , 9 +1, DECRYPT);
					sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.OBJ_YM         , 6 +1, DECRYPT);
					sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.CHK_TYPE       , 2 +1, DECRYPT);
					sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.SUPPLY_STOP_YMD, 8 +1, DECRYPT);
					sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.NOT_PERMIT_WHY , 2 +1, DECRYPT);
					sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.PRE_CHK_OBJ_YN , 1 +1, DECRYPT);
					sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.SEND_YN        , 1 +1, DECRYPT);
					sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.PDA_IP         , 32+1, DECRYPT);
					sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.BLD_NUM        , 9 +1, DECRYPT);
					sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.CHK_YEAR       , 4 +1, DECRYPT);
					sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.CHK_ORDER      , 2 +1, DECRYPT);
					sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.PLAN_YM        , 6 +1, DECRYPT);
				}
			}
		}		
Finally:
		//sql->Commit(sql);
		DelSqLite(sql);

		SetActRow();

		ON_DRAW();
		return;
	}
	
//-----------------------------------------------------------------------------------------
	void ISSUE_DRAW(void)
	{
		long i = 0;
		long lDate;
		long lDegree = 0;
		char sztmp[100];
		char szWhy[10];
		char szYear[5];
		char szMonth[3];
		char szDay[3];
		
		Mem_Set((byte*)sztmp, 0x00, sizeof(sztmp) );
		lDate = Time_GetDate();
		Str_ItoA(lDate, m_stNogoodCha.BETTER_ADVICE_YMD, 10);
		g_Str_DateType( sztmp, m_stNogoodCha.BETTER_ADVICE_YMD);
		EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA17), sztmp);		//개선권고일자
		
		lDate = Time_DateUpDown(lDate, 30);
		Mem_Set((byte*)sztmp, 0x00, sizeof(sztmp) );
		Str_ItoA(lDate, m_stNogoodCha.BETTER_ADVICE_EXPIRE, 10);

		Mem_Set((byte*)szYear, 0x00, sizeof(szYear));
		Mem_Set((byte*)szMonth, 0x00, sizeof(szMonth));
		Mem_Set((byte*)szDay, 0x00, sizeof(szDay));
		Mem_Cpy((byte *)szYear, (byte *)m_stNogoodCha.BETTER_ADVICE_EXPIRE, 4);
		Mem_Cpy((byte *)szMonth, (byte *)m_stNogoodCha.BETTER_ADVICE_EXPIRE+4, 2);
		Mem_Cpy((byte *)szDay, (byte *)m_stNogoodCha.BETTER_ADVICE_EXPIRE+6, 2);
		
		EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA1), szYear );
		EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA2), szMonth );
		EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA3), szDay );

		//g_Str_DateType( sztmp, m_stNogoodCha.BETTER_ADVICE_EXPIRE);
		//EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA18), sztmp);		//개선권고기한
	
		lDegree = Str_AtoI(stScNogoodCha.BETTER_ADVICE_DEGREE) + 1;

		if( lDegree == 3)
		{
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA14), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA15), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA16), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(BID_STOP), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA1), TRUE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA1+1), TRUE);
		}
		else if( lDegree > 3 )
		{
			EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA15), stScNogoodCha.SUPPLY_STOP_YMD);
	
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA14), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA15), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA16), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(BID_STOP), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA1), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA1+1), FALSE);
		}
		else
		{
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA14), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA15), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(TXT_DATA16), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(BID_STOP), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA1), FALSE);
			DlgCtrl_SetVisible(this->m_hDlg, Get_iDlgCtrlByID(CMB_DATA1+1), FALSE);
		}
	}
	
//-----------------------------------------------------------------------------------------	
	void VISIT_DRAW(void)
	{
		long i, idx;
		long k = ROW_V + 1;
		long lstartidx ;
		long lDegree = 0;
		char szDp[11];
		char szZero[10];
		char sztmp[401];
		char szYear[5];
		char szMonth[3];
		char szDay[3];
		handle hdb = NULL;
		handle hstmt = NULL;
		SQLITE sql = NewSqLite();

		Mem_Set( (byte*)&stScVisit, 0x00, sizeof(stScVisit) );
		Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
		SPRINT(sztmp, "SELECT COUNT(*) FROM NORMAL_VISIT  WHERE CHK_EXEC_NUM = '%s' AND VISIT_FLAG='30' ",g_szCHK_EXEC_NUM, 0, 0   );
		g_Sql_RetInt( sztmp, &m_lTotpageV );

		if( m_lTotpageV % ROW_V > 0 )
		{
			m_lTotpageV = (m_lTotpageV / ROW_V) + 1;
		}
		else
		{
			m_lTotpageV = m_lTotpageV / ROW_V;
		}

		SPRINT(m_szCnt_page_V, "%d/%d", m_lpageV+1, m_lTotpageV, 0);
		
		hdb = sql->Open(sql);
		if( hdb == NULL )
		{
			goto Finally;
		}
		
		Str_Cpy(stScVisit.CHK_EXEC_NUM, g_szCHK_EXEC_NUM);
		//개선권고 Visit_Flag -> 30고정 ,, 점검시작 미점검 Visit_Flag -> 20고정
		Str_Cpy(stScVisit.VISIT_FLAG, "30");
		Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
		SPRINT(sztmp, "SELECT VISIT_DEGREE, VISIT_YMD, VISITOR_NM \
					, VISITOR_ID, SEND_YN, BLD_NUM, INST_PLACE_NUM, CHK_TYPE, CHK_YEAR, CHK_ORDER, OBJ_YM, PLAN_YM \
					FROM NORMAL_VISIT \
					WHERE CHK_EXEC_NUM = '%s' AND VISIT_FLAG = '%s' ORDER BY VISIT_DEGREE LIMIT ?, ? "
					, g_szCHK_EXEC_NUM, stScVisit.VISIT_FLAG, 0);

		hstmt = sql->CreateStatement(sql, sztmp);
		if( hstmt == NULL )
		{
			PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}
		
		idx = 0;
		lstartidx = m_lpageV*ROW_V;
		sql->Bind(sql, idx++, 'X', &lstartidx, 4, DECRYPT);
		i = m_lpageV*ROW_V+ROW_V;
		sql->Bind(sql, idx++, 'X', &i, 4, DECRYPT);
		
		if(sql->Execute(sql) == FALSE)
		{
			PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}
		
		// 등록된 코드 리스트를 페이지에 맞게 보여준다.
		for (i=0 ; i<ROW_V ; i++)
		{
			//자료가 없을때 화면을 클리어 시킨다.
			if( k == i )
			{
				k++;
				DlgTbl_SetStr ( ID_TBLVISIT, i, 0, "" );
				DlgTbl_SetStr ( ID_TBLVISIT, i, 1, "" );
				DlgTbl_SetStr ( ID_TBLVISIT, i, 2, "" );
			}
			else
			{
				if(sql->Next(sql) == FALSE)
				{
					k = i + 1;
					DlgTbl_SetStr ( ID_TBLVISIT, i, 0, "" );
					DlgTbl_SetStr ( ID_TBLVISIT, i, 1, "" );
					DlgTbl_SetStr ( ID_TBLVISIT, i, 2, "" );
					continue;
				}
				//차수
				idx = 0;
				Mem_Set( (byte*)stScVisit.VISIT_DEGREE, 0x00, sizeof(stScVisit.VISIT_DEGREE) );
				sql->GetValue(sql, idx++, 'U', (long*)stScVisit.VISIT_DEGREE, 2+1, DECRYPT);
				DlgTbl_SetStr ( ID_TBLVISIT, i, 0, stScVisit.VISIT_DEGREE );
				//방문일자
				Mem_Set( (byte*)stScVisit.VISIT_YMD, 0x00, sizeof(stScVisit.VISIT_YMD) );
				sql->GetValue(sql, idx++, 'U', (long*)stScVisit.VISIT_YMD, 8+1, DECRYPT);
				g_Str_DateType( sztmp, stScVisit.VISIT_YMD);
				DlgTbl_SetStr ( ID_TBLVISIT, i, 1, sztmp );
				//방문자명
				Mem_Set( (byte*)stScVisit.VISITOR_NM, 0x00, sizeof(stScVisit.VISITOR_NM) );
				sql->GetValue(sql, idx++, 'U', (long*)stScVisit.VISITOR_NM, 30+1, DECRYPT);
				DlgTbl_SetStr ( ID_TBLVISIT, i, 2, stScVisit.VISITOR_NM );			
				
				if( i == 0 )
				{
					sql->GetValue(sql, idx++, 'U', (long*)stScVisit.VISITOR_ID    , 9+1 , DECRYPT);
					sql->GetValue(sql, idx++, 'U', (long*)stScVisit.SEND_YN       , 1+1 , DECRYPT);
					sql->GetValue(sql, idx++, 'U', (long*)stScVisit.BLD_NUM       , 9+1 , DECRYPT);
					sql->GetValue(sql, idx++, 'U', (long*)stScVisit.INST_PLACE_NUM, 9+1 , DECRYPT);
					sql->GetValue(sql, idx++, 'U', (long*)stScVisit.CHK_TYPE      , 2+1 , DECRYPT);
					sql->GetValue(sql, idx++, 'U', (long*)stScVisit.CHK_YEAR      , 4+1 , DECRYPT);
					sql->GetValue(sql, idx++, 'U', (long*)stScVisit.CHK_ORDER     , 2+1 , DECRYPT);
					sql->GetValue(sql, idx++, 'U', (long*)stScVisit.OBJ_YM        , 6+1 , DECRYPT);
					sql->GetValue(sql, idx++, 'U', (long*)stScVisit.PLAN_YM       , 6+1 , DECRYPT);
				}
			}
		}		
Finally:
		//sql->Commit(sql);
		DelSqLite(sql);
		
		//차수 셋팅
		Mem_Set( (byte*)m_szVisitDegree, 0x00, sizeof(m_szVisitDegree) );
		Mem_Set( (byte*)szZero, 0x00, sizeof(szZero) );
		
		Str_Chg( stScVisit.VISIT_DEGREE, STRCHG_CONV_ZERO_TO_SPACE);
		Str_Chg( stScVisit.VISIT_DEGREE, STRCHG_DEL_NONDIGIT);
		lDegree = Str_AtoI(stScVisit.VISIT_DEGREE)+1;
		Str_ItoA(lDegree, m_szVisitDegree, 10);
		if( Str_AtoI(m_szVisitDegree) < 10 )
		{
			Str_Cpy(szZero, "0");
			Str_Cat(szZero, m_szVisitDegree);
			Str_Cpy(m_szVisitDegree, szZero);
			EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA23), m_szVisitDegree);
		}
		else
		{
			EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA23), m_szVisitDegree);
		}
		//방문일자 셋팅
		Mem_Set( (byte*)m_szVisitYmd, 0x00, sizeof(m_szVisitYmd) );
		Str_ItoA(Time_GetDate(), m_szVisitYmd, 10);
		Mem_Set((byte*)szYear, 0x00, sizeof(szYear));
		Mem_Set((byte*)szMonth, 0x00, sizeof(szMonth));
		Mem_Set((byte*)szDay, 0x00, sizeof(szDay));
		Mem_Cpy((byte *)szYear, (byte *)m_szVisitYmd, 4);
		Mem_Cpy((byte *)szMonth, (byte *)m_szVisitYmd+4, 2);
		Mem_Cpy((byte *)szDay, (byte *)m_szVisitYmd+6, 2);
		
		EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA4), szYear );
		EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA5), szMonth );
		EditCtrl_SetStr( Get_hDlgCtrlByID(EDT_DATA6), szDay );

		//g_Str_DateType(szDp, m_szVisitYmd);
		//EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA21), szDp);
		
		//액티브 row
		SetActRow();
		
		ON_DRAW();
		return;
	}
	
//-----------------------------------------------------------------------------------------
	void SetDataNogoodCha(void)
	{
		long i, idx;
		char sztmp[600];
		char szSql[200];
		long lstartidx ;
		handle hdb = NULL;
		handle hstmt = NULL;
		SQLITE sql = NewSqLite();
		
		Mem_Set( (byte*)&stScNogoodCha, 0x00, sizeof(stScNogoodCha) );
		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		SPRINT(szSql, "SELECT MAX(BETTER_ADVICE_DEGREE) FROM NORMAL_NOGOOD_CHA WHERE CHK_EXEC_NUM = '%s'", g_szCHK_EXEC_NUM, 0, 0   );
		g_Sql_RetStr( szSql, 5, stScNogoodCha.BETTER_ADVICE_DEGREE );

		hdb = sql->Open(sql);
		if( hdb == NULL )
		{
			goto Finally;
		}
		
		if( Str_AtoI(stScNogoodCha.BETTER_ADVICE_DEGREE) > 0 )
		{
			Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
			SPRINT(sztmp, "SELECT CHK_EXEC_NUM, BETTER_ADVICE_DEGREE, BETTER_ADVICE_YMD, BETTER_ADVICE_EXPIRE, BETTER_YN, BETTER_END_YMD, UPD_EMPID \
							, INST_PLACE_NUM, OBJ_YM, CHK_TYPE, SUPPLY_STOP_YMD, NOT_PERMIT_WHY \
							, PRE_CHK_OBJ_YN, SEND_YN, PDA_IP, BLD_NUM, CHK_YEAR, CHK_ORDER, PLAN_YM  \
							FROM NORMAL_NOGOOD_CHA WHERE CHK_EXEC_NUM = ? AND BETTER_ADVICE_DEGREE = '%s' "
							, stScNogoodCha.BETTER_ADVICE_DEGREE, 0, 0);
		}
		else
		{
			Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
			SPRINT(sztmp, "SELECT CHK_EXEC_NUM, BETTER_ADVICE_DEGREE, BETTER_ADVICE_YMD, BETTER_ADVICE_EXPIRE, BETTER_YN, BETTER_END_YMD, UPD_EMPID \
							, INST_PLACE_NUM, OBJ_YM, CHK_TYPE, SUPPLY_STOP_YMD, NOT_PERMIT_WHY \
							, PRE_CHK_OBJ_YN, SEND_YN, PDA_IP, BLD_NUM, CHK_YEAR, CHK_ORDER, PLAN_YM  \
							FROM NORMAL_NOGOOD_CHA WHERE CHK_EXEC_NUM = ? "
							, 0, 0, 0);
		}
		hstmt = sql->CreateStatement(sql, sztmp);
		if( hstmt == NULL )
		{
			PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}

		i = 0; 
		sql->Bind(sql, i++, 'U', (long*)&g_szCHK_EXEC_NUM , 12, DECRYPT);

		if(sql->Execute(sql) == FALSE)
		{
			PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}		
		
		if(sql->Next(sql) == TRUE)
		{		
			idx = 0;
			sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.CHK_EXEC_NUM		  , 12+1, DECRYPT);
			sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.BETTER_ADVICE_DEGREE  , 2 +1, DECRYPT);
			sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.BETTER_ADVICE_YMD	  , 8 +1, DECRYPT);
			sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.BETTER_ADVICE_EXPIRE  , 8 +1, DECRYPT);
			sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.BETTER_YN	   		  , 1 +1, DECRYPT);
			sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.BETTER_END_YMD 		  , 8 +1, DECRYPT);
			sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.UPD_EMPID	   		  , 20+1, DECRYPT);
			sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.INST_PLACE_NUM 		  , 9 +1, DECRYPT);
			sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.OBJ_YM         		  , 6 +1, DECRYPT);
			sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.CHK_TYPE       		  , 2 +1, DECRYPT);
			sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.SUPPLY_STOP_YMD		  , 8 +1, DECRYPT);
			sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.NOT_PERMIT_WHY 		  , 2 +1, DECRYPT);
			sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.PRE_CHK_OBJ_YN		  , 1 +1, DECRYPT);
			sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.SEND_YN        		  , 1 +1, DECRYPT);
			sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.PDA_IP         		  , 32+1, DECRYPT);
			sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.BLD_NUM        		  , 9 +1, DECRYPT);
			sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.CHK_YEAR       		  , 4 +1, DECRYPT);
			sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.CHK_ORDER      		  , 2 +1, DECRYPT);
			sql->GetValue(sql, idx++, 'U', (long*)stScNogoodCha.PLAN_YM        		  , 6 +1, DECRYPT);
		}
		else
		{
			PRINT("::sql->Next fail [%s]",sql->GetLastError(sql),0,0);
			goto Finally;
		}
		
Finally:
		//sql->Commit(sql);
		DelSqLite(sql);
		
		ON_DRAW();
		return;
	}
	
//-----------------------------------------------------------------------------------------	
	bool Save_Issue(void)
	{
		char szZero[10];
		char szDp[11];
		char szSql[200];
		long idx;
		long i;
		long lDegree = 0;
		long lCount;
		bool ret = TRUE;
		handle hdb = NULL;
		handle hstmt = NULL;
		SQLITE sql = NewSqLite();

		lCount = 0;
		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		SPRINT(szSql, " SELECT COUNT(*) FROM NORMAL_NOGOOD_DETAL WHERE CHK_EXEC_NUM ='%s' AND (BETTER_YN = 'N' OR BETTER_YN IS NULL) "
						, g_szCHK_EXEC_NUM, 0, 0);
		g_Sql_RetInt(szSql, &lCount);
		if( lCount == 0 )
		{
			MessageBoxEx (WARNING_OK, "부적합 사항이 존재하지 않습니다.\n 발행 할 수 없습니다.");
			ret = FALSE;
			goto Finally;
		}

		Str_Cpy(stScNogoodCha.CHK_EXEC_NUM, g_szCHK_EXEC_NUM);
		//차수증가
		Str_Chg( stScNogoodCha.BETTER_ADVICE_DEGREE, STRCHG_CONV_ZERO_TO_SPACE);
		Str_Chg( stScNogoodCha.BETTER_ADVICE_DEGREE, STRCHG_DEL_NONDIGIT);
		lDegree = Str_AtoI(stScNogoodCha.BETTER_ADVICE_DEGREE)+1;		
		Str_ItoA(lDegree, stScNogoodCha.BETTER_ADVICE_DEGREE, 10);
		if( Str_AtoI(stScNogoodCha.BETTER_ADVICE_DEGREE) < 10 )
		{
			Str_Cpy(szZero, "0");
			Str_Cat(szZero, stScNogoodCha.BETTER_ADVICE_DEGREE);
			Str_Cpy(stScNogoodCha.BETTER_ADVICE_DEGREE, szZero);
		}
		
		Str_Cpy(szDp, EditCtrl_GetStr(Get_hDlgCtrlByID(TXT_DATA17)));
		Str_Chg(szDp, STRCHG_DEL_NONDIGIT);
		Str_Cpy(stScNogoodCha.BETTER_ADVICE_YMD, szDp);

		Str_Cpy(stScNogoodCha.BETTER_ADVICE_EXPIRE, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA1)));
		Str_Cat(stScNogoodCha.BETTER_ADVICE_EXPIRE, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA2)));
		Str_Cat(stScNogoodCha.BETTER_ADVICE_EXPIRE, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA3)));
		Str_Chg(stScNogoodCha.BETTER_ADVICE_EXPIRE, STRCHG_DEL_NONDIGIT);
		Str_Chg( stScNogoodCha.BETTER_ADVICE_EXPIRE, STRCHG_DEL_NONDIGIT);
		//Str_Cpy( szDp, EditCtrl_GetStr(Get_hDlgCtrlByID(TXT_DATA18)));
		//Str_Chg( szDp, STRCHG_DEL_NONDIGIT);
		
		
		if( lDegree == 3 )
		{
			//공급중지일
			if( Str_Len(m_stNogoodCha.SUPPLY_STOP_YMD) > 0 )
			{
				Str_Cpy(stScNogoodCha.SUPPLY_STOP_YMD, m_stNogoodCha.SUPPLY_STOP_YMD);
			}
			else
			{
				Str_Cpy(stScNogoodCha.SUPPLY_STOP_YMD, "");
			}
			
			//중지불가사유
			if( Str_Len(m_stNogoodCha.NOT_PERMIT_WHY) > 0 )
			{
				i = SearchStr( EditCtrl_GetStr(Get_hDlgCtrlByID(CMB_DATA1)), SCNOSTOP_WHY );
				if (i == -1)
					Str_Cpy(stScNogoodCha.NOT_PERMIT_WHY, "");
				else
					Str_Cpy(stScNogoodCha.NOT_PERMIT_WHY, SCNOSTOP_WHY[i].Code);
			}
			
			if( Str_Len(stScNogoodCha.SUPPLY_STOP_YMD) > 0 && Str_Len(stScNogoodCha.NOT_PERMIT_WHY) > 0 )
			{
				MessageBoxEx (WARNING_OK, "공급중지일과 중단불가사유를 같이 입력 할 수 없습니다.\n 취소 후 다시 입력해주세요.");
				lDegree = Str_AtoI(stScNogoodCha.BETTER_ADVICE_DEGREE)-1;		
				Str_ItoA(lDegree, stScNogoodCha.BETTER_ADVICE_DEGREE, 10);
				ret = FALSE;
				goto Finally;
			}
			else if( Str_Len(stScNogoodCha.SUPPLY_STOP_YMD) == 0 && Str_Len(stScNogoodCha.NOT_PERMIT_WHY) == 0 )
			{
				MessageBoxEx (WARNING_OK, "공급중지일과 중단불가사유 중 하나를 입력해주세요.");
				lDegree = Str_AtoI(stScNogoodCha.BETTER_ADVICE_DEGREE)-1;		
				Str_ItoA(lDegree, stScNogoodCha.BETTER_ADVICE_DEGREE, 10);
				ret = FALSE;
				goto Finally;
			}
		}
		else
		{
			Str_Cpy(stScNogoodCha.SUPPLY_STOP_YMD, "");
			Str_Cpy(stScNogoodCha.NOT_PERMIT_WHY, "");
		}
		
		Str_Cpy(stScNogoodCha.BETTER_YN, "N");
		Str_Cpy(stScNogoodCha.SEND_YN, "S");
		
		hdb = sql->Open(sql);
		if( hdb == NULL )
		{
			lDegree = Str_AtoI(stScNogoodCha.BETTER_ADVICE_DEGREE)-1;		
			Str_ItoA(lDegree, stScNogoodCha.BETTER_ADVICE_DEGREE, 10);
			ret = FALSE;
			goto Finally;
		}

		hstmt = sql->CreateStatement(sql,
		"INSERT INTO NORMAL_NOGOOD_CHA \
		(BETTER_ADVICE_YMD, BETTER_ADVICE_EXPIRE, SUPPLY_STOP_YMD, NOT_PERMIT_WHY, CHK_EXEC_NUM, BETTER_ADVICE_DEGREE \
		, INST_PLACE_NUM, OBJ_YM, CHK_TYPE, BETTER_YN, BETTER_END_YMD,PRE_CHK_OBJ_YN, SEND_YN, PDA_IP, UPD_EMPID \
		, BLD_NUM, CHK_YEAR, CHK_ORDER, PLAN_YM ) \
		VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ? \
			 , ?, ?, ?, ?, ?, ?, ?, ?, ? )" 
		);
		if( hstmt == NULL )
		{
			lDegree = Str_AtoI(stScNogoodCha.BETTER_ADVICE_DEGREE)-1;		
			Str_ItoA(lDegree, stScNogoodCha.BETTER_ADVICE_DEGREE, 10);
			PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
			ret = FALSE;
			goto Finally;
		}

		idx = 0;
		sql->Bind(sql, idx++, 'U', (long *)stScNogoodCha.BETTER_ADVICE_YMD   ,8 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScNogoodCha.BETTER_ADVICE_EXPIRE,8 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScNogoodCha.SUPPLY_STOP_YMD     ,8 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScNogoodCha.NOT_PERMIT_WHY      ,2 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScNogoodCha.CHK_EXEC_NUM        ,12,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScNogoodCha.BETTER_ADVICE_DEGREE,2 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScNogoodCha.INST_PLACE_NUM      ,9 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScNogoodCha.OBJ_YM              ,6 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScNogoodCha.CHK_TYPE            ,2 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScNogoodCha.BETTER_YN           ,1 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScNogoodCha.BETTER_END_YMD      ,8 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScNogoodCha.PRE_CHK_OBJ_YN      ,1 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScNogoodCha.SEND_YN             ,1 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stUserinfo.szpda_ip		         ,15,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stUserinfo.szemployee_id          ,20,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScNogoodCha.BLD_NUM             ,9 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScNogoodCha.CHK_YEAR            ,4 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScNogoodCha.CHK_ORDER           ,2 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScNogoodCha.PLAN_YM             ,6 ,DECRYPT);

		if(sql->Execute(sql) == FALSE)
		{
			lDegree = Str_AtoI(stScNogoodCha.BETTER_ADVICE_DEGREE)-1;		
			Str_ItoA(lDegree, stScNogoodCha.BETTER_ADVICE_DEGREE, 10);
			PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
			ret = FALSE;
			goto Finally;
		}
		else
		{
			//개선권고 발행 완료. 발행 완료 후 화면을 나가기 전까지는 부적합상세버튼 disable
			m_IssueFlag = 1;
		}
		
Finally:
		//sql->Commit(sql);
		DelSqLite(sql);
		return ret;
	}
	
//-----------------------------------------------------------------------------------------	
//2016-02-16 Sanghyun Lee
//VISITOR_ID, VISITOR_NM -> 사용자 로그인ID, 사용자이름 넣어주면 됨.
	bool Save_Visit(void)
	{
		char szDate[10];
		char szTime[10];
		char szSql[300];
		char sztmp[10];
		long idx;
		long i;
		bool ret = TRUE;
		handle hdb = NULL;
		handle hstmt = NULL;
		SQLITE sql = NewSqLite();

		if( !Visit_Chk() )
		{
			ret = FALSE;
			goto Finally;
		}

		if( MessageBoxEx (CONFIRM_YESNO, "방문등록 하시겠습니까?") != MB_OK )
		{
			ret = FALSE;
			goto Finally;
		}
		
		Mem_Set( (byte*)szDate, 0x00, sizeof(szDate) );
		Str_ItoA(Time_GetDate(), szDate, 10);
		
		Mem_Set( (byte*)szTime, 0x00, sizeof(szTime) );
		g_Str_TimeType( szTime , Time_GetTime());
        Str_Chg(szTime, STRCHG_DEL_NONDIGIT);
        
		//방문차수
		Str_Cpy(stScVisit.VISIT_DEGREE, m_szVisitDegree);
		
		//방문일
		if( Str_Cmp(szDate, m_szVisitYmd) > 0 ||
			Str_Cmp(szDate, m_szVisitYmd) < 0 ||
			Str_Cmp(stScVisit.VISIT_YMD, m_szVisitYmd) > 0)
		{
			MessageBoxEx(WARNING_OK, "방문 일자를 확인해 주세요.");
			return FALSE;
		}
		else
		{
			Str_Cpy(stScVisit.VISIT_YMD, m_szVisitYmd);
		}
		
		//방문자명
		Str_Cpy(stScVisit.VISITOR_NM, stUserinfo.sznm_kor);
		
		//개선권고 VISIT_FLAG => 30 고정 
		Str_Cpy(stScVisit.VISIT_FLAG, "30");
		Str_Cpy(stScVisit.SEND_YN, "S");
		
		hdb = sql->Open(sql);
		if( hdb == NULL )
		{
			ret = FALSE;
			goto Finally;
		}

		hstmt = sql->CreateStatement(sql,
		"INSERT INTO NORMAL_VISIT \
		(CHK_EXEC_NUM, VISIT_FLAG, VISIT_DEGREE, VISITOR_ID, SEND_YN, VISIT_YMD, VISITOR_NM \
		, BLD_NUM, INST_PLACE_NUM, CHK_TYPE, CHK_YEAR, CHK_ORDER, OBJ_YM, PLAN_YM, UPD_EMPID, PDA_IP, VISIT_TIME ) \
		VALUES(?, ?, ?, ?, ?,  ?, ?, ?, ?, ? \
			 , ?, ?, ?, ?, ?, ?, ? )" 
		);
		
		if( hstmt == NULL )
		{
			PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
			ret = FALSE;
			goto Finally;
		}

		idx = 0;
		sql->Bind(sql, idx++, 'U', (long *)stScVisit.CHK_EXEC_NUM   ,12,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScVisit.VISIT_FLAG     ,2 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScVisit.VISIT_DEGREE   ,2 ,DECRYPT);
		//sql->Bind(sql, idx++, 'U', (long *)stScVisit.VISITOR_ID     ,9 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stUserinfo.szemployee_id ,9 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScVisit.SEND_YN        ,1 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScVisit.VISIT_YMD      ,8 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScVisit.VISITOR_NM     ,30,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScNogood.BLD_NUM       ,9 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScNogood.INST_PLACE_NUM,9 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScNogood.CHK_TYPE      ,2 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScNogood.CHK_YEAR      ,4 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScNogood.CHK_ORDER     ,2 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScNogood.OBJ_YM        ,6 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScNogood.PLAN_YM       ,6 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stUserinfo.szemployee_id ,9 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stUserinfo.szpda_ip      ,15 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)szTime                   ,20,DECRYPT);
		
		if(sql->Execute(sql) == FALSE)
		{
			PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
			ret = FALSE;
			goto Finally;
		}
		
Finally:
		//sql->Commit(sql);
		DelSqLite(sql);
		return ret;
	}
	
//-----------------------------------------------------------------------------------------	
//방문 등록 기본 데이터를 입력하기 위해 Nogood테이블의 필요 정보만 가져온다.
	void Set_Nogood(void)
	{
		long i;
		char sztmp[200];
		char szidx[10];
		handle hdb = NULL;
		handle hstmt = NULL;
		SQLITE sql = NewSqLite();

		Mem_Set((byte*)&stScNogood, 0x00, sizeof(stScNogood));
		hdb = sql->Open(sql);
		if( hdb == NULL )
		{
			goto Finally;
		}
		
		Mem_Set( (byte*)sztmp, 0x00, sizeof(sztmp) );
		SPRINT(sztmp, "SELECT BLD_NUM, INST_PLACE_NUM, CHK_TYPE, CHK_YEAR, CHK_ORDER, OBJ_YM, PLAN_YM, CONT_STS_CD \
					   FROM NORMAL_NOGOOD WHERE CHK_EXEC_NUM = '%s'"
					, g_szCHK_EXEC_NUM, 0, 0);
		
		hstmt = sql->CreateStatement(sql, sztmp);
		if( hstmt == NULL )
		{
			PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}
		
		i = 0;
		Mem_Set((byte*)szidx, 0x00, sizeof(szidx));
		Str_ItoA(g_lindex, szidx, 10);
		sql->Bind(sql, i++, 'U', (long*)&szidx , 4, DECRYPT);
		if(sql->Execute(sql) == FALSE)
		{
			PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}
		
		if(sql->Next(sql) == TRUE)
		{	
			i = 0;
			sql->GetValue( sql, i++, 'U', (long*) stScNogood.BLD_NUM             	, 9  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stScNogood.INST_PLACE_NUM      	, 9  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stScNogood.CHK_TYPE            	, 2  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stScNogood.CHK_YEAR            	, 4  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stScNogood.CHK_ORDER           	, 2  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stScNogood.OBJ_YM              	, 6  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stScNogood.PLAN_YM             	, 6  + 1, DECRYPT );
			sql->GetValue( sql, i++, 'U', (long*) stScNogood.CONT_STS_CD            , 2  + 1, DECRYPT );
		}

Finally:
		//sql->Commit(sql);
		DelSqLite(sql);
		return;
	}
	
	long SetAddr(void)
	{
		long i, idx = 0, ret = -1;
		char szSql[300];
		handle hdb = NULL;
		handle hstmt = NULL;
		SQLITE sql = NewSqLite();
		
		Mem_Set((byte*)&stScAddr, 0x00, sizeof(stScAddr));
		hdb = sql->Open(sql);
		if( hdb == NULL )
		{
			ret = -1;
			goto Finally;
		}
	
		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
				SPRINT(szSql, "SELECT BLD_NUM, NEW_ADDR_BLD_SEQ, ZIP_SEQ, TOWN, VILLAGE, HILL, ADDR1_M, ADDR1_S, CO_LIVE_NM \
				, BLD_NM, NEW_ROAD_NM, NEW_ADDR_M, NEW_ADDR_S, NEW_BLD_NM, BEFO_ADDR1_M, BEFO_ADDR1_S \
				, BEFO_NEW_ADDR_M, BEFO_NEW_ADDR_S, CURR_ADDR_RSLT, NEW_ADDR_RSLT, SEND_YN \
				FROM NORMAL_ADDR WHERE BLD_NUM = ? "
				, 0, 0, 0);

		hstmt = sql->CreateStatement(sql, szSql);
		if( hstmt == NULL )
		{
			ret = -1;
			PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
			goto Finally;
		}
		
		i = 0;
		sql->Bind(sql, i++, 'U', (long*)stScNogoodCha.BLD_NUM , 9, DECRYPT);

		if(sql->Execute(sql) == FALSE)
		{
			PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
			ret = -1;
			goto Finally;
		}
		
		if(sql->Next(sql) == TRUE)
		{	
			idx = 0;
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.BLD_NUM         , 9  + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.NEW_ADDR_BLD_SEQ, 10 + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.ZIP_SEQ         , 10 + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.TOWN            , 30 + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.VILLAGE         , 30 + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.HILL            , 3  + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.ADDR1_M         , 4  + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.ADDR1_S         , 4  + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.CO_LIVE_NM      , 60 + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.BLD_NM          , 150+ 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.NEW_ROAD_NM     , 50 + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.NEW_ADDR_M      , 4  + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.NEW_ADDR_S      , 4  + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.NEW_BLD_NM      , 150+ 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.BEFO_ADDR1_M    , 4  + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.BEFO_ADDR1_S    , 4  + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.BEFO_NEW_ADDR_M , 4  + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.BEFO_NEW_ADDR_S , 4  + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.CURR_ADDR_RSLT  , 2  + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.NEW_ADDR_RSLT   , 2  + 1, DECRYPT );
			sql->GetValue( sql, idx++, 'U', (long*) stScAddr.SEND_YN         , 1  + 1, DECRYPT );
		}
Finally:
		//sql->Commit(sql);
		DelSqLite(sql);
		ret = 1;
		if(idx == 0)
		{
			ret = -1;
			MessageBoxEx (CONFIRM_OK, "검색된 주소 정보가 없습니다.");
			ON_EXIT();
			OnInit(INIT_MAIN);
		}
		
		return ret;	
	}
	
	
	
	/*=======================================================================================
	함수명 : 
	기  능 : 
	Param  : 
 	Return : TOWN+" "+VILLAGE+" "+HILL
	========================================================================================*/	
	void ADDR_DRAW(void)
	{
		char szAddr[100];
			
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA68), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA69), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA70), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA71), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA72), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA73), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA74), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA75), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA76), EDITALIGN_CENTER|EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA77), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA78), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA79), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA80), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA81), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA82), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(TXT_DATA83), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA22), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA23), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA24), EDITALIGN_MIDDLE);
		EditCtrl_SetAlign( Get_hDlgCtrlByID(EDT_DATA25), EDITALIGN_MIDDLE);
			
			
		EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA69), stSc.BLD_NUM);
		
		//구주소
		Mem_Set((byte*)szAddr, 0x00, sizeof(szAddr));
		
		Str_Cpy(szAddr, stScAddr.TOWN);
		if(Str_Len(stScAddr.VILLAGE) > 0)
		{
			Str_Cat(szAddr, " ");
			Str_Cat(szAddr, stScAddr.VILLAGE);
		}
		if(Str_Len(stScAddr.HILL) > 0)
		{
			Str_Cat(szAddr, " ");
			Str_Cat(szAddr, stScAddr.HILL);
		}
		EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA71), szAddr);
		
		Str_Cpy(szAddr, stScAddr.CO_LIVE_NM);
		if(Str_Len(stScAddr.BLD_NM) > 0)
		{
			Str_Cat(szAddr, " ");
			Str_Cat(szAddr, stScAddr.BLD_NM);
		}
		EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA82), szAddr);
		
		EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA22), stScAddr.ADDR1_M);
		EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA23), stScAddr.ADDR1_S);
		
		//신주소
		EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA77), stScAddr.NEW_ROAD_NM);
		EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA24), stScAddr.NEW_ADDR_M);
		EditCtrl_SetStr(Get_hDlgCtrlByID(EDT_DATA25), stScAddr.NEW_ADDR_S);
		EditCtrl_SetStr(Get_hDlgCtrlByID(TXT_DATA83), stScAddr.NEW_BLD_NM);
		
		if( Str_Cmp(stScAddr.CURR_ADDR_RSLT, "10") == 0  )
		{
			m_lAddrFlag1 = 1;
			ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX8), CHKON);
		}
		else if( Str_Cmp(stScAddr.CURR_ADDR_RSLT, "20") == 0  )
		{
			m_lAddrFlag1 = 1;
			ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX9), CHKON);
		}
		else if( Str_Cmp(stScAddr.CURR_ADDR_RSLT, "30") == 0  )
		{
			m_lAddrFlag1 = 1;
			ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX10), CHKON);
		}
		if( Str_Cmp(stScAddr.NEW_ADDR_RSLT, "10") == 0  )
		{
			m_lAddrFlag2 = 1;
			ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX11), CHKON);
		}
		else if( Str_Cmp(stScAddr.NEW_ADDR_RSLT, "20") == 0  )
		{
			m_lAddrFlag2 = 1;
			ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX12), CHKON);
		}
		else if( Str_Cmp(stScAddr.NEW_ADDR_RSLT, "30") == 0  )
		{
			m_lAddrFlag2 = 1;
			ButCtrl_SetText(Get_hDlgCtrlByID(BID_BOX13), CHKON);
		}
		
		
	}
	
	/*=======================================================================================
	함수명 : Save_Addr
	기  능 : 주소확인
	Param  : 
	Return :
	========================================================================================*/	
	bool Save_Addr(void)
	{
		char szSql[100];
		long idx;
		bool ret = TRUE;
		handle hdb = NULL;
		handle hstmt = NULL;
		SQLITE sql = NewSqLite();
/*
		if(m_lAddrFlag1 == 0 || m_lAddrFlag2 == 0)
		{
			MessageBoxEx (CONFIRM_OK, "주소를 확인해주세요.");
			return FALSE;
		}
*/
		if(m_lAddrFlag1 == 0)
		{
			MessageBoxEx (CONFIRM_OK, "지번주소 확인결과가 입력되지 않았습니다.");
			return FALSE;
		}
		else if(m_lAddrFlag2 == 0)
		{
			MessageBoxEx (CONFIRM_OK, "새주소 확인결과가 입력되지 않았습니다.");
			return FALSE;
		}


		Str_Cpy(stScAddr.ADDR1_M, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA22)) );
		Str_Cpy(stScAddr.ADDR1_S, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA23)) );
		Str_Cpy(stScAddr.NEW_ADDR_M, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA24)) );
		Str_Cpy(stScAddr.NEW_ADDR_S, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA25)) );
		Str_Cpy(stScAddr.SEND_YN, "S");
		
		hdb = sql->Open(sql);
		if( hdb == NULL )
		{
			ret = FALSE;
			goto Finally;
		}

		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		SPRINT(szSql, "UPDATE NORMAL_ADDR SET ADDR1_M =?, ADDR1_S =?, NEW_ADDR_M =?, NEW_ADDR_S =?, CURR_ADDR_RSLT =?, NEW_ADDR_RSLT =? \
						,	SEND_YN =? WHERE BLD_NUM = '%s' "
					, stScNogoodCha.BLD_NUM, 0, 0);
		hstmt = sql->CreateStatement(sql, szSql);
		if( hstmt == NULL )
		{
			PRINT("::SQL_CreateStatement fail [%s]", sql->GetLastError(sql), 0, 0);
			ret = FALSE;
			goto Finally;
		}
		
		idx = 0;
		sql->Bind(sql, idx++, 'U', (long *)stScAddr.ADDR1_M        	,4 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScAddr.ADDR1_S        	,4 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScAddr.NEW_ADDR_M     	,4 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScAddr.NEW_ADDR_S     	,4 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScAddr.CURR_ADDR_RSLT 	,2 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScAddr.NEW_ADDR_RSLT  	,2 ,DECRYPT);
		sql->Bind(sql, idx++, 'U', (long *)stScAddr.SEND_YN        	,1 ,DECRYPT);

		if(sql->Execute(sql) == FALSE)
		{
			PRINT("::SQL_Execute fail [%s]", sql->GetLastError(sql), 0, 0);
			ret = FALSE;
			goto Finally;
		}
		
Finally:
		//sql->Commit(sql);
		DelSqLite(sql);
		return ret;
	}
	
	
//---------------------------------------------------------------------
	void SetActRow(void)
	{
		if( m_bFirst == INIT_MAIN )
		{
			if( m_lTotpage > 0 )
			{
				if( m_lSelIndex == -1 )
				{
					m_lSelIndex = 0;
				}
	
				DlgTbl_SetActive(ID_TBLLIST , m_lSelIndex+1 );
				DlgTbl_SetRowColor(ID_TBLLIST, m_lSelIndex+1, TABLEACTIVE_COLOR);
				
				EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA9), DlgTbl_GetStr( ID_TBLLIST, m_lSelIndex, 2));
				EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA10), DlgTbl_GetStr( ID_TBLLIST, m_lSelIndex, 4));
				EditCtrl_SetStr( Get_hDlgCtrlByID(TXT_DATA11), DlgTbl_GetStr( ID_TBLLIST, m_lSelIndex, 5));
			}
		}
		else if( m_bFirst == INIT_RFRMVISIT )
		{
			if( m_lTotpageV > 0 )
			{
				if( m_lSelIndexV == -1 )
				{
					m_lSelIndexV = 0;
				}
	
				DlgTbl_SetActive(ID_TBLVISIT , m_lSelIndexV+1 );
				DlgTbl_SetRowColor(ID_TBLVISIT, m_lSelIndexV+1, TABLEACTIVE_COLOR);
			}
		}
	}
	
	
//-------------------------------------------------------------------------------------------------
	void Save_Result(void)
	{
		char szSql[300];
		char szDegree[10];
		char szTmp[10];
	
		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		Mem_Set( (byte*)szDegree, 0x00, sizeof(szDegree) );
		SPRINT(szSql, "SELECT MAX(BETTER_ADVICE_DEGREE) FROM NORMAL_NOGOOD_CHA WHERE CHK_EXEC_NUM = '%s'", g_szCHK_EXEC_NUM, 0, 0   );
		g_Sql_RetStr( szSql, 5, szDegree );

		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		Mem_Set( (byte*)szTmp, 0x00, sizeof(szTmp) );
		SPRINT(szSql, "SELECT BETTER_YN FROM NORMAL_NOGOOD_CHA WHERE CHK_EXEC_NUM = '%s' AND BETTER_ADVICE_DEGREE = '%s' ", g_szCHK_EXEC_NUM, szDegree, 0   );
		g_Sql_RetStr( szSql, 5, szTmp );		

		if( Str_Cmp(szTmp, "Y") == 0 )
		{
			Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
			SPRINT(szSql, "UPDATE NORMAL_NOGOOD SET UPD_EMPID = '%s', PDA_IP = '%s', SEND_YN = 'S', END_YN = 'Y' WHERE CHK_EXEC_NUM = '%s' "
			, stUserinfo.szemployee_id, stUserinfo.szpda_ip, g_szCHK_EXEC_NUM );

			g_Sql_DirectExecute( szSql );
		}
		else
		{
			Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
			SPRINT(szSql, "UPDATE NORMAL_NOGOOD SET UPD_EMPID = '%s', PDA_IP = '%s', SEND_YN = 'S', END_YN = 'S' WHERE CHK_EXEC_NUM = '%s' "
			,stUserinfo.szemployee_id, stUserinfo.szpda_ip, g_szCHK_EXEC_NUM   );
			
			g_Sql_DirectExecute( szSql );
		}
		
		return;
	}

//----------------------------------------------------------------------------------------------------
	bool Visit_Chk(void)
	{
		bool ret = TRUE;
		char szSql[300];
		char szTmp[20];
		long lCnt;

		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		Mem_Set( (byte*)szTmp, 0x00, sizeof(szTmp) );
		SPRINT(szSql, "SELECT BETTER_YN FROM NORMAL_NOGOOD_CHA WHERE CHK_EXEC_NUM = '%s' \
AND BETTER_ADVICE_DEGREE=(SELECT MAX(BETTER_ADVICE_DEGREE) FROM NORMAL_NOGOOD_CHA WHERE CHK_EXEC_NUM = '%s' ) "
,g_szCHK_EXEC_NUM, g_szCHK_EXEC_NUM, 0   );
		g_Sql_RetStr( szSql, 2, szTmp );
		
		if( szTmp[0] == 'Y')
		{
			MessageBoxEx(CONFIRM_OK, "개선완료된 대상입니다.");
			ret = FALSE;
			return ret;
		}

		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		Mem_Set( (byte*)szTmp, 0x00, sizeof(szTmp) );
		Str_ItoA(Time_GetDate(), szTmp, 10);
		Str_Chg(szTmp, STRCHG_DEL_NONDIGIT);
		SPRINT(szSql, "SELECT COUNT(*) FROM NORMAL_VISIT WHERE CHK_EXEC_NUM = '%s' AND VISIT_YMD = '%s' AND VISIT_FLAG= '30' ", g_szCHK_EXEC_NUM, szTmp, 0   );
		g_Sql_RetInt( szSql, &lCnt );
		
		if( lCnt > 0 )
		{
			MessageBoxEx (CONFIRM_OK, "당일에 1회이상 방문등록 불가 합니다.");
			ret = FALSE;
			return ret;
		}
		
		return ret;
	}
	
//-------------------------------------------------------------------------------------------------

	/** 전송문자 내용 **/
	
	// -부적합-
	// 1. xxxx년 xx월 xx일(점검일) 귀 댁의 안전점검 결과 부적합 사항이 발생되어 안내드리오니 조속한 개선을 요청드립니다.
	// 2. 부적합내용 : NOT_PASS_ITEM_NM(부적합항목)
	//    개선기한 : xxxx.xx.xx
	// 3. 서울도시가스 xxx 고객센터
    //    안전점검원 : xxx(xxx-xxxx-xxxx)
    //    *업무시간만 통화가능합니다.
    //    (09시~18시)
    
    // -개선권고-
	// 1. xxxx년 xx월 xx일(점검일) 귀 댁의 안전점검 결과 개선권고 사항이 발생되어 안내드리오니 조속한 개선을 요청드립니다.
	// 2. 개선권고내용 : NOT_PASS_ITEM_NM(개선권고항목)
	//    개선기한 : xxxx.xx.xx
	// 3. 서울도시가스 xxx 고객센터
    //    안전점검원 : xxx(xxx-xxxx-xxxx)
    //    *업무시간만 통화가능합니다.
    //    (09시~18시)
    
    // -부적합+개선권고-
	// 1. xxxx년 xx월 xx일(점검일) 귀 댁의 안전점검 결과 부적합, 개선권고 사항이 발생되어 안내드리오니 조속한 개선을 요청드립니다.
	// 2. 부적합내용 : NOT_PASS_ITEM_NM(부적합항목)
	//    개선권고내용 : NOT_PASS_ITEM_NM(개선권고항목)
	//    개선기한 : xxxx.xx.xx
	// 3. 서울도시가스 xxx 고객센터
    //    안전점검원 : xxx(xxx-xxxx-xxxx)
 	//    *업무시간만 통화가능합니다.
    //    (09시~18시)
    
    // -(가스누출, 플러그마감미비)-
	// 1. xxxx년 xx월 xx일(점검일) 귀 댁의 안전점검 결과 부적합 사항이 발생되어 안내드리오니 조속한 개선을 요청드립니다.
	// 2. 부적합내용 : (가스누출, 플러그마감미비)
	//    개선기한 : 즉시개선요망
	// 3. 서울도시가스 xxx 고객센터
    //    안전점검원 : xxx(xxx-xxxx-xxxx)
    //    *업무시간만 통화가능합니다.
    //    (09시~18시)
    
    // -부적합+(가스누출, 플러그마감미비)-
	// 1. xxxx년 xx월 xx일(점검일) 귀 댁의 안전점검 결과 부적합 사항이 발생되어 안내드리오니 조속한 개선을 요청드립니다.
	// 2. 부적합내용 : NOT_PASS_ITEM_NM(부적합항목)
	//    개선기한 : xxxx.xx.xx
	// 3. 부적합내용 : (가스누출, 플러그마감미비)
	//    개선기한 : 즉시개선요망
	// 4. 서울도시가스 xxx 고객센터
    //    안전점검원 : xxx(xxx-xxxx-xxxx)
    //    *업무시간만 통화가능합니다.
    //    (09시~18시)
    
    // -개선권고+(가스누출, 플러그마감미비)-
	// 1. xxxx년 xx월 xx일(점검일) 귀 댁의 안전점검 결과 부적합, 개선권고 사항이 발생되어 안내드리오니 조속한 개선을 요청드립니다.
	// 2. 개선권고내용 : NOT_PASS_ITEM_NM(개선권고항목)
	//    개선기한 : xxxx.xx.xx
	// 3. 부적합내용 : (가스누출, 플러그마감미비)
	//    개선기한 : 즉시개선요망
	// 4. 서울도시가스 xxx 고객센터
    //    안전점검원 : xxx(xxx-xxxx-xxxx)
    //    *업무시간만 통화가능합니다.
    //    (09시~18시)
    
    // -부적합+개선권고+(가스누출, 플러그마감미비)-
	// 1. xxxx년 xx월 xx일(점검일) 귀 댁의 안전점검 결과 부적합, 개선권고 사항이 발생되어 안내드리오니 조속한 개선을 요청드립니다.
	// 2. 부적합내용 : NOT_PASS_ITEM_NM(부적합항목)
	//    개선권고내용 : NOT_PASS_ITEM_NM(개선권고항목)
	//    개선기한 : xxxx.xx.xx
	// 3. 부적합내용 : (가스누출, 플러그마감미비)
	//    개선기한 : 즉시개선요망
	// 4. 서울도시가스 xxx 고객센터
    //    안전점검원 : xxx(xxx-xxxx-xxxx)
	//    *업무시간만 통화가능합니다.
    //    (09시~18시)
    
	long Snd_Sms(void)
	{
		char szSql[800];
		char szMsg[300];
		char szMsg2[300];
		char szCustTel[20];
		char szUserTel[20];
		char szUserTel2[20];
		char szNogoodMsg[1500];
		char szNogoodMsg2[1500];
		char szNogoodItem[200];
		char szNogoodItem2[200];
		char szPlanYmd[20];
		char szDate[20];
		char szYear[20];
		char szMonth[20];
		char szDay[20];
		char szNogoodDate[30];
		
		char szRecvTelDdd[6];
		char szRecvTelExn[6];
		char szRecvTelNum[6];
		
		long lNogoodCnt = 0;
		long lNogoodCnt2 = 0;
		long lNogoodCnt3 = 0;
		long lPlanYmdCnt = 0;
		long idx, i, j;
		long lret = -1;
		long lTime = 100;
		
		long lChkCnt1 = 0;
		long lChkCnt2 = 0;
		
		handle hdb = NULL;
		handle hstmt = NULL;
		
		SQLITE sql = NewSqLite();
		
		long ijk = 0;
		
		/*******************************************************************/
		/* 전화번호 세팅                                                   */
		/*******************************************************************/
		Mem_Set( (byte*)szUserTel, 0x00, sizeof(szUserTel) );
		Tapi_GetPhoneNum( (byte*)szUserTel, 0);
		Str_Chg( szUserTel, STRCHG_DEL_NONDIGIT);

		// 테스트 문자 수신 번호 입력
		//Mem_Set( (byte*)szCustTel, 0x00, sizeof(szCustTel) );
		//Str_Cpy(szCustTel, "01023100247");
		
		// 운영적용 문자 수신 번호.
		Mem_Set( (byte*)szCustTel, 0x00, sizeof(szCustTel) );
		Str_Cpy(szCustTel, g_szCpNum);
		Str_Chg( szCustTel, STRCHG_DEL_NONDIGIT);

		// 최종 전화번호 체크 로직
		Mem_Set( (byte*)m_szReceiver_Tel, 0x00, sizeof(m_szReceiver_Tel) );
		Str_Cpy(m_szReceiver_Tel, szCustTel);
		
		Mem_Set((byte*)szRecvTelDdd, 0x00, sizeof(szRecvTelDdd));	
		Mem_Set((byte*)szRecvTelExn, 0x00, sizeof(szRecvTelExn));	
		Mem_Set((byte*)szRecvTelNum, 0x00, sizeof(szRecvTelNum));
		Analy_Phone(m_szReceiver_Tel, szRecvTelDdd, szRecvTelExn, szRecvTelNum);
		
		if( !g_CheckPhoneNumberFormat( szRecvTelExn, szRecvTelNum) )
		{
			return -1;
		}
		
	    /*******************************************************************/
		/* 1.부적합/개선권고 시작 문자                                     */
		/*******************************************************************/
		Mem_Set( (byte*)szDate, 0x00, sizeof(szDate) );
		Str_ItoA(Time_GetDate(), szDate, 10);
		Mem_Cpy((byte *)szYear, (byte *)szDate, 4);
		Mem_Cpy((byte *)szMonth, (byte *)szDate+4, 2);
		Mem_Cpy((byte *)szDay, (byte *)szDate+6, 2);
		
		// 보일러서류미접수 외 COUNT
		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		SPRINT(szSql, "SELECT COUNT(1) FROM NORMAL_NOGOOD_DETAL WHERE CHK_EXEC_NUM = '%s' AND ( CHK_SEC_CD <> '90' OR NOT_PASS_ITEM_CD <> '80') AND BETTER_YN <> 'Y' ", g_szCHK_EXEC_NUM, 0, 0 );
		g_Sql_RetInt( szSql, &lChkCnt1 );
		
		// 보일러서류미접수 COUNT
		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		SPRINT(szSql, "SELECT COUNT(1) FROM NORMAL_NOGOOD_DETAL WHERE CHK_EXEC_NUM = '%s' AND ( CHK_SEC_CD = '90' AND NOT_PASS_ITEM_CD = '80') AND BETTER_YN <> 'Y' ", g_szCHK_EXEC_NUM, 0, 0 );
		g_Sql_RetInt( szSql, &lChkCnt2 );
		
		Mem_Set( (byte*)szNogoodMsg, 0x00, sizeof(szNogoodMsg) );

		if( lChkCnt1 == 0 && lChkCnt2 > 0 ) // 개선권고
		{
			SPRINT( szNogoodMsg, "%s년 %s월 %s일(점검일) 귀 댁의 안전점검 결과 개선권고 사항이 발생되어 안내드리오니 조속한 개선을 요청드립니다.", szYear, szMonth, szDay );
		}
		else if( lChkCnt1 > 0 &&  lChkCnt2 == 0 ) // 부적합
		{
			SPRINT( szNogoodMsg, "%s년 %s월 %s일(점검일) 귀 댁의 안전점검 결과 부적합 사항이 발생되어 안내드리오니 조속한 개선을 요청드립니다.", szYear, szMonth, szDay );
		}
		else // 부적합, 개선권고
		{
			SPRINT( szNogoodMsg, "%s년 %s월 %s일(점검일) 귀 댁의 안전점검결과 부적합,개선권고사항이 발생되어 안내드리오니 조속한 개선을 요청드립니다.", szYear, szMonth, szDay );
		}
		
		/*******************************************************************/
		/* 2.부적합/개선권고 상세 문자                                     */
		/*******************************************************************/
		
		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		SPRINT(szSql, " SELECT COUNT(1) \
		                  FROM NORMAL_NOGOOD_DETAL \
		                 WHERE CHK_EXEC_NUM = '%s' \
		                   AND NOT ( CHK_SEC_CD = '90' AND NOT_PASS_ITEM_CD = '80' ) \
						   AND NOT ( CHK_SEC_CD = '50' AND NOT_PASS_ITEM_CD = '50' ) \
						   AND NOT ( CHK_SEC_CD = '60' AND NOT_PASS_ITEM_CD = '50' ) \
						   AND NOT ( CHK_SEC_CD = '60' AND NOT_PASS_ITEM_CD = '60' ) \
						   AND BETTER_YN <> 'Y' ", g_szCHK_EXEC_NUM, 0, 0 );
		g_Sql_RetInt( szSql, &lNogoodCnt );
		
		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		SPRINT(szSql, " SELECT COUNT(1) \
						  FROM NORMAL_NOGOOD_DETAL \
					 	 WHERE CHK_EXEC_NUM = '%s' \
						   AND ( CHK_SEC_CD = '90' AND NOT_PASS_ITEM_CD = '80' ) \
						   AND BETTER_YN <> 'Y' ", g_szCHK_EXEC_NUM, 0, 0 );
		g_Sql_RetInt( szSql, &lNogoodCnt2 );
		
		/************** 2-1.부적합 상세문자 **************/
		if( lNogoodCnt > 0 || lNogoodCnt2 > 0 )
		{
			Str_Cat( szNogoodMsg, "\n");
			
			Mem_Set( (byte*)szNogoodMsg2, 0x00, sizeof(szNogoodMsg2) );
			Mem_Set( (byte*)szNogoodItem, 0x00, sizeof(szNogoodItem) );
			Mem_Set( (byte*)szNogoodItem2, 0x00, sizeof(szNogoodItem2) );
				
			for(i = 0 ; i < lNogoodCnt ; i++)
			{
				Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
				Mem_Set( (byte*)szNogoodItem, 0x00, sizeof(szNogoodItem) );
				
				SPRINT(szSql, " SELECT NOT_PASS_ITEM_NM \
							 	  FROM NORMAL_NOGOOD_DETAL \
								 WHERE CHK_EXEC_NUM = '%s' \
								   AND NOT ( CHK_SEC_CD = '90' AND NOT_PASS_ITEM_CD = '80' ) \
								   AND NOT ( CHK_SEC_CD = '50' AND NOT_PASS_ITEM_CD = '50' ) \
								   AND NOT ( CHK_SEC_CD = '60' AND NOT_PASS_ITEM_CD = '50' ) \
								   AND NOT ( CHK_SEC_CD = '60' AND NOT_PASS_ITEM_CD = '60' ) \
								   AND BETTER_YN <> 'Y' LIMIT %d, 1 ", g_szCHK_EXEC_NUM, i, 0 );
				g_Sql_RetStr( szSql, 50, szNogoodItem );
				
				if( i == 0 )
				{
					Str_Cat(szNogoodMsg, "부적합 내용 : ");
					Str_Cat(szNogoodMsg, szNogoodItem);
	
					if( lNogoodCnt > 1 )
					{
						Str_Cat(szNogoodMsg, ", ");
					}
				}
				else
				{
					Str_Cat(szNogoodMsg, szNogoodItem);
					
					if( i < lNogoodCnt-1 )
					{
						Str_Cat(szNogoodMsg, ", ");
					}
				}
			}
			
			if( lNogoodCnt > 0 && lNogoodCnt2 > 0 )
			{
				Str_Cat(szNogoodMsg, "\n");
			}
				
			/************** 2-2.개선 상세문자 **************/
			for( i = 0; i < lNogoodCnt2; i++ )
			{
				Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
				Mem_Set( (byte*)szNogoodItem2, 0x00, sizeof(szNogoodItem2) );
	
				SPRINT( szSql, " SELECT NOT_PASS_ITEM_NM \
								   FROM NORMAL_NOGOOD_DETAL \
								  WHERE CHK_EXEC_NUM = '%s' \
								    AND ( CHK_SEC_CD = '90' AND NOT_PASS_ITEM_CD = '80' ) \
								    AND BETTER_YN <> 'Y' LIMIT %d, 1", g_szCHK_EXEC_NUM, i, 0 );
				g_Sql_RetStr( szSql, 50, szNogoodItem2 );
				
				if( i == 0 )
				{
					Str_Cpy(szNogoodMsg2, "개선권고내용 : ");
					Str_Cat(szNogoodMsg2, szNogoodItem2);
	
					if( lNogoodCnt2 > 1 )
					{
						Str_Cat(szNogoodMsg2, ", ");
					}
				}
				else
				{
					Str_Cat(szNogoodMsg2, szNogoodItem2);
					
					if( i < lNogoodCnt2-1 )
					{
						Str_Cat(szNogoodMsg2, ", ");
					}
				}	
			}
			
			Str_Cat(szNogoodMsg, szNogoodMsg2);
			Str_Cat(szNogoodMsg, "\n");
			
			/************** 2-3.개선기한 **************/
				
			Mem_Set( (byte*)szDate, 0x00, sizeof(szDate) );
			Str_Cpy(szDate, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA1)));
			Str_Cat(szDate, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA2)));
			Str_Cat(szDate, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA3)));
			Str_Chg(szDate, STRCHG_DEL_NONDIGIT);
			
			Str_Cat(szNogoodMsg, "개선기한 : ");
			
			Mem_Set( (byte*)szNogoodDate, 0x00, sizeof(szNogoodDate) );
			g_Str_DateType(szNogoodDate, szDate);
			Str_Cat(szNogoodMsg, szNogoodDate);
		}
		
		
		/*******************************************************************/
		/* 3.가스누출, 플러그마감미비                                      */
		/*******************************************************************/
		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		SPRINT( szSql, " SELECT COUNT(1) \
						   FROM NORMAL_NOGOOD_DETAL \
						  WHERE CHK_EXEC_NUM = '%s' \
						    AND ( ( CHK_SEC_CD = '50' AND NOT_PASS_ITEM_CD = '50' ) \
							 OR   ( CHK_SEC_CD = '60' AND NOT_PASS_ITEM_CD = '50' ) \
							 OR   ( CHK_SEC_CD = '60' AND NOT_PASS_ITEM_CD = '60' ) ) \
							AND BETTER_YN <> 'Y' ", g_szCHK_EXEC_NUM, 0, 0 );
		g_Sql_RetInt( szSql, &lNogoodCnt3 );
		
		if( lNogoodCnt3 > 0 )
		{
			Str_Cat( szNogoodMsg, "\n");
			 
			Mem_Set( (byte*)szNogoodItem, 0x00, sizeof(szNogoodItem) );
			
			/************** 3-1.가스누출, 플러그마감미비 상세문자 **************/
			for( i = 0; i < lNogoodCnt3; i++ )
			{
				Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
				Mem_Set( (byte*)szNogoodItem, 0x00, sizeof(szNogoodItem) );
				
				SPRINT( szSql, " SELECT CASE WHEN ( CHK_SEC_CD = '50' AND NOT_PASS_ITEM_CD = '50' ) OR ( CHK_SEC_CD = '60' AND NOT_PASS_ITEM_CD = '60' ) THEN CHK_SEC_NM || ' ' || NOT_PASS_ITEM_NM \
									         ELSE NOT_PASS_ITEM_NM \
									     END AS NOT_PASS_ITEM_NM \
								   FROM NORMAL_NOGOOD_DETAL \
								  WHERE CHK_EXEC_NUM = '%s' \
								    AND ( ( CHK_SEC_CD = '50' AND NOT_PASS_ITEM_CD = '50' ) \
									 OR   ( CHK_SEC_CD = '60' AND NOT_PASS_ITEM_CD = '50' ) \
									 OR   ( CHK_SEC_CD = '60' AND NOT_PASS_ITEM_CD = '60' ) ) \
									AND BETTER_YN <> 'Y' LIMIT %d, 1 ", g_szCHK_EXEC_NUM, i, 0 );
				
				g_Sql_RetStr( szSql, 50, szNogoodItem );
				
				if( i == 0 )
				{	
					Str_Cat(szNogoodMsg, "부적합내용 : ");	
					Str_Cat(szNogoodMsg, szNogoodItem);
			
					if( lNogoodCnt3 > 1 )
					{
						Str_Cat(szNogoodMsg, ", ");
					}
				}
				else
				{
					Str_Cat(szNogoodMsg, szNogoodItem);
			
					if( i < lNogoodCnt3-1 )
					{
						Str_Cat(szNogoodMsg, ", ");
					}
				}	
			}
	
			Str_Cat(szNogoodMsg, "\n");
			
			/************** 3-2.가스누출, 플러그마감미비 개선기한 **************/
			Str_Cat(szNogoodMsg, "개선기한 : 즉시개선요망");
		}
		
		/*******************************************************************/
		/* 4.점검원 소속                                                   */
		/*******************************************************************/
		Mem_Set( (byte*)szMsg, 0x00, sizeof(szMsg) );
		Mem_Set( (byte*)szMsg2, 0x00, sizeof(szMsg2) );
		Mem_Set( (byte*)szUserTel2, 0x00, sizeof(szUserTel2) );

		g_FormatPhoneNumber(szUserTel, szUserTel2);	
		
		SPRINT(szMsg, "\n서울도시가스 %s 고객센터", stUserinfo.szcenter_nm, 0, 0);
		// SPRINT(szMsg2, "\n안전점검원 : %s(%s)\n*업무시간만 통화가능합니다.\n(09시~18시)", stUserinfo.sznm_kor, szUserTel2, 0);
		SPRINT(szMsg2, "\n안전점검원 : %s(%s)\n*문의전화는 업무시간(09시~18시)에 해주시면 감사하겠습니다.", stUserinfo.sznm_kor, szUserTel2, 0);
		SPRINT(szMsg2, "\n가스앱 설치 : http://bit.ly/3adhNwn", 0, 0, 0);

		// Str_Cat( m_szMsg[2], "\n▣ 설치방법" ); 
		// Str_Cat( m_szMsg[2], "\n  ▷http://bit.ly/3adhNwn" ); 
		// Str_Cat( m_szMsg[2], "\n  ▷앱스토어(아이폰, 안드로이드)에서［가스앱］설치" );
		
		Str_Cat(szMsg, szMsg2);
		Str_Cat(szNogoodMsg, szMsg);
		
		//HIST
		Mem_Set( (byte*)m_szSms_Desc, 0x00, sizeof(m_szSms_Desc) );
		Str_Cpy(m_szSms_Desc, szNogoodMsg);
		
		lret = Tapi_SendSmsEx(szCustTel, szUserTel, szNogoodMsg, Str_Len(szNogoodMsg) );
		
		if(lret != 0)
		{
			switch(lret)
			{
				case -1:
					MessageBoxEx (WARNING_OK, "메시지 받을 전화 번호가 잘못되었습니다.");
					return lret;
				case -2:
					MessageBoxEx (WARNING_OK, "응답을 받을 전화번호가 잘못되었습니다.");
					return lret;
				case -3:
					MessageBoxEx (WARNING_OK, "내용이 비었습니다.");
					return lret;
				case -4:
					MessageBoxEx (WARNING_OK, "내용이 너무 깁니다.");
					return lret;
				default:
					MessageBoxEx (WARNING_OK, "메세지 전송에 실패했습니다.");
					return lret;
			}
		}
		
		VmSleep(lTime);
		
		/*******************************************************************/
		/* 2.부적합/개선권고 상세 문자                                     */
		/*******************************************************************/
		
		/* 필요없어 보여서 제외함
		Mem_Set( (byte*)szPlanYmd, 0x00, sizeof(szPlanYmd) );
		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		SPRINT(szSql, "SELECT BETTER_PLAN_YMD FROM NORMAL_NOGOOD_DETAL WHERE CHK_EXEC_NUM = '%s' GROUP BY BETTER_PLAN_YMD LIMIT %d, 1",g_szCHK_EXEC_NUM, i, 0 );
		g_Sql_RetStr( szSql, 20, szPlanYmd );
		*/
		
		/*
		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		SPRINT(szSql, " SELECT COUNT(1) \
		                  FROM NORMAL_NOGOOD_DETAL \
		                 WHERE CHK_EXEC_NUM = '%s' \
		                   AND NOT ( CHK_SEC_CD = '90' AND NOT_PASS_ITEM_CD = '80' ) \
						   AND NOT ( CHK_SEC_CD = '50' AND NOT_PASS_ITEM_CD = '50' ) \
						   AND NOT ( CHK_SEC_CD = '60' AND NOT_PASS_ITEM_CD = '50' ) \
						   AND NOT ( CHK_SEC_CD = '60' AND NOT_PASS_ITEM_CD = '60' ) \
						   AND BETTER_YN <> 'Y' ", g_szCHK_EXEC_NUM, 0, 0 );
		g_Sql_RetInt( szSql, &lNogoodCnt );
		
		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		SPRINT(szSql, " SELECT COUNT(1) \
						  FROM NORMAL_NOGOOD_DETAL \
					 	 WHERE CHK_EXEC_NUM = '%s' \
						   AND ( CHK_SEC_CD = '90' AND NOT_PASS_ITEM_CD = '80' ) \
						   AND BETTER_YN <> 'Y' ", g_szCHK_EXEC_NUM, 0, 0 );
		g_Sql_RetInt( szSql, &lNogoodCnt2 );
		*/
		
		/************** 2-1.부적합 상세문자 **************/
		/*
		if( lNogoodCnt > 0 || lNogoodCnt2 > 0 )
		{
			Mem_Set( (byte*)szNogoodMsg, 0x00, sizeof(szNogoodMsg) );
			Mem_Set( (byte*)szNogoodMsg2, 0x00, sizeof(szNogoodMsg2) );
			Mem_Set( (byte*)szNogoodItem, 0x00, sizeof(szNogoodItem) );
			Mem_Set( (byte*)szNogoodItem2, 0x00, sizeof(szNogoodItem2) );
				
			for(i = 0 ; i < lNogoodCnt ; i++)
			{
				Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
				Mem_Set( (byte*)szNogoodItem, 0x00, sizeof(szNogoodItem) );
				
				SPRINT(szSql, " SELECT NOT_PASS_ITEM_NM \
							 	  FROM NORMAL_NOGOOD_DETAL \
								 WHERE CHK_EXEC_NUM = '%s' \
								   AND NOT ( CHK_SEC_CD = '90' AND NOT_PASS_ITEM_CD = '80' ) \
								   AND NOT ( CHK_SEC_CD = '50' AND NOT_PASS_ITEM_CD = '50' ) \
								   AND NOT ( CHK_SEC_CD = '60' AND NOT_PASS_ITEM_CD = '50' ) \
								   AND NOT ( CHK_SEC_CD = '60' AND NOT_PASS_ITEM_CD = '60' ) \
								   AND BETTER_YN <> 'Y' LIMIT %d, 1 ", g_szCHK_EXEC_NUM, i, 0 );
				g_Sql_RetStr( szSql, 50, szNogoodItem );
				
				if( i == 0 )
				{
					Str_Cpy(szNogoodMsg, "부적합 내용 : ");
					Str_Cat(szNogoodMsg, szNogoodItem);
	
					if( lNogoodCnt > 1 )
					{
						Str_Cat(szNogoodMsg, ", ");
					}
				}
				else
				{
					Str_Cat(szNogoodMsg, szNogoodItem);
					
					if( i < lNogoodCnt-1 )
					{
						Str_Cat(szNogoodMsg, ", ");
					}
				}
			}
			
			if( lNogoodCnt > 0 && lNogoodCnt2 > 0 )
			{
				Str_Cat(szNogoodMsg, "\n");
			}
			*/
			
			/************** 2-2.개선 상세문자 **************/
			/*
			for( i = 0; i < lNogoodCnt2; i++ )
			{
				Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
				Mem_Set( (byte*)szNogoodItem2, 0x00, sizeof(szNogoodItem2) );
	
				SPRINT( szSql, " SELECT NOT_PASS_ITEM_NM \
								   FROM NORMAL_NOGOOD_DETAL \
								  WHERE CHK_EXEC_NUM = '%s' \
								    AND ( CHK_SEC_CD = '90' AND NOT_PASS_ITEM_CD = '80' ) \
								    AND BETTER_YN <> 'Y' LIMIT %d, 1", g_szCHK_EXEC_NUM, i, 0 );
				g_Sql_RetStr( szSql, 50, szNogoodItem2 );
				
				if( i == 0 )
				{
					Str_Cpy(szNogoodMsg2, "개선권고내용 : ");
					Str_Cat(szNogoodMsg2, szNogoodItem2);
	
					if( lNogoodCnt2 > 1 )
					{
						Str_Cat(szNogoodMsg2, ", ");
					}
				}
				else
				{
					Str_Cat(szNogoodMsg2, szNogoodItem2);
					
					if( i < lNogoodCnt2-1 )
					{
						Str_Cat(szNogoodMsg2, ", ");
					}
				}	
			}
			
			Str_Cat(szNogoodMsg, szNogoodMsg2);
			Str_Cat(szNogoodMsg, "\n");
			*/
			/************** 2-3.개선기한 **************/
			/*	
			Mem_Set( (byte*)szDate, 0x00, sizeof(szDate) );
			Str_Cpy(szDate, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA1)));
			Str_Cat(szDate, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA2)));
			Str_Cat(szDate, EditCtrl_GetStr(Get_hDlgCtrlByID(EDT_DATA3)));
			Str_Chg(szDate, STRCHG_DEL_NONDIGIT);
			
			Str_Cat(szNogoodMsg, "개선기한 : ");
			
			Mem_Set( (byte*)szNogoodDate, 0x00, sizeof(szNogoodDate) );
			g_Str_DateType(szNogoodDate, szDate);
			Str_Cat(szNogoodMsg, szNogoodDate);
			
			Str_Cat(m_szSms_Desc, "\n");
			Str_Cat(m_szSms_Desc, szNogoodMsg);
			
			lret = Tapi_SendSmsEx(szCustTel, szUserTel, szNogoodMsg, Str_Len(szNogoodMsg) );
			
			if(lret != 0)
			{
				switch(lret)
				{
					case -1:
						MessageBoxEx (WARNING_OK, "메시지 받을 전화 번호가 잘못되었습니다.");
						return lret;
					case -2:
						MessageBoxEx (WARNING_OK, "응답을 받을 전화번호가 잘못되었습니다.");
						return lret;
					case -3:
						MessageBoxEx (WARNING_OK, "내용이 비었습니다.");
						return lret;
					case -4:
						MessageBoxEx (WARNING_OK, "내용이 너무 깁니다.");
						return lret;
					default:
						MessageBoxEx (WARNING_OK, "메세지 전송에 실패했습니다.");
						return lret;
				}
			}
			
			VmSleep(lTime);	
		}
		*/
		
		/*******************************************************************/
		/* 3.가스누출, 플러그마감미비                                      */
		/*******************************************************************/
		/*
		Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
		SPRINT( szSql, " SELECT COUNT(1) \
						   FROM NORMAL_NOGOOD_DETAL \
						  WHERE CHK_EXEC_NUM = '%s' \
						    AND ( ( CHK_SEC_CD = '50' AND NOT_PASS_ITEM_CD = '50' ) \
							 OR   ( CHK_SEC_CD = '60' AND NOT_PASS_ITEM_CD = '50' ) \
							 OR   ( CHK_SEC_CD = '60' AND NOT_PASS_ITEM_CD = '60' ) ) \
							AND BETTER_YN <> 'Y' ", g_szCHK_EXEC_NUM, 0, 0 );
		g_Sql_RetInt( szSql, &lNogoodCnt3 );
		
		if( lNogoodCnt3 > 0 )
		{
			Mem_Set( (byte*)szNogoodMsg, 0x00, sizeof(szNogoodMsg) );
			Mem_Set( (byte*)szNogoodItem, 0x00, sizeof(szNogoodItem) );
			*/
			/************** 3-1.가스누출, 플러그마감미비 상세문자 **************/
			/*
			for( i = 0; i < lNogoodCnt3; i++ )
			{
				Mem_Set( (byte*)szSql, 0x00, sizeof(szSql) );
				Mem_Set( (byte*)szNogoodItem, 0x00, sizeof(szNogoodItem) );
				
				SPRINT( szSql, " SELECT CASE WHEN ( CHK_SEC_CD = '50' AND NOT_PASS_ITEM_CD = '50' ) OR ( CHK_SEC_CD = '60' AND NOT_PASS_ITEM_CD = '60' ) THEN CHK_SEC_NM || ' ' || NOT_PASS_ITEM_NM \
									         ELSE NOT_PASS_ITEM_NM \
									     END AS NOT_PASS_ITEM_NM \
								   FROM NORMAL_NOGOOD_DETAL \
								  WHERE CHK_EXEC_NUM = '%s' \
								    AND ( ( CHK_SEC_CD = '50' AND NOT_PASS_ITEM_CD = '50' ) \
									 OR   ( CHK_SEC_CD = '60' AND NOT_PASS_ITEM_CD = '50' ) \
									 OR   ( CHK_SEC_CD = '60' AND NOT_PASS_ITEM_CD = '60' ) ) \
									AND BETTER_YN <> 'Y' LIMIT %d, 1 ", g_szCHK_EXEC_NUM, i, 0 );
				
				g_Sql_RetStr( szSql, 50, szNogoodItem );
				
				if( i == 0 )
				{	
					Str_Cpy(szNogoodMsg, "부적합내용 : ");	
					Str_Cat(szNogoodMsg, szNogoodItem);
			
					if( lNogoodCnt3 > 1 )
					{
						Str_Cat(szNogoodMsg, ", ");
					}
				}
				else
				{
					Str_Cat(szNogoodMsg, szNogoodItem);
			
					if( i < lNogoodCnt3-1 )
					{
						Str_Cat(szNogoodMsg, ", ");
					}
				}	
			}
	
			Str_Cat(szNogoodMsg, "\n");
			*/
			
			/************** 3-2.가스누출, 플러그마감미비 개선기한 **************/
			/*
			Str_Cat(szNogoodMsg, "개선기한 : 즉시개선요망");
			
			Str_Cat(m_szSms_Desc, "\n");
			Str_Cat(m_szSms_Desc, szNogoodMsg);
			
			lret = Tapi_SendSmsEx(m_szReceiver_Tel, szUserTel, szNogoodMsg, Str_Len(szNogoodMsg) );
			
			if(lret != 0)
			{
				switch(lret)
				{
					case -1:
						MessageBoxEx (WARNING_OK, "메시지 받을 전화 번호가 잘못되었습니다.");
						return lret;
					case -2:
						MessageBoxEx (WARNING_OK, "응답을 받을 전화번호가 잘못되었습니다.");
						return lret;
					case -3:
						MessageBoxEx (WARNING_OK, "내용이 비었습니다.");
						return lret;
					case -4:
						MessageBoxEx (WARNING_OK, "내용이 너무 깁니다.");
						return lret;
					default:
						MessageBoxEx (WARNING_OK, "메세지 전송에 실패했습니다.");
						return lret;
				}
			}
			
			VmSleep(lTime);
		}
		*/
		/*******************************************************************/
		/* 4.점검원 소속                                                   */
		/*******************************************************************/
		/*
		Mem_Set( (byte*)szMsg, 0x00, sizeof(szMsg) );
		Mem_Set( (byte*)szMsg2, 0x00, sizeof(szMsg2) );
		Mem_Set( (byte*)szUserTel2, 0x00, sizeof(szUserTel2) );

		g_FormatPhoneNumber(szUserTel, szUserTel2);	
		
		SPRINT(szMsg, "서울도시가스 %s 고객센터\n", stUserinfo.szcenter_nm, 0, 0);
		SPRINT(szMsg2, "안전점검원 : %s(%s)\n*업무시간만 통화가능합니다.\n(09시~18시)", stUserinfo.sznm_kor, szUserTel2, 0);
		
		Str_Cat(szMsg, szMsg2);
		Str_Cat(m_szSms_Desc, "\n");
		Str_Cat(m_szSms_Desc, szMsg);
		
		lret = Tapi_SendSmsEx(m_szReceiver_Tel, szUserTel, szMsg, Str_Len(szMsg) );
		
		if(lret != 0)
		{
			switch(lret)
			{
				case -1:
					MessageBoxEx (WARNING_OK, "메시지 받을 전화 번호가 잘못되었습니다.");
					return lret;
				case -2:
					MessageBoxEx (WARNING_OK, "응답을 받을 전화번호가 잘못되었습니다.");
					return lret;
				case -3:
					MessageBoxEx (WARNING_OK, "내용이 비었습니다.");
					return lret;
				case -4:
					MessageBoxEx (WARNING_OK, "내용이 너무 깁니다.");
					return lret;
				default:
					MessageBoxEx (WARNING_OK, "메세지 전송에 실패했습니다.");
					return lret;
			}
		}
		
		VmSleep(lTime);
		*/
		
		lret = 1;
		
		return lret;
	}

	//------------------------------------------------------------------------------------------
	long Snd_Sms_Hist(void)
	{
		char szTmp[800];
		char szUrl[200];
		char szbuf[128];
		char szUsecontnum[20];
		char szCustnum[20];
		char szSendYmd[20];
		char szSendTime[10];
		char szSendDtm[50];
		char szSendTelDdd[6];
		char szSendTelExn[6];
		char szSendTelNum[6];
		char szRecvTelDdd[6];
		char szRecvTelExn[6];
		char szRecvTelNum[6];
		char* sndbuf;
		long i = 0;
		long ntotcnt = 0;
		long nLen = 0;
		long ret = 0;
	
		Mem_Set((byte*)szUsecontnum, 0x00, sizeof(szUsecontnum));	
		Mem_Set((byte*)szCustnum, 0x00, sizeof(szCustnum));	
		Mem_Set((byte*)szSendYmd, 0x00, sizeof(szSendYmd));	
		Mem_Set((byte*)szSendTime, 0x00, sizeof(szSendTime));	
		Mem_Set((byte*)szSendDtm, 0x00, sizeof(szSendDtm));	
		Mem_Set((byte*)szSendTelDdd, 0x00, sizeof(szSendTelDdd));	
		Mem_Set((byte*)szSendTelExn, 0x00, sizeof(szSendTelExn));	
		Mem_Set((byte*)szSendTelNum, 0x00, sizeof(szSendTelNum));	
		Mem_Set((byte*)szRecvTelDdd, 0x00, sizeof(szRecvTelDdd));	
		Mem_Set((byte*)szRecvTelExn, 0x00, sizeof(szRecvTelExn));	
		Mem_Set((byte*)szRecvTelNum, 0x00, sizeof(szRecvTelNum));	
		
		//g_szCHK_EXEC_NUM
		Mem_Set( (byte*)szTmp, 0x00, sizeof(szTmp) );
		SPRINT(szTmp, "SELECT USE_CONT_NUM FROM NORMAL_NOGOOD WHERE CHK_EXEC_NUM = '%s' ",g_szCHK_EXEC_NUM, 0, 0   );
		g_Sql_RetStr( szTmp, 20, szUsecontnum );

		//g_szCHK_EXEC_NUM
		Mem_Set( (byte*)szTmp, 0x00, sizeof(szTmp) );
		SPRINT(szTmp, "SELECT CUST_NUM FROM NORMAL_NOGOOD WHERE CHK_EXEC_NUM = '%s' ",g_szCHK_EXEC_NUM, 0, 0   );
		g_Sql_RetStr( szTmp, 20, szCustnum );

		Str_ItoA(Time_GetDate(), szSendYmd, 10);
		
		Mem_Set((byte*)szTmp, 0x00, sizeof(szTmp));	
		//Str_ItoA(Time_GetTime(), szTmp, 10);
		g_Str_TimeType( szTmp , Time_GetTime());
		Str_Chg(szTmp, STRCHG_DEL_NONDIGIT);
		Mem_Cpy((byte*)szSendTime, (byte*)szTmp, 4);
		
		Str_Cpy(szSendDtm, szSendYmd);
		Str_Cat(szSendDtm, szTmp);
//PRINT("szTmp : %s , szSendTime : %s , szSendDtm : %s",szTmp,szSendTime,szSendDtm);
		Mem_Set( (byte*)szTmp, 0x00, sizeof(szTmp) );
		Tapi_GetPhoneNum( (byte*)szTmp, 0);
		ret = Analy_Phone(szTmp, szSendTelDdd, szSendTelExn, szSendTelNum);
		if( ret < 0 )
		{
			MessageBoxEx (WARNING_OK, "사용자번호를 확인해주세요.");
			return -1;
		}

		Analy_Phone(m_szReceiver_Tel, szRecvTelDdd, szRecvTelExn, szRecvTelNum);
		if( ret < 0 )
		{
			MessageBoxEx (WARNING_OK, "고객번호를 확인해주세요.");
			return -1;
		}
		
		if( g_pjcomm != NULL)
		{
			JSON_Finalize( g_pjcomm );
			g_pjcomm = NULL;
		}		
		g_pjcomm = g_CreateJsonHead(g_pjcomm, szUrl, 312400, FALSE);

		JSON_SetValue( g_pjcomm, 'C', "center_cd",          stUserinfo.szcenter_cd);
		JSON_SetValue( g_pjcomm, 'C', "use_cont_num",       szUsecontnum);
		JSON_SetValue( g_pjcomm, 'C', "cust_num",        	szCustnum);
		JSON_SetValue( g_pjcomm, 'C', "send_ymd",           szSendYmd);
		JSON_SetValue( g_pjcomm, 'C', "send_time",          szSendTime);
		JSON_SetValue( g_pjcomm, 'C', "send_dtm",           szSendDtm);
		JSON_SetValue( g_pjcomm, 'C', "send_tel_ddd",       szSendTelDdd);
		JSON_SetValue( g_pjcomm, 'C', "send_tel_exn",       szSendTelExn);
		JSON_SetValue( g_pjcomm, 'C', "send_tel_num",       szSendTelNum);
		JSON_SetValue( g_pjcomm, 'C', "receiver_tel_ddd",   szRecvTelDdd);
		JSON_SetValue( g_pjcomm, 'C', "receiver_tel_exn",   szRecvTelExn);
		JSON_SetValue( g_pjcomm, 'C', "receiver_tel_num",   szRecvTelNum);
		
		Mem_Set((byte*)szTmp, 0x00, sizeof(szTmp));
		SQL_ConvUcStr( szTmp, m_szSms_Desc );
		JSON_SetValue( g_pjcomm, 'C', "sms_desc",           szTmp );
		
		JSON_SetValue( g_pjcomm, 'C', "sms_type",   "11");
		
		sndbuf = JSON_toString(g_pjcomm);
		
		//전송데이터 확인
		//g_Save_JsonFile(sndbuf);

		Mem_Set((byte*)szbuf, 0x00, sizeof(szbuf));	
		GET_FILENM(szbuf, SQLITE_DB);

		callBackfunc = TR312400; //통신완료 후에 호출 함수
		HTTP_DownloadData( szUrl, "FR312400_IN",  "FR312400" , sndbuf, szbuf );

		return 1;
	}
	
	//------------------------------------------------------------------------------------------
	long TR312400(void)
	{
		char szSql[250];
		char szTmp[100];
		long ntotcnt = 0, i = 0;

		if(g_Chk_Json(312400) >= 0)
		{
			ON_DRAW();
			return 1;
		}
		else
		{
			g_Sock_Close();
			CloseMessageBox();
			ON_DRAW();
			return -1;
		}
	}
	
	//---------------------------------------------------------------------------------------------
	long Analy_Phone(char*phone, char* num1, char* num2, char* num3 )
	{
	long len;
	
		Str_Chg(phone, STRCHG_DEL_NONDIGIT );
		len = Str_Len(phone);
		
		if( len == 9 )
		{
			Mem_Cpy( (byte*)num1, (byte*)phone,  2);
			Mem_Cpy( (byte*)num2, (byte*)phone+2,  3);
			Mem_Cpy( (byte*)num3, (byte*)phone+5,  4);
		}
		else if( len == 10 )
		{
			if( Mem_Cmp((byte*)phone, (byte*)"01", 2) == 0  )
			{
				Mem_Cpy( (byte*)num1, (byte*)phone,  3);
				Mem_Cpy( (byte*)num2, (byte*)phone+3,  3);
				Mem_Cpy( (byte*)num3, (byte*)phone+6,  4);
			}
			else if(  Mem_Cmp((byte*)phone, (byte*)"02", 2) == 0 )
			{
				Mem_Cpy( (byte*)num1, (byte*)phone,  2);
				Mem_Cpy( (byte*)num2, (byte*)phone+2,  4);
				Mem_Cpy( (byte*)num3, (byte*)phone+6,  4);
			}
			else
			{
				Mem_Cpy( (byte*)num1, (byte*)phone,  3);
				Mem_Cpy( (byte*)num2, (byte*)phone+3,  3);
				Mem_Cpy( (byte*)num3, (byte*)phone+6,  4);
			}
		}
		else if( len == 11 )
		{
				Mem_Cpy( (byte*)num1, (byte*)phone,  3);
				Mem_Cpy( (byte*)num2, (byte*)phone+3,  4);
				Mem_Cpy( (byte*)num3, (byte*)phone+7,  4);
		}
		else if( len == 12 )
		{
				Mem_Cpy( (byte*)num1, (byte*)phone,  4);
				Mem_Cpy( (byte*)num2, (byte*)phone+4,  4);
				Mem_Cpy( (byte*)num3, (byte*)phone+8,  4);
		}
		else
		{
			return -1;
		}
		
		return 1;
	}
}



